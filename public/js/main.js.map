{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","../../node_modules/jquery/dist/jquery.js","../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.min.js","../../node_modules/photoswipe/dist/photoswipe.esm.min.js","../../node_modules/swiper/modules/a11y.min.mjs","../../node_modules/swiper/modules/autoplay.min.mjs","../../node_modules/swiper/modules/controller.min.mjs","../../node_modules/swiper/modules/effect-cards.min.mjs","../../node_modules/swiper/modules/effect-coverflow.min.mjs","../../node_modules/swiper/modules/effect-creative.min.mjs","../../node_modules/swiper/modules/effect-cube.min.mjs","../../node_modules/swiper/modules/effect-fade.min.mjs","../../node_modules/swiper/modules/effect-flip.min.mjs","../../node_modules/swiper/modules/free-mode.min.mjs","../../node_modules/swiper/modules/grid.min.mjs","../../node_modules/swiper/modules/hash-navigation.min.mjs","../../node_modules/swiper/modules/history.min.mjs","../../node_modules/swiper/modules/keyboard.min.mjs","../../node_modules/swiper/modules/manipulation.min.mjs","../../node_modules/swiper/modules/mousewheel.min.mjs","../../node_modules/swiper/modules/navigation.min.mjs","../../node_modules/swiper/modules/pagination.min.mjs","../../node_modules/swiper/modules/parallax.min.mjs","../../node_modules/swiper/modules/scrollbar.min.mjs","../../node_modules/swiper/modules/thumbs.min.mjs","../../node_modules/swiper/modules/virtual.min.mjs","../../node_modules/swiper/modules/zoom.min.mjs","../../node_modules/swiper/shared/classes-to-selector.min.mjs","../../node_modules/swiper/shared/create-element-if-not-defined.min.mjs","../../node_modules/swiper/shared/create-shadow.min.mjs","../../node_modules/swiper/shared/effect-init.min.mjs","../../node_modules/swiper/shared/effect-target.min.mjs","../../node_modules/swiper/shared/effect-virtual-transition-end.min.mjs","../../node_modules/swiper/shared/ssr-window.esm.min.mjs","../../node_modules/swiper/shared/swiper-core.min.mjs","../../node_modules/swiper/shared/utils.min.mjs","../../node_modules/swiper/swiper-bundle.min.mjs","../../resources/components/field/field.js","../../resources/components/form/form.js","../../resources/components/functions/functions.js","../../resources/components/header/header.js","../../resources/components/home/home.js","../../resources/components/lazyload/lazyload.js","../../resources/components/loader/loader.js","../../resources/components/page/page.js","../../resources/components/popup/popup.js","../../resources/components/select/select.js","../../resources/components/svg-use-external/svg-use-external.js","../../resources/components/tel/tel.js","../../resources/components/variables/variables.js","../../resources/js/main.js"],"names":[],"mappingsh9UA;AACA;AACA;AACA;AACA,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,MAAM,CAAC,GAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAAC,OAAO,CAAC,KAAG,CAAC,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,CAAC,CAAC,KAAK,CAAC,KAAK,GAAC,QAAQ,IAAE,OAAO,CAAC,GAAE,GAAE,CAAE,IAAG,GAAC,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAC,QAAQ,IAAE,OAAO,CAAC,GAAE,GAAE,CAAE,IAAG,GAAC,CAAC;AAAA;AAAC,MAAM,CAAC,GAAC,MAAM;EAAC,CAAC,GAAC,SAAS;EAAC,CAAC,GAAC,QAAQ;EAAC,CAAC,GAAC,OAAO;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,EAAC;EAAC,IAAI,CAAC,GAAC,EAAE;EAAC,IAAG,CAAC,YAAY,OAAO,EAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAG,CAAC,YAAY,QAAQ,IAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAI;IAAC,MAAM,CAAC,GAAC,QAAQ,IAAE,OAAO,CAAC,GAAC,CAAC,GAAC,CAAC;IAAC,CAAC,KAAG,CAAC,GAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAC;AAAA;AAAC,SAAS,CAAC,CAAA,EAAE;EAAC,OAAM,EAAE,CAAC,SAAS,CAAC,MAAM,IAAE,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAAA;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,gBAAgB,GAAC,CAAC,CAAC,EAAC,CAAC,IAAE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAC,CAAC,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,IAAI,CAAC,gBAAgB,GAAC,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,kCAAkC,EAAC,CAAC,GAAC,KAAK,GAAC,KAAK,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO;MAAC,CAAC,CAAC,QAAQ,GAAC,OAAO,EAAC,CAAC,CAAC,GAAG,GAAC,EAAE,EAAC,CAAC,CAAC,GAAG,GAAC,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAC,cAAc,CAAC;IAAA;IAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa,EAAC,MAAM,CAAC;EAAA;EAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,OAAO,KAAG,KAAK,KAAG,IAAI,CAAC,OAAO,CAAC,OAAO,IAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,GAAG,EAAC,MAAM,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,GAAC,KAAK,EAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;MAAC,IAAI,CAAC,GAAE,eAAc,CAAE,MAAK,CAAC,IAAE,CAAE,OAAM;MAAC,OAAO,KAAK,CAAC,KAAG,CAAC,KAAG,CAAC,IAAG,YAAW,CAAE,IAAG,CAAE,KAAI,CAAC,EAAC,CAAC;IAAA,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAC,GAAG,CAAC,IAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,OAAO,EAAE,UAAU,IAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,IAAI;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,mBAAmB,GAAC,CAAC,EAAC,IAAI,CAAC,oBAAoB,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAE,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAE,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,IAAI,GAAC,OAAO,GAAC,IAAI,CAAC,IAAI,GAAC,MAAM,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,iBAAiB,CAAA,EAAE;IAAC,IAAI,CAAC,WAAW,IAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAE,UAAU,CAAE,MAAI;MAAC,IAAI,CAAC,WAAW,KAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,KAAK,CAAC,CAAC;IAAA,CAAC,EAAE,GAAG,CAAC;EAAA;EAAC,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,cAAc,CAAC,CAAC,EAAC,IAAG,IAAI,CAAC,WAAW,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,OAAO;MAAC,CAAC,IAAE,CAAC,CAAC,CAAC,aAAa,IAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAAA,CAAC,MAAI;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,gBAAgB,EAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,IAAI,CAAC;MAAC,IAAI,CAAC,WAAW,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAAA;IAAC,IAAI,CAAC,OAAO,IAAE,CAAC,CAAC,IAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,OAAO,EAAC,IAAI;MAAC,MAAM,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,WAAW,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,mBAAmB,IAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,eAAe,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAE,EAAE,CAAC,EAAC,CAAC,IAAE,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,SAAS,CAAC,CAAC,EAAC;IAAC,IAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,OAAO,IAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,EAAC;MAAC,OAAO,EAAC,IAAI;MAAC,MAAM,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC;IAAO,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO;IAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAG,CAAC,CAAC,MAAM,GAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,GAAG,GAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAE,EAAE,EAAC,CAAC,CAAC,GAAG,GAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAE,EAAE,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,CAAC,CAAC,QAAQ,GAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAE,CAAC,CAAC,MAAM,GAAC,MAAI;MAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAAA,CAAC,EAAC,CAAC,CAAC,OAAO,GAAC,MAAI;MAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAAA,CAAC,CAAC;EAAA;EAAC,QAAQ,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,IAAI;EAAA;EAAC,QAAQ,CAAA,EAAE;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC,KAAK;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,KAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,IAAI,CAAC,YAAY,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC,KAAK;MAAC,OAAO,EAAC,CAAC,CAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC,KAAK;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC;EAAA;EAAC,SAAS,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,kBAAkB,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,KAAK,KAAG,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,OAAM,OAAO,KAAG,IAAI,CAAC,IAAI;EAAA;EAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,WAAW,IAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,OAAO,EAAC,IAAI;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,KAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,IAAI,CAAC,mBAAmB,IAAE,CAAC;MAAC,IAAI,CAAC,mBAAmB,GAAC,CAAC,EAAC,IAAI,CAAC,oBAAoB,GAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAC;QAAC,KAAK,EAAC,IAAI,CAAC,KAAK;QAAC,KAAK,EAAC,CAAC;QAAC,MAAM,EAAC,CAAC;QAAC,OAAO,EAAC;MAAI,CAAC,CAAC;IAAA;EAAC;EAAC,UAAU,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,mBAAmB,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,iBAAiB,CAAA,EAAE;IAAC,IAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,OAAO,IAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAC;IAAO,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,kBAAkB,EAAC,IAAI,CAAC,mBAAmB,EAAC,IAAI,CAAC;IAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,IAAE,CAAC,GAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,EAAC,EAAE,CAAC,MAAI,CAAC,CAAC,KAAK,GAAC,CAAC,GAAC,IAAI,EAAC,CAAC,CAAC,OAAO,CAAC,eAAe,GAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,uBAAuB,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,QAAQ,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,IAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,eAAe,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,sBAAsB,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,KAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAC,IAAI,EAAC,IAAI,CAAC,OAAO,CAAC,OAAO,GAAC,IAAI,EAAC,IAAI,CAAC,OAAO,GAAC,KAAK,CAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,KAAK,EAAC;MAAC,IAAI,CAAC,GAAC,CAAC,CAAC,iBAAiB,EAAC,KAAK,CAAC;MAAC,CAAC,CAAC,SAAS,GAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,IAAE,EAAE,EAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,qBAAqB,EAAC,CAAC,EAAC,IAAI,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,yCAAyC,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,GAAC,EAAE,EAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAAA;EAAC;EAAC,MAAM,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,UAAU,IAAE,CAAC,IAAI,CAAC,OAAO,EAAC;IAAO,IAAG,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,EAAC,OAAO,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC;IAAC,IAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAC;IAAO,MAAM,CAAC,IAAC,QAAQ,IAAG,IAAI,CAAC,OAAO;IAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAE,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAE,MAAI,CAAC,CAAE,CAAC,CAAC,OAAO,CAAE,MAAI;MAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAAA,CAAE,CAAC,IAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,IAAI,CAAC,KAAK,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;EAAA;EAAC,QAAQ,CAAA,EAAE;IAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,IAAE,IAAI,CAAC,KAAK,KAAG,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,UAAU,IAAE,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,EAAC,OAAO,CAAC,CAAC;EAAA;EAAC,UAAU,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,mBAAmB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,EAAC,MAAM,CAAC;EAAA;EAAC,MAAM,CAAA,EAAE;IAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,OAAO,IAAE,IAAI,CAAC,OAAO,CAAC,UAAU,IAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,IAAE,IAAI,CAAC,WAAW,CAAC,OAAO,IAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EAAA;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,UAAU,KAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,OAAO,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;EAAA;AAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,IAAI,CAAC,GAAC,CAAC;EAAC,IAAG,CAAC,CAAC,SAAS,EAAC,CAAC,GAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAG,CAAC,CAAC,OAAO,EAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAI;IAAC,MAAM,CAAC,GAAC,SAAS,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAAC,CAAC,CAAC,CAAC,CAAC,KAAG,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC;AAAA;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,IAAI,EAAC,IAAI,CAAC,WAAW,GAAC,IAAI,EAAC,IAAI,CAAC,GAAG,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,CAAC;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC;IAAC,IAAI,CAAC,WAAW,GAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,IAAI,IAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAC;MAAC,UAAU,EAAC,IAAI;MAAC,SAAS,EAAC,IAAI,CAAC;IAAQ,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,CAAC,GAAC,WAAW;MAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAAC,IAAG,CAAC,EAAC,OAAM,UAAU,IAAE,OAAO,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC,GAAC,MAAM,KAAG,CAAC,GAAC,IAAI,CAAC,IAAI,GAAC,KAAK,KAAG,CAAC,GAAC,IAAI,CAAC,GAAG,GAAC,MAAM,CAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,IAAI,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;IAAC,OAAO,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,WAAW,IAAE,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,GAAG,KAAG,CAAC,GAAC,GAAG,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAE,IAAI,CAAC,GAAG;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC;EAAA;AAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,MAAM,CAAC,GAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAI,CAAC;EAAC,MAAK;IAAC,OAAO,EAAC;EAAC,CAAC,GAAC,CAAC;EAAC,IAAG,CAAC,EAAC;IAAC,IAAI,CAAC;IAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC,IAAI,GAAC,CAAC,CAAC,IAAI,CAAC,YAAY,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC;MAAC,IAAG,CAAC,CAAC,iBAAiB,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,CAAC;QAAC,IAAG,CAAC,EAAC,OAAO,CAAC;MAAA;MAAC,OAAM;QAAC,CAAC,EAAC,QAAQ,CAAC,eAAe,CAAC,WAAW;QAAC,CAAC,EAAC,MAAM,CAAC;MAAW,CAAC;IAAA,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;MAAC,OAAM;QAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,MAAM,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,GAAC,CAAC,CAAC,OAAO,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;QAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,GAAC,CAAC,CAAC,QAAQ,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;MAAC,CAAC;IAAA,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAC,CAAC,CAAC,MAAM,EAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC;AAAA;AAAC,MAAM,CAAC,SAAS,cAAc,MAAK;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,KAAK,CAAC;EAAA;EAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAC,GAAG,EAAC;IAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;MAAC,EAAE,EAAC,CAAC;MAAC,QAAQ,EAAC;IAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAE,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,CAAC,QAAQ,GAAC,CAAC,CAAC,QAAS,CAAC,EAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,IAAE,CAAC,CAAC,EAAE,KAAG,CAAE,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,IAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAC,CAAC,EAAC,GAAG,CAAC,EAAC;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,IAAE,CAAC,KAAG,CAAE,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,IAAI,EAAC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,CAAC;EAAA;AAAC,CAAC;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO,EAAE,UAAU;IAAC,CAAC,IAAE,QAAQ,IAAG,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,MAAM,GAAC,CAAC,IAAE,SAAS,IAAG,CAAC,KAAG,CAAC,CAAC,KAAK,KAAG,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,KAAG,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAC;MAAC,UAAU,EAAC,CAAC;MAAC,QAAQ,EAAC;IAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAC,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC;EAAA;EAAC,qBAAqB,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO,EAAE,UAAU;IAAC,IAAI,CAAC,GAAC,CAAC,CAAC;IAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,SAAS,IAAG,CAAC,KAAG,CAAC,CAAC,KAAK,KAAG,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAC,CAAC;IAAC,CAAC,YAAY,OAAO,KAAG,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAC;MAAC,QAAQ,EAAC,CAAC,IAAE,CAAC,CAAC;MAAC,KAAK,EAAC;IAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAC,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,OAAO,IAAI,CAAC,OAAO,EAAE,QAAQ,IAAE,IAAI,CAAC,OAAO,EAAE,aAAa,GAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAC,CAAC,CAAC,IAAE,EAAE,GAAC,CAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC;QAAC,OAAO,EAAC;MAAC,CAAC;MAAC,CAAC,GAAC,GAAG,KAAG,CAAC,CAAC,OAAO,GAAC,CAAC,GAAC,CAAC,CAAC,aAAaaAAa,CAAC,KAAK,CAAC;MAAC,CAAC,KAAG,CAAC,CAAC,IAAI,GAAC,CAAC,CAAC,UAAU,IAAE,CAAC,CAAC,GAAG,EAAC,CAAC,CAAC,GAAG,GAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,IAAE,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,IAAE,CAAC,CAAC,OAAO,CAAC,OAAO,MAAI,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,CAAC;IAAA;IAAC,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC;EAAA;AAAC,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,CAAC,IAAE,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,iBAAiB,GAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;EAAA;EAAC,IAAI,CAAA,EAAE;IAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAC,IAAI,CAAC,iBAAiB,EAAC,CAAC,CAAC,CAAC;IAAA,CAAE,CAAC;EAAA;EAAC,iBAAiB,CAAC,CAAC,EAAC;IAAC,IAAG,UAAS,CAAC,EAAC;MAAC,OAAM,QAAQ,IAAG,CAAC,IAAE,CAAC,KAAG,CAAC,CAAC,MAAM,IAAE,CAAC,CAAC,OAAO,IAAE,CAAC,CAAC,OAAO,IAAE,CAAC,CAAC,MAAM,IAAE,CAAC,CAAC,QAAQ;IAAA,CAAC,CAAC,CAAC,CAAC,IAAE,MAAM,CAAC,IAAI,EAAC;IAAO,IAAI,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC,CAAC,OAAO;MAAC,CAAC,EAAC,CAAC,CAAC;IAAO,CAAC;IAAC,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC;IAAC,IAAI,CAAC,GAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IAAC,CAAC,GAAC,IAAI,CAAC,YAAY,CAAC,cAAc,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC;IAAC,MAAM,CAAC,GAAC;MAAC,OAAO,EAAC,CAAC,CAAC;IAAa,CAAC;IAAC,CAAC,IAAE,CAAC,KAAG,CAAC,CAAC,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;EAAC,eAAe,CAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAC,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,MAAM;MAAC,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAC,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAE,CAAC,IAAE,CAAC,KAAG,CAAC,IAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAE,CAAC;IAAC,OAAM,CAAC,CAAC,KAAG,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAE,IAAI,CAAC,OAAO,CAAC,aAAa,GAAC,CAAC,CAAC,GAAC,CAAC;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAM,CAAC,MAAM,CAAC,IAAI,KAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,GAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAK;MAAC,OAAO,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,CAAC,KAAG,CAAC,CAAC,UAAU,GAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,EAAE;MAAC,CAAC,GAAC,OAAO,CAAC,CAAC,UAAU;IAAC,IAAG,UAAU,IAAE,QAAO,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,IAAE,CAAC,CAAC,SAAS,IAAE,CAAC,CAAC,SAAS,CAAC,IAAI,EAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAI;MAAC,IAAG,QAAQ,KAAG,CAAC,EAAC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC;MAAC,IAAG,UAAU,KAAG,CAAC,EAAC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;MAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IAAA;IAAC,IAAI,CAAC;IAAC,UAAU,IAAE,OAAO,CAAC,CAAC,WAAW,IAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,KAAG,CAAC,CAAC,iBAAiB,IAAE,CAAC,IAAE,CAAC,KAAG,IAAI,CAAC,CAAC,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;MAAC,IAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAC;QAAC,KAAK,EAAC,CAAC;QAAC,QAAQ,EAAC;MAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAA,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,EAAE,IAAI,CAAC,CAAC;IAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC,IAAE;MAAC,IAAG,IAAI,CAAC,UAAU,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;QAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;MAAA;IAAC,CAAE,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,CAAC,KAAG,IAAI,CAAC,CAAC,IAAE,IAAI,CAAC,UAAU,EAAC;IAAO,IAAG,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,MAAM,CAAC,IAAI,EAAC;IAAO,MAAM,CAAC,GAAC,QAAQ,IAAE,OAAO,CAAC,GAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,MAAM,CAAC,IAAI,GAAC,CAAC,EAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAE,CAAC,IAAE;QAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;MAAA,CAAE,CAAC;IAAA,CAAE,CAAC,EAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAE,CAAC,IAAE;QAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,QAAQ,CAAC;MAAA,CAAE,CAAC;IAAA,CAAE,CAAC,EAAC,IAAI,CAAC,CAAC,KAAG,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,MAAI;MAAC,IAAI,CAAC,IAAI,GAAC,KAAK,CAAC,EAAC,OAAO,MAAM,CAAC,IAAI;IAAA,CAAE,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,mBAAmB,CAAC,OAAO,EAAC,IAAI,CAAC,iBAAiB,EAAC,CAAC,CAAC,CAAC;IAAA,CAAE,CAAC;EAAA;AAAC;AAAC,OAAA,CAAA,OAAA,GAAA,CAAA;;;;;;;;;ACJ1oa;AACA;AACA;AACA;AACA,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,MAAM,CAAC,GAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAAC,OAAO,CAAC,KAAG,CAAC,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;EAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC,KAAG,CAAC,CAAC,EAAE,KAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,CAAC,EAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC;EAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;EAAC,MAAM,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;IAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;EAAC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;EAAC,OAAO,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,IAAI,CAAC,GAAE,eAAc,CAAE,MAAK,CAAC,IAAE,CAAE,OAAM;EAAC,OAAO,KAAK,CAAC,KAAG,CAAC,KAAG,CAAC,IAAG,YAAW,CAAE,IAAG,CAAE,KAAI,CAAC,EAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,CAAC,CAAC,KAAK,CAAC,SAAS,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,CAAC,CAAC,KAAK,CAAC,UAAU,GAAC,CAAC,GAAE,GAAE,CAAE,IAAG,CAAE,MAAK,CAAC,IAAE,0BAA2B,EAAC,GAAC,MAAM;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,CAAC,CAAC,KAAK,CAAC,KAAK,GAAC,QAAQ,IAAE,OAAO,CAAC,GAAE,GAAE,CAAE,IAAG,GAAC,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAC,QAAQ,IAAE,OAAO,CAAC,GAAE,GAAE,CAAE,IAAG,GAAC,CAAC;AAAA;AAAC,MAAM,CAAC,GAAC,MAAM;EAAC,CAAC,GAAC,SAAS;EAAC,CAAC,GAAC,QAAQ;EAAC,CAAC,GAAC,OAAO;AAAC,SAAS,CAAC,CAAA,EAAE;EAAC,OAAM,EAAE,CAAC,SAAS,CAAC,MAAM,IAAE,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAAA;AAAC,IAAI,CAAC,GAAC,CAAC,CAAC;AAAC,IAAG;EAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAC,IAAI,EAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,EAAC,SAAS,EAAC;IAAC,GAAG,EAAC,CAAA,KAAI;MAAC,CAAC,GAAC,CAAC,CAAC;IAAA;EAAC,CAAC,CAAC,CAAC;AAAA,CAAC,QAAM,CAAC,EAAC,CAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,CAAC,GAAC,EAAE;EAAA;EAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;EAAC,SAAS,CAAA,EAAE;IAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAC,CAAC,CAAC,IAAI,EAAC,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,EAAE;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,CAAC,CAAC,EAAC;IAAO,MAAM,CAAC,GAAC,CAAC,GAAC,qBAAqB,GAAC,kBAAkB;IAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,IAAG,CAAC,EAAC;QAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,IAAE,CAAC,CAAC,IAAI,KAAG,CAAC,IAAE,CAAC,CAAC,QAAQ,KAAG,CAAC,IAAE,CAAC,CAAC,MAAM,KAAG,CAAE,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;UAAC,MAAM,EAAC,CAAC;UAAC,IAAI,EAAC,CAAC;UAAC,QAAQ,EAAC,CAAC;UAAC,OAAO,EAAC;QAAC,CAAC,CAAC,CAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,IAAE;UAAC,OAAO,EAAC,CAAC,IAAE,CAAC;QAAC,CAAC;QAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;MAAA;IAAC,CAAE,CAAC;EAAA;AAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;EAAC,IAAG,CAAC,CAAC,iBAAiB,EAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAG,CAAC,EAAC,OAAO,CAAC;EAAA;EAAC,OAAM;IAAC,CAAC,EAAC,QAAQ,CAAC,eAAe,CAAC,WAAW;IAAC,CAAC,EAAC,MAAM,CAAC;EAAW,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,IAAI,CAAC,GAAC,CAAC;EAAC,IAAG,CAAC,CAAC,SAAS,EAAC,CAAC,GAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAG,CAAC,CAAC,OAAO,EAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAI;IAAC,MAAM,CAAC,GAAC,SAAS,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAAC,CAAC,CAAC,CAAC,CAAC,KAAG,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC;AAAA;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,OAAM;IAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,MAAM,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,GAAC,CAAC,CAAC,OAAO,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,GAAC,CAAC,CAAC,QAAQ,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;EAAC,CAAC;AAAA;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,aAAa,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,aAAa,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC;IAAK,CAAC,CAAC,IAAE,IAAI,CAAC,KAAK,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,KAAK;MAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAG,CAAC,GAAC,OAAO,GAAC,QAAQ,CAAC,GAAC,IAAI,CAAC,aAAa;MAAC,CAAC,GAAC,CAAC,CAAC,GAAG,KAAG,CAAC,GAAC,MAAM,GAAC,KAAK,EAAC,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC,YAAY,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;EAAA;EAAC,KAAK,CAAA,EAAE;IAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC;EAAA;EAAC,UAAU,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,IAAI,EAAC,IAAI,CAAC,WAAW,GAAC,IAAI,EAAC,IAAI,CAAC,GAAG,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,CAAC;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC;IAAC,IAAI,CAAC,WAAW,GAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,IAAI,IAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAC;MAAC,UAAU,EAAC,IAAI;MAAC,SAAS,EAAC,IAAI,CAAC;IAAQ,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,CAAC,GAAC,WAAW;MAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAAC,IAAG,CAAC,EAAC,OAAM,UAAU,IAAE,OAAO,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC,GAAC,MAAM,KAAG,CAAC,GAAC,IAAI,CAAC,IAAI,GAAC,KAAK,KAAG,CAAC,GAAC,IAAI,CAAC,GAAG,GAAC,MAAM,CAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,IAAI,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;IAAC,OAAO,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,WAAW,IAAE,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,GAAG,KAAG,CAAC,GAAC,GAAG,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAE,IAAI,CAAC,GAAG;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,KAAG,CAAC,CAAC,SAAS,EAAC,IAAI,CAAC,iBAAiB,GAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,YAAY,GAAC,IAAI,CAAC,QAAQ,IAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,KAAK,EAAC,IAAI;MAAC,IAAI,EAAC,IAAI,CAAC,IAAI;MAAC,KAAK,EAAC;IAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,iBAAiB,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,aAAa,GAAC,IAAI,EAAC,IAAI,CAAC,aAAa,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAC,IAAI,CAAC,MAAM,GAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAC,IAAI,CAAC,aAAa,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,kBAAkB,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,CAAC,IAAE,CAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,IAAE,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC,UAAU,CAAC,CAAC;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,aAAa,GAAC,CAAC,EAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,GAAC,KAAK,EAAC,IAAI,CAAC,IAAI,KAAG,IAAI,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EAAA;EAAC,IAAI,CAAA,EAAE;IAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,WAAW,CAAA,EAAE;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,CAAC,IAAI,CAAC,aAAa,IAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAE,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAG,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAC,KAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,aAAa,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,QAAQ,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,UAAU,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAC,IAAI,CAAC,aAAa,KAAG,IAAI,CAAC,UAAU,CAAC,OAAO,IAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,GAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,MAAM,CAAA,EAAE;IAAC,IAAI,CAAC,aAAa,KAAG,IAAI,CAAC,UAAU,CAAC,OAAO,IAAE,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,GAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;EAAA;EAAC,iBAAiB,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,iBAAiB,IAAE,IAAI,CAAC,UAAU,CAAC,OAAO;IAAC,IAAG,CAAC,CAAC,EAAC;IAAO,MAAM,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,GAAC,CAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;MAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,CAAC,KAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAM,CAAC,CAAC,KAAG,IAAI,CAAC,kBAAkB,IAAE,CAAC,KAAG,IAAI,CAAC,mBAAmB,MAAI,IAAI,CAAC,kBAAkB,GAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,GAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;EAAC,qBAAqB,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAC;IAAO,CAAC,CAAC,QAAQ,CAAC,cAAc,EAAC;MAAC,aAAa,EAAC,CAAC;MAAC,WAAW,EAAC,CAAC;MAAC,kBAAkB,EAAC;IAAC,CAAC,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,aAAa;IAAC,CAAC,KAAG,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IAAC,MAAM,CAAC,GAAC,CAAA,KAAI;MAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAAA,CAAC;IAAC,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC;MAAC,KAAK,EAAC,CAAC,CAAC;MAAC,IAAI,EAAC,QAAQ;MAAC,MAAM,EAAC,IAAI,CAAC,SAAS;MAAC,SAAS,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;MAAC,UAAU,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC;MAAC,MAAM,EAAC,CAAC,CAAC,OAAO,CAAC;IAAM,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;EAAA;EAAC,UAAU,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,KAAG,IAAI,CAAC,UAAU,CAAC,OAAO,GAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC;EAAA;EAAC,YAAY,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,aAAa,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;EAAA;EAAC,wBAAwB,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,CAAC,KAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,aAAa,GAAC,CAAC;IAAC,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,IAAE,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,KAAK,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;EAAA;EAAC,UAAU,CAAA,EAAE;IAAC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAE,IAAI,CAAC,aAAa,GAAC,IAAI,CAAC,UAAU,CAAC,GAAG;EAAA;EAAC,UAAU,CAAA,EAAE;IAAC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;EAAA;EAAC,mBAAmB,CAAA,EAAE;IAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,aAAa,CAAC,EAAC,IAAI,KAAG,IAAI,CAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,mBAAmB,CAAA,EAAE;IAAC,IAAI,CAAC,aAAa,GAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,CAAC,IAAE,IAAI,CAAC,iBAAiB,IAAE,IAAI,CAAC,UAAU,CAAC,OAAO,EAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,aAAa,CAAA,EAAE;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC,YAAY,EAAC,IAAI,CAAC,IAAI,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,WAAW,CAAC,EAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,mBAAmB,CAAA,EAAE;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,aAAa,IAAE,IAAI,CAAC,iBAAiB,IAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,CAAC,KAAG,IAAI,CAAC,iBAAiB,KAAG,IAAI,CAAC,iBAAiB,GAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,IAAI,EAAC,IAAI,CAAC,QAAQ,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC;EAAA;EAAC,KAAK,CAAA,EAAE;IAAC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;EAAA;EAAC,MAAM,CAAA,EAAE;IAAC,MAAK;QAAC,EAAE,EAAC,CAAC;QAAC,MAAM,EAAC,CAAC;QAAC,QAAQ,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,IAAG,GAAG,KAAG,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,IAAE,CAAC,IAAE,CAAC,CAAC,aAAa,IAAE,CAAC,CAAC,UAAU,CAAC,GAAG,IAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;MAAC,IAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAC;QAAC,IAAI,EAAC;MAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC;QAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAC,CAAC,EAAC,EAAE,CAAC;QAAC,MAAM,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;MAAA;IAAC,CAAC,MAAI;MAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC,CAAC,KAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IAAA;EAAC;EAAC,GAAG,CAAA,EAAE;IAAC,MAAK;QAAC,QAAQ,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,UAAU,EAAC,CAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,IAAI,CAAC,GAAC,CAAC;IAAC,IAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;MAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,IAAE,CAAC,GAAC,CAAC,IAAE,CAAC,CAAC,CAAC,GAAC,EAAE,IAAE,CAAC,GAAC,CAAC,EAAE,IAAE,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE,IAAE,CAAC,GAAC,CAAC,IAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,IAAE,CAAC,GAAC,EAAE,MAAI,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;IAAA;IAAC,CAAC,IAAE,CAAC,CAAC,aAAa,GAAC,CAAC,CAAC,UAAU,CAAC,GAAG,IAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,MAAK;QAAC,QAAQ,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,IAAG,CAAC,CAAC,EAAC;IAAO,MAAK;QAAC,GAAG,EAAC,CAAC;QAAC,MAAM,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAC,CAAC,IAAE,GAAG,KAAG,CAAC;MAAC,CAAC,GAAC,CAAC,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC;QAAC,OAAO,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,CAAC;MAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC;IAAC,IAAG,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAAC,IAAG,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,EAAE,IAAE,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,EAAE,EAAC,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAAA;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAG,CAAC,KAAG,CAAC,EAAC;IAAO,MAAM,CAAC,GAAC,CAAC,KAAG,CAAC,GAAC,CAAC,GAAC,GAAG;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,SAAS;MAAC,CAAC,GAAC,CAAC,GAAC,CAAC;IAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;MAAC,IAAI,EAAC,YAAY,GAAC,CAAC;MAAC,KAAK,EAAC,CAAC,CAAC;MAAC,KAAK,EAAC,CAAC;MAAC,GAAG,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC,CAAC,CAAC,CAAC;MAAC,YAAY,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC,IAAE;QAAC,IAAG,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,SAAS,GAAC,CAAC,EAAC;UAAC,MAAM,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC;UAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QAAA;QAAC,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;MAAA;IAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,MAAK;QAAC,EAAE,EAAC,CAAC;QAAC,QAAQ,EAAC,CAAC;QAAC,MAAM,EAAC,CAAC;QAAC,YAAY,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,SAAS,EAAC,CAAC;QAAC,UAAU,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI;MAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC;IAAC,IAAG,CAAC,CAAC,IAAE,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC;IAAC,IAAG,GAAG,KAAG,CAAC,IAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAE,CAAC,CAAC,EAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,MAAK;QAAC,MAAM,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC;IAAC,IAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,IAAE,GAAG,KAAG,CAAC,IAAE,GAAG,KAAG,CAAC,IAAE,CAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,aAAa,CAAC,CAAC;QAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC;QAAC,CAAC,GAAC,CAAC,GAAC,CAAC;QAAC,CAAC,GAAC,CAAC,CAAC;MAAC,IAAG,CAAC,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAE,CAAC,EAAC;QAAC,IAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;MAAA,CAAC,MAAK,IAAG,CAAC,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAE,CAAC,EAAC;QAAC,IAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;MAAA,CAAC,MAAK,IAAG,CAAC,KAAG,CAAC,EAAC;QAAC,IAAG,CAAC,GAAC,CAAC,EAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAAC,IAAG,CAAC,GAAC,CAAC,EAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;MAAA,CAAC,MAAK,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAA,CAAC,MAAI,GAAG,KAAG,CAAC,KAAG,CAAC,CAAC,SAAS,CAAC,CAAC,IAAE,CAAC,CAAC,GAAG,CAAC,CAAC,KAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,OAAM,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,OAAM,CAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,IAAE,CAAC,CAAC,KAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAK;MAAC,SAAS,EAAC;IAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,IAAG,CAAC,CAAC,EAAC;IAAO,MAAK;MAAC,GAAG,EAAC,CAAC;MAAC,MAAM,EAAC;IAAC,CAAC,GAAC,CAAC;IAAC,IAAG,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,CAAC,KAAG,CAAC,IAAE,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAAC,CAAC,CAAC,CAAC,CAAC,IAAE,CAAC,IAAE,CAAC,IAAE,GAAG,CAAC;IAAA,CAAC,MAAK,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC;EAAA;AAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,IAAE,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,IAAE,CAAC,EAAC,CAAC;AAAA;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC;EAAA;EAAC,KAAK,CAAA,EAAE;IAAC,MAAK;MAAC,SAAS,EAAC;IAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,IAAI;IAAC,CAAC,KAAG,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,aAAa,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC;EAAA;EAAC,MAAM,CAAA,EAAE;IAAC,MAAK;QAAC,EAAE,EAAC,CAAC;QAAC,OAAO,EAAC,CAAC;QAAC,EAAE,EAAC,CAAC;QAAC,OAAO,EAAC,CAAC;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,CAAC;IAAC,IAAG,CAAC,CAAC,EAAC;IAAO,MAAM,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,GAAG;MAAC,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,GAAG;IAAC,IAAG,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAC;IAAO,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC;IAAC,IAAG,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,EAAE,KAAG,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC;MAAC,IAAG,CAAC,CAAC,OAAO,CAAC,YAAY,IAAE,CAAC,IAAI,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,IAAE,CAAC,CAAC,UAAU,CAAC,OAAO,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC;QAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,EAAC;UAAC,SAAS,EAAC;QAAC,CAAC,CAAC,CAAC,gBAAgB,IAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;MAAA,CAAC,MAAK,CAAC,GAAC,CAAC,GAAC,GAAG,IAAE,CAAC,GAAC,CAAC,CAAC;IAAC,OAAK,CAAC,GAAC,CAAC,KAAG,CAAC,GAAC,CAAC,GAAC,GAAG,IAAE,CAAC,GAAC,CAAC,CAAC,CAAC;IAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;EAAA;EAAC,GAAG,CAAA,EAAE;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,CAAC;IAAC,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,aAAa,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,KAAG,CAAC,IAAI,CAAC,CAAC,IAAE,CAAC,CAAC,OAAO,CAAC,YAAY,GAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAC,IAAI,CAAC,cAAc,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAE,CAAC;EAAA;EAAC,cAAc,CAAC,CAAC,EAAC;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,CAAC;IAAC,IAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAC;IAAO,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAG,CAAC,GAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,aAAa;IAAC,IAAI,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC;IAAC,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,GAAG,GAAC,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,GAAG,IAAE,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,SAAS;MAAC,CAAC,GAAC,CAAC,CAAC,SAAS,GAAC,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC;QAAC,CAAC,EAAC,CAAC;QAAC,CAAC,EAAC;MAAC,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC;IAAC,IAAI,CAAC,GAAC,CAAC,CAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,GAAC;MAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAC,CAAC,CAAC;MAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAC,CAAC;IAAC,CAAC,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAC,CAAC,CAAC,CAAC,CAAC;MAAC,CAAC,EAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAC,CAAC,CAAC,CAAC;IAAC,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAG,CAAC,CAAC,IAAE,CAAC,CAAC,IAAE,CAAC,CAAC,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,CAAC;IAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC;MAAC,KAAK,EAAC,CAAC,CAAC;MAAC,KAAK,EAAC,CAAC;MAAC,GAAG,EAAC,GAAG;MAAC,QAAQ,EAAC,CAAC;MAAC,YAAY,EAAC,CAAC;MAAC,gBAAgB,EAAC,EAAE;MAAC,QAAQ,EAAC,CAAC,IAAE;QAAC,IAAG,CAAC,IAAE,GAAG,EAAC,CAAC,IAAE,CAAC,EAAC;UAAC,IAAG,CAAC,KAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,IAAE,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,EAAC,CAAC,EAAC;YAAC,MAAM,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC;YAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;UAAA;UAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;QAAA;QAAC,CAAC,IAAE,CAAC,CAAC,SAAS,GAAC,CAAC,IAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;MAAA,CAAC;MAAC,UAAU,EAAC,CAAA,KAAI;QAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;MAAA;IAAC,CAAC,CAAC;EAAA;AAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC;EAAC,OAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC;AAAA;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC;EAAA;EAAC,KAAK,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,MAAM,CAAC,SAAS;MAAC,CAAC,GAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC;IAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,YAAY,EAAC,CAAC,EAAC,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,SAAS,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,KAAK,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,WAAW,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ;MAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,CAAC,GAAC,CAAC,GAAC,QAAQ;MAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAAC,IAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAC;MAAC,KAAK,EAAC,CAAC;MAAC,aAAa,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC,IAAG,UAAU,IAAE,OAAO,CAAC,EAAC,QAAO,CAAC;MAAE,KAAI,OAAO;MAAC,KAAI,MAAM;QAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC;MAAM,KAAI,MAAM;QAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;QAAC;MAAM,KAAI,eAAe;QAAC,CAAC,EAAE,UAAU,CAAC,CAAC,IAAE,CAAC,CAAC,UAAU,CAAC,SAAS,KAAG,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,uBAAuB,IAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAAC;MAAM,KAAI,iBAAiB;QAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC;IAAA,CAAC,MAAK,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,EAAC,IAAI,CAAC,EAAE,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,EAAE,EAAC,IAAI,CAAC,CAAC,GAAC,cAAc,IAAG,MAAM,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,MAAM,CAAC,YAAY,EAAC,IAAI,CAAC,aAAa,GAAC,IAAI,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,IAAE,SAAS,CAAC,cAAc,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,IAAI,EAAC,IAAI,CAAC,CAAC,GAAC,IAAI,EAAC,IAAI,CAAC,aAAa,KAAG,CAAC,CAAC,OAAO,CAAC,cAAc,GAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,YAAY,EAAE,MAAI;MAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAC,OAAO,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAC,MAAM,EAAC,IAAI,EAAC,QAAQ,CAAC,GAAC,IAAI,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAC,OAAO,EAAC,KAAK,EAAC,QAAQ,CAAC,EAAC,CAAC,CAAC,UAAU,KAAG,CAAC,CAAC,UAAU,CAAC,WAAW,GAAC,MAAI,CAAC,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,UAAU,GAAC,MAAI,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAC,MAAM,EAAC,IAAI,CAAC;IAAA,CAAE,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI;MAAC;QAAC,MAAM,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,EAAE;IAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAC,CAAC,GAAC,MAAM,EAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAAA;EAAC,aAAa,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,WAAW,KAAG,CAAC,CAAC,IAAI,IAAE,OAAO,KAAG,CAAC,CAAC,WAAW;IAAC,IAAG,CAAC,IAAE,CAAC,CAAC,MAAM,GAAC,CAAC,EAAC;IAAO,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,CAAC,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,aAAa,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,KAAG,CAAC,KAAG,CAAC,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,MAAM,CAAC,EAAC,CAAC,KAAG,IAAI,CAAC,CAAC,KAAG,IAAI,CAAC,QAAQ,GAAC,IAAI,EAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,IAAE,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,cAAc,CAAC,CAAC;EAAA;EAAC,aAAa,CAAC,CAAC,EAAC;IAAC,CAAC,CAAC,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,MAAM,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,aAAa,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,KAAG,CAAC,KAAG,IAAI,CAAC,CAAC,IAAE,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,IAAI,CAAC,SAAS,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,IAAE,CAAC,IAAI,CAAC,UAAU,KAAG,IAAI,CAAC,SAAS,KAAG,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,IAAI,CAAC,UAAU,KAAG,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAC;MAAC,aAAa,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,KAAG,CAAC,KAAG,IAAI,CAAC,CAAC,KAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,YAAY,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAAC,SAAS,KAAG,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,KAAG,IAAI,CAAC,CAAC,KAAG,IAAI,CAAC,QAAQ,GAAC,IAAI,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,CAAC,IAAI,CAAC,UAAU,IAAE,IAAI,CAAC,SAAS,MAAI,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC,MAAM,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC,MAAM,CAAC,IAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC,MAAM,CAAC,IAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,CAAC;IAAC,CAAC,GAAC,EAAE,IAAE,CAAC,CAAC,KAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,MAAK;MAAC,UAAU,EAAC;IAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,IAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,OAAO,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IAAC,IAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAC,CAAC,EAAC;IAAO,IAAG,SAAS,KAAG,CAAC,CAAC,IAAI,IAAE,OAAO,KAAG,CAAC,CAAC,WAAW,EAAC,OAAO,KAAK,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,GAAC,GAAG,GAAC,CAAC;IAAC,IAAI,CAAC,CAAC,IAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,GAAC,EAAE,IAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,KAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,UAAU,CAAE,MAAI;MAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CAAC,EAAE,CAAC,CAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,IAAI,CAAC,CAAC,KAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,IAAI,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,IAAI,CAAC,GAAG,KAAG,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,CAAC,CAAC,cAAc,CAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC;QAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAE,CAAC,IAAE,CAAC,CAAC,EAAE,KAAG,CAAC,CAAC,SAAU,CAAC;MAAC,IAAI,KAAG,CAAC,IAAE,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,GAAC,MAAM,KAAG,CAAC,IAAE,CAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC;QAAC,CAAC,EAAC,CAAC;QAAC,CAAC,EAAC;MAAC,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA,CAAC,MAAI;MAAC,MAAM,CAAC,GAAC,CAAC;MAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,OAAO,IAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAC,CAAC,KAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,OAAO,CAAC,MAAM,GAAC,CAAC,KAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,KAAG,CAAC,GAAC,IAAI,CAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,CAAC,EAAE,CAAC;IAAA;EAAC;EAAC,EAAE,CAAA,EAAE;IAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,EAAE,CAAC;EAAA;EAAC,CAAC,CAAA,EAAE;IAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,GAAG,CAAC,KAAI;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;MAAC,IAAG,CAAC,KAAG,CAAC,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,GAAG,GAAC,GAAG;QAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAE,EAAE,KAAG,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC;MAAA;IAAC;EAAC;EAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,WAAW,IAAG,CAAC,GAAC,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,SAAS,GAAC,KAAK,CAAC,KAAG,CAAC,CAAC,UAAU,KAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,UAAU,CAAC,EAAC,CAAC;EAAA;EAAC,CAAC,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAG,CAAC,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,EAAE;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI;MAAC,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,GAAC,CAAC,CAAC,YAAY,CAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;MAAC,CAAC,GAAC,CAAC,KAAG,IAAI,CAAC,UAAU;IAAC,CAAC,KAAG,IAAI,CAAC,UAAU,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAE,CAAC,CAAC,EAAC,CAAC,KAAG;MAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,GAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,UAAU,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,KAAK,IAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAAA,CAAE,CAAC;EAAA;EAAC,aAAa,CAAA,EAAE;IAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC;EAAA;EAAC,aAAa,CAAA,EAAE;IAAC,IAAI,CAAC,WAAW,GAAC,EAAE;IAAC,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,CAAC,EAAC,CAAC,EAAE,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,YAAY,EAAC,KAAK,EAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;MAAC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAC,OAAO,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,sBAAsB,EAAC,OAAO,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,aAAa,EAAC,MAAM,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAC,CAAC,KAAG,CAAC,GAAC,OAAO,GAAC,MAAM,EAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAAC,EAAE,EAAC;MAAC,CAAC,CAAC;IAAA;EAAC;EAAC,WAAW,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,CAAC;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAI,CAAC,GAAC,CAAC,CAAC,cAAc,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IAAC,IAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC;MAAC,CAAC,GAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC;MAAC,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC;IAAA,CAAC,MAAK,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,IAAE,CAAC,KAAG,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,cAAc;IAAC,CAAC,CAAC,cAAc,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAAC,IAAG,CAAC,EAAC;MAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC;QAAC,YAAY,EAAC,CAAC,CAAC;QAAC,KAAK,EAAC,IAAI,CAAC,CAAC;QAAC,GAAG,EAAC,CAAC;QAAC,QAAQ,EAAC,CAAC,IAAE,CAAC;QAAC,gBAAgB,EAAC,EAAE;QAAC,YAAY,EAAC,CAAC;QAAC,QAAQ,EAAC,CAAC,IAAE;UAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAAA,CAAC;QAAC,UAAU,EAAC,CAAA,KAAI;UAAC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QAAA;MAAC,CAAC,CAAC;MAAC,IAAI,CAAC,GAAC,CAAC,CAAC,cAAc,GAAC,CAAC,CAAC,SAAS;MAAC,IAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC;QAAC,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC;MAAA;MAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAAA,CAAC,MAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAAC,OAAO,OAAO,CAAC,CAAC,CAAC;EAAA;EAAC,aAAa,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,EAAE;EAAA;EAAC,SAAS,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,CAAC,KAAG,IAAI,CAAC,aAAa,CAAC,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI;MAAC,CAAC,GAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE;IAAC,IAAG,CAAC,CAAC,EAAC;IAAO,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,SAAS,GAAC,CAAC,CAAC,cAAc;IAAC,IAAI,CAAC;MAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAAC,CAAC,IAAE,CAAC,KAAG,IAAI,CAAC,EAAE,IAAE,CAAC,IAAE,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC;IAAC,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAC,CAAC,KAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,GAAC,CAAC,IAAE,IAAI,CAAC,UAAU,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,CAAC,SAAS,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,KAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,UAAU,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,CAAC,SAAS,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAC,EAAE,IAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAG,IAAI,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAE,CAAC,CAAC,EAAC,CAAC,KAAG;MAAC,CAAC,CAAC,KAAK,IAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,KAAG,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,CAAC,CAAC,SAAS,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,KAAK,EAAC,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,SAAS,IAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,EAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;EAAA;EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAE,CAAC,EAAC;MAAC,IAAI,CAAC,GAAC,CAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,IAAE,IAAI,CAAC,UAAU;MAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,SAAS;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC;MAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,IAAE,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,MAAI,CAAC,GAAC,IAAI,CAAC,CAAC,GAAC,GAAG,GAAC,CAAC,CAAC;IAAA;IAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAC;MAAC,CAAC,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC,IAAE,CAAC;IAAC,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC,GAAC;IAAC,MAAM,EAAC,EAAE;IAAC,CAAC,EAAC,EAAE;IAAC,SAAS,EAAC,EAAE;IAAC,OAAO,EAAC,EAAE;IAAC,UAAU,EAAC,EAAE;IAAC,SAAS,EAAC,EAAE;IAAC,GAAG,EAAC;EAAC,CAAC;EAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,YAAY,EAAE,MAAI;MAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAC,SAAS,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAC,SAAS,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAAA,CAAE,CAAC;IAAC,MAAM,CAAC,GAAC,QAAQ,CAAC,aAAa;IAAC,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,MAAI;MAAC,CAAC,CAAC,OAAO,CAAC,WAAW,IAAE,CAAC,IAAE,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAAA,CAAE,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,CAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAG,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAC;MAAC,aAAa,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC;IAAO,IAAG,UAAS,CAAC,EAAC;MAAC,OAAM,QAAQ,IAAG,CAAC,IAAE,CAAC,KAAG,CAAC,CAAC,MAAM,IAAE,CAAC,CAAC,OAAO,IAAE,CAAC,CAAC,OAAO,IAAE,CAAC,CAAC,MAAM,IAAE,CAAC,CAAC,QAAQ;IAAA,CAAC,CAAC,CAAC,CAAC,EAAC;IAAO,IAAI,CAAC;MAAC,CAAC;MAAC,CAAC,GAAC,CAAC,CAAC;IAAC,MAAM,CAAC,IAAC,KAAK,IAAG,CAAC;IAAC,QAAO,CAAC,GAAC,CAAC,CAAC,GAAG,GAAC,CAAC,CAAC,OAAO;MAAE,KAAK,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC;QAAC,CAAC,CAAC,OAAO,CAAC,MAAM,KAAG,CAAC,GAAC,OAAO,CAAC;QAAC;MAAM,KAAK,CAAC,CAAC,GAAG,EAAC,CAAC,CAAC;QAAC,CAAC,GAAC,YAAY;QAAC;MAAM,KAAK,CAAC,CAAC,WAAW,EAAC,CAAC,CAAC;QAAC,CAAC,GAAC,GAAG;QAAC;MAAM,KAAK,CAAC,CAAC,SAAS,EAAC,CAAC,CAAC;QAAC,CAAC,GAAC,GAAG;QAAC;MAAM,KAAK,CAAC,CAAC,YAAY,EAAC,CAAC,CAAC;QAAC,CAAC,GAAC,GAAG,EAAC,CAAC,GAAC,CAAC,CAAC;QAAC;MAAM,KAAK,CAAC,CAAC,WAAW,EAAC,CAAC,CAAC;QAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,GAAC,GAAG;QAAC;MAAM,KAAK,CAAC,CAAC,KAAK,EAAC,CAAC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAAA;IAAC,IAAG,CAAC,EAAC;MAAC,CAAC,CAAC,cAAc,CAAC,CAAC;MAAC,MAAK;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,CAAC,CAAC,OAAO,CAAC,SAAS,IAAE,GAAG,KAAG,CAAC,IAAE,CAAC,CAAC,WAAW,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,MAAM,GAAC,MAAM,GAAC,CAAC,IAAE,CAAC,CAAC,aAAa,GAAC,CAAC,CAAC,UAAU,CAAC,GAAG,KAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAE,CAAC,GAAC,CAAC,EAAE,GAAC,EAAE,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAAA;IAAC,CAAC,KAAG,CAAC,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,MAAK;MAAC,QAAQ,EAAC;IAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,CAAC,IAAE,QAAQ,KAAG,CAAC,CAAC,MAAM,IAAE,CAAC,KAAG,CAAC,CAAC,MAAM,IAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAE,CAAC,CAAC,KAAK,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC,GAAC,0BAA0B;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC;IAAC,MAAK;MAAC,MAAM,EAAC,CAAC;MAAC,UAAU,EAAC,CAAC;MAAC,SAAS,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC,GAAE,CAAA,KAAI,CAAC,CAAE;MAAC,QAAQ,EAAC,CAAC,GAAC,GAAG;MAAC,MAAM,EAAC,CAAC,GAAC;IAAC,CAAC,GAAC,CAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,GAAC,WAAW,GAAC,SAAS;MAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,IAAE,EAAE;IAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,UAAU,CAAE,MAAI;MAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,UAAU,CAAE,MAAI;QAAC,CAAC,CAAC,gBAAgB,CAAC,eAAe,EAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,gBAAgB,CAAC,kBAAkB,EAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,UAAU,CAAE,MAAI;UAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAAA,CAAC,EAAE,CAAC,GAAC,GAAG,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAC,CAAC;MAAA,CAAC,EAAE,EAAE,CAAC;IAAA,CAAC,EAAE,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,CAAC,CAAC,MAAM,KAAG,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAI,CAAC,EAAE,KAAG,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,EAAE,IAAE,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,eAAe,EAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,kBAAkB,EAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,GAAG,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,IAAE,GAAG,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,IAAE,EAAE,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,KAAG,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC;EAAA;EAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC;MAAC,CAAC,GAAC,CAAC;IAAC,CAAC,IAAE,GAAG;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,CAAC,KAAG,CAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC;IAAC,IAAG,CAAC,KAAG,IAAI,CAAC,EAAE,EAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,IAAE,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,GAAC,CAAC,IAAI,CAAC,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC,KAAK,IAAG,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC;MAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC;QAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC;MAAC,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,GAAC,CAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,IAAE,CAAC,IAAI,CAAC,EAAE,GAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC;IAAA;IAAC,OAAO,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC;IAAC,MAAK;MAAC,KAAK,EAAC,CAAC;MAAC,GAAG,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC;MAAC,UAAU,EAAC,CAAC;MAAC,QAAQ,EAAC,CAAC,GAAE,CAAA,KAAI,CAAC,CAAE;MAAC,YAAY,EAAC,CAAC;MAAC,gBAAgB,EAAC;IAAC,CAAC,GAAC,CAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MAAC,CAAC,GAAC,CAAC,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAA,KAAI;MAAC,IAAI,CAAC,EAAE,KAAG,CAAC,GAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAC,EAAE,IAAE,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA,CAAC;IAAC,IAAI,CAAC,EAAE,GAAC,qBAAqB,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,EAAE,IAAE,CAAC,IAAE,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,gBAAgB,GAAC,EAAE;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;EAAC,eAAe,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,QAAQ,GAAC,MAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC;EAAA;EAAC,IAAI,CAAC,CAAC,EAAC;IAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;IAAC,CAAC,GAAC,CAAC,CAAC,IAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,IAAI,CAAC,gBAAgB,GAAC,EAAE;EAAA;EAAC,UAAU,CAAA,EAAE;IAAC,IAAI,CAAC,gBAAgB,GAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAE,CAAC,IAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,KAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,CAAE,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,IAAI,CAAC,gBAAgB,GAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAE,CAAC,IAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,KAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,CAAE,CAAC;EAAA;EAAC,YAAY,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAE,CAAC,CAAC,KAAK,CAAC,KAAM,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,EAAC,OAAO,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,CAAC,CAAC,cAAc,CAAC,CAAC;IAAC,MAAK;MAAC,SAAS,EAAC;IAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,IAAG;MAAC,MAAM,EAAC,CAAC;MAAC,MAAM,EAAC;IAAC,CAAC,GAAC,CAAC;IAAC,IAAG,CAAC,IAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAC;MAAC,aAAa,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC,IAAG,CAAC,CAAC,OAAO,IAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAC;MAAC,IAAG,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC;QAAC,IAAI,CAAC,GAAC,CAAC,CAAC;QAAC,CAAC,KAAG,CAAC,CAAC,SAAS,GAAC,CAAC,IAAE,GAAG,GAAC,CAAC,IAAE,CAAC,CAAC,SAAS,GAAC,CAAC,GAAC,IAAI,EAAC,CAAC,GAAC,CAAC,IAAE,CAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,aAAaiBAAiB,EAAC;MAAC,IAAI,EAAC;IAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAC,EAAE;IAAC,CAAC,CAAC,QAAQ,IAAE,CAAC,IAAE,eAAe,EAAC,CAAC,IAAE,CAAC,CAAC,SAAS,IAAG,iBAAgB,CAAC,CAAC,IAAK,EAAC,IAAE,CAAC,IAAE,CAAC,CAAC,SAAS,IAAG,SAAQ,CAAC,CAAC,IAAK,EAAC;IAAC,IAAI,CAAC,GAAC,CAAC,CAAC,QAAQ,GAAC,CAAC,CAAC,OAAO,IAAE,QAAQ,GAAC,CAAC,CAAC,OAAO,IAAE,KAAK;IAAC,CAAC,GAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAG,CAAC,CAAC,QAAQ,EAAC;MAAC,QAAQ,KAAG,CAAC,KAAG,CAAC,CAAC,IAAI,GAAC,QAAQ,CAAC;MAAC,IAAG;QAAC,KAAK,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,MAAK;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,QAAQ,IAAE,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,KAAG,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC;MAAC,MAAM,CAAC,GAAC,CAAC,IAAE,CAAC;MAAC,CAAC,IAAE,CAAC,CAAC,YAAY,CAAC,YAAY,EAAC,CAAC,CAAC;IAAA;IAAC,CAAC,CAAC,SAAS,GAAC,UAAS,CAAC,EAAC;MAAC,IAAG,QAAQ,IAAE,OAAO,CAAC,EAAC,OAAO,CAAC;MAAC,IAAG,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,WAAW,EAAC,OAAM,EAAE;MAAC,MAAM,CAAC,GAAC,CAAC;MAAC,IAAI,CAAC,GAAC,uFAAuF;MAAC,OAAO,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAE,EAAE,CAAC,EAAC,CAAC,CAAC,SAAS,KAAG,CAAC,IAAE,6CAA6C,GAAC,CAAC,CAAC,SAAS,GAAC,KAAK,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,KAAK,EAAC,CAAC,IAAE,QAAQ,EAAC,CAAC;IAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,MAAM,IAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,OAAO,KAAG,CAAC,CAAC,OAAO,GAAC,CAAC,IAAE;MAAC,QAAQ,IAAE,OAAO,CAAC,CAAC,OAAO,GAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,UAAU,IAAE,OAAO,CAAC,CAAC,OAAO,IAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAA,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,QAAQ,IAAE,KAAK;IAAC,IAAI,CAAC,GAAC,CAAC,CAAC,OAAO;IAAC,KAAK,KAAG,CAAC,IAAE,CAAC,CAAC,MAAM,KAAG,CAAC,CAAC,MAAM,GAAC,CAAC,CAAC,mCAAmC,EAAC,KAAK,EAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC,MAAM,KAAG,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAC,SAAS,KAAG,CAAC,KAAG,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,WAAW,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;AAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,eAAe,EAAC,aAAa,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAI;IAAC,CAAC,CAAC,OAAO,CAAC,IAAI,KAAG,CAAC,CAAC,QAAQ,GAAC,CAAC,GAAC,EAAE,CAAC,CAAC,SAAS,GAAC,CAAC,CAAC,WAAW,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC,SAAS,GAAC,CAAC,CAAC,CAAC;EAAA,CAAE,CAAC;AAAA;AAAC,MAAM,CAAC,GAAC;IAAC,IAAI,EAAC,WAAW;IAAC,SAAS,EAAC,2BAA2B;IAAC,KAAK,EAAC,UAAU;IAAC,KAAK,EAAC,EAAE;IAAC,QAAQ,EAAC,CAAC,CAAC;IAAC,QAAQ,EAAC,SAAS;IAAC,IAAI,EAAC;MAAC,WAAW,EAAC,CAAC,CAAC;MAAC,IAAI,EAAC,EAAE;MAAC,KAAK,EAAC,2EAA2E;MAAC,SAAS,EAAC;IAAiB,CAAC;IAAC,OAAO,EAAC,MAAM;IAAC,MAAM,EAAC;EAAC,CAAC;EAAC,CAAC,GAAC;IAAC,IAAI,EAAC,WAAW;IAAC,SAAS,EAAC,2BAA2B;IAAC,KAAK,EAAC,MAAM;IAAC,KAAK,EAAC,EAAE;IAAC,QAAQ,EAAC,CAAC,CAAC;IAAC,QAAQ,EAAC,SAAS;IAAC,IAAI,EAAC;MAAC,WAAW,EAAC,CAAC,CAAC;MAAC,IAAI,EAAC,EAAE;MAAC,KAAK,EAAC,sCAAsC;MAAC,SAAS,EAAC;IAAiB,CAAC;IAAC,OAAO,EAAC,MAAM;IAAC,MAAM,EAAC,CAAC,CAAC,EAAC,CAAC,KAAG;MAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IAAA;EAAC,CAAC;EAAC,CAAC,GAAC;IAAC,IAAI,EAAC,OAAO;IAAC,KAAK,EAAC,OAAO;IAAC,KAAK,EAAC,EAAE;IAAC,QAAQ,EAAC,CAAC,CAAC;IAAC,IAAI,EAAC;MAAC,WAAW,EAAC,CAAC,CAAC;MAAC,KAAK,EAAC,uFAAuF;MAAC,SAAS,EAAC;IAAiB,CAAC;IAAC,OAAO,EAAC;EAAO,CAAC;EAAC,CAAC,GAAC;IAAC,IAAI,EAAC,MAAM;IAAC,KAAK,EAAC,MAAM;IAAC,KAAK,EAAC,EAAE;IAAC,QAAQ,EAAC,CAAC,CAAC;IAAC,IAAI,EAAC;MAAC,WAAW,EAAC,CAAC,CAAC;MAAC,KAAK,EAAC,sPAAsP;MAAC,SAAS,EAAC;IAAgB,CAAC;IAAC,OAAO,EAAC;EAAY,CAAC;EAAC,CAAC,GAAC;IAAC,IAAI,EAAC,WAAW;IAAC,QAAQ,EAAC,KAAK;IAAC,KAAK,EAAC,CAAC;IAAC,IAAI,EAAC;MAAC,WAAW,EAAC,CAAC,CAAC;MAAC,KAAK,EAAC,iIAAiI;MAAC,SAAS,EAAC;IAAmB,CAAC;IAAC,MAAM,EAAC,CAAC,CAAC,EAAC,CAAC,KAAG;MAAC,IAAI,CAAC;QAAC,CAAC,GAAC,IAAI;MAAC,MAAM,CAAC,GAAC,CAAC,IAAE;UAAC,IAAI,CAAC,EAAC,CAAC;UAAC,CAAC,KAAG,CAAC,KAAG,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,EAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAmB,GAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QAAA,CAAC;QAAC,CAAC,GAAC,CAAA,KAAI;UAAC,IAAG,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,MAAK,CAAC,KAAG,YAAY,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,CAAC;UAAC,CAAC,KAAG,CAAC,GAAC,UAAU,CAAE,MAAI;YAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC,IAAI;UAAA,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAAA,CAAC;MAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,IAAE;QAAC,CAAC,CAAC,SAAS,KAAG,CAAC,CAAC,KAAK,IAAE,CAAC,CAAC,CAAC;MAAA,CAAE,CAAC,EAAC,CAAC,CAAC,EAAE,KAAG,CAAC,CAAC,EAAE,CAAC,yBAAyB,GAAC,CAAC,CAAC;IAAA;EAAC,CAAC;EAAC,CAAC,GAAC;IAAC,IAAI,EAAC,SAAS;IAAC,KAAK,EAAC,CAAC;IAAC,MAAM,EAAC,CAAC,CAAC,EAAC,CAAC,KAAG;MAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAI;QAAC,CAAC,CAAC,SAAS,GAAC,CAAC,CAAC,SAAS,GAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,GAAC,CAAC,CAAC,WAAW,CAAC,CAAC;MAAA,CAAE,CAAC;IAAA;EAAC,CAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC;EAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,EAAC,CAAC,CAAC;AAAA;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,GAAC,EAAE,EAAC,IAAI,CAAC,KAAK,GAAC,EAAE,EAAC,IAAI,CAAC,yBAAyB,GAAC,MAAI,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC;EAAA;EAAC,IAAI,CAAA,EAAE;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,GAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAE,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,CAAC,CAAC,KAAK,IAAE,CAAC,KAAG,CAAC,CAAC,KAAK,IAAE,CAAC,CAAE,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,EAAE,EAAC,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAI;MAAC,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,iBAAiB,EAAC,CAAC,KAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,eAAe,EAAE,MAAI,IAAI,CAAC,EAAE,CAAC,CAAE,CAAC;EAAA;EAAC,eAAe,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,YAAY,GAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,MAAK;MAAC,QAAQ,EAAC,CAAC;MAAC,SAAS,EAAC,CAAC;MAAC,OAAO,EAAC;IAAC,CAAC,GAAC,IAAI,CAAC,IAAI;IAAC,IAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,IAAE,CAAC,CAAC,IAAE,CAAC,CAAC,EAAC;IAAO,IAAG;MAAC,aAAa,EAAC;IAAC,CAAC,GAAC,CAAC;IAAC,IAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAG,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,EAAC,CAAC,KAAG,IAAI,CAAC,EAAE,EAAC;IAAO,IAAI,CAAC,EAAE,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,CAAC,CAAC,UAAU,CAAC,SAAS;IAAC,IAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,GAAG,IAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,oBAAoB,CAAC;IAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC;IAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,KAAG,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,CAAC,CAAC,UAAU,CAAC,SAAS,GAAC,CAAC,CAAC,UAAU,CAAC,OAAO,KAAG,CAAC,CAAC,EAAC,MAAM,KAAG,CAAC,CAAC,gBAAgB,IAAE,eAAe,KAAG,CAAC,CAAC,gBAAgB,IAAE,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,gBAAgB,GAAC,CAAC,CAAC,EAAC,CAAC,IAAE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAC,CAAC,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,IAAI,CAAC,gBAAgB,GAAC,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,kCAAkC,EAAC,CAAC,GAAC,KAAK,GAAC,KAAK,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO;MAAC,CAAC,CAAC,QAAQ,GAAC,OAAO,EAAC,CAAC,CAAC,GAAG,GAAC,EAAE,EAAC,CAAC,CAAC,GAAG,GAAC,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAC,cAAc,CAAC;IAAA;IAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa,EAAC,MAAM,CAAC;EAAA;EAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,OAAO,KAAG,KAAK,KAAG,IAAI,CAAC,OAAO,CAAC,OAAO,IAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,GAAG,EAAC,MAAM,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,GAAC,KAAK,EAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAC,GAAG,CAAC,IAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,OAAO,EAAE,UAAU,IAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,IAAI;EAAA;AAAC;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,mBAAmB,GAAC,CAAC,EAAC,IAAI,CAAC,oBAAoB,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAE,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAE,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAC,IAAI,CAAC,IAAI,GAAC,OAAO,GAAC,IAAI,CAAC,IAAI,GAAC,MAAM,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC;EAAA;EAAC,iBAAiB,CAAA,EAAE;IAAC,IAAI,CAAC,WAAW,IAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAE,UAAU,CAAE,MAAI;MAAC,IAAI,CAAC,WAAW,KAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,KAAK,CAAC,CAAC;IAAA,CAAC,EAAE,GAAG,CAAC;EAAA;EAAC,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,cAAc,CAAC,CAAC,EAAC,IAAG,IAAI,CAAC,WAAW,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,OAAO;MAAC,CAAC,IAAE,CAAC,CAAC,CAAC,aAAa,IAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAAA,CAAC,MAAI;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,gBAAgB,EAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,IAAI,CAAC;MAAC,IAAI,CAAC,WAAW,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAAA;IAAC,IAAI,CAAC,OAAO,IAAE,CAAC,CAAC,IAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,OAAO,EAAC,IAAI;MAAC,MAAM,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,WAAW,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,mBAAmB,IAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,eAAe,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAE,EAAE,CAAC,EAAC,CAAC,IAAE,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,SAAS,CAAC,CAAC,EAAC;IAAC,IAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,OAAO,IAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,EAAC;MAAC,OAAO,EAAC,IAAI;MAAC,MAAM,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC;IAAO,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO;IAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAG,CAAC,CAAC,MAAM,GAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,GAAG,GAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAE,EAAE,EAAC,CAAC,CAAC,GAAG,GAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAE,EAAE,EAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,CAAC,CAAC,QAAQ,GAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAE,CAAC,CAAC,MAAM,GAAC,MAAI;MAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAAA,CAAC,EAAC,CAAC,CAAC,OAAO,GAAC,MAAI;MAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAAA,CAAC,CAAC;EAAA;EAAC,QAAQ,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,IAAI;EAAA;EAAC,QAAQ,CAAA,EAAE;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC,KAAK;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,KAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,KAAK,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,IAAI,CAAC,YAAY,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC,KAAK;MAAC,OAAO,EAAC,CAAC,CAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC,KAAK;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC;EAAA;EAAC,SAAS,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,kBAAkB,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,KAAK,KAAG,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,OAAM,OAAO,KAAG,IAAI,CAAC,IAAI;EAAA;EAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,WAAW,IAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,OAAO,EAAC,IAAI;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAC,CAAC,CAAC,CAAC,gBAAgB,KAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,IAAI,CAAC,mBAAmB,IAAE,CAAC;MAAC,IAAI,CAAC,mBAAmB,GAAC,CAAC,EAAC,IAAI,CAAC,oBAAoB,GAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAC;QAAC,KAAK,EAAC,IAAI,CAAC,KAAK;QAAC,KAAK,EAAC,CAAC;QAAC,MAAM,EAAC,CAAC;QAAC,OAAO,EAAC;MAAI,CAAC,CAAC;IAAA;EAAC;EAAC,UAAU,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,mBAAmB,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,iBAAiB,CAAA,EAAE;IAAC,IAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,OAAO,IAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAC;IAAO,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO;MAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,kBAAkB,EAAC,IAAI,CAAC,mBAAmB,EAAC,IAAI,CAAC;IAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,IAAE,CAAC,GAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,EAAC,EAAE,CAAC,MAAI,CAAC,CAAC,KAAK,GAAC,CAAC,GAAC,IAAI,EAAC,CAAC,CAAC,OAAO,CAAC,eAAe,GAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,uBAAuB,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,QAAQ,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,IAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,eAAe,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,sBAAsB,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,KAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAC,IAAI,EAAC,IAAI,CAAC,OAAO,CAAC,OAAO,GAAC,IAAI,EAAC,IAAI,CAAC,OAAO,GAAC,KAAK,CAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,KAAK,EAAC;MAAC,IAAI,CAAC,GAAC,CAAC,CAAC,iBAAiB,EAAC,KAAK,CAAC;MAAC,CAAC,CAAC,SAAS,GAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,IAAE,EAAE,EAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,qBAAqB,EAAC,CAAC,EAAC,IAAI,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,yCAAyC,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,GAAC,EAAE,EAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAAA;EAAC;EAAC,MAAM,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,UAAU,IAAE,CAAC,IAAI,CAAC,OAAO,EAAC;IAAO,IAAG,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,EAAC,OAAO,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC;IAAC,IAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAC;IAAO,MAAM,CAAC,IAAC,QAAQ,IAAG,IAAI,CAAC,OAAO;IAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAE,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAE,MAAI,CAAC,CAAE,CAAC,CAAC,OAAO,CAAE,MAAI;MAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAAA,CAAE,CAAC,IAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,IAAI,CAAC,KAAK,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;EAAA;EAAC,QAAQ,CAAA,EAAE;IAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,IAAE,IAAI,CAAC,KAAK,KAAG,IAAI,CAAC,cAAc,CAAC,CAAC,IAAE,IAAI,CAAC,UAAU,IAAE,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,EAAC,OAAO,CAAC,CAAC;EAAA;EAAC,UAAU,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,mBAAmB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,EAAC,MAAM,CAAC;EAAA;EAAC,MAAM,CAAA,EAAE;IAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,OAAO,IAAE,IAAI,CAAC,OAAO,CAAC,UAAU,IAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,IAAE,IAAI,CAAC,WAAW,CAAC,OAAO,IAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EAAA;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,UAAU,KAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,EAAC;MAAC,OAAO,EAAC;IAAI,CAAC,CAAC,CAAC,gBAAgB,KAAG,IAAI,CAAC,KAAK,IAAE,IAAI,CAAC,OAAO,IAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,KAAK,KAAG,CAAC,IAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;EAAA;AAAC;AAAC,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;EAAC,MAAM,CAAC,GAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAI,CAAC;EAAC,MAAK;IAAC,OAAO,EAAC;EAAC,CAAC,GAAC,CAAC;EAAC,IAAG,CAAC,EAAC;IAAC,IAAI,CAAC;IAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC,IAAI,GAAC,CAAC,CAAC,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAC,CAAC,CAAC,MAAM,EAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC;AAAA;AAAC,MAAM,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,EAAE;EAAA;EAAC,UAAU,CAAC,CAAC,EAAC;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAC;IAAO,MAAK;QAAC,OAAO,EAAC;MAAC,CAAC,GAAC,CAAC,CAAC,OAAO;MAAC,CAAC,GAAC,KAAK,CAAC,KAAG,CAAC,IAAE,CAAC,IAAE,CAAC;IAAC,IAAI,CAAC;IAAC,KAAI,CAAC,GAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,IAAE,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;IAAC,KAAI,CAAC,GAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,IAAE,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;EAAA;EAAC,gBAAgB,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAAC,CAAC,KAAG,CAAC,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;MAAC,IAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAC;QAAC,KAAK,EAAC,CAAC;QAAC,QAAQ,EAAC;MAAC,CAAC,CAAC,CAAC,gBAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAA,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,IAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,iBAAiB,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,GAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC;IAAC,OAAO,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,EAAC,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC;EAAA;EAAC,UAAU,CAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,MAAM,GAAC,IAAI,CAAC,KAAK,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAE,CAAC,IAAE,CAAC,CAAC,CAAC,UAAU,IAAE,CAAC,CAAC,CAAC,QAAS,CAAC;MAAC,IAAG,CAAC,CAAC,KAAG,CAAC,EAAC;QAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;MAAA;IAAC;EAAC;EAAC,aAAa,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAE,CAAC,IAAE,CAAC,CAAC,KAAK,KAAG,CAAE,CAAC;IAAC,CAAC,CAAC,KAAG,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,iBAAiB,CAAC,CAAC,EAAC;IAAC,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAE,CAAC,IAAE,CAAC,CAAC,KAAK,KAAG,CAAE,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAE,CAAC,IAAE,CAAC,CAAC,OAAO,CAAC,CAAE,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,EAAE;EAAA;AAAC;AAAC,MAAM,EAAE;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,IAAI,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,cAAc,EAAC,IAAI,CAAC,EAAE,CAAC;EAAA;EAAC,IAAI,CAAA,EAAE;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC;EAAA;EAAC,KAAK,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,SAAS,EAAC;IAAO,MAAM,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,SAAS;IAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAC,CAAC,IAAE,CAAC,CAAC,aAAa,GAAC,CAAC,CAAC,KAAK,IAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,KAAG,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,UAAU,CAAE,MAAI;MAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAAA,CAAC,EAAE,IAAI,CAAC,EAAE,GAAC,EAAE,GAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,CAAC,IAAI,CAAC,SAAS,EAAC;MAAC,MAAM,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,SAAS;MAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAC,CAAC,IAAE,CAAC,CAAC,UAAU,CAAC,OAAO,GAAC,CAAC,CAAC,KAAK,IAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,KAAG,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAAA;EAAC;EAAC,EAAE,CAAA,EAAE;IAAC,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,SAAS;MAAC;QAAC,OAAO,EAAC;MAAC,CAAC,GAAC,CAAC;IAAC,IAAG,MAAM,KAAG,CAAC,CAAC,qBAAqB,IAAE,CAAC,CAAC,eAAe,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,IAAE,MAAM,KAAG,CAAC,CAAC,qBAAqB,IAAE,CAAC,CAAC,eAAe,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,IAAE,IAAI,CAAC,SAAS,IAAE,CAAC,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,GAAC,EAAE,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAE,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,KAAG,CAAC,IAAI,CAAC,SAAS,IAAE,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,eAAe,IAAE,CAAC,CAAC,IAAE,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,IAAE,CAAC,KAAG,CAAC,CAAC,mBAAmB,CAAC,CAAC,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAC,IAAI,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,OAAO,GAAC,CAAC,CAAC,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,IAAI,CAAC,EAAE,GAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,MAAK,IAAI,CAAC,SAAS,KAAG,CAAC,CAAC,OAAO,KAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,SAAS,IAAE,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,EAAC,CAAC,CAAC,SAAS,KAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAC,QAAQ,EAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAC,CAAC,CAAC,YAAY,CAAC,CAAC,GAAC,IAAI,CAAC,IAAE,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,OAAO,KAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,EAAE,KAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,OAAO,KAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,KAAG,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,KAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,GAAC,WAAW,EAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,SAAS,KAAG,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,CAAC,KAAG,CAAC,CAAC,UAAU,CAAC,CAAC,KAAG,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,IAAE,KAAK,KAAG,IAAI,CAAC,EAAE,CAAC,OAAO,GAAC,IAAI,OAAO,CAAE,CAAC,IAAE;MAAC,IAAI,CAAC,GAAC,CAAC,CAAC;QAAC,CAAC,GAAC,CAAC,CAAC;MAAC,IAAI,CAAC;MAAC,CAAC,CAAC,GAAC,IAAI,CAAC,EAAE,EAAC,QAAQ,IAAG,CAAC,GAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAE,MAAI,CAAC,CAAE,CAAC,GAAC,CAAC,CAAC,QAAQ,GAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,IAAI,OAAO,CAAE,CAAC,CAAC,EAAC,CAAC,KAAG;QAAC,CAAC,CAAC,MAAM,GAAC,MAAI,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,OAAO,GAAC,CAAC;MAAA,CAAE,CAAC,EAAE,OAAO,CAAE,MAAI;QAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAAA,CAAE,CAAC,EAAC,UAAU,CAAE,MAAI;QAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAAA,CAAC,EAAE,EAAE,CAAC,EAAC,UAAU,CAAC,CAAC,EAAC,GAAG,CAAC;IAAA,CAAE,CAAC,CAAC,OAAO,CAAE,MAAI,IAAI,CAAC,EAAE,CAAC,CAAE,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,WAAW,CAAC,4BAA4B,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAC,uBAAuB,GAAC,uBAAuB,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,IAAE,IAAI,CAAC,SAAS,GAAC,IAAI,GAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,kBAAkB,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,EAAE,KAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAE,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAI,CAAC,MAAM,GAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAC,qBAAqB,GAAC,qBAAqB,CAAC,EAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,IAAE,IAAI,CAAC,MAAM,GAAC,OAAO,GAAC,QAAQ,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,KAAG,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,SAAS,KAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAC,SAAS,EAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAC,MAAM,CAAC,EAAC,CAAC,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAI,CAAC,EAAE,KAAG,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,KAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAC,WAAW,EAAC,oBAAoB,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAC,WAAW,EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,SAAS,KAAG,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,EAAC,WAAW,EAAC,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAC,SAAS,EAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,OAAO,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAC,SAAS,EAAC,GAAG,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,MAAK;MAAC,IAAI,EAAC;IAAC,CAAC,GAAC,IAAI;IAAC,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,SAAS,GAAC,GAAG,IAAE,CAAC,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAC,SAAS,EAAC,GAAG,CAAC,EAAC,IAAI,CAAC,EAAE,IAAE,CAAC,CAAC,OAAO,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAC,SAAS,EAAC,GAAG,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,IAAG,CAAC,IAAI,CAAC,EAAE,EAAC;IAAO,MAAK;QAAC,IAAI,EAAC;MAAC,CAAC,GAAC,IAAI;MAAC;QAAC,SAAS,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,EAAE;MAAC;QAAC,SAAS,EAAC,CAAC;QAAC,YAAY,EAAC;MAAC,CAAC,GAAC,CAAC;IAAC,IAAG,IAAI,CAAC,EAAE,IAAE,CAAC,IAAE,IAAI,CAAC,EAAE,IAAE,IAAI,CAAC,EAAE,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;QAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;QAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;QAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;MAAC,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAC,WAAW,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAC,WAAW,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IAAA;IAAC,CAAC,KAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAC,CAAC,IAAE,IAAI,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,aAAa,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,EAAC,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,EAAC,WAAW,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,MAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC;IAAC,MAAK;QAAC,UAAU,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,IAAI;MAAC,CAAC,GAAC;QAAC,QAAQ,EAAC,IAAI,CAAC,EAAE;QAAC,MAAM,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;QAAC,UAAU,EAAC,CAAA,KAAI;UAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,IAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAAA,CAAC;QAAC,MAAM,EAAC;MAAC,CAAC;IAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;EAAA;AAAC;AAAC,MAAM,EAAE,GAAC;EAAC,cAAc,EAAC,CAAC,CAAC;EAAC,OAAO,EAAC,EAAE;EAAC,IAAI,EAAC,CAAC,CAAC;EAAC,YAAY,EAAC,CAAC,CAAC;EAAC,mBAAmB,EAAC,CAAC,CAAC;EAAC,qBAAqB,EAAC,GAAG;EAAC,qBAAqB,EAAC,GAAG;EAAC,qBAAqB,EAAC,GAAG;EAAC,MAAM,EAAC,CAAC,CAAC;EAAC,SAAS,EAAC,CAAC,CAAC;EAAC,WAAW,EAAC,CAAC,CAAC;EAAC,iBAAiB,EAAC,GAAG;EAAC,uBAAuB,EAAC,CAAC,CAAC;EAAC,gBAAgB,EAAC,eAAe;EAAC,aAAa,EAAC,OAAO;EAAC,SAAS,EAAC,iBAAiB;EAAC,eAAe,EAAC,MAAM;EAAC,iBAAiB,EAAC,KAAK;EAAC,cAAc,EAAC,GAAG;EAAC,SAAS,EAAC,EAAE;EAAC,KAAK,EAAC,CAAC;EAAC,QAAQ,EAAC,4BAA4B;EAAC,OAAO,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;EAAC,MAAM,EAAC;AAA0B,CAAC;AAAC,MAAM,EAAE,SAAS,cAAc,MAAK;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,KAAK,CAAC;EAAA;EAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAC,GAAG,EAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;MAAC,EAAE,EAAC,CAAC;MAAC,QAAQ,EAAC;IAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAE,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,CAAC,QAAQ,GAAC,CAAC,CAAC,QAAS,CAAC,EAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,IAAE,CAAC,CAAC,EAAE,KAAG,CAAE,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,IAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAC,CAAC,EAAC,GAAG,CAAC,EAAC;IAAC,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,IAAE,CAAC,KAAG,CAAE,CAAC,CAAC,EAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,IAAI,EAAC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,CAAC;EAAA;AAAC,CAAC;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,GAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO,EAAE,UAAU;IAAC,CAAC,IAAE,QAAQ,IAAG,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,MAAM,GAAC,CAAC,IAAE,SAAS,IAAG,CAAC,KAAG,CAAC,CAAC,KAAK,KAAG,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,KAAG,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAC;MAAC,UAAU,EAAC,CAAC;MAAC,QAAQ,EAAC;IAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAC,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC;EAAA;EAAC,qBAAqB,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAO,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC;EAAA;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,OAAO,EAAE,UAAU;IAAC,IAAI,CAAC,GAAC,CAAC,CAAC;IAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,SAAS,IAAG,CAAC,KAAG,CAAC,CAAC,KAAK,KAAG,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAAC,IAAI,CAAC,GAAC,CAAC;IAAC,CAAC,YAAY,OAAO,KAAG,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAC;MAAC,QAAQ,EAAC,CAAC,IAAE,CAAC,CAAC;MAAC,KAAK,EAAC;IAAC,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAC,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,OAAO,IAAI,CAAC,OAAO,EAAE,QAAQ,IAAE,IAAI,CAAC,OAAO,EAAE,aAAa,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,EAAC;MAAC,IAAI,CAAC,GAAC,EAAE;MAAC,IAAG,CAAC,YAAY,OAAO,EAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAG,CAAC,YAAY,QAAQ,IAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,GAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAI;QAAC,MAAM,CAAC,GAAC,QAAQ,IAAE,OAAO,CAAC,GAAC,CAAC,GAAC,CAAC;QAAC,CAAC,KAAG,CAAC,GAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;MAAA;MAAC,OAAO,CAAC;IAAA,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAC,CAAC,CAAC,IAAE,EAAE,GAAC,CAAC,CAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC;QAAC,OAAO,EAAC;MAAC,CAAC;MAAC,CAAC,GAAC,GAAG,KAAG,CAAC,CAAC,OAAO,GAAC,CAAC,GAAC,CAAC,CAAC,aAAaaAAa,CAAC,KAAK,CAAC;MAAC,CAAC,KAAG,CAAC,CAAC,IAAI,GAAC,CAAC,CAAC,UAAU,IAAE,CAAC,CAAC,GAAG,EAAC,CAAC,CAAC,GAAG,GAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,IAAE,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,IAAE,CAAC,CAAC,OAAO,CAAC,OAAO,MAAI,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,CAAC;IAAA;IAAC,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC;EAAA;AAAC,CAAC;EAAC,WAAW,CAAC,CAAC,EAAC;IAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,YAAY,GAAC;MAAC,CAAC,EAAC,CAAC;MAAC,CAAC,EAAC;IAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,EAAC,IAAI,CAAC,cAAc,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,KAAK,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,IAAI,CAAC,CAAD,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,CAAD,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,MAAM,GAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,aAAa,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC;EAAA;EAAC,IAAI,CAAA,EAAE;IAAC,IAAG,IAAI,CAAC,MAAM,IAAE,IAAI,CAAC,YAAY,EAAC,OAAM,CAAC,CAAC;IAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAAC,IAAI,CAAC,GAAC,YAAY;IAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAG,CAAC,IAAE,cAAc,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,SAAS,KAAG,CAAC,IAAE,GAAG,GAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,OAAO,KAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAE,GAAG,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAE,CAAC,EAAC,IAAI,CAAC,cAAc,GAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAC,IAAI,CAAC,WAAW,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAE,IAAI,CAAC,SAAS,GAAC,CAAC,IAAE,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC,WAAW,CAAC,CAAC,MAAI,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,IAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,WAAW,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAC;MAAC,KAAK,EAAC,IAAI,CAAC,SAAS;MAAC,IAAI,EAAC,IAAI,CAAC,EAAE;MAAC,KAAK,EAAC,KAAK;IAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE,MAAI;MAAC,MAAK;QAAC,WAAW,EAAC;MAAC,CAAC,GAAC,IAAI,CAAC,UAAU;MAAC,CAAC,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,OAAO,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,OAAO,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAC,QAAQ,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAC,QAAQ,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;IAAA,CAAE,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAC,CAAC,CAAC;EAAA;EAAC,cAAc,CAAC,CAAC,EAAC;IAAC,MAAM,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,KAAG,CAAC,GAAC,CAAC,GAAC,CAAC,KAAG,CAAC,IAAE,CAAC,CAAC,EAAC,CAAC,GAAC,CAAC,KAAG,CAAC,IAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAC,CAAC,CAAC;EAAA;EAAC,WAAW,CAAA,EAAE;IAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAAA,CAAE,CAAC;EAAA;EAAC,IAAI,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,cAAc,CAAC;EAAA;EAAC,IAAI,CAAA,EAAE;IAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAC,CAAC,CAAC;EAAA;EAAC,IAAI,CAAA,EAAE;IAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAC,CAAC,CAAC;EAAA;EAAC,MAAM,CAAC,GAAG,CAAC,EAAC;IAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;EAAA;EAAC,UAAU,CAAA,EAAE;IAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;EAAA;EAAC,KAAK,CAAA,EAAE;IAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAE,CAAC,IAAI,CAAC,YAAY,KAAG,IAAI,CAAC,YAAY,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,IAAG,CAAC,IAAI,CAAC,YAAY,EAAC,OAAO,IAAI,CAAC,OAAO,CAAC,qBAAqB,GAAC,MAAM,EAAC,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;IAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,KAAG,IAAI,CAAC,UAAU,CAAC,WAAW,GAAC,IAAI,EAAC,IAAI,CAAC,UAAU,CAAC,UAAU,GAAC,IAAI,CAAC,EAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAE,CAAC,IAAE;MAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;EAAA;EAAC,mBAAmB,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAE,CAAC,CAAC,EAAC,CAAC,KAAG;MAAC,IAAI,CAAC,GAAC,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,IAAE,CAAC,IAAE,CAAC,GAAC,CAAC;MAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,KAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,KAAG,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,KAAK,EAAC,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA,CAAE,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;EAAA;EAAC,UAAU,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,OAAO,CAAC,CAAC,KAAG,CAAC,GAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,EAAC;MAAC,IAAG,CAAC,CAAC,KAAK,CAAC,KAAK,KAAG,CAAC,IAAE,CAAC,CAAC,EAAC;MAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,GAAC,KAAK,CAAC;IAAA;IAAC,IAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAG,CAAC,GAAC,CAAC,IAAE,CAAC,IAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAC;IAAO,MAAM,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAAC,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,EAAC,CAAC,KAAG,IAAI,CAAC,SAAS,KAAG,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;EAAA;EAAC,sBAAsB,CAAA,EAAE;IAAC,OAAM;MAAC,CAAC,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAC,CAAC;MAAC,CAAC,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAC;IAAC,CAAC;EAAA;EAAC,UAAU,CAAC,CAAC,EAAC;IAAC,IAAG,IAAI,CAAC,YAAY,EAAC;IAAO,MAAM,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC;IAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,KAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,YAAY,EAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC,CAAC,IAAI,CAAC,QAAQ,IAAE,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,OAAO,IAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;EAAA;EAAC,cAAc,CAAC,CAAC,EAAC;IAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,KAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;EAAA;EAAC,aAAa,CAAA,EAAE;IAAC,IAAI,CAAC,QAAQ,KAAG,IAAI,CAAC,QAAQ,GAAC,CAAC,CAAC,EAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAE,UAAU,CAAE,MAAI;MAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAAA,CAAC,EAAE,GAAG,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAI,CAAC,eAAe,CAAC,CAAC,EAAC,MAAM,CAAC,WAAW,CAAC;EAAA;EAAC,eAAe,CAAC,CAAC,EAAC,CAAC,EAAC;IAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;EAAA;EAAC,EAAE,CAAA,EAAE;IAAC,IAAI,CAAC,OAAO,GAAC,CAAC,CAAC,MAAM,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAC,IAAI,CAAC,EAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,EAAC,QAAQ,CAAC,EAAC,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,UAAU,EAAC,KAAK,EAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,UAAU,GAAC,CAAC,CAAC,mBAAmB,EAAC,SAAS,EAAC,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,iBAAiB,EAAC,KAAK,EAAC,IAAI,CAAC,UAAU,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,sBAAsB,EAAC,UAAU,CAAC,EAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW,EAAC,KAAK,CAAC,EAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,EAAC,aAAa,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,GAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAE,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;EAAA;EAAC,cAAc,CAAA,EAAE;IAAC,OAAO,UAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;MAAC,MAAM,CAAC,GAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAC;QAAC,KAAK,EAAC,CAAC;QAAC,QAAQ,EAAC,CAAC;QAAC,QAAQ,EAAC;MAAC,CAAC,CAAC;MAAC,IAAG,CAAC,CAAC,WAAW,EAAC,OAAO,CAAC,CAAC,WAAW;MAAC,MAAK;QAAC,OAAO,EAAC;MAAC,CAAC,GAAC,CAAC;MAAC,IAAI,CAAC,EAAC,CAAC;MAAC,IAAG,CAAC,IAAE,CAAC,CAAC,KAAG,CAAC,CAAC,OAAO,CAAC,aAAa,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,aAAa,IAAE,KAAK;QAAC,CAAC,GAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;MAAA;MAAC,OAAO,CAAC,GAAC,CAAC,CAAC,YAAY,CAAC,SAAS,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,KAAG,CAAC,GAAC,CAAC,CAAC,YAAY,GAAC,UAAS,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC;UAAC,CAAC,GAAC,CAAC,CAAC,KAAK,GAAC,CAAC;UAAC,CAAC,GAAC,CAAC,CAAC,MAAM,GAAC,CAAC;UAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC;UAAC,CAAC,GAAC,CAAC,CAAC,CAAC,KAAK,GAAC,CAAC,GAAC,CAAC,IAAE,CAAC;UAAC,CAAC,GAAC,CAAC,CAAC,CAAC,MAAM,GAAC,CAAC,GAAC,CAAC,IAAE,CAAC;UAAC,CAAC,GAAC;YAAC,CAAC,EAAC,CAAC,CAAC,IAAI,GAAC,CAAC;YAAC,CAAC,EAAC,CAAC,CAAC,GAAG,GAAC,CAAC;YAAC,CAAC,EAAC,CAAC,GAAC;UAAC,CAAC;QAAC,OAAO,CAAC,CAAC,SAAS,GAAC;UAAC,CAAC,EAAC,CAAC,CAAC,KAAK;UAAC,CAAC,EAAC,CAAC,CAAC,MAAM;UAAC,CAAC,EAAC,CAAC;UAAC,CAAC,EAAC;QAAC,CAAC,EAAC,CAAC;MAAA,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,IAAE,CAAC,CAAC,CAAC,IAAE,CAAC,EAAC,CAAC,CAAC,MAAM,IAAE,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,GAAC,UAAS,CAAC,EAAC;QAAC,MAAM,CAAC,GAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC;QAAC,OAAM;UAAC,CAAC,EAAC,CAAC,CAAC,IAAI;UAAC,CAAC,EAAC,CAAC,CAAC,GAAG;UAAC,CAAC,EAAC,CAAC,CAAC;QAAK,CAAC;MAAA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,YAAY,CAAC,aAAa,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAA,CAAC,CAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,SAAS,CAAC,IAAI,GAAC,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC;EAAA;EAAC,OAAO,CAAA,EAAE;IAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,IAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAC,CAAC;EAAA;EAAC,EAAE,CAAC,CAAC,EAAC;IAAC,OAAO,MAAM,CAAC,UAAU,CAAC,0CAA0C,CAAC,CAAC,OAAO,KAAG,CAAC,CAAC,qBAAqB,GAAC,MAAM,EAAC,CAAC,CAAC,qBAAqB,GAAC,CAAC,CAAC,EAAC;MAAC,GAAG,EAAE;MAAC,GAAG;IAAC,CAAC;EAAA;AAAC;AAAC,OAAA,CAAA,OAAA,GAAA,EAAA;;;ACJ92mxlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtnjnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtvvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlnjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxhLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxDA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,UAAA,GAAA,OAAA;AAAqD,SAAA,uBAAA,GAAA;EAAA,OAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA;IAAA,OAAA,EAAA;EAAA;AAAA;AAIrD,IAAA,OAAA,CAAA,OAAC,EAAC,MAAM;EACP;EACA,CAAC,MAAM;IACN,MAAM,QAAQ,GAAG,oBAAoB;IAErC,IAAA,OAAA,CAAA,OAAC,EAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,YAAW;MACvF,IAAI,GAAG,GAAY,IAAI,CAAC,KAAK;QAC5B,YAAY,GAAG,IAAI,CAAC,YAAY;MAEjC,IAAI,CAAC,CAAC,KAAK,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACpD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * jQuery JavaScript Library v3.7.0\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-05-11T18:29Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar version = \"3.7.0\",\n\n\trhtmlSuffix = /HTML$/i,\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\n\t// Retrieve the text value of an array of DOM nodes\n\ttext: function( elem ) {\n\t\tvar node,\n\t\t\tret = \"\",\n\t\t\ti = 0,\n\t\t\tnodeType = elem.nodeType;\n\n\t\tif ( !nodeType ) {\n\n\t\t\t// If no nodeType, this is expected to be an array\n\t\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t\t// Do not traverse comment nodes\n\t\t\t\tret += jQuery.text( node );\n\t\t\t}\n\t\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t\treturn elem.textContent;\n\t\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\t\treturn elem.nodeValue;\n\t\t}\n\n\t\t// Do not include comment or processing instruction nodes\n\n\t\treturn ret;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tisXMLDoc: function( elem ) {\n\t\tvar namespace = elem && elem.namespaceURI,\n\t\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t\t// Assume HTML when documentElement doesn't yet exist, such as inside\n\t\t// document fragments.\n\t\treturn !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar pop = arr.pop;\n\n\nvar sort = arr.sort;\n\n\nvar splice = arr.splice;\n\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar bup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\ta.contains ?\n\t\t\ta.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n\n\n\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\n\n\n\nvar preferredDoc = document,\n\tpushNative = push;\n\n( function() {\n\nvar i,\n\tExpr,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\tpush = pushNative,\n\n\t// Local document vars\n\tdocument,\n\tdocumentElement,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\tmatches,\n\n\t// Instance-specific data\n\texpando = jQuery.expando,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n\t\t\"loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trleadingCombinator = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n\t\twhitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\tID: new RegExp( \"^#(\" + identifier + \")\" ),\n\t\tCLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\tTAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\tATTR: new RegExp( \"^\" + attributes ),\n\t\tPSEUDO: new RegExp( \"^\" + pseudos ),\n\t\tCHILD: new RegExp(\n\t\t\t\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\tbool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\tneedsContext: new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\tif ( nonHex ) {\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\treturn nonHex;\n\t\t}\n\n\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t// Support: IE <=11+\n\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t// surrogate pair\n\t\treturn high < 0 ?\n\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes; see `setDocument`.\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE/Edge.\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && nodeName( elem, \"fieldset\" );\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android <=4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = {\n\t\tapply: function( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t},\n\t\tcall: function( target ) {\n\t\t\tpushNative.apply( target, slice.call( arguments, 1 ) );\n\t\t}\n\t};\n}\n\nfunction find( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tfind.contains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( !nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when\n\t\t\t\t\t// strict-comparing two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( newContext != context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = jQuery.escapeSelector( nid );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrimCSS, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties\n\t\t// (see https://github.com/jquery/sizzle/issues/157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn nodeName( elem, \"input\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n\t\t\telem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11+\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nfunction setDocument( node ) {\n\tvar subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocumentElement = document.documentElement;\n\tdocumentIsHTML = !jQuery.isXMLDoc( document );\n\n\t// Support: iOS 7 only, IE 9 - 11+\n\t// Older browsers didn't support unprefixed `matches`.\n\tmatches = documentElement.matches ||\n\t\tdocumentElement.webkitMatchesSelector ||\n\t\tdocumentElement.msMatchesSelector;\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (see trac-13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t\tsubWindow.addEventListener( \"unload\", unloadHandler );\n\t}\n\n\t// Support: IE <10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocumentElement.appendChild( el ).id = jQuery.expando;\n\t\treturn !document.getElementsByName ||\n\t\t\t!document.getElementsByName( jQuery.expando ).length;\n\t} );\n\n\t// Support: IE 9 only\n\t// Check to see if it's possible to do matchesSelector\n\t// on a disconnected node.\n\tsupport.disconnectedMatch = assert( function( el ) {\n\t\treturn matches.call( el, \"*\" );\n\t} );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// IE/Edge don't support the :scope pseudo-class.\n\tsupport.scope = assert( function() {\n\t\treturn document.querySelectorAll( \":scope\" );\n\t} );\n\n\t// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only\n\t// Make sure the `:has()` argument is parsed unforgivingly.\n\t// We include `*` in the test to detect buggy implementations that are\n\t// _selectively_ forgiving (specifically when the list includes at least\n\t// one valid selector).\n\t// Note that we treat complete lack of support for `:has()` as if it were\n\t// spec-compliant support, which is fine because use of `:has()` in such\n\t// environments will fail in the qSA path and fall back to jQuery traversal\n\t// anyway.\n\tsupport.cssHas = assert( function() {\n\t\ttry {\n\t\t\tdocument.querySelector( \":has(*,:jqfake)\" );\n\t\t\treturn false;\n\t\t} catch ( e ) {\n\t\t\treturn true;\n\t\t}\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter.ID = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter.ID =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find.TAG = function( tag, context ) {\n\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t// DocumentFragment nodes don't have gEBTN\n\t\t} else {\n\t\t\treturn context.querySelectorAll( tag );\n\t\t}\n\t};\n\n\t// Class\n\tExpr.find.CLASS = function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\trbuggyQSA = [];\n\n\t// Build QSA regex\n\t// Regex strategy adopted from Diego Perini\n\tassert( function( el ) {\n\n\t\tvar input;\n\n\t\tdocumentElement.appendChild( el ).innerHTML =\n\t\t\t\"<a id='\" + expando + \"' href='' disabled='disabled'></a>\" +\n\t\t\t\"<select id='\" + expando + \"-\\r\\\\' disabled='disabled'>\" +\n\t\t\t\"<option selected=''></option></select>\";\n\n\t\t// Support: iOS <=7 - 8 only\n\t\t// Boolean attributes and \"value\" are not treated correctly in some XML documents\n\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t}\n\n\t\t// Support: iOS <=7 - 8 only\n\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\trbuggyQSA.push( \"~=\" );\n\t\t}\n\n\t\t// Support: iOS 8 only\n\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t}\n\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\trbuggyQSA.push( \":checked\" );\n\t\t}\n\n\t\t// Support: Windows 8 Native Apps\n\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tdocumentElement.appendChild( el ).disabled = true;\n\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t}\n\n\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t// Adding a temporary attribute to the document before the selection works\n\t\t// around the issue.\n\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"name\", \"\" );\n\t\tel.appendChild( input );\n\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t}\n\t} );\n\n\tif ( !support.cssHas ) {\n\n\t\t// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n\t\t// Our regular `try-catch` mechanism fails to detect natively-unsupported\n\t\t// pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\n\t\t// in browsers that parse the `:has()` argument as a forgiving selector list.\n\t\t// https://drafts.csswg.org/selectors/#relational now requires the argument\n\t\t// to be parsed unforgivingly, but browsers have not yet fully adjusted.\n\t\trbuggyQSA.push( \":has\" );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = function( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a === document || a.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b === document || b.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t};\n\n\treturn document;\n}\n\nfind.matches = function( expr, elements ) {\n\treturn find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn find( expr, document, null, [ elem ] ).length > 0;\n};\n\nfind.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn jQuery.contains( context, elem );\n};\n\n\nfind.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (see trac-13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\tif ( val !== undefined ) {\n\t\treturn val;\n\t}\n\n\treturn elem.getAttribute( name );\n};\n\nfind.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\t//\n\t// Support: Android <=4.0+\n\t// Testing for detecting duplicates is unpredictable so instead assume we can't\n\t// depend on duplicate detection in all browsers without a stable sort.\n\thasDuplicate = !support.sortStable;\n\tsortInput = !support.sortStable && slice.call( results, 0 );\n\tsort.call( results, sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tsplice.call( results, duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\njQuery.fn.uniqueSort = function() {\n\treturn this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );\n};\n\nExpr = jQuery.expr = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\tATTR: function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n\t\t\t\t.replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\tCHILD: function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n\t\t\t\t);\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\tPSEUDO: function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\tTAG: function( nodeNameSelector ) {\n\t\t\tvar expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn nodeName( elem, expectedNodeName );\n\t\t\t\t};\n\t\t},\n\n\t\tCLASS: function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n\t\t\t\t\t\"(\" + whitespace + \"|$)\" ) ) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\tATTR: function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = find.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\tif ( operator === \"=\" ) {\n\t\t\t\t\treturn result === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"!=\" ) {\n\t\t\t\t\treturn result !== check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"^=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) === 0;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"*=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"$=\" ) {\n\t\t\t\t\treturn check && result.slice( -check.length ) === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"~=\" ) {\n\t\t\t\t\treturn ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n\t\t\t\t\t\t.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"|=\" ) {\n\t\t\t\t\treturn result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t};\n\t\t},\n\n\t\tCHILD: function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\touterCache = parent[ expando ] || ( parent[ expando ] = {} );\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\t\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\t\t\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\tPSEUDO: function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// https://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tfind.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as jQuery does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf.call( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\tnot: markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrimCSS, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element\n\t\t\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\thas: markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn find( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\tcontains: markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// https://www.w3.org/TR/selectors/#lang-pseudo\n\t\tlang: markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tfind.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\ttarget: function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\troot: function( elem ) {\n\t\t\treturn elem === documentElement;\n\t\t},\n\n\t\tfocus: function( elem ) {\n\t\t\treturn elem === safeActiveElement() &&\n\t\t\t\tdocument.hasFocus() &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\tenabled: createDisabledPseudo( false ),\n\t\tdisabled: createDisabledPseudo( true ),\n\n\t\tchecked: function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\treturn ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n\t\t\t\t( nodeName( elem, \"option\" ) && !!elem.selected );\n\t\t},\n\n\t\tselected: function( elem ) {\n\n\t\t\t// Support: IE <=11+\n\t\t\t// Accessing the selectedIndex property\n\t\t\t// forces the browser to treat the default option as\n\t\t\t// selected when in an optgroup.\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\tempty: function( elem ) {\n\n\t\t\t// https://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tparent: function( elem ) {\n\t\t\treturn !Expr.pseudos.empty( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\theader: function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\tinput: function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\tbutton: function( elem ) {\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n\t\t\t\tnodeName( elem, \"button\" );\n\t\t},\n\n\t\ttext: function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"text\" &&\n\n\t\t\t\t// Support: IE <10 only\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear\n\t\t\t\t// with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\tfirst: createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\tlast: createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\teq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\teven: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\todd: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tlt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i;\n\n\t\t\tif ( argument < 0 ) {\n\t\t\t\ti = argument + length;\n\t\t\t} else if ( argument > length ) {\n\t\t\t\ti = length;\n\t\t\t} else {\n\t\t\t\ti = argument;\n\t\t\t}\n\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tgt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rleadingCombinator.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrimCSS, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\tif ( parseOnly ) {\n\t\treturn soFar.length;\n\t}\n\n\treturn soFar ?\n\t\tfind.error( selector ) :\n\n\t\t// Cache the tokens\n\t\ttokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\tif ( skip && nodeName( elem, skip ) ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = outerCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\touterCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tfind( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem, matcherOut,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed ||\n\t\t\t\tmultipleContexts( selector || \"*\",\n\t\t\t\t\tcontext.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems;\n\n\t\tif ( matcher ) {\n\n\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter\n\t\t\t// or preexisting results,\n\t\t\tmatcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults;\n\n\t\t\t// Find primary matches\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t} else {\n\t\t\tmatcherOut = matcherIn;\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf.call( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tvar ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element\n\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 )\n\t\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrimCSS, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: iOS <=7 - 9 only\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching\n\t\t\t// elements by id. (see trac-14142)\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tjQuery.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find.ID(\n\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\tcontext\n\t\t\t) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) &&\n\t\t\t\t\t\ttestContext( context.parentNode ) || context\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n}\n\n// One-time assignments\n\n// Support: Android <=4.0 - 4.1+\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Android <=4.0 - 4.1+\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\njQuery.find = find;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.unique = jQuery.uniqueSort;\n\n// These have always been private, but they used to be documented\n// as part of Sizzle so let's maintain them in the 3.x line\n// for backwards compatibility purposes.\nfind.compile = compile;\nfind.select = select;\nfind.setDocument = setDocument;\n\nfind.escape = jQuery.escapeSelector;\nfind.getText = jQuery.text;\nfind.isXML = jQuery.isXMLDoc;\nfind.selectors = jQuery.expr;\nfind.support = jQuery.support;\nfind.uniqueSort = jQuery.uniqueSort;\n\n\t/* eslint-enable */\n\n} )();\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to jQuery#find\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.error );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the error, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getErrorHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getErrorHook();\n\n\t\t\t\t\t\t\t\t// The deprecated alias of the above. While the name suggests\n\t\t\t\t\t\t\t\t// returning the stack, not an error instance, jQuery just passes\n\t\t\t\t\t\t\t\t// it directly to `console.warn` so both will work; an instance\n\t\t\t\t\t\t\t\t// just better cooperates with source maps.\n\t\t\t\t\t\t\t\t} else if ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error\n// captured before the async barrier to get the original error cause\n// which may otherwise be hidden.\njQuery.Deferred.exceptionHook = function( error, asyncError ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message,\n\t\t\terror.stack, asyncError );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", true );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, isSetup ) {\n\n\t// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !isSetup ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\tif ( !saved ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tdataPriv.set( this, type, false );\n\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering\n\t\t\t\t// the native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, jQuery.event.trigger(\n\t\t\t\t\tsaved[ 0 ],\n\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\tthis\n\t\t\t\t) );\n\n\t\t\t\t// Abort handling of the native event by all jQuery handlers while allowing\n\t\t\t\t// native handlers on the same element to run. On target, this is achieved\n\t\t\t\t// by stopping immediate propagation just on the jQuery event. However,\n\t\t\t\t// the native event is re-wrapped by a jQuery one on each level of the\n\t\t\t\t// propagation so the only way to stop it for jQuery is to stop it for\n\t\t\t\t// everyone via native `stopPropagation()`. This is not a problem for\n\t\t\t\t// focus/blur which don't bubble, but it does also stop click on checkboxes\n\t\t\t\t// and radios. We accept this limitation.\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.isImmediatePropagationStopped = returnTrue;\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\n\tfunction focusMappedHandler( nativeEvent ) {\n\t\tif ( document.documentMode ) {\n\n\t\t\t// Support: IE 11+\n\t\t\t// Attach a single focusin/focusout handler on the document while someone wants\n\t\t\t// focus/blur. This is because the former are synchronous in IE while the latter\n\t\t\t// are async. In other browsers, all those handlers are invoked synchronously.\n\n\t\t\t// `handle` from private data would already wrap the event, but we need\n\t\t\t// to change the `type` here.\n\t\t\tvar handle = dataPriv.get( this, \"handle\" ),\n\t\t\t\tevent = jQuery.event.fix( nativeEvent );\n\t\t\tevent.type = nativeEvent.type === \"focusin\" ? \"focus\" : \"blur\";\n\t\t\tevent.isSimulated = true;\n\n\t\t\t// First, handle focusin/focusout\n\t\t\thandle( nativeEvent );\n\n\t\t\t// ...then, handle focus/blur\n\t\t\t//\n\t\t\t// focus/blur don't bubble while focusin/focusout do; simulate the former by only\n\t\t\t// invoking the handler at the lower level.\n\t\t\tif ( event.target === event.currentTarget ) {\n\n\t\t\t\t// The setup part calls `leverageNative`, which, in turn, calls\n\t\t\t\t// `jQuery.event.add`, so event handle will already have been set\n\t\t\t\t// by this point.\n\t\t\t\thandle( event );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// For non-IE browsers, attach a single capturing handler on the document\n\t\t\t// while someone wants focusin/focusout.\n\t\t\tjQuery.event.simulate( delegateType, nativeEvent.target,\n\t\t\t\tjQuery.event.fix( nativeEvent ) );\n\t\t}\n\t}\n\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\tvar attaches;\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, true );\n\n\t\t\tif ( document.documentMode ) {\n\n\t\t\t\t// Support: IE 9 - 11+\n\t\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\t\tattaches = dataPriv.get( this, delegateType );\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t}\n\t\t\t\tdataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );\n\t\t\t} else {\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar attaches;\n\n\t\t\tif ( document.documentMode ) {\n\t\t\t\tattaches = dataPriv.get( this, delegateType ) - 1;\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t\tdataPriv.remove( this, delegateType );\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.set( this, delegateType, attaches );\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Return false to indicate standard teardown should be applied\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n\n\t// Support: Firefox <=44\n\t// Firefox doesn't have focus(in | out) events\n\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\t//\n\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n\t// focus(in | out) events fire after focus & blur events,\n\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\t//\n\t// Support: IE 9 - 11+\n\t// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,\n\t// attach a single handler for both events in IE.\n\tjQuery.event.special[ delegateType ] = {\n\t\tsetup: function() {\n\n\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType );\n\n\t\t\t// Support: IE 9 - 11+\n\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.addEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );\n\t\t},\n\t\tteardown: function() {\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType ) - 1;\n\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.removeEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( dataHolder, delegateType );\n\t\t\t} else {\n\t\t\t\tdataPriv.set( dataHolder, delegateType, attaches );\n\t\t\t}\n\t\t}\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew jQuery#find here for performance reasons:\n\t\t\t// https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\n\t\t// Support: IE <=9 - 11+\n\t\t// IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n\t\t// it's only available as `\"cssFloat\"`. We no longer modify properties\n\t\t// sent to `.css()` apart from camelCasing, so we need to check both.\n\t\t// Normally, this would create difference in behavior: if\n\t\t// `getPropertyValue` returns an empty string, the value returned\n\t\t// by `.css()` would be `undefined`. This is usually the case for\n\t\t// disconnected elements. However, in IE even disconnected elements\n\t\t// with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( isCustomProp && ret ) {\n\n\t\t\t// Support: Firefox 105+, Chrome <=105+\n\t\t\t// Spec requires trimming whitespace for custom properties (gh-4926).\n\t\t\t// Firefox only trims leading whitespace. Chrome just collapses\n\t\t\t// both leading & trailing whitespace to a single space.\n\t\t\t//\n\t\t\t// Fall back to `undefined` if empty string returned.\n\t\t\t// This collapses a missing definition with property defined\n\t\t\t// and set to an empty string but there's no standard API\n\t\t\t// allowing us to differentiate them without a performance penalty\n\t\t\t// and returning `undefined` aligns with older jQuery.\n\t\t\t//\n\t\t\t// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" ) || undefined;\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0,\n\t\tmarginDelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\t// Count margin delta separately to only add it after scroll gutter adjustment.\n\t\t// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).\n\t\tif ( box === \"margin\" ) {\n\t\t\tmarginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta + marginDelta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\tanimationIterationCount: true,\n\t\taspectRatio: true,\n\t\tborderImageSlice: true,\n\t\tcolumnCount: true,\n\t\tflexGrow: true,\n\t\tflexShrink: true,\n\t\tfontWeight: true,\n\t\tgridArea: true,\n\t\tgridColumn: true,\n\t\tgridColumnEnd: true,\n\t\tgridColumnStart: true,\n\t\tgridRow: true,\n\t\tgridRowEnd: true,\n\t\tgridRowStart: true,\n\t\tlineHeight: true,\n\t\topacity: true,\n\t\torder: true,\n\t\torphans: true,\n\t\tscale: true,\n\t\twidows: true,\n\t\tzIndex: true,\n\t\tzoom: true,\n\n\t\t// SVG-related\n\t\tfillOpacity: true,\n\t\tfloodOpacity: true,\n\t\tstopOpacity: true,\n\t\tstrokeMiterlimit: true,\n\t\tstrokeOpacity: true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","/*!\n  * PhotoSwipe Lightbox 5.3.8 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\nfunction t(t,i,s){const h=document.createElement(i);return t&&(h.className=t),s&&s.appendChild(h),h}function i(t,i,s){t.style.width=\"number\"==typeof i?`${i}px`:i,t.style.height=\"number\"==typeof s?`${s}px`:s}const s=\"idle\",h=\"loading\",e=\"loaded\",n=\"error\";function o(t,i,s=document){let h=[];if(t instanceof Element)h=[t];else if(t instanceof NodeList||Array.isArray(t))h=Array.from(t);else{const e=\"string\"==typeof t?t:i;e&&(h=Array.from(s.querySelectorAll(e)))}return h}function r(){return!(!navigator.vendor||!navigator.vendor.match(/apple/i))}class a{constructor(t,i){this.type=t,this.defaultPrevented=!1,i&&Object.assign(this,i)}preventDefault(){this.defaultPrevented=!0}}class c{constructor(i,s){if(this.element=t(\"pswp__img pswp__img--placeholder\",i?\"img\":\"div\",s),i){const t=this.element;t.decoding=\"async\",t.alt=\"\",t.src=i,t.setAttribute(\"role\",\"presentation\")}this.element.setAttribute(\"aria-hidden\",\"true\")}setDisplayedSize(t,s){this.element&&(\"IMG\"===this.element.tagName?(i(this.element,250,\"auto\"),this.element.style.transformOrigin=\"0 0\",this.element.style.transform=function(t,i,s){let h=`translate3d(${t}px,${i||0}px,0)`;return void 0!==s&&(h+=` scale3d(${s},${s},1)`),h}(0,0,t/250)):i(this.element,t,s))}destroy(){this.element?.parentNode&&this.element.remove(),this.element=null}}class l{constructor(t,i,h){this.instance=i,this.data=t,this.index=h,this.element=void 0,this.placeholder=void 0,this.slide=void 0,this.displayedImageWidth=0,this.displayedImageHeight=0,this.width=Number(this.data.w)||Number(this.data.width)||0,this.height=Number(this.data.h)||Number(this.data.height)||0,this.isAttached=!1,this.hasSlide=!1,this.isDecoding=!1,this.state=s,this.data.type?this.type=this.data.type:this.data.src?this.type=\"image\":this.type=\"html\",this.instance.dispatch(\"contentInit\",{content:this})}removePlaceholder(){this.placeholder&&!this.keepPlaceholder()&&setTimeout((()=>{this.placeholder&&(this.placeholder.destroy(),this.placeholder=void 0)}),1e3)}load(i,s){if(this.slide&&this.usePlaceholder())if(this.placeholder){const t=this.placeholder.element;t&&!t.parentElement&&this.slide.container.prepend(t)}else{const t=this.instance.applyFilters(\"placeholderSrc\",!(!this.data.msrc||!this.slide.isFirstSlide)&&this.data.msrc,this);this.placeholder=new c(t,this.slide.container)}this.element&&!s||this.instance.dispatch(\"contentLoad\",{content:this,isLazy:i}).defaultPrevented||(this.isImageContent()?(this.element=t(\"pswp__img\",\"img\"),this.displayedImageWidth&&this.loadImage(i)):(this.element=t(\"pswp__content\",\"div\"),this.element.innerHTML=this.data.html||\"\"),s&&this.slide&&this.slide.updateContentSize(!0))}loadImage(t){if(!this.isImageContent()||!this.element||this.instance.dispatch(\"contentLoadImage\",{content:this,isLazy:t}).defaultPrevented)return;const i=this.element;this.updateSrcsetSizes(),this.data.srcset&&(i.srcset=this.data.srcset),i.src=this.data.src??\"\",i.alt=this.data.alt??\"\",this.state=h,i.complete?this.onLoaded():(i.onload=()=>{this.onLoaded()},i.onerror=()=>{this.onError()})}setSlide(t){this.slide=t,this.hasSlide=!0,this.instance=t.pswp}onLoaded(){this.state=e,this.slide&&this.element&&(this.instance.dispatch(\"loadComplete\",{slide:this.slide,content:this}),this.slide.isActive&&this.slide.heavyAppended&&!this.element.parentNode&&(this.append(),this.slide.updateContentSize(!0)),this.state!==e&&this.state!==n||this.removePlaceholder())}onError(){this.state=n,this.slide&&(this.displayError(),this.instance.dispatch(\"loadComplete\",{slide:this.slide,isError:!0,content:this}),this.instance.dispatch(\"loadError\",{slide:this.slide,content:this}))}isLoading(){return this.instance.applyFilters(\"isContentLoading\",this.state===h,this)}isError(){return this.state===n}isImageContent(){return\"image\"===this.type}setDisplayedSize(t,s){if(this.element&&(this.placeholder&&this.placeholder.setDisplayedSize(t,s),!this.instance.dispatch(\"contentResize\",{content:this,width:t,height:s}).defaultPrevented&&(i(this.element,t,s),this.isImageContent()&&!this.isError()))){const i=!this.displayedImageWidth&&t;this.displayedImageWidth=t,this.displayedImageHeight=s,i?this.loadImage(!1):this.updateSrcsetSizes(),this.slide&&this.instance.dispatch(\"imageSizeChange\",{slide:this.slide,width:t,height:s,content:this})}}isZoomable(){return this.instance.applyFilters(\"isContentZoomable\",this.isImageContent()&&this.state!==n,this)}updateSrcsetSizes(){if(!this.isImageContent()||!this.element||!this.data.srcset)return;const t=this.element,i=this.instance.applyFilters(\"srcsetSizesWidth\",this.displayedImageWidth,this);(!t.dataset.largestUsedSize||i>parseInt(t.dataset.largestUsedSize,10))&&(t.sizes=i+\"px\",t.dataset.largestUsedSize=String(i))}usePlaceholder(){return this.instance.applyFilters(\"useContentPlaceholder\",this.isImageContent(),this)}lazyLoad(){this.instance.dispatch(\"contentLazyLoad\",{content:this}).defaultPrevented||this.load(!0)}keepPlaceholder(){return this.instance.applyFilters(\"isKeepingPlaceholder\",this.isLoading(),this)}destroy(){this.hasSlide=!1,this.slide=void 0,this.instance.dispatch(\"contentDestroy\",{content:this}).defaultPrevented||(this.remove(),this.placeholder&&(this.placeholder.destroy(),this.placeholder=void 0),this.isImageContent()&&this.element&&(this.element.onload=null,this.element.onerror=null,this.element=void 0))}displayError(){if(this.slide){let i=t(\"pswp__error-msg\",\"div\");i.innerText=this.instance.options?.errorMsg??\"\",i=this.instance.applyFilters(\"contentErrorElement\",i,this),this.element=t(\"pswp__content pswp__error-msg-container\",\"div\"),this.element.appendChild(i),this.slide.container.innerText=\"\",this.slide.container.appendChild(this.element),this.slide.updateContentSize(!0),this.removePlaceholder()}}append(){if(this.isAttached||!this.element)return;if(this.isAttached=!0,this.state===n)return void this.displayError();if(this.instance.dispatch(\"contentAppend\",{content:this}).defaultPrevented)return;const t=\"decode\"in this.element;this.isImageContent()?t&&this.slide&&(!this.slide.isActive||r())?(this.isDecoding=!0,this.element.decode().catch((()=>{})).finally((()=>{this.isDecoding=!1,this.appendImage()}))):this.appendImage():this.slide&&!this.element.parentNode&&this.slide.container.appendChild(this.element)}activate(){!this.instance.dispatch(\"contentActivate\",{content:this}).defaultPrevented&&this.slide&&(this.isImageContent()&&this.isDecoding&&!r()?this.appendImage():this.isError()&&this.load(!1,!0),this.slide.holderElement&&this.slide.holderElement.setAttribute(\"aria-hidden\",\"false\"))}deactivate(){this.instance.dispatch(\"contentDeactivate\",{content:this}),this.slide&&this.slide.holderElement&&this.slide.holderElement.setAttribute(\"aria-hidden\",\"true\")}remove(){this.isAttached=!1,this.instance.dispatch(\"contentRemove\",{content:this}).defaultPrevented||(this.element&&this.element.parentNode&&this.element.remove(),this.placeholder&&this.placeholder.element&&this.placeholder.element.remove())}appendImage(){this.isAttached&&(this.instance.dispatch(\"contentAppendImage\",{content:this}).defaultPrevented||(this.slide&&this.element&&!this.element.parentNode&&this.slide.container.appendChild(this.element),this.state!==e&&this.state!==n||this.removePlaceholder()))}}function d(t,i,s,h,e){let n=0;if(i.paddingFn)n=i.paddingFn(s,h,e)[t];else if(i.padding)n=i.padding[t];else{const s=\"padding\"+t[0].toUpperCase()+t.slice(1);i[s]&&(n=i[s])}return Number(n)||0}class u{constructor(t,i,s,h){this.pswp=h,this.options=t,this.itemData=i,this.index=s,this.panAreaSize=null,this.elementSize=null,this.fit=1,this.fill=1,this.vFill=1,this.initial=1,this.secondary=1,this.max=1,this.min=1}update(t,i,s){const h={x:t,y:i};this.elementSize=h,this.panAreaSize=s;const e=s.x/h.x,n=s.y/h.y;this.fit=Math.min(1,e<n?e:n),this.fill=Math.min(1,e>n?e:n),this.vFill=Math.min(1,n),this.initial=this.t(),this.secondary=this.i(),this.max=Math.max(this.initial,this.secondary,this.o()),this.min=Math.min(this.fit,this.initial,this.secondary),this.pswp&&this.pswp.dispatch(\"zoomLevelsUpdate\",{zoomLevels:this,slideData:this.itemData})}l(t){const i=t+\"ZoomLevel\",s=this.options[i];if(s)return\"function\"==typeof s?s(this):\"fill\"===s?this.fill:\"fit\"===s?this.fit:Number(s)}i(){let t=this.l(\"secondary\");return t||(t=Math.min(1,3*this.fit),this.elementSize&&t*this.elementSize.x>4e3&&(t=4e3/this.elementSize.x),t)}t(){return this.l(\"initial\")||this.fit}o(){return this.l(\"max\")||Math.max(1,4*this.fit)}}function p(t,i,s){const h=i.createContentFromData(t,s);let e;const{options:n}=i;if(n){let o;e=new u(n,t,-1),o=i.pswp?i.pswp.viewportSize:function(t,i){if(t.getViewportSizeFn){const s=t.getViewportSizeFn(t,i);if(s)return s}return{x:document.documentElement.clientWidth,y:window.innerHeight}}(n,i);const r=function(t,i,s,h){return{x:i.x-d(\"left\",t,i,s,h)-d(\"right\",t,i,s,h),y:i.y-d(\"top\",t,i,s,h)-d(\"bottom\",t,i,s,h)}}(n,o,t,s);e.update(h.width,h.height,r)}return h.lazyLoad(),e&&h.setDisplayedSize(Math.ceil(h.width*e.initial),Math.ceil(h.height*e.initial)),h}class m extends class extends class{constructor(){this.u={},this.p={},this.pswp=void 0,this.options=void 0}addFilter(t,i,s=100){this.p[t]||(this.p[t]=[]),this.p[t]?.push({fn:i,priority:s}),this.p[t]?.sort(((t,i)=>t.priority-i.priority)),this.pswp?.addFilter(t,i,s)}removeFilter(t,i){this.p[t]&&(this.p[t]=this.p[t].filter((t=>t.fn!==i))),this.pswp&&this.pswp.removeFilter(t,i)}applyFilters(t,...i){return this.p[t]?.forEach((t=>{i[0]=t.fn.apply(this,i)})),i[0]}on(t,i){this.u[t]||(this.u[t]=[]),this.u[t]?.push(i),this.pswp?.on(t,i)}off(t,i){this.u[t]&&(this.u[t]=this.u[t].filter((t=>i!==t))),this.pswp?.off(t,i)}dispatch(t,i){if(this.pswp)return this.pswp.dispatch(t,i);const s=new a(t,i);return this.u[t]?.forEach((t=>{t.call(this,s)})),s}}{getNumItems(){let t=0;const i=this.options?.dataSource;i&&\"length\"in i?t=i.length:i&&\"gallery\"in i&&(i.items||(i.items=this.m(i.gallery)),i.items&&(t=i.items.length));const s=this.dispatch(\"numItems\",{dataSource:i,numItems:t});return this.applyFilters(\"numItems\",s.numItems,i)}createContentFromData(t,i){return new l(t,this,i)}getItemData(t){const i=this.options?.dataSource;let s={};Array.isArray(i)?s=i[t]:i&&\"gallery\"in i&&(i.items||(i.items=this.m(i.gallery)),s=i.items[t]);let h=s;h instanceof Element&&(h=this.g(h));const e=this.dispatch(\"itemData\",{itemData:h||{},index:t});return this.applyFilters(\"itemData\",e.itemData,t)}m(t){return this.options?.children||this.options?.childSelector?o(this.options.children,this.options.childSelector,t)||[]:[t]}g(t){const i={element:t},s=\"A\"===t.tagName?t:t.querySelector(\"a\");if(s){i.src=s.dataset.pswpSrc||s.href,s.dataset.pswpSrcset&&(i.srcset=s.dataset.pswpSrcset),i.width=s.dataset.pswpWidth?parseInt(s.dataset.pswpWidth,10):0,i.height=s.dataset.pswpHeight?parseInt(s.dataset.pswpHeight,10):0,i.w=i.width,i.h=i.height,s.dataset.pswpType&&(i.type=s.dataset.pswpType);const h=t.querySelector(\"img\");h&&(i.msrc=h.currentSrc||h.src,i.alt=h.getAttribute(\"alt\")??\"\"),(s.dataset.pswpCropped||s.dataset.cropped)&&(i.thumbCropped=!0)}return this.applyFilters(\"domItemData\",i,t,s)}lazyLoadData(t,i){return p(t,this,i)}}{constructor(t){super(),this.options=t||{},this.v=0,this.shouldOpen=!1,this._=void 0,this.onThumbnailsClick=this.onThumbnailsClick.bind(this)}init(){o(this.options.gallery,this.options.gallerySelector).forEach((t=>{t.addEventListener(\"click\",this.onThumbnailsClick,!1)}))}onThumbnailsClick(t){if(function(t){return\"button\"in t&&1===t.button||t.ctrlKey||t.metaKey||t.altKey||t.shiftKey}(t)||window.pswp)return;let i={x:t.clientX,y:t.clientY};i.x||i.y||(i=null);let s=this.getClickedIndex(t);s=this.applyFilters(\"clickedIndex\",s,t,this);const h={gallery:t.currentTarget};s>=0&&(t.preventDefault(),this.loadAndOpen(s,h,i))}getClickedIndex(t){if(this.options.getClickedIndexFn)return this.options.getClickedIndexFn.call(this,t);const i=t.target,s=o(this.options.children,this.options.childSelector,t.currentTarget).findIndex((t=>t===i||t.contains(i)));return-1!==s?s:this.options.children||this.options.childSelector?-1:0}loadAndOpen(t,i,s){return!window.pswp&&(this.options.index=t,this.options.initialPointerPos=s,this.shouldOpen=!0,this.preload(t,i),!0)}preload(t,i){const{options:s}=this;i&&(s.dataSource=i);const h=[],e=typeof s.pswpModule;if(\"function\"==typeof(n=s.pswpModule)&&n.prototype&&n.prototype.goTo)h.push(Promise.resolve(s.pswpModule));else{if(\"string\"===e)throw new Error(\"pswpModule as string is no longer supported\");if(\"function\"!==e)throw new Error(\"pswpModule is not valid\");h.push(s.pswpModule())}var n;\"function\"==typeof s.openPromise&&h.push(s.openPromise()),!1!==s.preloadFirstSlide&&t>=0&&(this._=function(t,i){const s=i.getItemData(t);if(!i.dispatch(\"lazyLoadSlide\",{index:t,itemData:s}).defaultPrevented)return p(s,i,t)}(t,this));const o=++this.v;Promise.all(h).then((t=>{if(this.shouldOpen){const i=t[0];this.I(i,o)}}))}I(t,i){if(i!==this.v&&this.shouldOpen)return;if(this.shouldOpen=!1,window.pswp)return;const s=\"object\"==typeof t?new t.default(this.options):new t(this.options);this.pswp=s,window.pswp=s,Object.keys(this.u).forEach((t=>{this.u[t]?.forEach((i=>{s.on(t,i)}))})),Object.keys(this.p).forEach((t=>{this.p[t]?.forEach((i=>{s.addFilter(t,i.fn,i.priority)}))})),this._&&(s.contentLoader.addToCache(this._),this._=void 0),s.on(\"destroy\",(()=>{this.pswp=void 0,delete window.pswp})),s.init()}destroy(){this.pswp?.destroy(),this.shouldOpen=!1,this.u={},o(this.options.gallery,this.options.gallerySelector).forEach((t=>{t.removeEventListener(\"click\",this.onThumbnailsClick,!1)}))}}export{m as default};\n","/*!\n  * PhotoSwipe 5.3.8 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\nfunction t(t,i,s){const h=document.createElement(i);return t&&(h.className=t),s&&s.appendChild(h),h}function i(t,i){return t.x=i.x,t.y=i.y,void 0!==i.id&&(t.id=i.id),t}function s(t){t.x=Math.round(t.x),t.y=Math.round(t.y)}function h(t,i){const s=Math.abs(t.x-i.x),h=Math.abs(t.y-i.y);return Math.sqrt(s*s+h*h)}function e(t,i){return t.x===i.x&&t.y===i.y}function n(t,i,s){return Math.min(Math.max(t,i),s)}function o(t,i,s){let h=`translate3d(${t}px,${i||0}px,0)`;return void 0!==s&&(h+=` scale3d(${s},${s},1)`),h}function r(t,i,s,h){t.style.transform=o(i,s,h)}function a(t,i,s,h){t.style.transition=i?`${i} ${s}ms ${h||\"cubic-bezier(.4,0,.22,1)\"}`:\"none\"}function c(t,i,s){t.style.width=\"number\"==typeof i?`${i}px`:i,t.style.height=\"number\"==typeof s?`${s}px`:s}const l=\"idle\",p=\"loading\",u=\"loaded\",d=\"error\";function m(){return!(!navigator.vendor||!navigator.vendor.match(/apple/i))}let f=!1;try{window.addEventListener(\"test\",null,Object.defineProperty({},\"passive\",{get:()=>{f=!0}}))}catch(t){}class w{constructor(){this.t=[]}add(t,i,s,h){this.i(t,i,s,h)}remove(t,i,s,h){this.i(t,i,s,h,!0)}removeAll(){this.t.forEach((t=>{this.i(t.target,t.type,t.listener,t.passive,!0,!0)})),this.t=[]}i(t,i,s,h,e,n){if(!t)return;const o=e?\"removeEventListener\":\"addEventListener\";i.split(\" \").forEach((i=>{if(i){n||(e?this.t=this.t.filter((h=>h.type!==i||h.listener!==s||h.target!==t)):this.t.push({target:t,type:i,listener:s,passive:h}));const r=!!f&&{passive:h||!1};t[o](i,s,r)}}))}}function g(t,i){if(t.getViewportSizeFn){const s=t.getViewportSizeFn(t,i);if(s)return s}return{x:document.documentElement.clientWidth,y:window.innerHeight}}function v(t,i,s,h,e){let n=0;if(i.paddingFn)n=i.paddingFn(s,h,e)[t];else if(i.padding)n=i.padding[t];else{const s=\"padding\"+t[0].toUpperCase()+t.slice(1);i[s]&&(n=i[s])}return Number(n)||0}function y(t,i,s,h){return{x:i.x-v(\"left\",t,i,s,h)-v(\"right\",t,i,s,h),y:i.y-v(\"top\",t,i,s,h)-v(\"bottom\",t,i,s,h)}}class _{constructor(t){this.slide=t,this.currZoomLevel=1,this.center={x:0,y:0},this.max={x:0,y:0},this.min={x:0,y:0}}update(t){this.currZoomLevel=t,this.slide.width?(this.o(\"x\"),this.o(\"y\"),this.slide.pswp.dispatch(\"calcBounds\",{slide:this.slide})):this.reset()}o(t){const{pswp:i}=this.slide,s=this.slide[\"x\"===t?\"width\":\"height\"]*this.currZoomLevel,h=v(\"x\"===t?\"left\":\"top\",i.options,i.viewportSize,this.slide.data,this.slide.index),e=this.slide.panAreaSize[t];this.center[t]=Math.round((e-s)/2)+h,this.max[t]=s>e?Math.round(e-s)+h:this.center[t],this.min[t]=s>e?h:this.center[t]}reset(){this.center.x=0,this.center.y=0,this.max.x=0,this.max.y=0,this.min.x=0,this.min.y=0}correctPan(t,i){return n(i,this.max[t],this.min[t])}}class x{constructor(t,i,s,h){this.pswp=h,this.options=t,this.itemData=i,this.index=s,this.panAreaSize=null,this.elementSize=null,this.fit=1,this.fill=1,this.vFill=1,this.initial=1,this.secondary=1,this.max=1,this.min=1}update(t,i,s){const h={x:t,y:i};this.elementSize=h,this.panAreaSize=s;const e=s.x/h.x,n=s.y/h.y;this.fit=Math.min(1,e<n?e:n),this.fill=Math.min(1,e>n?e:n),this.vFill=Math.min(1,n),this.initial=this.l(),this.secondary=this.p(),this.max=Math.max(this.initial,this.secondary,this.u()),this.min=Math.min(this.fit,this.initial,this.secondary),this.pswp&&this.pswp.dispatch(\"zoomLevelsUpdate\",{zoomLevels:this,slideData:this.itemData})}m(t){const i=t+\"ZoomLevel\",s=this.options[i];if(s)return\"function\"==typeof s?s(this):\"fill\"===s?this.fill:\"fit\"===s?this.fit:Number(s)}p(){let t=this.m(\"secondary\");return t||(t=Math.min(1,3*this.fit),this.elementSize&&t*this.elementSize.x>4e3&&(t=4e3/this.elementSize.x),t)}l(){return this.m(\"initial\")||this.fit}u(){return this.m(\"max\")||Math.max(1,4*this.fit)}}class b{constructor(i,s,h){this.data=i,this.index=s,this.pswp=h,this.isActive=s===h.currIndex,this.currentResolution=0,this.panAreaSize={x:0,y:0},this.pan={x:0,y:0},this.isFirstSlide=this.isActive&&!h.opener.isOpen,this.zoomLevels=new x(h.options,i,s,h),this.pswp.dispatch(\"gettingData\",{slide:this,data:this.data,index:s}),this.content=this.pswp.contentLoader.getContentBySlide(this),this.container=t(\"pswp__zoom-wrap\",\"div\"),this.holderElement=null,this.currZoomLevel=1,this.width=this.content.width,this.height=this.content.height,this.heavyAppended=!1,this.bounds=new _(this),this.prevDisplayedWidth=-1,this.prevDisplayedHeight=-1,this.pswp.dispatch(\"slideInit\",{slide:this})}setIsActive(t){t&&!this.isActive?this.activate():!t&&this.isActive&&this.deactivate()}append(t){this.holderElement=t,this.container.style.transformOrigin=\"0 0\",this.data&&(this.calculateSize(),this.load(),this.updateContentSize(),this.appendHeavy(),this.holderElement.appendChild(this.container),this.zoomAndPanToInitial(),this.pswp.dispatch(\"firstZoomPan\",{slide:this}),this.applyCurrentZoomPan(),this.pswp.dispatch(\"afterSetContent\",{slide:this}),this.isActive&&this.activate())}load(){this.content.load(!1),this.pswp.dispatch(\"slideLoad\",{slide:this})}appendHeavy(){const{pswp:t}=this;!this.heavyAppended&&t.opener.isOpen&&!t.mainScroll.isShifted()&&(this.isActive,1)&&(this.pswp.dispatch(\"appendHeavy\",{slide:this}).defaultPrevented||(this.heavyAppended=!0,this.content.append(),this.pswp.dispatch(\"appendHeavyContent\",{slide:this})))}activate(){this.isActive=!0,this.appendHeavy(),this.content.activate(),this.pswp.dispatch(\"slideActivate\",{slide:this})}deactivate(){this.isActive=!1,this.content.deactivate(),this.currZoomLevel!==this.zoomLevels.initial&&this.calculateSize(),this.currentResolution=0,this.zoomAndPanToInitial(),this.applyCurrentZoomPan(),this.updateContentSize(),this.pswp.dispatch(\"slideDeactivate\",{slide:this})}destroy(){this.content.hasSlide=!1,this.content.remove(),this.container.remove(),this.pswp.dispatch(\"slideDestroy\",{slide:this})}resize(){this.currZoomLevel!==this.zoomLevels.initial&&this.isActive?(this.calculateSize(),this.bounds.update(this.currZoomLevel),this.panTo(this.pan.x,this.pan.y)):(this.calculateSize(),this.currentResolution=0,this.zoomAndPanToInitial(),this.applyCurrentZoomPan(),this.updateContentSize())}updateContentSize(t){const i=this.currentResolution||this.zoomLevels.initial;if(!i)return;const s=Math.round(this.width*i)||this.pswp.viewportSize.x,h=Math.round(this.height*i)||this.pswp.viewportSize.y;(this.sizeChanged(s,h)||t)&&this.content.setDisplayedSize(s,h)}sizeChanged(t,i){return(t!==this.prevDisplayedWidth||i!==this.prevDisplayedHeight)&&(this.prevDisplayedWidth=t,this.prevDisplayedHeight=i,!0)}getPlaceholderElement(){return this.content.placeholder?.element}zoomTo(t,i,h,e){const{pswp:o}=this;if(!this.isZoomable()||o.mainScroll.isShifted())return;o.dispatch(\"beforeZoomTo\",{destZoomLevel:t,centerPoint:i,transitionDuration:h}),o.animations.stopAllPan();const r=this.currZoomLevel;e||(t=n(t,this.zoomLevels.min,this.zoomLevels.max)),this.setZoomLevel(t),this.pan.x=this.calculateZoomToPanOffset(\"x\",i,r),this.pan.y=this.calculateZoomToPanOffset(\"y\",i,r),s(this.pan);const a=()=>{this.g(t),this.applyCurrentZoomPan()};h?o.animations.startTransition({isPan:!0,name:\"zoomTo\",target:this.container,transform:this.getCurrentTransform(),onComplete:a,duration:h,easing:o.options.easing}):a()}toggleZoom(t){this.zoomTo(this.currZoomLevel===this.zoomLevels.initial?this.zoomLevels.secondary:this.zoomLevels.initial,t,this.pswp.options.zoomAnimationDuration)}setZoomLevel(t){this.currZoomLevel=t,this.bounds.update(this.currZoomLevel)}calculateZoomToPanOffset(t,i,s){if(0===this.bounds.max[t]-this.bounds.min[t])return this.bounds.center[t];i||(i=this.pswp.getViewportCenterPoint()),s||(s=this.zoomLevels.initial);const h=this.currZoomLevel/s;return this.bounds.correctPan(t,(this.pan[t]-i[t])*h+i[t])}panTo(t,i){this.pan.x=this.bounds.correctPan(\"x\",t),this.pan.y=this.bounds.correctPan(\"y\",i),this.applyCurrentZoomPan()}isPannable(){return Boolean(this.width)&&this.currZoomLevel>this.zoomLevels.fit}isZoomable(){return Boolean(this.width)&&this.content.isZoomable()}applyCurrentZoomPan(){this.v(this.pan.x,this.pan.y,this.currZoomLevel),this===this.pswp.currSlide&&this.pswp.dispatch(\"zoomPanUpdate\",{slide:this})}zoomAndPanToInitial(){this.currZoomLevel=this.zoomLevels.initial,this.bounds.update(this.currZoomLevel),i(this.pan,this.bounds.center),this.pswp.dispatch(\"initialZoomPan\",{slide:this})}v(t,i,s){s/=this.currentResolution||this.zoomLevels.initial,r(this.container,t,i,s)}calculateSize(){const{pswp:t}=this;i(this.panAreaSize,y(t.options,t.viewportSize,this.data,this.index)),this.zoomLevels.update(this.width,this.height,this.panAreaSize),t.dispatch(\"calcSlideSize\",{slide:this})}getCurrentTransform(){const t=this.currZoomLevel/(this.currentResolution||this.zoomLevels.initial);return o(this.pan.x,this.pan.y,t)}g(t){t!==this.currentResolution&&(this.currentResolution=t,this.updateContentSize(),this.pswp.dispatch(\"resolutionChanged\"))}}class S{constructor(t){this.gestures=t,this.pswp=t.pswp,this.startPan={x:0,y:0}}start(){this.pswp.currSlide&&i(this.startPan,this.pswp.currSlide.pan),this.pswp.animations.stopAll()}change(){const{p1:t,prevP1:i,dragAxis:h}=this.gestures,{currSlide:e}=this.pswp;if(\"y\"===h&&this.pswp.options.closeOnVerticalDrag&&e&&e.currZoomLevel<=e.zoomLevels.fit&&!this.gestures.isMultitouch){const s=e.pan.y+(t.y-i.y);if(!this.pswp.dispatch(\"verticalDrag\",{panY:s}).defaultPrevented){this._(\"y\",s,.6);const t=1-Math.abs(this.S(e.pan.y));this.pswp.applyBgOpacity(t),e.applyCurrentZoomPan()}}else{this.M(\"x\")||(this.M(\"y\"),e&&(s(e.pan),e.applyCurrentZoomPan()))}}end(){const{velocity:t}=this.gestures,{mainScroll:i,currSlide:s}=this.pswp;let h=0;if(this.pswp.animations.stopAll(),i.isShifted()){const s=(i.x-i.getCurrSlideX())/this.pswp.viewportSize.x;t.x<-.5&&s<0||t.x<.1&&s<-.5?(h=1,t.x=Math.min(t.x,0)):(t.x>.5&&s>0||t.x>-.1&&s>.5)&&(h=-1,t.x=Math.max(t.x,0)),i.moveIndexBy(h,!0,t.x)}s&&s.currZoomLevel>s.zoomLevels.max||this.gestures.isMultitouch?this.gestures.zoomLevels.correctZoomPan(!0):(this.P(\"x\"),this.P(\"y\"))}P(t){const{velocity:i}=this.gestures,{currSlide:s}=this.pswp;if(!s)return;const{pan:h,bounds:e}=s,o=h[t],r=this.pswp.bgOpacity<1&&\"y\"===t,a=o+function(t,i){return t*i/(1-i)}(i[t],.995);if(r){const t=this.S(o),i=this.S(a);if(t<0&&i<-.4||t>0&&i>.4)return void this.pswp.close()}const c=e.correctPan(t,a);if(o===c)return;const l=c===a?1:.82,p=this.pswp.bgOpacity,u=c-o;this.pswp.animations.startSpring({name:\"panGesture\"+t,isPan:!0,start:o,end:c,velocity:i[t],dampingRatio:l,onUpdate:i=>{if(r&&this.pswp.bgOpacity<1){const t=1-(c-i)/u;this.pswp.applyBgOpacity(n(p+(1-p)*t,0,1))}h[t]=Math.floor(i),s.applyCurrentZoomPan()}})}M(t){const{p1:i,dragAxis:s,prevP1:h,isMultitouch:e}=this.gestures,{currSlide:n,mainScroll:o}=this.pswp,r=i[t]-h[t],a=o.x+r;if(!r||!n)return!1;if(\"x\"===t&&!n.isPannable()&&!e)return o.moveTo(a,!0),!0;const{bounds:c}=n,l=n.pan[t]+r;if(this.pswp.options.allowPanToNext&&\"x\"===s&&\"x\"===t&&!e){const i=o.getCurrSlideX(),s=o.x-i,h=r>0,e=!h;if(l>c.min[t]&&h){if(c.min[t]<=this.startPan[t])return o.moveTo(a,!0),!0;this._(t,l)}else if(l<c.max[t]&&e){if(this.startPan[t]<=c.max[t])return o.moveTo(a,!0),!0;this._(t,l)}else if(0!==s){if(s>0)return o.moveTo(Math.max(a,i),!0),!0;if(s<0)return o.moveTo(Math.min(a,i),!0),!0}else this._(t,l)}else\"y\"===t&&(o.isShifted()||c.min.y===c.max.y)||this._(t,l);return!1}S(t){return(t-(this.pswp.currSlide?.bounds.center.y??0))/(this.pswp.viewportSize.y/3)}_(t,i,s){const{currSlide:h}=this.pswp;if(!h)return;const{pan:e,bounds:n}=h;if(n.correctPan(t,i)!==i||s){const h=Math.round(i-e[t]);e[t]+=h*(s||.35)}else e[t]=i}}function z(t,i,s){return t.x=(i.x+s.x)/2,t.y=(i.y+s.y)/2,t}class M{constructor(t){this.gestures=t,this.C={x:0,y:0},this.T={x:0,y:0},this.A={x:0,y:0},this.D=!1,this.I=1}start(){const{currSlide:t}=this.gestures.pswp;t&&(this.I=t.currZoomLevel,i(this.C,t.pan)),this.gestures.pswp.animations.stopAllPan(),this.D=!1}change(){const{p1:t,startP1:i,p2:s,startP2:e,pswp:n}=this.gestures,{currSlide:o}=n;if(!o)return;const r=o.zoomLevels.min,a=o.zoomLevels.max;if(!o.isZoomable()||n.mainScroll.isShifted())return;z(this.T,i,e),z(this.A,t,s);let c=1/h(i,e)*h(t,s)*this.I;if(c>o.zoomLevels.initial+o.zoomLevels.initial/15&&(this.D=!0),c<r)if(n.options.pinchToClose&&!this.D&&this.I<=o.zoomLevels.initial){const t=1-(r-c)/(r/1.2);n.dispatch(\"pinchClose\",{bgOpacity:t}).defaultPrevented||n.applyBgOpacity(t)}else c=r-.15*(r-c);else c>a&&(c=a+.05*(c-a));o.pan.x=this.L(\"x\",c),o.pan.y=this.L(\"y\",c),o.setZoomLevel(c),o.applyCurrentZoomPan()}end(){const{pswp:t}=this.gestures,{currSlide:i}=t;(!i||i.currZoomLevel<i.zoomLevels.initial)&&!this.D&&t.options.pinchToClose?t.close():this.correctZoomPan()}L(t,i){const s=i/this.I;return this.A[t]-(this.T[t]-this.C[t])*s}correctZoomPan(t){const{pswp:s}=this.gestures,{currSlide:h}=s;if(!h?.isZoomable())return;0===this.A.x&&(t=!0);const o=h.currZoomLevel;let r,a=!0;o<h.zoomLevels.initial?r=h.zoomLevels.initial:o>h.zoomLevels.max?r=h.zoomLevels.max:(a=!1,r=o);const c=s.bgOpacity,l=s.bgOpacity<1,p=i({x:0,y:0},h.pan);let u=i({x:0,y:0},p);t&&(this.A.x=0,this.A.y=0,this.T.x=0,this.T.y=0,this.I=o,i(this.C,p)),a&&(u={x:this.L(\"x\",r),y:this.L(\"y\",r)}),h.setZoomLevel(r),u={x:h.bounds.correctPan(\"x\",u.x),y:h.bounds.correctPan(\"y\",u.y)},h.setZoomLevel(o);const d=!e(u,p);if(!d&&!a&&!l)return h.g(r),void h.applyCurrentZoomPan();s.animations.stopAllPan(),s.animations.startSpring({isPan:!0,start:0,end:1e3,velocity:0,dampingRatio:1,naturalFrequency:40,onUpdate:t=>{if(t/=1e3,d||a){if(d&&(h.pan.x=p.x+(u.x-p.x)*t,h.pan.y=p.y+(u.y-p.y)*t),a){const i=o+(r-o)*t;h.setZoomLevel(i)}h.applyCurrentZoomPan()}l&&s.bgOpacity<1&&s.applyBgOpacity(n(c+(1-c)*t,0,1))},onComplete:()=>{h.g(r),h.applyCurrentZoomPan()}})}}function P(t){return!!t.target.closest(\".pswp__container\")}class C{constructor(t){this.gestures=t}click(t,i){const s=i.target.classList,h=s.contains(\"pswp__img\"),e=s.contains(\"pswp__item\")||s.contains(\"pswp__zoom-wrap\");h?this.k(\"imageClick\",t,i):e&&this.k(\"bgClick\",t,i)}tap(t,i){P(i)&&this.k(\"tap\",t,i)}doubleTap(t,i){P(i)&&this.k(\"doubleTap\",t,i)}k(t,i,s){const{pswp:h}=this.gestures,{currSlide:e}=h,n=t+\"Action\",o=h.options[n];if(!h.dispatch(n,{point:i,originalEvent:s}).defaultPrevented)if(\"function\"!=typeof o)switch(o){case\"close\":case\"next\":h[o]();break;case\"zoom\":e?.toggleZoom(i);break;case\"zoom-or-close\":e?.isZoomable()&&e.zoomLevels.secondary!==e.zoomLevels.initial?e.toggleZoom(i):h.options.clickToCloseNonZoomable&&h.close();break;case\"toggle-controls\":this.gestures.pswp.element?.classList.toggle(\"pswp--ui-visible\")}else o.call(h,i,s)}}class T{constructor(t){this.pswp=t,this.dragAxis=null,this.p1={x:0,y:0},this.p2={x:0,y:0},this.prevP1={x:0,y:0},this.prevP2={x:0,y:0},this.startP1={x:0,y:0},this.startP2={x:0,y:0},this.velocity={x:0,y:0},this.Z={x:0,y:0},this.B={x:0,y:0},this.F=0,this.O=[],this.R=\"ontouchstart\"in window,this.N=!!window.PointerEvent,this.supportsTouch=this.R||this.N&&navigator.maxTouchPoints>1,this.F=0,this.U=0,this.V=!1,this.isMultitouch=!1,this.isDragging=!1,this.isZooming=!1,this.raf=null,this.G=null,this.supportsTouch||(t.options.allowPanToNext=!1),this.drag=new S(this),this.zoomLevels=new M(this),this.tapHandler=new C(this),t.on(\"bindEvents\",(()=>{t.events.add(t.scrollWrap,\"click\",this.$.bind(this)),this.N?this.q(\"pointer\",\"down\",\"up\",\"cancel\"):this.R?(this.q(\"touch\",\"start\",\"end\",\"cancel\"),t.scrollWrap&&(t.scrollWrap.ontouchmove=()=>{},t.scrollWrap.ontouchend=()=>{})):this.q(\"mouse\",\"down\",\"up\")}))}q(t,i,s,h){const{pswp:e}=this,{events:n}=e,o=h?t+h:\"\";n.add(e.scrollWrap,t+i,this.onPointerDown.bind(this)),n.add(window,t+\"move\",this.onPointerMove.bind(this)),n.add(window,t+s,this.onPointerUp.bind(this)),o&&n.add(e.scrollWrap,o,this.onPointerUp.bind(this))}onPointerDown(t){const s=\"mousedown\"===t.type||\"mouse\"===t.pointerType;if(s&&t.button>0)return;const{pswp:h}=this;h.opener.isOpen?h.dispatch(\"pointerDown\",{originalEvent:t}).defaultPrevented||(s&&(h.mouseDetected(),this.H(t)),h.animations.stopAll(),this.K(t,\"down\"),1===this.F&&(this.dragAxis=null,i(this.startP1,this.p1)),this.F>1?(this.W(),this.isMultitouch=!0):this.isMultitouch=!1):t.preventDefault()}onPointerMove(t){t.preventDefault(),this.F&&(this.K(t,\"move\"),this.pswp.dispatch(\"pointerMove\",{originalEvent:t}).defaultPrevented||(1!==this.F||this.isDragging?this.F>1&&!this.isZooming&&(this.j(),this.isZooming=!0,this.X(),this.zoomLevels.start(),this.Y(),this.J()):(this.dragAxis||this.tt(),this.dragAxis&&!this.isDragging&&(this.isZooming&&(this.isZooming=!1,this.zoomLevels.end()),this.isDragging=!0,this.W(),this.X(),this.U=Date.now(),this.V=!1,i(this.B,this.p1),this.velocity.x=0,this.velocity.y=0,this.drag.start(),this.Y(),this.J()))))}j(){this.isDragging&&(this.isDragging=!1,this.V||this.it(!0),this.drag.end(),this.dragAxis=null)}onPointerUp(t){this.F&&(this.K(t,\"up\"),this.pswp.dispatch(\"pointerUp\",{originalEvent:t}).defaultPrevented||(0===this.F&&(this.Y(),this.isDragging?this.j():this.isZooming||this.isMultitouch||this.st(t)),this.F<2&&this.isZooming&&(this.isZooming=!1,this.zoomLevels.end(),1===this.F&&(this.dragAxis=null,this.X()))))}J(){(this.isDragging||this.isZooming)&&(this.it(),this.isDragging?e(this.p1,this.prevP1)||this.drag.change():e(this.p1,this.prevP1)&&e(this.p2,this.prevP2)||this.zoomLevels.change(),this.ht(),this.raf=requestAnimationFrame(this.J.bind(this)))}it(t){const s=Date.now(),h=s-this.U;h<50&&!t||(this.velocity.x=this.et(\"x\",h),this.velocity.y=this.et(\"y\",h),this.U=s,i(this.B,this.p1),this.V=!0)}st(t){const{mainScroll:s}=this.pswp;if(s.isShifted())return void s.moveIndexBy(0,!0);if(t.type.indexOf(\"cancel\")>0)return;if(\"mouseup\"===t.type||\"mouse\"===t.pointerType)return void this.tapHandler.click(this.startP1,t);const e=this.pswp.options.doubleTapAction?300:0;this.G?(this.W(),h(this.Z,this.startP1)<25&&this.tapHandler.doubleTap(this.startP1,t)):(i(this.Z,this.startP1),this.G=setTimeout((()=>{this.tapHandler.tap(this.startP1,t),this.W()}),e))}W(){this.G&&(clearTimeout(this.G),this.G=null)}et(t,i){const s=this.p1[t]-this.B[t];return Math.abs(s)>1&&i>5?s/i:0}Y(){this.raf&&(cancelAnimationFrame(this.raf),this.raf=null)}H(t){t.preventDefault()}K(t,s){if(this.N){const h=t,e=this.O.findIndex((t=>t.id===h.pointerId));\"up\"===s&&e>-1?this.O.splice(e,1):\"down\"===s&&-1===e?this.O.push(this.nt(h,{x:0,y:0})):e>-1&&this.nt(h,this.O[e]),this.F=this.O.length,this.F>0&&i(this.p1,this.O[0]),this.F>1&&i(this.p2,this.O[1])}else{const i=t;this.F=0,i.type.indexOf(\"touch\")>-1?i.touches&&i.touches.length>0&&(this.nt(i.touches[0],this.p1),this.F++,i.touches.length>1&&(this.nt(i.touches[1],this.p2),this.F++)):(this.nt(t,this.p1),\"up\"===s?this.F=0:this.F++)}}ht(){i(this.prevP1,this.p1),i(this.prevP2,this.p2)}X(){i(this.startP1,this.p1),i(this.startP2,this.p2),this.ht()}tt(){if(this.pswp.mainScroll.isShifted())this.dragAxis=\"x\";else{const t=Math.abs(this.p1.x-this.startP1.x)-Math.abs(this.p1.y-this.startP1.y);if(0!==t){const i=t>0?\"x\":\"y\";Math.abs(this.p1[i]-this.startP1[i])>=10&&(this.dragAxis=i)}}}nt(t,i){return i.x=t.pageX-this.pswp.offset.x,i.y=t.pageY-this.pswp.offset.y,\"pointerId\"in t?i.id=t.pointerId:void 0!==t.identifier&&(i.id=t.identifier),i}$(t){this.pswp.mainScroll.isShifted()&&(t.preventDefault(),t.stopPropagation())}}class A{constructor(t){this.pswp=t,this.x=0,this.slideWidth=0,this.ot=0,this.rt=0,this.ct=-1,this.itemHolders=[]}resize(t){const{pswp:i}=this,s=Math.round(i.viewportSize.x+i.viewportSize.x*i.options.spacing),h=s!==this.slideWidth;h&&(this.slideWidth=s,this.moveTo(this.getCurrSlideX())),this.itemHolders.forEach(((i,s)=>{h&&r(i.el,(s+this.ct)*this.slideWidth),t&&i.slide&&i.slide.resize()}))}resetPosition(){this.ot=0,this.rt=0,this.slideWidth=0,this.ct=-1}appendHolders(){this.itemHolders=[];for(let i=0;i<3;i++){const s=t(\"pswp__item\",\"div\",this.pswp.container);s.setAttribute(\"role\",\"group\"),s.setAttribute(\"aria-roledescription\",\"slide\"),s.setAttribute(\"aria-hidden\",\"true\"),s.style.display=1===i?\"block\":\"none\",this.itemHolders.push({el:s})}}canBeSwiped(){return this.pswp.getNumItems()>1}moveIndexBy(t,i,s){const{pswp:h}=this;let e=h.potentialIndex+t;const n=h.getNumItems();if(h.canLoop()){e=h.getLoopedIndex(e);const i=(t+n)%n;t=i<=n/2?i:i-n}else e<0?e=0:e>=n&&(e=n-1),t=e-h.potentialIndex;h.potentialIndex=e,this.ot-=t,h.animations.stopMainScroll();const o=this.getCurrSlideX();if(i){h.animations.startSpring({isMainScroll:!0,start:this.x,end:o,velocity:s||0,naturalFrequency:30,dampingRatio:1,onUpdate:t=>{this.moveTo(t)},onComplete:()=>{this.updateCurrItem(),h.appendHeavy()}});let t=h.potentialIndex-h.currIndex;if(h.canLoop()){const i=(t+n)%n;t=i<=n/2?i:i-n}Math.abs(t)>1&&this.updateCurrItem()}else this.moveTo(o),this.updateCurrItem();return Boolean(t)}getCurrSlideX(){return this.slideWidth*this.ot}isShifted(){return this.x!==this.getCurrSlideX()}updateCurrItem(){const{pswp:t}=this,i=this.rt-this.ot;if(!i)return;this.rt=this.ot,t.currIndex=t.potentialIndex;let s,h=Math.abs(i);h>=3&&(this.ct+=i+(i>0?-3:3),h=3);for(let e=0;e<h;e++)i>0?(s=this.itemHolders.shift(),s&&(this.itemHolders[2]=s,this.ct++,r(s.el,(this.ct+2)*this.slideWidth),t.setContent(s,t.currIndex-h+e+2))):(s=this.itemHolders.pop(),s&&(this.itemHolders.unshift(s),this.ct--,r(s.el,this.ct*this.slideWidth),t.setContent(s,t.currIndex+h-e-2)));Math.abs(this.ct)>50&&!this.isShifted()&&(this.resetPosition(),this.resize()),t.animations.stopAllPan(),this.itemHolders.forEach(((t,i)=>{t.slide&&t.slide.setIsActive(1===i)})),t.currSlide=this.itemHolders[1]?.slide,t.contentLoader.updateLazy(i),t.currSlide&&t.currSlide.applyCurrentZoomPan(),t.dispatch(\"change\")}moveTo(t,i){if(!this.pswp.canLoop()&&i){let i=(this.slideWidth*this.ot-t)/this.slideWidth;i+=this.pswp.currIndex;const s=Math.round(t-this.x);(i<0&&s>0||i>=this.pswp.getNumItems()-1&&s<0)&&(t=this.x+.35*s)}this.x=t,this.pswp.container&&r(this.pswp.container,t),this.pswp.dispatch(\"moveMainScroll\",{x:t,dragging:i??!1})}}const D={Escape:27,z:90,ArrowLeft:37,ArrowUp:38,ArrowRight:39,ArrowDown:40,Tab:9},I=(t,i)=>i?t:D[t];class E{constructor(t){this.pswp=t,this.lt=!1,t.on(\"bindEvents\",(()=>{t.options.initialPointerPos||this.ut(),t.events.add(document,\"focusin\",this.dt.bind(this)),t.events.add(document,\"keydown\",this.ft.bind(this))}));const i=document.activeElement;t.on(\"destroy\",(()=>{t.options.returnFocus&&i&&this.lt&&i.focus()}))}ut(){!this.lt&&this.pswp.element&&(this.pswp.element.focus(),this.lt=!0)}ft(t){const{pswp:i}=this;if(i.dispatch(\"keydown\",{originalEvent:t}).defaultPrevented)return;if(function(t){return\"button\"in t&&1===t.button||t.ctrlKey||t.metaKey||t.altKey||t.shiftKey}(t))return;let s,h,e=!1;const n=\"key\"in t;switch(n?t.key:t.keyCode){case I(\"Escape\",n):i.options.escKey&&(s=\"close\");break;case I(\"z\",n):s=\"toggleZoom\";break;case I(\"ArrowLeft\",n):h=\"x\";break;case I(\"ArrowUp\",n):h=\"y\";break;case I(\"ArrowRight\",n):h=\"x\",e=!0;break;case I(\"ArrowDown\",n):e=!0,h=\"y\";break;case I(\"Tab\",n):this.ut()}if(h){t.preventDefault();const{currSlide:n}=i;i.options.arrowKeys&&\"x\"===h&&i.getNumItems()>1?s=e?\"next\":\"prev\":n&&n.currZoomLevel>n.zoomLevels.fit&&(n.pan[h]+=e?-80:80,n.panTo(n.pan.x,n.pan.y))}s&&(t.preventDefault(),i[s]())}dt(t){const{template:i}=this.pswp;i&&document!==t.target&&i!==t.target&&!i.contains(t.target)&&i.focus()}}const L=\"cubic-bezier(.4,0,.22,1)\";class k{constructor(t){this.props=t;const{target:i,onComplete:s,transform:h,onFinish:e=(()=>{}),duration:n=333,easing:o=L}=t;this.onFinish=e;const r=h?\"transform\":\"opacity\",c=t[r]??\"\";this.wt=i,this.gt=s,this.vt=!1,this.yt=this.yt.bind(this),this._t=setTimeout((()=>{a(i,r,n,o),this._t=setTimeout((()=>{i.addEventListener(\"transitionend\",this.yt,!1),i.addEventListener(\"transitioncancel\",this.yt,!1),this._t=setTimeout((()=>{this.xt()}),n+500),i.style[r]=c}),30)}),0)}yt(t){t.target===this.wt&&this.xt()}xt(){this.vt||(this.vt=!0,this.onFinish(),this.gt&&this.gt())}destroy(){this._t&&clearTimeout(this._t),a(this.wt),this.wt.removeEventListener(\"transitionend\",this.yt,!1),this.wt.removeEventListener(\"transitioncancel\",this.yt,!1),this.vt||this.xt()}}class Z{constructor(t,i,s){this.velocity=1e3*t,this.bt=i||.75,this.St=s||12,this.zt=this.St,this.bt<1&&(this.zt*=Math.sqrt(1-this.bt*this.bt))}easeFrame(t,i){let s,h=0;i/=1e3;const e=Math.E**(-this.bt*this.St*i);if(1===this.bt)s=this.velocity+this.St*t,h=(t+s*i)*e,this.velocity=h*-this.St+s*e;else if(this.bt<1){s=1/this.zt*(this.bt*this.St*t+this.velocity);const n=Math.cos(this.zt*i),o=Math.sin(this.zt*i);h=e*(t*n+s*o),this.velocity=h*-this.St*this.bt+e*(-this.zt*t*o+this.zt*s*n)}return h}}class B{constructor(t){this.props=t,this.Mt=0;const{start:i,end:s,velocity:h,onUpdate:e,onComplete:n,onFinish:o=(()=>{}),dampingRatio:r,naturalFrequency:a}=t;this.onFinish=o;const c=new Z(h,r,a);let l=Date.now(),p=i-s;const u=()=>{this.Mt&&(p=c.easeFrame(p,Date.now()-l),Math.abs(p)<1&&Math.abs(c.velocity)<50?(e(s),n&&n(),this.onFinish()):(l=Date.now(),e(p+s),this.Mt=requestAnimationFrame(u)))};this.Mt=requestAnimationFrame(u)}destroy(){this.Mt>=0&&cancelAnimationFrame(this.Mt),this.Mt=0}}class F{constructor(){this.activeAnimations=[]}startSpring(t){this.Pt(t,!0)}startTransition(t){this.Pt(t)}Pt(t,i){const s=i?new B(t):new k(t);return this.activeAnimations.push(s),s.onFinish=()=>this.stop(s),s}stop(t){t.destroy();const i=this.activeAnimations.indexOf(t);i>-1&&this.activeAnimations.splice(i,1)}stopAll(){this.activeAnimations.forEach((t=>{t.destroy()})),this.activeAnimations=[]}stopAllPan(){this.activeAnimations=this.activeAnimations.filter((t=>!t.props.isPan||(t.destroy(),!1)))}stopMainScroll(){this.activeAnimations=this.activeAnimations.filter((t=>!t.props.isMainScroll||(t.destroy(),!1)))}isPanRunning(){return this.activeAnimations.some((t=>t.props.isPan))}}class O{constructor(t){this.pswp=t,t.events.add(t.element,\"wheel\",this.Ct.bind(this))}Ct(t){t.preventDefault();const{currSlide:i}=this.pswp;let{deltaX:s,deltaY:h}=t;if(i&&!this.pswp.dispatch(\"wheel\",{originalEvent:t}).defaultPrevented)if(t.ctrlKey||this.pswp.options.wheelToZoom){if(i.isZoomable()){let s=-h;1===t.deltaMode?s*=.05:s*=t.deltaMode?1:.002,s=2**s;const e=i.currZoomLevel*s;i.zoomTo(e,{x:t.clientX,y:t.clientY})}}else i.isPannable()&&(1===t.deltaMode&&(s*=18,h*=18),i.panTo(i.pan.x-s,i.pan.y-h))}}class R{constructor(i,s){const h=s.name||s.className;let e=s.html;if(!1===i.options[h])return;\"string\"==typeof i.options[h+\"SVG\"]&&(e=i.options[h+\"SVG\"]),i.dispatch(\"uiElementCreate\",{data:s});let n=\"\";s.isButton?(n+=\"pswp__button \",n+=s.className||`pswp__button--${s.name}`):n+=s.className||`pswp__${s.name}`;let o=s.isButton?s.tagName||\"button\":s.tagName||\"div\";o=o.toLowerCase();const r=t(n,o);if(s.isButton){\"button\"===o&&(r.type=\"button\");let{title:t}=s;const{ariaLabel:e}=s;\"string\"==typeof i.options[h+\"Title\"]&&(t=i.options[h+\"Title\"]),t&&(r.title=t);const n=e||t;n&&r.setAttribute(\"aria-label\",n)}r.innerHTML=function(t){if(\"string\"==typeof t)return t;if(!t||!t.isCustomSVG)return\"\";const i=t;let s='<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';return s=s.split(\"%d\").join(i.size||32),i.outlineID&&(s+='<use class=\"pswp__icn-shadow\" xlink:href=\"#'+i.outlineID+'\"/>'),s+=i.inner,s+=\"</svg>\",s}(e),s.onInit&&s.onInit(r,i),s.onClick&&(r.onclick=t=>{\"string\"==typeof s.onClick?i[s.onClick]():\"function\"==typeof s.onClick&&s.onClick(t,r,i)});const a=s.appendTo||\"bar\";let c=i.element;\"bar\"===a?(i.topBar||(i.topBar=t(\"pswp__top-bar pswp__hide-on-close\",\"div\",i.scrollWrap)),c=i.topBar):(r.classList.add(\"pswp__hide-on-close\"),\"wrapper\"===a&&(c=i.scrollWrap)),c?.appendChild(i.applyFilters(\"uiElement\",r,s))}}function N(t,i,s){t.classList.add(\"pswp__button--arrow\"),t.setAttribute(\"aria-controls\",\"pswp__items\"),i.on(\"change\",(()=>{i.options.loop||(t.disabled=s?!(i.currIndex<i.getNumItems()-1):!(i.currIndex>0))}))}const U={name:\"arrowPrev\",className:\"pswp__button--arrow--prev\",title:\"Previous\",order:10,isButton:!0,appendTo:\"wrapper\",html:{isCustomSVG:!0,size:60,inner:'<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',outlineID:\"pswp__icn-arrow\"},onClick:\"prev\",onInit:N},V={name:\"arrowNext\",className:\"pswp__button--arrow--next\",title:\"Next\",order:11,isButton:!0,appendTo:\"wrapper\",html:{isCustomSVG:!0,size:60,inner:'<use xlink:href=\"#pswp__icn-arrow\"/>',outlineID:\"pswp__icn-arrow\"},onClick:\"next\",onInit:(t,i)=>{N(t,i,!0)}},G={name:\"close\",title:\"Close\",order:20,isButton:!0,html:{isCustomSVG:!0,inner:'<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',outlineID:\"pswp__icn-close\"},onClick:\"close\"},$={name:\"zoom\",title:\"Zoom\",order:10,isButton:!0,html:{isCustomSVG:!0,inner:'<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/><path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/><path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',outlineID:\"pswp__icn-zoom\"},onClick:\"toggleZoom\"},q={name:\"preloader\",appendTo:\"bar\",order:7,html:{isCustomSVG:!0,inner:'<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',outlineID:\"pswp__icn-loading\"},onInit:(t,i)=>{let s,h=null;const e=i=>{var h,e;s!==i&&(s=i,h=\"active\",e=i,t.classList.toggle(\"pswp__preloader--\"+h,e))},n=()=>{if(!i.currSlide?.content.isLoading())return e(!1),void(h&&(clearTimeout(h),h=null));h||(h=setTimeout((()=>{e(Boolean(i.currSlide?.content.isLoading())),h=null}),i.options.preloaderDelay))};i.on(\"change\",n),i.on(\"loadComplete\",(t=>{i.currSlide===t.slide&&n()})),i.ui&&(i.ui.updatePreloaderVisibility=n)}},H={name:\"counter\",order:5,onInit:(t,i)=>{i.on(\"change\",(()=>{t.innerText=i.currIndex+1+i.options.indexIndicatorSep+i.getNumItems()}))}};function K(t,i){t.classList.toggle(\"pswp--zoomed-in\",i)}class W{constructor(t){this.pswp=t,this.isRegistered=!1,this.uiElementsData=[],this.items=[],this.updatePreloaderVisibility=()=>{},this.Tt=void 0}init(){const{pswp:t}=this;this.isRegistered=!1,this.uiElementsData=[G,U,V,$,q,H],t.dispatch(\"uiRegister\"),this.uiElementsData.sort(((t,i)=>(t.order||0)-(i.order||0))),this.items=[],this.isRegistered=!0,this.uiElementsData.forEach((t=>{this.registerElement(t)})),t.on(\"change\",(()=>{t.element?.classList.toggle(\"pswp--one-slide\",1===t.getNumItems())})),t.on(\"zoomPanUpdate\",(()=>this.At()))}registerElement(t){this.isRegistered?this.items.push(new R(this.pswp,t)):this.uiElementsData.push(t)}At(){const{template:t,currSlide:i,options:s}=this.pswp;if(this.pswp.opener.isClosing||!t||!i)return;let{currZoomLevel:h}=i;if(this.pswp.opener.isOpen||(h=i.zoomLevels.initial),h===this.Tt)return;this.Tt=h;const e=i.zoomLevels.initial-i.zoomLevels.secondary;if(Math.abs(e)<.01||!i.isZoomable())return K(t,!1),void t.classList.remove(\"pswp--zoom-allowed\");t.classList.add(\"pswp--zoom-allowed\");K(t,(h===i.zoomLevels.initial?i.zoomLevels.secondary:i.zoomLevels.initial)<=h),\"zoom\"!==s.imageClickAction&&\"zoom-or-close\"!==s.imageClickAction||t.classList.add(\"pswp--click-to-zoom\")}}class j{constructor(t,i){this.type=t,this.defaultPrevented=!1,i&&Object.assign(this,i)}preventDefault(){this.defaultPrevented=!0}}class X{constructor(i,s){if(this.element=t(\"pswp__img pswp__img--placeholder\",i?\"img\":\"div\",s),i){const t=this.element;t.decoding=\"async\",t.alt=\"\",t.src=i,t.setAttribute(\"role\",\"presentation\")}this.element.setAttribute(\"aria-hidden\",\"true\")}setDisplayedSize(t,i){this.element&&(\"IMG\"===this.element.tagName?(c(this.element,250,\"auto\"),this.element.style.transformOrigin=\"0 0\",this.element.style.transform=o(0,0,t/250)):c(this.element,t,i))}destroy(){this.element?.parentNode&&this.element.remove(),this.element=null}}class Y{constructor(t,i,s){this.instance=i,this.data=t,this.index=s,this.element=void 0,this.placeholder=void 0,this.slide=void 0,this.displayedImageWidth=0,this.displayedImageHeight=0,this.width=Number(this.data.w)||Number(this.data.width)||0,this.height=Number(this.data.h)||Number(this.data.height)||0,this.isAttached=!1,this.hasSlide=!1,this.isDecoding=!1,this.state=l,this.data.type?this.type=this.data.type:this.data.src?this.type=\"image\":this.type=\"html\",this.instance.dispatch(\"contentInit\",{content:this})}removePlaceholder(){this.placeholder&&!this.keepPlaceholder()&&setTimeout((()=>{this.placeholder&&(this.placeholder.destroy(),this.placeholder=void 0)}),1e3)}load(i,s){if(this.slide&&this.usePlaceholder())if(this.placeholder){const t=this.placeholder.element;t&&!t.parentElement&&this.slide.container.prepend(t)}else{const t=this.instance.applyFilters(\"placeholderSrc\",!(!this.data.msrc||!this.slide.isFirstSlide)&&this.data.msrc,this);this.placeholder=new X(t,this.slide.container)}this.element&&!s||this.instance.dispatch(\"contentLoad\",{content:this,isLazy:i}).defaultPrevented||(this.isImageContent()?(this.element=t(\"pswp__img\",\"img\"),this.displayedImageWidth&&this.loadImage(i)):(this.element=t(\"pswp__content\",\"div\"),this.element.innerHTML=this.data.html||\"\"),s&&this.slide&&this.slide.updateContentSize(!0))}loadImage(t){if(!this.isImageContent()||!this.element||this.instance.dispatch(\"contentLoadImage\",{content:this,isLazy:t}).defaultPrevented)return;const i=this.element;this.updateSrcsetSizes(),this.data.srcset&&(i.srcset=this.data.srcset),i.src=this.data.src??\"\",i.alt=this.data.alt??\"\",this.state=p,i.complete?this.onLoaded():(i.onload=()=>{this.onLoaded()},i.onerror=()=>{this.onError()})}setSlide(t){this.slide=t,this.hasSlide=!0,this.instance=t.pswp}onLoaded(){this.state=u,this.slide&&this.element&&(this.instance.dispatch(\"loadComplete\",{slide:this.slide,content:this}),this.slide.isActive&&this.slide.heavyAppended&&!this.element.parentNode&&(this.append(),this.slide.updateContentSize(!0)),this.state!==u&&this.state!==d||this.removePlaceholder())}onError(){this.state=d,this.slide&&(this.displayError(),this.instance.dispatch(\"loadComplete\",{slide:this.slide,isError:!0,content:this}),this.instance.dispatch(\"loadError\",{slide:this.slide,content:this}))}isLoading(){return this.instance.applyFilters(\"isContentLoading\",this.state===p,this)}isError(){return this.state===d}isImageContent(){return\"image\"===this.type}setDisplayedSize(t,i){if(this.element&&(this.placeholder&&this.placeholder.setDisplayedSize(t,i),!this.instance.dispatch(\"contentResize\",{content:this,width:t,height:i}).defaultPrevented&&(c(this.element,t,i),this.isImageContent()&&!this.isError()))){const s=!this.displayedImageWidth&&t;this.displayedImageWidth=t,this.displayedImageHeight=i,s?this.loadImage(!1):this.updateSrcsetSizes(),this.slide&&this.instance.dispatch(\"imageSizeChange\",{slide:this.slide,width:t,height:i,content:this})}}isZoomable(){return this.instance.applyFilters(\"isContentZoomable\",this.isImageContent()&&this.state!==d,this)}updateSrcsetSizes(){if(!this.isImageContent()||!this.element||!this.data.srcset)return;const t=this.element,i=this.instance.applyFilters(\"srcsetSizesWidth\",this.displayedImageWidth,this);(!t.dataset.largestUsedSize||i>parseInt(t.dataset.largestUsedSize,10))&&(t.sizes=i+\"px\",t.dataset.largestUsedSize=String(i))}usePlaceholder(){return this.instance.applyFilters(\"useContentPlaceholder\",this.isImageContent(),this)}lazyLoad(){this.instance.dispatch(\"contentLazyLoad\",{content:this}).defaultPrevented||this.load(!0)}keepPlaceholder(){return this.instance.applyFilters(\"isKeepingPlaceholder\",this.isLoading(),this)}destroy(){this.hasSlide=!1,this.slide=void 0,this.instance.dispatch(\"contentDestroy\",{content:this}).defaultPrevented||(this.remove(),this.placeholder&&(this.placeholder.destroy(),this.placeholder=void 0),this.isImageContent()&&this.element&&(this.element.onload=null,this.element.onerror=null,this.element=void 0))}displayError(){if(this.slide){let i=t(\"pswp__error-msg\",\"div\");i.innerText=this.instance.options?.errorMsg??\"\",i=this.instance.applyFilters(\"contentErrorElement\",i,this),this.element=t(\"pswp__content pswp__error-msg-container\",\"div\"),this.element.appendChild(i),this.slide.container.innerText=\"\",this.slide.container.appendChild(this.element),this.slide.updateContentSize(!0),this.removePlaceholder()}}append(){if(this.isAttached||!this.element)return;if(this.isAttached=!0,this.state===d)return void this.displayError();if(this.instance.dispatch(\"contentAppend\",{content:this}).defaultPrevented)return;const t=\"decode\"in this.element;this.isImageContent()?t&&this.slide&&(!this.slide.isActive||m())?(this.isDecoding=!0,this.element.decode().catch((()=>{})).finally((()=>{this.isDecoding=!1,this.appendImage()}))):this.appendImage():this.slide&&!this.element.parentNode&&this.slide.container.appendChild(this.element)}activate(){!this.instance.dispatch(\"contentActivate\",{content:this}).defaultPrevented&&this.slide&&(this.isImageContent()&&this.isDecoding&&!m()?this.appendImage():this.isError()&&this.load(!1,!0),this.slide.holderElement&&this.slide.holderElement.setAttribute(\"aria-hidden\",\"false\"))}deactivate(){this.instance.dispatch(\"contentDeactivate\",{content:this}),this.slide&&this.slide.holderElement&&this.slide.holderElement.setAttribute(\"aria-hidden\",\"true\")}remove(){this.isAttached=!1,this.instance.dispatch(\"contentRemove\",{content:this}).defaultPrevented||(this.element&&this.element.parentNode&&this.element.remove(),this.placeholder&&this.placeholder.element&&this.placeholder.element.remove())}appendImage(){this.isAttached&&(this.instance.dispatch(\"contentAppendImage\",{content:this}).defaultPrevented||(this.slide&&this.element&&!this.element.parentNode&&this.slide.container.appendChild(this.element),this.state!==u&&this.state!==d||this.removePlaceholder()))}}function J(t,i,s){const h=i.createContentFromData(t,s);let e;const{options:n}=i;if(n){let o;e=new x(n,t,-1),o=i.pswp?i.pswp.viewportSize:g(n,i);const r=y(n,o,t,s);e.update(h.width,h.height,r)}return h.lazyLoad(),e&&h.setDisplayedSize(Math.ceil(h.width*e.initial),Math.ceil(h.height*e.initial)),h}class Q{constructor(t){this.pswp=t,this.limit=Math.max(t.options.preload[0]+t.options.preload[1]+1,5),this.Dt=[]}updateLazy(t){const{pswp:i}=this;if(i.dispatch(\"lazyLoad\").defaultPrevented)return;const{preload:s}=i.options,h=void 0===t||t>=0;let e;for(e=0;e<=s[1];e++)this.loadSlideByIndex(i.currIndex+(h?e:-e));for(e=1;e<=s[0];e++)this.loadSlideByIndex(i.currIndex+(h?-e:e))}loadSlideByIndex(t){const i=this.pswp.getLoopedIndex(t);let s=this.getContentByIndex(i);s||(s=function(t,i){const s=i.getItemData(t);if(!i.dispatch(\"lazyLoadSlide\",{index:t,itemData:s}).defaultPrevented)return J(s,i,t)}(i,this.pswp),s&&this.addToCache(s))}getContentBySlide(t){let i=this.getContentByIndex(t.index);return i||(i=this.pswp.createContentFromData(t.data,t.index),this.addToCache(i)),i.setSlide(t),i}addToCache(t){if(this.removeByIndex(t.index),this.Dt.push(t),this.Dt.length>this.limit){const t=this.Dt.findIndex((t=>!t.isAttached&&!t.hasSlide));if(-1!==t){this.Dt.splice(t,1)[0].destroy()}}}removeByIndex(t){const i=this.Dt.findIndex((i=>i.index===t));-1!==i&&this.Dt.splice(i,1)}getContentByIndex(t){return this.Dt.find((i=>i.index===t))}destroy(){this.Dt.forEach((t=>t.destroy())),this.Dt=[]}}class tt{constructor(t){this.pswp=t,this.isClosed=!0,this.isOpen=!1,this.isClosing=!1,this.isOpening=!1,this.It=void 0,this.Et=!1,this.Lt=!1,this.kt=!1,this.Zt=!1,this.Bt=void 0,this.Ft=void 0,this.Ot=void 0,this.Rt=void 0,this.Nt=void 0,this.Ut=this.Ut.bind(this),t.on(\"firstZoomPan\",this.Ut)}open(){this.Ut(),this.Pt()}close(){if(this.isClosed||this.isClosing||this.isOpening)return;const t=this.pswp.currSlide;this.isOpen=!1,this.isOpening=!1,this.isClosing=!0,this.It=this.pswp.options.hideAnimationDuration,t&&t.currZoomLevel*t.width>=this.pswp.options.maxWidthToAnimate&&(this.It=0),this.Vt(),setTimeout((()=>{this.Pt()}),this.Lt?30:0)}Ut(){if(this.pswp.off(\"firstZoomPan\",this.Ut),!this.isOpening){const t=this.pswp.currSlide;this.isOpening=!0,this.isClosing=!1,this.It=this.pswp.options.showAnimationDuration,t&&t.zoomLevels.initial*t.width>=this.pswp.options.maxWidthToAnimate&&(this.It=0),this.Vt()}}Vt(){const{pswp:t}=this,i=this.pswp.currSlide,{options:s}=t;if(\"fade\"===s.showHideAnimationType?(s.showHideOpacity=!0,this.Nt=void 0):\"none\"===s.showHideAnimationType?(s.showHideOpacity=!1,this.It=0,this.Nt=void 0):this.isOpening&&t.Gt?this.Nt=t.Gt:this.Nt=this.pswp.getThumbBounds(),this.Bt=i?.getPlaceholderElement(),t.animations.stopAll(),this.Et=Boolean(this.It&&this.It>50),this.$t=Boolean(this.Nt)&&i?.content.usePlaceholder()&&(!this.isClosing||!t.mainScroll.isShifted()),this.$t?this.kt=s.showHideOpacity??!1:(this.kt=!0,this.isOpening&&i&&(i.zoomAndPanToInitial(),i.applyCurrentZoomPan())),this.Zt=!this.kt&&this.pswp.options.bgOpacity>.003,this.Ft=this.kt?t.element:t.bg,!this.Et)return this.It=0,this.$t=!1,this.Zt=!1,this.kt=!0,void(this.isOpening&&(t.element&&(t.element.style.opacity=String(.003)),t.applyBgOpacity(1)));this.$t&&this.Nt&&this.Nt.innerRect?(this.Lt=!0,this.Ot=this.pswp.container,this.Rt=this.pswp.currSlide?.holderElement,t.container&&(t.container.style.overflow=\"hidden\",t.container.style.width=t.viewportSize.x+\"px\")):this.Lt=!1,this.isOpening?(this.kt?(t.element&&(t.element.style.opacity=String(.003)),t.applyBgOpacity(1)):(this.Zt&&t.bg&&(t.bg.style.opacity=String(.003)),t.element&&(t.element.style.opacity=\"1\")),this.$t&&(this.qt(),this.Bt&&(this.Bt.style.willChange=\"transform\",this.Bt.style.opacity=String(.003)))):this.isClosing&&(t.mainScroll.itemHolders[0]&&(t.mainScroll.itemHolders[0].el.style.display=\"none\"),t.mainScroll.itemHolders[2]&&(t.mainScroll.itemHolders[2].el.style.display=\"none\"),this.Lt&&0!==t.mainScroll.x&&(t.mainScroll.resetPosition(),t.mainScroll.resize()))}Pt(){this.isOpening&&this.Et&&this.Bt&&\"IMG\"===this.Bt.tagName?new Promise((t=>{let i=!1,s=!0;var h;(h=this.Bt,\"decode\"in h?h.decode().catch((()=>{})):h.complete?Promise.resolve(h):new Promise(((t,i)=>{h.onload=()=>t(h),h.onerror=i}))).finally((()=>{i=!0,s||t(!0)})),setTimeout((()=>{s=!1,i&&t(!0)}),50),setTimeout(t,250)})).finally((()=>this.Ht())):this.Ht()}Ht(){this.pswp.element?.style.setProperty(\"--pswp-transition-duration\",this.It+\"ms\"),this.pswp.dispatch(this.isOpening?\"openingAnimationStart\":\"closingAnimationStart\"),this.pswp.dispatch(\"initialZoom\"+(this.isOpening?\"In\":\"Out\")),this.pswp.element?.classList.toggle(\"pswp--ui-visible\",this.isOpening),this.isOpening?(this.Bt&&(this.Bt.style.opacity=\"1\"),this.Kt()):this.isClosing&&this.Wt(),this.Et||this.jt()}jt(){const{pswp:t}=this;this.isOpen=this.isOpening,this.isClosed=this.isClosing,this.isOpening=!1,this.isClosing=!1,t.dispatch(this.isOpen?\"openingAnimationEnd\":\"closingAnimationEnd\"),t.dispatch(\"initialZoom\"+(this.isOpen?\"InEnd\":\"OutEnd\")),this.isClosed?t.destroy():this.isOpen&&(this.$t&&t.container&&(t.container.style.overflow=\"visible\",t.container.style.width=\"100%\"),t.currSlide?.applyCurrentZoomPan())}Kt(){const{pswp:t}=this;this.$t&&(this.Lt&&this.Ot&&this.Rt&&(this.Xt(this.Ot,\"transform\",\"translate3d(0,0,0)\"),this.Xt(this.Rt,\"transform\",\"none\")),t.currSlide&&(t.currSlide.zoomAndPanToInitial(),this.Xt(t.currSlide.container,\"transform\",t.currSlide.getCurrentTransform()))),this.Zt&&t.bg&&this.Xt(t.bg,\"opacity\",String(t.options.bgOpacity)),this.kt&&t.element&&this.Xt(t.element,\"opacity\",\"1\")}Wt(){const{pswp:t}=this;this.$t&&this.qt(!0),this.Zt&&t.bgOpacity>.01&&t.bg&&this.Xt(t.bg,\"opacity\",\"0\"),this.kt&&t.element&&this.Xt(t.element,\"opacity\",\"0\")}qt(t){if(!this.Nt)return;const{pswp:s}=this,{innerRect:h}=this.Nt,{currSlide:e,viewportSize:n}=s;if(this.Lt&&h&&this.Ot&&this.Rt){const i=-n.x+(this.Nt.x-h.x)+h.w,s=-n.y+(this.Nt.y-h.y)+h.h,e=n.x-h.w,a=n.y-h.h;t?(this.Xt(this.Ot,\"transform\",o(i,s)),this.Xt(this.Rt,\"transform\",o(e,a))):(r(this.Ot,i,s),r(this.Rt,e,a))}e&&(i(e.pan,h||this.Nt),e.currZoomLevel=this.Nt.w/e.width,t?this.Xt(e.container,\"transform\",e.getCurrentTransform()):e.applyCurrentZoomPan())}Xt(t,i,s){if(!this.It)return void(t.style[i]=s);const{animations:h}=this.pswp,e={duration:this.It,easing:this.pswp.options.easing,onComplete:()=>{h.activeAnimations.length||this.jt()},target:t};e[i]=s,h.startTransition(e)}}const it={allowPanToNext:!0,spacing:.1,loop:!0,pinchToClose:!0,closeOnVerticalDrag:!0,hideAnimationDuration:333,showAnimationDuration:333,zoomAnimationDuration:333,escKey:!0,arrowKeys:!0,returnFocus:!0,maxWidthToAnimate:4e3,clickToCloseNonZoomable:!0,imageClickAction:\"zoom-or-close\",bgClickAction:\"close\",tapAction:\"toggle-controls\",doubleTapAction:\"zoom\",indexIndicatorSep:\" / \",preloaderDelay:2e3,bgOpacity:.8,index:0,errorMsg:\"The image cannot be loaded\",preload:[1,2],easing:\"cubic-bezier(.4,0,.22,1)\"};class st extends class extends class{constructor(){this.Yt={},this.Jt={},this.pswp=void 0,this.options=void 0}addFilter(t,i,s=100){this.Jt[t]||(this.Jt[t]=[]),this.Jt[t]?.push({fn:i,priority:s}),this.Jt[t]?.sort(((t,i)=>t.priority-i.priority)),this.pswp?.addFilter(t,i,s)}removeFilter(t,i){this.Jt[t]&&(this.Jt[t]=this.Jt[t].filter((t=>t.fn!==i))),this.pswp&&this.pswp.removeFilter(t,i)}applyFilters(t,...i){return this.Jt[t]?.forEach((t=>{i[0]=t.fn.apply(this,i)})),i[0]}on(t,i){this.Yt[t]||(this.Yt[t]=[]),this.Yt[t]?.push(i),this.pswp?.on(t,i)}off(t,i){this.Yt[t]&&(this.Yt[t]=this.Yt[t].filter((t=>i!==t))),this.pswp?.off(t,i)}dispatch(t,i){if(this.pswp)return this.pswp.dispatch(t,i);const s=new j(t,i);return this.Yt[t]?.forEach((t=>{t.call(this,s)})),s}}{getNumItems(){let t=0;const i=this.options?.dataSource;i&&\"length\"in i?t=i.length:i&&\"gallery\"in i&&(i.items||(i.items=this.Qt(i.gallery)),i.items&&(t=i.items.length));const s=this.dispatch(\"numItems\",{dataSource:i,numItems:t});return this.applyFilters(\"numItems\",s.numItems,i)}createContentFromData(t,i){return new Y(t,this,i)}getItemData(t){const i=this.options?.dataSource;let s={};Array.isArray(i)?s=i[t]:i&&\"gallery\"in i&&(i.items||(i.items=this.Qt(i.gallery)),s=i.items[t]);let h=s;h instanceof Element&&(h=this.ti(h));const e=this.dispatch(\"itemData\",{itemData:h||{},index:t});return this.applyFilters(\"itemData\",e.itemData,t)}Qt(t){return this.options?.children||this.options?.childSelector?function(t,i,s=document){let h=[];if(t instanceof Element)h=[t];else if(t instanceof NodeList||Array.isArray(t))h=Array.from(t);else{const e=\"string\"==typeof t?t:i;e&&(h=Array.from(s.querySelectorAll(e)))}return h}(this.options.children,this.options.childSelector,t)||[]:[t]}ti(t){const i={element:t},s=\"A\"===t.tagName?t:t.querySelector(\"a\");if(s){i.src=s.dataset.pswpSrc||s.href,s.dataset.pswpSrcset&&(i.srcset=s.dataset.pswpSrcset),i.width=s.dataset.pswpWidth?parseInt(s.dataset.pswpWidth,10):0,i.height=s.dataset.pswpHeight?parseInt(s.dataset.pswpHeight,10):0,i.w=i.width,i.h=i.height,s.dataset.pswpType&&(i.type=s.dataset.pswpType);const h=t.querySelector(\"img\");h&&(i.msrc=h.currentSrc||h.src,i.alt=h.getAttribute(\"alt\")??\"\"),(s.dataset.pswpCropped||s.dataset.cropped)&&(i.thumbCropped=!0)}return this.applyFilters(\"domItemData\",i,t,s)}lazyLoadData(t,i){return J(t,this,i)}}{constructor(t){super(),this.options=this.ii(t||{}),this.offset={x:0,y:0},this.si={x:0,y:0},this.viewportSize={x:0,y:0},this.bgOpacity=1,this.currIndex=0,this.potentialIndex=0,this.isOpen=!1,this.isDestroying=!1,this.hasMouse=!1,this.hi={},this.Gt=void 0,this.topBar=void 0,this.element=void 0,this.template=void 0,this.container=void 0,this.scrollWrap=void 0,this.currSlide=void 0,this.events=new w,this.animations=new F,this.mainScroll=new A(this),this.gestures=new T(this),this.opener=new tt(this),this.keyboard=new E(this),this.contentLoader=new Q(this)}init(){if(this.isOpen||this.isDestroying)return!1;this.isOpen=!0,this.dispatch(\"init\"),this.dispatch(\"beforeOpen\"),this.ei();let t=\"pswp--open\";return this.gestures.supportsTouch&&(t+=\" pswp--touch\"),this.options.mainClass&&(t+=\" \"+this.options.mainClass),this.element&&(this.element.className+=\" \"+t),this.currIndex=this.options.index||0,this.potentialIndex=this.currIndex,this.dispatch(\"firstUpdate\"),this.scrollWheel=new O(this),(Number.isNaN(this.currIndex)||this.currIndex<0||this.currIndex>=this.getNumItems())&&(this.currIndex=0),this.gestures.supportsTouch||this.mouseDetected(),this.updateSize(),this.offset.y=window.pageYOffset,this.hi=this.getItemData(this.currIndex),this.dispatch(\"gettingData\",{index:this.currIndex,data:this.hi,slide:void 0}),this.Gt=this.getThumbBounds(),this.dispatch(\"initialLayout\"),this.on(\"openingAnimationEnd\",(()=>{const{itemHolders:t}=this.mainScroll;t[0]&&(t[0].el.style.display=\"block\",this.setContent(t[0],this.currIndex-1)),t[2]&&(t[2].el.style.display=\"block\",this.setContent(t[2],this.currIndex+1)),this.appendHeavy(),this.contentLoader.updateLazy(),this.events.add(window,\"resize\",this.ni.bind(this)),this.events.add(window,\"scroll\",this.oi.bind(this)),this.dispatch(\"bindEvents\")})),this.mainScroll.itemHolders[1]&&this.setContent(this.mainScroll.itemHolders[1],this.currIndex),this.dispatch(\"change\"),this.opener.open(),this.dispatch(\"afterInit\"),!0}getLoopedIndex(t){const i=this.getNumItems();return this.options.loop&&(t>i-1&&(t-=i),t<0&&(t+=i)),n(t,0,i-1)}appendHeavy(){this.mainScroll.itemHolders.forEach((t=>{t.slide?.appendHeavy()}))}goTo(t){this.mainScroll.moveIndexBy(this.getLoopedIndex(t)-this.potentialIndex)}next(){this.goTo(this.potentialIndex+1)}prev(){this.goTo(this.potentialIndex-1)}zoomTo(...t){this.currSlide?.zoomTo(...t)}toggleZoom(){this.currSlide?.toggleZoom()}close(){this.opener.isOpen&&!this.isDestroying&&(this.isDestroying=!0,this.dispatch(\"close\"),this.events.removeAll(),this.opener.close())}destroy(){if(!this.isDestroying)return this.options.showHideAnimationType=\"none\",void this.close();this.dispatch(\"destroy\"),this.Yt={},this.scrollWrap&&(this.scrollWrap.ontouchmove=null,this.scrollWrap.ontouchend=null),this.element?.remove(),this.mainScroll.itemHolders.forEach((t=>{t.slide?.destroy()})),this.contentLoader.destroy(),this.events.removeAll()}refreshSlideContent(t){this.contentLoader.removeByIndex(t),this.mainScroll.itemHolders.forEach(((i,s)=>{let h=(this.currSlide?.index??0)-1+s;this.canLoop()&&(h=this.getLoopedIndex(h)),h===t&&(this.setContent(i,t,!0),1===s&&(this.currSlide=i.slide,i.slide?.setIsActive(!0)))})),this.dispatch(\"change\")}setContent(t,i,s){if(this.canLoop()&&(i=this.getLoopedIndex(i)),t.slide){if(t.slide.index===i&&!s)return;t.slide.destroy(),t.slide=void 0}if(!this.canLoop()&&(i<0||i>=this.getNumItems()))return;const h=this.getItemData(i);t.slide=new b(h,i,this),i===this.currIndex&&(this.currSlide=t.slide),t.slide.append(t.el)}getViewportCenterPoint(){return{x:this.viewportSize.x/2,y:this.viewportSize.y/2}}updateSize(t){if(this.isDestroying)return;const s=g(this.options,this);!t&&e(s,this.si)||(i(this.si,s),this.dispatch(\"beforeResize\"),i(this.viewportSize,this.si),this.oi(),this.dispatch(\"viewportSize\"),this.mainScroll.resize(this.opener.isOpen),!this.hasMouse&&window.matchMedia(\"(any-hover: hover)\").matches&&this.mouseDetected(),this.dispatch(\"resize\"))}applyBgOpacity(t){this.bgOpacity=Math.max(t,0),this.bg&&(this.bg.style.opacity=String(this.bgOpacity*this.options.bgOpacity))}mouseDetected(){this.hasMouse||(this.hasMouse=!0,this.element?.classList.add(\"pswp--has_mouse\"))}ni(){this.updateSize(),/iPhone|iPad|iPod/i.test(window.navigator.userAgent)&&setTimeout((()=>{this.updateSize()}),500)}oi(){this.setScrollOffset(0,window.pageYOffset)}setScrollOffset(t,i){this.offset.x=t,this.offset.y=i,this.dispatch(\"updateScrollOffset\")}ei(){this.element=t(\"pswp\",\"div\"),this.element.setAttribute(\"tabindex\",\"-1\"),this.element.setAttribute(\"role\",\"dialog\"),this.template=this.element,this.bg=t(\"pswp__bg\",\"div\",this.element),this.scrollWrap=t(\"pswp__scroll-wrap\",\"section\",this.element),this.container=t(\"pswp__container\",\"div\",this.scrollWrap),this.scrollWrap.setAttribute(\"aria-roledescription\",\"carousel\"),this.container.setAttribute(\"aria-live\",\"off\"),this.container.setAttribute(\"id\",\"pswp__items\"),this.mainScroll.appendHolders(),this.ui=new W(this),this.ui.init(),(this.options.appendToEl||document.body).appendChild(this.element)}getThumbBounds(){return function(t,i,s){const h=s.dispatch(\"thumbBounds\",{index:t,itemData:i,instance:s});if(h.thumbBounds)return h.thumbBounds;const{element:e}=i;let n,o;if(e&&!1!==s.options.thumbSelector){const t=s.options.thumbSelector||\"img\";o=e.matches(t)?e:e.querySelector(t)}return o=s.applyFilters(\"thumbEl\",o,i,t),o&&(n=i.thumbCropped?function(t,i,s){const h=t.getBoundingClientRect(),e=h.width/i,n=h.height/s,o=e>n?e:n,r=(h.width-i*o)/2,a=(h.height-s*o)/2,c={x:h.left+r,y:h.top+a,w:i*o};return c.innerRect={w:h.width,h:h.height,x:r,y:a},c}(o,i.width||i.w||0,i.height||i.h||0):function(t){const i=t.getBoundingClientRect();return{x:i.left,y:i.top,w:i.width}}(o)),s.applyFilters(\"thumbBounds\",n,i,t)}(this.currIndex,this.currSlide?this.currSlide.data:this.hi,this)}canLoop(){return this.options.loop&&this.getNumItems()>2}ii(t){return window.matchMedia(\"(prefers-reduced-motion), (update: slow)\").matches&&(t.showHideAnimationType=\"none\",t.zoomAnimationDuration=0),{...it,...t}}}export{st as default};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = A11y;\nvar _classesToSelectorMin = require(\"../shared/classes-to-selector.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction A11y(e) {\n  let {\n    swiper: a,\n    extendParams: t,\n    on: i\n  } = e;\n  t({\n    a11y: {\n      enabled: !0,\n      notificationClass: \"swiper-notification\",\n      prevSlideMessage: \"Previous slide\",\n      nextSlideMessage: \"Next slide\",\n      firstSlideMessage: \"This is the first slide\",\n      lastSlideMessage: \"This is the last slide\",\n      paginationBulletMessage: \"Go to slide {{index}}\",\n      slideLabelMessage: \"{{index}} / {{slidesLength}}\",\n      containerMessage: null,\n      containerRoleDescriptionMessage: null,\n      itemRoleDescriptionMessage: null,\n      slideRole: \"group\",\n      id: null\n    }\n  }), a.a11y = {\n    clicked: !1\n  };\n  let n = null;\n  function s(e) {\n    const a = n;\n    0 !== a.length && (a.innerHTML = \"\", a.innerHTML = e);\n  }\n  const r = e => (Array.isArray(e) ? e : [e]).filter(e => !!e);\n  function o(e) {\n    (e = r(e)).forEach(e => {\n      e.setAttribute(\"tabIndex\", \"0\");\n    });\n  }\n  function l(e) {\n    (e = r(e)).forEach(e => {\n      e.setAttribute(\"tabIndex\", \"-1\");\n    });\n  }\n  function c(e, a) {\n    (e = r(e)).forEach(e => {\n      e.setAttribute(\"role\", a);\n    });\n  }\n  function d(e, a) {\n    (e = r(e)).forEach(e => {\n      e.setAttribute(\"aria-roledescription\", a);\n    });\n  }\n  function p(e, a) {\n    (e = r(e)).forEach(e => {\n      e.setAttribute(\"aria-label\", a);\n    });\n  }\n  function g(e) {\n    (e = r(e)).forEach(e => {\n      e.setAttribute(\"aria-disabled\", !0);\n    });\n  }\n  function u(e) {\n    (e = r(e)).forEach(e => {\n      e.setAttribute(\"aria-disabled\", !1);\n    });\n  }\n  function f(e) {\n    if (13 !== e.keyCode && 32 !== e.keyCode) return;\n    const t = a.params.a11y,\n      i = e.target;\n    a.pagination && a.pagination.el && (i === a.pagination.el || a.pagination.el.contains(e.target)) && !e.target.matches((0, _classesToSelectorMin.c)(a.params.pagination.bulletClass)) || (a.navigation && a.navigation.nextEl && i === a.navigation.nextEl && (a.isEnd && !a.params.loop || a.slideNext(), a.isEnd ? s(t.lastSlideMessage) : s(t.nextSlideMessage)), a.navigation && a.navigation.prevEl && i === a.navigation.prevEl && (a.isBeginning && !a.params.loop || a.slidePrev(), a.isBeginning ? s(t.firstSlideMessage) : s(t.prevSlideMessage)), a.pagination && i.matches((0, _classesToSelectorMin.c)(a.params.pagination.bulletClass)) && i.click());\n  }\n  function m() {\n    return a.pagination && a.pagination.bullets && a.pagination.bullets.length;\n  }\n  function v() {\n    return m() && a.params.pagination.clickable;\n  }\n  const E = (e, a, t) => {\n      o(e), \"BUTTON\" !== e.tagName && (c(e, \"button\"), e.addEventListener(\"keydown\", f)), p(e, t), function (e, a) {\n        (e = r(e)).forEach(e => {\n          e.setAttribute(\"aria-controls\", a);\n        });\n      }(e, a);\n    },\n    b = () => {\n      a.a11y.clicked = !0;\n    },\n    h = () => {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          a.destroyed || (a.a11y.clicked = !1);\n        });\n      });\n    },\n    y = e => {\n      if (a.a11y.clicked) return;\n      const t = e.target.closest(`.${a.params.slideClass}, swiper-slide`);\n      if (!t || !a.slides.includes(t)) return;\n      const i = a.slides.indexOf(t) === a.activeIndex,\n        n = a.params.watchSlidesProgress && a.visibleSlides && a.visibleSlides.includes(t);\n      i || n || e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents || (a.isHorizontal() ? a.el.scrollLeft = 0 : a.el.scrollTop = 0, a.slideTo(a.slides.indexOf(t), 0));\n    },\n    M = () => {\n      const e = a.params.a11y;\n      e.itemRoleDescriptionMessage && d(a.slides, e.itemRoleDescriptionMessage), e.slideRole && c(a.slides, e.slideRole);\n      const t = a.slides.length;\n      e.slideLabelMessage && a.slides.forEach((i, n) => {\n        const s = a.params.loop ? parseInt(i.getAttribute(\"data-swiper-slide-index\"), 10) : n;\n        p(i, e.slideLabelMessage.replace(/\\{\\{index\\}\\}/, s + 1).replace(/\\{\\{slidesLength\\}\\}/, t));\n      });\n    },\n    A = () => {\n      const e = a.params.a11y;\n      a.el.append(n);\n      const t = a.el;\n      e.containerRoleDescriptionMessage && d(t, e.containerRoleDescriptionMessage), e.containerMessage && p(t, e.containerMessage);\n      const i = a.wrapperEl,\n        s = e.id || i.getAttribute(\"id\") || `swiper-wrapper-${(o = 16, void 0 === o && (o = 16), \"x\".repeat(o).replace(/x/g, () => Math.round(16 * Math.random()).toString(16)))}`;\n      var o;\n      const l = a.params.autoplay && a.params.autoplay.enabled ? \"off\" : \"polite\";\n      var c;\n      c = s, r(i).forEach(e => {\n        e.setAttribute(\"id\", c);\n      }), function (e, a) {\n        (e = r(e)).forEach(e => {\n          e.setAttribute(\"aria-live\", a);\n        });\n      }(i, l), M();\n      let {\n        nextEl: g,\n        prevEl: u\n      } = a.navigation ? a.navigation : {};\n      if (g = r(g), u = r(u), g && g.forEach(a => E(a, s, e.nextSlideMessage)), u && u.forEach(a => E(a, s, e.prevSlideMessage)), v()) {\n        (Array.isArray(a.pagination.el) ? a.pagination.el : [a.pagination.el]).forEach(e => {\n          e.addEventListener(\"keydown\", f);\n        });\n      }\n      a.el.addEventListener(\"focus\", y, !0), a.el.addEventListener(\"pointerdown\", b, !0), a.el.addEventListener(\"pointerup\", h, !0);\n    };\n  i(\"beforeInit\", () => {\n    n = (0, _utilsMin.c)(\"span\", a.params.a11y.notificationClass), n.setAttribute(\"aria-live\", \"assertive\"), n.setAttribute(\"aria-atomic\", \"true\");\n  }), i(\"afterInit\", () => {\n    a.params.a11y.enabled && A();\n  }), i(\"slidesLengthChange snapGridLengthChange slidesGridLengthChange\", () => {\n    a.params.a11y.enabled && M();\n  }), i(\"fromEdge toEdge afterInit lock unlock\", () => {\n    a.params.a11y.enabled && function () {\n      if (a.params.loop || a.params.rewind || !a.navigation) return;\n      const {\n        nextEl: e,\n        prevEl: t\n      } = a.navigation;\n      t && (a.isBeginning ? (g(t), l(t)) : (u(t), o(t))), e && (a.isEnd ? (g(e), l(e)) : (u(e), o(e)));\n    }();\n  }), i(\"paginationUpdate\", () => {\n    a.params.a11y.enabled && function () {\n      const e = a.params.a11y;\n      m() && a.pagination.bullets.forEach(t => {\n        a.params.pagination.clickable && (o(t), a.params.pagination.renderBullet || (c(t, \"button\"), p(t, e.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, (0, _utilsMin.g)(t) + 1)))), t.matches((0, _classesToSelectorMin.c)(a.params.pagination.bulletActiveClass)) ? t.setAttribute(\"aria-current\", \"true\") : t.removeAttribute(\"aria-current\");\n      });\n    }();\n  }), i(\"destroy\", () => {\n    a.params.a11y.enabled && function () {\n      n && n.remove();\n      let {\n        nextEl: e,\n        prevEl: t\n      } = a.navigation ? a.navigation : {};\n      e = r(e), t = r(t), e && e.forEach(e => e.removeEventListener(\"keydown\", f)), t && t.forEach(e => e.removeEventListener(\"keydown\", f)), v() && (Array.isArray(a.pagination.el) ? a.pagination.el : [a.pagination.el]).forEach(e => {\n        e.removeEventListener(\"keydown\", f);\n      });\n      a.el.removeEventListener(\"focus\", y, !0), a.el.removeEventListener(\"pointerdown\", b, !0), a.el.removeEventListener(\"pointerup\", h, !0);\n    }();\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Autoplay;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nfunction Autoplay(e) {\n  let a,\n    t,\n    {\n      swiper: n,\n      extendParams: r,\n      on: i,\n      emit: o,\n      params: s\n    } = e;\n  n.autoplay = {\n    running: !1,\n    paused: !1,\n    timeLeft: 0\n  }, r({\n    autoplay: {\n      enabled: !1,\n      delay: 3e3,\n      waitForTransition: !0,\n      disableOnInteraction: !0,\n      stopOnLastSlide: !1,\n      reverseDirection: !1,\n      pauseOnMouseEnter: !1\n    }\n  });\n  let p,\n    l,\n    u,\n    d,\n    y,\n    m,\n    c,\n    g = s && s.autoplay ? s.autoplay.delay : 3e3,\n    v = s && s.autoplay ? s.autoplay.delay : 3e3,\n    T = new Date().getTime;\n  function w(e) {\n    n && !n.destroyed && n.wrapperEl && e.target === n.wrapperEl && (n.wrapperEl.removeEventListener(\"transitionend\", w), O());\n  }\n  const E = () => {\n      if (n.destroyed || !n.autoplay.running) return;\n      n.autoplay.paused ? l = !0 : l && (v = p, l = !1);\n      const e = n.autoplay.paused ? p : T + v - new Date().getTime();\n      n.autoplay.timeLeft = e, o(\"autoplayTimeLeft\", e, e / g), t = requestAnimationFrame(() => {\n        E();\n      });\n    },\n    f = e => {\n      if (n.destroyed || !n.autoplay.running) return;\n      cancelAnimationFrame(t), E();\n      let r = void 0 === e ? n.params.autoplay.delay : e;\n      g = n.params.autoplay.delay, v = n.params.autoplay.delay;\n      const i = (() => {\n        let e;\n        if (e = n.virtual && n.params.virtual.enabled ? n.slides.filter(e => e.classList.contains(\"swiper-slide-active\"))[0] : n.slides[n.activeIndex], !e) return;\n        return parseInt(e.getAttribute(\"data-swiper-autoplay\"), 10);\n      })();\n      !Number.isNaN(i) && i > 0 && void 0 === e && (r = i, g = i, v = i), p = r;\n      const s = n.params.speed,\n        l = () => {\n          n && !n.destroyed && (n.params.autoplay.reverseDirection ? !n.isBeginning || n.params.loop || n.params.rewind ? (n.slidePrev(s, !0, !0), o(\"autoplay\")) : n.params.autoplay.stopOnLastSlide || (n.slideTo(n.slides.length - 1, s, !0, !0), o(\"autoplay\")) : !n.isEnd || n.params.loop || n.params.rewind ? (n.slideNext(s, !0, !0), o(\"autoplay\")) : n.params.autoplay.stopOnLastSlide || (n.slideTo(0, s, !0, !0), o(\"autoplay\")), n.params.cssMode && (T = new Date().getTime(), requestAnimationFrame(() => {\n            f();\n          })));\n        };\n      return r > 0 ? (clearTimeout(a), a = setTimeout(() => {\n        l();\n      }, r)) : requestAnimationFrame(() => {\n        l();\n      }), r;\n    },\n    b = () => {\n      n.autoplay.running = !0, f(), o(\"autoplayStart\");\n    },\n    L = () => {\n      n.autoplay.running = !1, clearTimeout(a), cancelAnimationFrame(t), o(\"autoplayStop\");\n    },\n    D = (e, t) => {\n      if (n.destroyed || !n.autoplay.running) return;\n      clearTimeout(a), e || (c = !0);\n      const r = () => {\n        o(\"autoplayPause\"), n.params.autoplay.waitForTransition ? n.wrapperEl.addEventListener(\"transitionend\", w) : O();\n      };\n      if (n.autoplay.paused = !0, t) return m && (p = n.params.autoplay.delay), m = !1, void r();\n      const i = p || n.params.autoplay.delay;\n      p = i - (new Date().getTime() - T), n.isEnd && p < 0 && !n.params.loop || (p < 0 && (p = 0), r());\n    },\n    O = () => {\n      n.isEnd && p < 0 && !n.params.loop || n.destroyed || !n.autoplay.running || (T = new Date().getTime(), c ? (c = !1, f(p)) : f(), n.autoplay.paused = !1, o(\"autoplayResume\"));\n    },\n    A = () => {\n      if (n.destroyed || !n.autoplay.running) return;\n      const e = (0, _ssrWindowEsmMin.g)();\n      \"hidden\" === e.visibilityState && (c = !0, D(!0)), \"visible\" === e.visibilityState && O();\n    },\n    F = e => {\n      \"mouse\" === e.pointerType && (c = !0, D(!0));\n    },\n    S = e => {\n      \"mouse\" === e.pointerType && n.autoplay.paused && O();\n    };\n  i(\"init\", () => {\n    n.params.autoplay.enabled && (n.params.autoplay.pauseOnMouseEnter && (n.el.addEventListener(\"pointerenter\", F), n.el.addEventListener(\"pointerleave\", S)), (0, _ssrWindowEsmMin.g)().addEventListener(\"visibilitychange\", A), T = new Date().getTime(), b());\n  }), i(\"destroy\", () => {\n    n.el.removeEventListener(\"pointerenter\", F), n.el.removeEventListener(\"pointerleave\", S), (0, _ssrWindowEsmMin.g)().removeEventListener(\"visibilitychange\", A), n.autoplay.running && L();\n  }), i(\"beforeTransitionStart\", (e, a, t) => {\n    !n.destroyed && n.autoplay.running && (t || !n.params.autoplay.disableOnInteraction ? D(!0, !0) : L());\n  }), i(\"sliderFirstMove\", () => {\n    !n.destroyed && n.autoplay.running && (n.params.autoplay.disableOnInteraction ? L() : (u = !0, d = !1, c = !1, y = setTimeout(() => {\n      c = !0, d = !0, D(!0);\n    }, 200)));\n  }), i(\"touchEnd\", () => {\n    if (!n.destroyed && n.autoplay.running && u) {\n      if (clearTimeout(y), clearTimeout(a), n.params.autoplay.disableOnInteraction) return d = !1, void (u = !1);\n      d && n.params.cssMode && O(), d = !1, u = !1;\n    }\n  }), i(\"slideChange\", () => {\n    !n.destroyed && n.autoplay.running && (m = !0);\n  }), Object.assign(n.autoplay, {\n    start: b,\n    stop: L,\n    pause: D,\n    resume: O\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Controller;\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Controller(t) {\n  let {\n    swiper: e,\n    extendParams: n,\n    on: r\n  } = t;\n  function o(t, e) {\n    const n = function () {\n      let t, e, n;\n      return (r, o) => {\n        for (e = -1, t = r.length; t - e > 1;) n = t + e >> 1, r[n] <= o ? e = n : t = n;\n        return t;\n      };\n    }();\n    let r, o;\n    return this.x = t, this.y = e, this.lastIndex = t.length - 1, this.interpolate = function (t) {\n      return t ? (o = n(this.x, t), r = o - 1, (t - this.x[r]) * (this.y[o] - this.y[r]) / (this.x[o] - this.x[r]) + this.y[r]) : 0;\n    }, this;\n  }\n  function l() {\n    e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);\n  }\n  n({\n    controller: {\n      control: void 0,\n      inverse: !1,\n      by: \"slide\"\n    }\n  }), e.controller = {\n    control: void 0\n  }, r(\"beforeInit\", () => {\n    if (\"undefined\" != typeof window && (\"string\" == typeof e.params.controller.control || e.params.controller.control instanceof HTMLElement)) {\n      const t = document.querySelector(e.params.controller.control);\n      if (t && t.swiper) e.controller.control = t.swiper;else if (t) {\n        const n = r => {\n          e.controller.control = r.detail[0], e.update(), t.removeEventListener(\"init\", n);\n        };\n        t.addEventListener(\"init\", n);\n      }\n    } else e.controller.control = e.params.controller.control;\n  }), r(\"update\", () => {\n    l();\n  }), r(\"resize\", () => {\n    l();\n  }), r(\"observerUpdate\", () => {\n    l();\n  }), r(\"setTranslate\", (t, n, r) => {\n    e.controller.control && !e.controller.control.destroyed && e.controller.setTranslate(n, r);\n  }), r(\"setTransition\", (t, n, r) => {\n    e.controller.control && !e.controller.control.destroyed && e.controller.setTransition(n, r);\n  }), Object.assign(e.controller, {\n    setTranslate: function (t, n) {\n      const r = e.controller.control;\n      let l, s;\n      const i = e.constructor;\n      function a(t) {\n        if (t.destroyed) return;\n        const n = e.rtlTranslate ? -e.translate : e.translate;\n        \"slide\" === e.params.controller.by && (!function (t) {\n          e.controller.spline = e.params.loop ? new o(e.slidesGrid, t.slidesGrid) : new o(e.snapGrid, t.snapGrid);\n        }(t), s = -e.controller.spline.interpolate(-n)), s && \"container\" !== e.params.controller.by || (l = (t.maxTranslate() - t.minTranslate()) / (e.maxTranslate() - e.minTranslate()), !Number.isNaN(l) && Number.isFinite(l) || (l = 1), s = (n - e.minTranslate()) * l + t.minTranslate()), e.params.controller.inverse && (s = t.maxTranslate() - s), t.updateProgress(s), t.setTranslate(s, e), t.updateActiveIndex(), t.updateSlidesClasses();\n      }\n      if (Array.isArray(r)) for (let t = 0; t < r.length; t += 1) r[t] !== n && r[t] instanceof i && a(r[t]);else r instanceof i && n !== r && a(r);\n    },\n    setTransition: function (t, n) {\n      const r = e.constructor,\n        o = e.controller.control;\n      let l;\n      function s(n) {\n        n.destroyed || (n.setTransition(t, e), 0 !== t && (n.transitionStart(), n.params.autoHeight && (0, _utilsMin.n)(() => {\n          n.updateAutoHeight();\n        }), (0, _utilsMin.i)(n.wrapperEl, () => {\n          o && n.transitionEnd();\n        })));\n      }\n      if (Array.isArray(o)) for (l = 0; l < o.length; l += 1) o[l] !== n && o[l] instanceof r && s(o[l]);else o instanceof r && n !== o && s(o);\n    }\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb250cm9sbGVyIiwidCIsInN3aXBlciIsImUiLCJleHRlbmRQYXJhbXMiLCJuIiwib24iLCJyIiwibyIsImxlbmd0aCIsIngiLCJ5IiwibGFzdEluZGV4IiwiaW50ZXJwb2xhdGUiLCJsIiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJzcGxpbmUiLCJpbnZlcnNlIiwiYnkiLCJ3aW5kb3ciLCJwYXJhbXMiLCJIVE1MRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRldGFpbCIsInVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZGVzdHJveWVkIiwic2V0VHJhbnNsYXRlIiwic2V0VHJhbnNpdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsInMiLCJpIiwiY29uc3RydWN0b3IiLCJhIiwicnRsVHJhbnNsYXRlIiwidHJhbnNsYXRlIiwibG9vcCIsInNsaWRlc0dyaWQiLCJzbmFwR3JpZCIsIm1heFRyYW5zbGF0ZSIsIm1pblRyYW5zbGF0ZSIsIk51bWJlciIsImlzTmFOIiwiaXNGaW5pdGUiLCJ1cGRhdGVQcm9ncmVzcyIsInVwZGF0ZUFjdGl2ZUluZGV4IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsIkFycmF5IiwiaXNBcnJheSIsInRyYW5zaXRpb25TdGFydCIsImF1dG9IZWlnaHQiLCJuZXh0VGljayIsInVwZGF0ZUF1dG9IZWlnaHQiLCJlbGVtZW50VHJhbnNpdGlvbkVuZCIsIndyYXBwZXJFbCIsInRyYW5zaXRpb25FbmQiXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsU0FBU0EsV0FBV0MsQ0FBQTtFQUNsQjtJQUFJQyxNQUFBLEVBQ0ZDLENBQUE7SUFBTUMsWUFBQSxFQUNOQyxDQUFBO0lBQVlDLEVBQUEsRUFDWkM7RUFBQSxJQUNFTixDQUFBO0VBWUosU0FBU08sRUFBYVAsQ0FBQSxFQUFHRSxDQUFBO0lBQ3ZCLE1BQU1FLENB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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCards;\nvar _createShadowMin = require(\"../shared/create-shadow.min.mjs\");\nvar _effectInitMin = require(\"../shared/effect-init.min.mjs\");\nvar _effectTargetMin = require(\"../shared/effect-target.min.mjs\");\nvar _effectVirtualTransitionEndMin = require(\"../shared/effect-virtual-transition-end.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction EffectCards(e) {\n  let {\n    swiper: t,\n    extendParams: a,\n    on: s\n  } = e;\n  a({\n    cardsEffect: {\n      slideShadows: !0,\n      rotate: !0,\n      perSlideRotate: 2,\n      perSlideOffset: 8\n    }\n  });\n  (0, _effectInitMin.e)({\n    effect: \"cards\",\n    swiper: t,\n    on: s,\n    setTranslate: () => {\n      const {\n          slides: e,\n          activeIndex: a,\n          rtlTranslate: s\n        } = t,\n        r = t.params.cardsEffect,\n        {\n          startTranslate: i,\n          isTouched: n\n        } = t.touchEventsData,\n        o = s ? -t.translate : t.translate;\n      for (let l = 0; l < e.length; l += 1) {\n        const d = e[l],\n          f = d.progress,\n          c = Math.min(Math.max(f, -4), 4);\n        let m = d.swiperSlideOffset;\n        t.params.centeredSlides && !t.params.cssMode && (t.wrapperEl.style.transform = `translateX(${t.minTranslate()}px)`), t.params.centeredSlides && t.params.cssMode && (m -= e[0].swiperSlideOffset);\n        let p = t.params.cssMode ? -m - t.translate : -m,\n          h = 0;\n        const M = -100 * Math.abs(c);\n        let u = 1,\n          w = -r.perSlideRotate * c,\n          S = r.perSlideOffset - .75 * Math.abs(c);\n        const $ = t.virtual && t.params.virtual.enabled ? t.virtual.from + l : l,\n          E = ($ === a || $ === a - 1) && c > 0 && c < 1 && (n || t.params.cssMode) && o < i,\n          T = ($ === a || $ === a + 1) && c < 0 && c > -1 && (n || t.params.cssMode) && o > i;\n        if (E || T) {\n          const e = (1 - Math.abs((Math.abs(c) - .5) / .5)) ** .5;\n          w += -28 * c * e, u += -.5 * e, S += 96 * e, h = -25 * e * Math.abs(c) + \"%\";\n        }\n        if (p = c < 0 ? `calc(${p}px ${s ? \"-\" : \"+\"} (${S * Math.abs(c)}%))` : c > 0 ? `calc(${p}px ${s ? \"-\" : \"+\"} (-${S * Math.abs(c)}%))` : `${p}px`, !t.isHorizontal()) {\n          const e = h;\n          h = p, p = e;\n        }\n        const x = c < 0 ? \"\" + (1 + (1 - u) * c) : \"\" + (1 - (1 - u) * c),\n          b = `\\n        translate3d(${p}, ${h}, ${M}px)\\n        rotateZ(${r.rotate ? s ? -w : w : 0}deg)\\n        scale(${x})\\n      `;\n        if (r.slideShadows) {\n          let e = d.querySelector(\".swiper-slide-shadow\");\n          e || (e = (0, _createShadowMin.c)(\"cards\", d)), e && (e.style.opacity = Math.min(Math.max((Math.abs(c) - .5) / .5, 0), 1));\n        }\n        d.style.zIndex = -Math.abs(Math.round(f)) + e.length;\n        (0, _effectTargetMin.e)(r, d).style.transform = b;\n      }\n    },\n    setTransition: e => {\n      const a = t.slides.map(e => (0, _utilsMin.k)(e));\n      a.forEach(t => {\n        t.style.transitionDuration = `${e}ms`, t.querySelectorAll(\".swiper-slide-shadow\").forEach(t => {\n          t.style.transitionDuration = `${e}ms`;\n        });\n      }), (0, _effectVirtualTransitionEndMin.e)({\n        swiper: t,\n        duration: e,\n        transformElements: a\n      });\n    },\n    perspective: () => !0,\n    overwriteParams: () => ({\n      watchSlidesProgress: !0,\n      virtualTranslate: !t.params.cssMode\n    })\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWZmZWN0SW5pdE1pbiIsInJlcXVpcmUiLCJfZWZmZWN0VGFyZ2V0TWluIiwiX2VmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kTWluIiwiX3V0aWxzTWluIiwiRWZmZWN0Q2FyZHMiLCJlIiwic3dpcGVyIiwidCIsImV4dGVuZFBhcmFtcyIsImEiLCJvbiIsInMiLCJjYXJkc0VmZmVjdCIsInNsaWRlU2hhZG93cyIsInJvdGF0ZSIsInBlclNsaWRlUm90YXRlIiwicGVyU2xpZGVPZmZzZXQiLCJlZmZlY3RJbml0IiwiZWZmZWN0Iiwic2V0VHJhbnNsYXRlIiwic2xpZGVzIiwiYWN0aXZlSW5kZXgiLCJydGxUcmFuc2xhdGUiLCJyIiwicGFyYW1zIiwic3RhcnRUcmFuc2xhdGUiLCJpIiwiaXNUb3VjaGVkIiwibiIsInRvdWNoRXZlbnRzRGF0YSIsIm8iLCJ0cmFuc2xhdGUiLCJsIiwibGVuZ3RoIiwiZCIsImYiLCJwcm9ncmVzcyIsImMiLCJNYXRoIiwibWluIiwibWF4IiwibSIsInN3aXBlclNsaWRlT2Zmc2V0IiwiY2VudGVyZWRTbGlkZXMiLCJjc3NNb2RlIiwid3JhcHBlckVsIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJtaW5UcmFuc2xhdGUiLCJwIiwiaCIsIk0iLCJhYnMiLCJ1IiwidyIsIlMiLCIkIiwidmlydHVhbCIsImVuYWJsZWQiLCJmcm9tIiwiRSIsIlQiLCJpc0hvcml6b250YWwiLCJ4IiwiYiIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVTaGFkb3ciLCJvcGFjaXR5IiwiekluZGV4Iiwicm91bmQiLCJlZmZlY3RUYXJnZXQiLCJzZXRUcmFuc2l0aW9uIiwibWFwIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsImZvckVhY2giLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQiLCJkdXJhdGlvbiIsInRyYW5zZm9ybUVsZW1lbnRzIiwicGVyc3BlY3RpdmUiLCJvdmVyd3JpdGVQYXJhbXMiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwidmlydHVhbFRyYW5zbGF0ZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0MsSUFBQUEsY0FBQSxHQUFBQyxPQUFBO0FBQ0YsSUFBQUMsZ0JBQUEsR0FBQUQsT0FBQTtBQUNFLElBQUFFLDhCQUFBLEdBQUFGLE9BQUE7QUFDYyxJQUFBRyxTQUFBLEdBQUFILE9BQUE7QUFHaEQsU0FBU0ksWUFBWUMsQ0FBQTtFQUNuQjtJQUFJQyxNQUFBLEVBQ0ZDLENBQUE7SUFBTUMsWUFBQSxFQUNOQyxDQUFBO0lBQVlDLEVBQUEsRUFDWkM7RUFBQSxJQUNFTixDQUFBO0VBQ0pJLENBQUEsQ0FBYTtJQUNYRyxXQUFBLEVBQWE7TUFDWEMsWUFBQSxHQUFjO01BQ2RDLE1BQUEsR0FBUTtNQUNSQyxjQUFBLEVBQWdCO01BQ2hCQyxjQUFBLEVBQWdCO0lBQUE7RUFBQTtFQTZGcEIsSUFBQUMsZ0JBQUEsRUFBVztJQUNUQyxNQUFBLEVBQVE7SUFDUlosTUFBQSxFQUFBQyxDQUFBO0lBQ0FHLEVBQUEsRUFBQUMsQ0FBQTtJQUNBUSxZQUFBLEVBOUZtQkEsQ0FBQTtNQUNuQjtVQUFNQyxNQUFBLEVBQ0pmLENBQUE7VUFBTWdCLFdBQUEsRUFDTlosQ0FBQTtVQUNBYSxZQUFBLEVBQWNYO1FBQUEsSUFDWkosQ0FBQTtRQUNFZ0IsQ0FBQSxHQUFTaEIsQ0FBQSxDQUFPaUIsTUFBQSxDQUFPWixXQUFBO1FBQUE7VUFDdkJhLGNBQUEsRUFDSkMsQ0FBQTtVQUFjQyxTQUFBLEVBQ2RDO1FBQUEsSUFDRXJCLENBQUEsQ0FBT3NCLGVBQUE7UUFDTEMsQ0FBQSxHQUFtQm5CLENBQUEsSUFBT0osQ0FBQSxDQUFPd0IsU0FBQSxHQUFZeEIsQ0FBQSxDQUFPd0IsU0FBQTtNQUMxRCxLQUFLLElBQUlDLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUkzQixDQUFBLENBQU80QixNQUFBLEVBQVFELENBQUEsSUFBSyxHQUFH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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCoverflow;\nvar _createShadowMin = require(\"../shared/create-shadow.min.mjs\");\nvar _effectInitMin = require(\"../shared/effect-init.min.mjs\");\nvar _effectTargetMin = require(\"../shared/effect-target.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction EffectCoverflow(e) {\n  let {\n    swiper: t,\n    extendParams: s,\n    on: r\n  } = e;\n  s({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: !0\n    }\n  });\n  (0, _effectInitMin.e)({\n    effect: \"coverflow\",\n    swiper: t,\n    on: r,\n    setTranslate: () => {\n      const {\n          width: e,\n          height: s,\n          slides: r,\n          slidesSizesGrid: o\n        } = t,\n        a = t.params.coverflowEffect,\n        i = t.isHorizontal(),\n        l = t.translate,\n        f = i ? e / 2 - l : s / 2 - l,\n        d = i ? a.rotate : -a.rotate,\n        c = a.depth;\n      for (let e = 0, t = r.length; e < t; e += 1) {\n        const t = r[e],\n          s = o[e],\n          l = (f - t.swiperSlideOffset - s / 2) / s,\n          h = \"function\" == typeof a.modifier ? a.modifier(l) : l * a.modifier;\n        let n = i ? d * h : 0,\n          w = i ? 0 : d * h,\n          p = -c * Math.abs(h),\n          m = a.stretch;\n        \"string\" == typeof m && -1 !== m.indexOf(\"%\") && (m = parseFloat(a.stretch) / 100 * s);\n        let y = i ? 0 : m * h,\n          S = i ? m * h : 0,\n          g = 1 - (1 - a.scale) * Math.abs(h);\n        Math.abs(S) < .001 && (S = 0), Math.abs(y) < .001 && (y = 0), Math.abs(p) < .001 && (p = 0), Math.abs(n) < .001 && (n = 0), Math.abs(w) < .001 && (w = 0), Math.abs(g) < .001 && (g = 0);\n        const b = `translate3d(${S}px,${y}px,${p}px)  rotateX(${w}deg) rotateY(${n}deg) scale(${g})`;\n        if ((0, _effectTargetMin.e)(a, t).style.transform = b, t.style.zIndex = 1 - Math.abs(Math.round(h)), a.slideShadows) {\n          let e = i ? t.querySelector(\".swiper-slide-shadow-left\") : t.querySelector(\".swiper-slide-shadow-top\"),\n            s = i ? t.querySelector(\".swiper-slide-shadow-right\") : t.querySelector(\".swiper-slide-shadow-bottom\");\n          e || (e = (0, _createShadowMin.c)(\"coverflow\", t, i ? \"left\" : \"top\")), s || (s = (0, _createShadowMin.c)(\"coverflow\", t, i ? \"right\" : \"bottom\")), e && (e.style.opacity = h > 0 ? h : 0), s && (s.style.opacity = -h > 0 ? -h : 0);\n        }\n      }\n    },\n    setTransition: e => {\n      t.slides.map(e => (0, _utilsMin.k)(e)).forEach(t => {\n        t.style.transitionDuration = `${e}ms`, t.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach(t => {\n          t.style.transitionDuration = `${e}ms`;\n        });\n      });\n    },\n    perspective: () => !0,\n    overwriteParams: () => ({\n      watchSlidesProgress: !0\n    })\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWZmZWN0SW5pdE1pbiIsInJlcXVpcmUiLCJfZWZmZWN0VGFyZ2V0TWluIiwiX3V0aWxzTWluIiwiRWZmZWN0Q292ZXJmbG93IiwiZSIsInN3aXBlciIsInQiLCJleHRlbmRQYXJhbXMiLCJzIiwib24iLCJyIiwiY292ZXJmbG93RWZmZWN0Iiwicm90YXRlIiwic3RyZXRjaCIsImRlcHRoIiwic2NhbGUiLCJtb2RpZmllciIsInNsaWRlU2hhZG93cyIsImVmZmVjdEluaXQiLCJlZmZlY3QiLCJzZXRUcmFuc2xhdGUiLCJ3aWR0aCIsImhlaWdodCIsInNsaWRlcyIsInNsaWRlc1NpemVzR3JpZCIsIm8iLCJhIiwicGFyYW1zIiwiaSIsImlzSG9yaXpvbnRhbCIsImwiLCJ0cmFuc2xhdGUiLCJmIiwiZCIsImMiLCJsZW5ndGgiLCJzd2lwZXJTbGlkZU9mZnNldCIsImgiLCJuIiwidyIsInAiLCJNYXRoIiwiYWJzIiwibSIsImluZGV4T2YiLCJwYXJzZUZsb2F0IiwieSIsIlMiLCJnIiwiYiIsImVmZmVjdFRhcmdldCIsInN0eWxlIiwidHJhbnNmb3JtIiwiekluZGV4Iiwicm91bmQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlU2hhZG93Iiwib3BhY2l0eSIsInNldFRyYW5zaXRpb24iLCJtYXAiLCJnZXRTbGlkZVRyYW5zZm9ybUVsIiwiZm9yRWFjaCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwZXJzcGVjdGl2ZSIsIm92ZXJ3cml0ZVBhcmFtcyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtDLElBQUFBLGNBQUEsR0FBQUMsT0FBQTtBQUNGLElBQUFDLGdCQUFBLEdBQUFELE9BQUE7QUFDRSxJQUFBRSxTQUFBLEdBQUFGLE9BQUE7QUFHbEMsU0FBU0csZ0JBQWdCQyxDQUFBO0VBQ3ZCO0lBQUlDLE1BQUEsRUFDRkMs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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCreative;\nvar _createShadowMin = require(\"../shared/create-shadow.min.mjs\");\nvar _effectInitMin = require(\"../shared/effect-init.min.mjs\");\nvar _effectTargetMin = require(\"../shared/effect-target.min.mjs\");\nvar _effectVirtualTransitionEndMin = require(\"../shared/effect-virtual-transition-end.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction EffectCreative(e) {\n  let {\n    swiper: t,\n    extendParams: s,\n    on: r\n  } = e;\n  s({\n    creativeEffect: {\n      limitProgress: 1,\n      shadowPerProgress: !1,\n      progressMultiplier: 1,\n      perspective: !0,\n      prev: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      },\n      next: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      }\n    }\n  });\n  const a = e => \"string\" == typeof e ? e : `${e}px`;\n  (0, _effectInitMin.e)({\n    effect: \"creative\",\n    swiper: t,\n    on: r,\n    setTranslate: () => {\n      const {\n          slides: e,\n          wrapperEl: s,\n          slidesSizesGrid: r\n        } = t,\n        i = t.params.creativeEffect,\n        {\n          progressMultiplier: o\n        } = i,\n        l = t.params.centeredSlides;\n      if (l) {\n        const e = r[0] / 2 - t.params.slidesOffsetBefore || 0;\n        s.style.transform = `translateX(calc(50% - ${e}px))`;\n      }\n      for (let s = 0; s < e.length; s += 1) {\n        const r = e[s],\n          n = r.progress,\n          c = Math.min(Math.max(r.progress, -i.limitProgress), i.limitProgress);\n        let f = c;\n        l || (f = Math.min(Math.max(r.originalProgress, -i.limitProgress), i.limitProgress));\n        const m = r.swiperSlideOffset,\n          p = [t.params.cssMode ? -m - t.translate : -m, 0, 0],\n          d = [0, 0, 0];\n        let h = !1;\n        t.isHorizontal() || (p[1] = p[0], p[0] = 0);\n        let g = {\n          translate: [0, 0, 0],\n          rotate: [0, 0, 0],\n          scale: 1,\n          opacity: 1\n        };\n        c < 0 ? (g = i.next, h = !0) : c > 0 && (g = i.prev, h = !0), p.forEach((e, t) => {\n          p[t] = `calc(${e}px + (${a(g.translate[t])} * ${Math.abs(c * o)}))`;\n        }), d.forEach((e, t) => {\n          d[t] = g.rotate[t] * Math.abs(c * o);\n        }), r.style.zIndex = -Math.abs(Math.round(n)) + e.length;\n        const w = p.join(\", \"),\n          y = `rotateX(${d[0]}deg) rotateY(${d[1]}deg) rotateZ(${d[2]}deg)`,\n          u = f < 0 ? `scale(${1 + (1 - g.scale) * f * o})` : `scale(${1 - (1 - g.scale) * f * o})`,\n          v = f < 0 ? 1 + (1 - g.opacity) * f * o : 1 - (1 - g.opacity) * f * o,\n          E = `translate3d(${w}) ${y} ${u}`;\n        if (h && g.shadow || !h) {\n          let e = r.querySelector(\".swiper-slide-shadow\");\n          if (!e && g.shadow && (e = (0, _createShadowMin.c)(\"creative\", r)), e) {\n            const t = i.shadowPerProgress ? c * (1 / i.limitProgress) : c;\n            e.style.opacity = Math.min(Math.max(Math.abs(t), 0), 1);\n          }\n        }\n        const M = (0, _effectTargetMin.e)(i, r);\n        M.style.transform = E, M.style.opacity = v, g.origin && (M.style.transformOrigin = g.origin);\n      }\n    },\n    setTransition: e => {\n      const s = t.slides.map(e => (0, _utilsMin.k)(e));\n      s.forEach(t => {\n        t.style.transitionDuration = `${e}ms`, t.querySelectorAll(\".swiper-slide-shadow\").forEach(t => {\n          t.style.transitionDuration = `${e}ms`;\n        });\n      }), (0, _effectVirtualTransitionEndMin.e)({\n        swiper: t,\n        duration: e,\n        transformElements: s,\n        allSlides: !0\n      });\n    },\n    perspective: () => t.params.creativeEffect.perspective,\n    overwriteParams: () => ({\n      watchSlidesProgress: !0,\n      virtualTranslate: !t.params.cssMode\n    })\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWZmZWN0SW5pdE1pbiIsInJlcXVpcmUiLCJfZWZmZWN0VGFyZ2V0TWluIiwiX2VmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kTWluIiwiX3V0aWxzTWluIiwiRWZmZWN0Q3JlYXRpdmUiLCJlIiwic3dpcGVyIiwidCIsImV4dGVuZFBhcmFtcyIsInMiLCJvbiIsInIiLCJjcmVhdGl2ZUVmZmVjdCIsImxpbWl0UHJvZ3Jlc3MiLCJzaGFkb3dQZXJQcm9ncmVzcyIsInByb2dyZXNzTXVsdGlwbGllciIsInBlcnNwZWN0aXZlIiwicHJldiIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsIm9wYWNpdHkiLCJzY2FsZSIsIm5leHQiLCJhIiwiZWZmZWN0SW5pdCIsImVmZmVjdCIsInNldFRyYW5zbGF0ZSIsInNsaWRlcyIsIndyYXBwZXJFbCIsInNsaWRlc1NpemVzR3JpZCIsImkiLCJwYXJhbXMiLCJvIiwibCIsImNlbnRlcmVkU2xpZGVzIiwic2xpZGVzT2Zmc2V0QmVmb3JlIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJsZW5ndGgiLCJuIiwicHJvZ3Jlc3MiLCJjIiwiTWF0aCIsIm1pbiIsIm1heCIsImYiLCJvcmlnaW5hbFByb2dyZXNzIiwibSIsInN3aXBlclNsaWRlT2Zmc2V0IiwicCIsImNzc01vZGUiLCJkIiwiaCIsImlzSG9yaXpvbnRhbCIsImciLCJmb3JFYWNoIiwiYWJzIiwiekluZGV4Iiwicm91bmQiLCJ3Iiwiam9pbiIsInkiLCJ1IiwidiIsIkUiLCJzaGFkb3ciLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlU2hhZG93IiwiTSIsImVmZmVjdFRhcmdldCIsIm9yaWdpbiIsInRyYW5zZm9ybU9yaWdpbiIsInNldFRyYW5zaXRpb24iLCJtYXAiLCJnZXRTbGlkZVRyYW5zZm9ybUVsIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIiwiZHVyYXRpb24iLCJ0cmFuc2Zvcm1FbGVtZW50cyIsImFsbFNsaWRlcyIsIm92ZXJ3cml0ZVBhcmFtcyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ2aXJ0dWFsVHJhbnNsYXRlIl0sInNvdXJjZXMiOlsiMCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrQyxJQUFBQSxjQUFBLEdBQUFDLE9BQUE7QUFDRixJQUFBQyxnQkFBQSxHQUFBRCxPQUFBO0FBQ0UsSUFBQUUsOEJBQUEsR0FBQUYsT0FBQTtBQUNjLElBQUFHLFNBQUEsR0FBQUgsT0FBQTtBQUdoRCxTQUFTSSxlQUFlQyxDQUFBO0VBQ3RCO0lBQUlDLE1BQUEsRUFDRkMsQ0FBQTtJQUFNQyxZQUFBLEVBQ05DLENBQUE7SUFBWUMsRUFBQSxFQUNaQztFQUFBLElBQ0VOLENBQUE7RUFDSkksQ0FBQSxDQUFhO0lBQ1hHLGNBQUEsRUFBZ0I7TUFDZEMsYUFBQSxFQUFlO01BQ2ZDLGlCQUFBLEdBQW1CO01BQ25CQyxrQkFBQSxFQUFvQjtNQUNwQkMsV0FBQSxHQUFhO01BQ2JDLElBQUEsRUFBTTtRQUNKQyxTQUFBLEVBQVcsQ0FBQyxHQUFHLEdBQUc7UUFDbEJDLE1BQUEsRUFBUSxDQUFDLEdBQUcsR0FBRztRQUNmQyxPQUFBLEVBQVM7UUFDVEMsS0FBQSxFQUFPO01BQUE7TUFFVEMsSUFBQSxFQUFNO1FBQ0pKLFNBQUEsRUFBVyxDQUFDLEdBQUcsR0FBRztRQUNsQkMsTUFBQSxFQUFRLENBQUMsR0FBRyxHQUFHO1FBQ2ZDLE9BQUEsRUFBUztRQUNUQyxLQUFBLEVBQU87TUFBQTtJQUFBO0VBQUE7RUFJYixNQUFNRSxDQUFBLEdBQW9CbEIsQ0FBQSxJQUNILG1CQUFWQSxDQUFBLEdBQTJCQSxDQUFBLEdBQy9CLEdBQUdBLENBQUE7RUErRlosSUFBQW1CLGdCQUFBLEVBQVc7SUFDVEMsTUFBQSxFQUFRO0lBQ1JuQixNQUFBLEVBQUFDLENBQUE7SUFDQUcsRUFBQSxFQUFBQyxDQUFBO0lBQ0FlLFlBQUEsRUFqR21CQSxDQUFBO01BQ25CO1VBQU1DLE1BQUEsRUFDSnRC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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectCube;\nvar _effectInitMin = require(\"../shared/effect-init.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction EffectCube(e) {\n  let {\n    swiper: t,\n    extendParams: s,\n    on: a\n  } = e;\n  s({\n    cubeEffect: {\n      slideShadows: !0,\n      shadow: !0,\n      shadowOffset: 20,\n      shadowScale: .94\n    }\n  });\n  const r = (e, t, s) => {\n    let a = s ? e.querySelector(\".swiper-slide-shadow-left\") : e.querySelector(\".swiper-slide-shadow-top\"),\n      r = s ? e.querySelector(\".swiper-slide-shadow-right\") : e.querySelector(\".swiper-slide-shadow-bottom\");\n    a || (a = (0, _utilsMin.c)(\"div\", (\"swiper-slide-shadow-cube swiper-slide-shadow-\" + (s ? \"left\" : \"top\")).split(\" \")), e.append(a)), r || (r = (0, _utilsMin.c)(\"div\", (\"swiper-slide-shadow-cube swiper-slide-shadow-\" + (s ? \"right\" : \"bottom\")).split(\" \")), e.append(r)), a && (a.style.opacity = Math.max(-t, 0)), r && (r.style.opacity = Math.max(t, 0));\n  };\n  (0, _effectInitMin.e)({\n    effect: \"cube\",\n    swiper: t,\n    on: a,\n    setTranslate: () => {\n      const {\n          el: e,\n          wrapperEl: s,\n          slides: a,\n          width: o,\n          height: i,\n          rtlTranslate: l,\n          size: d,\n          browser: n\n        } = t,\n        p = t.params.cubeEffect,\n        c = t.isHorizontal(),\n        w = t.virtual && t.params.virtual.enabled;\n      let h,\n        f = 0;\n      p.shadow && (c ? (h = t.wrapperEl.querySelector(\".swiper-cube-shadow\"), h || (h = (0, _utilsMin.c)(\"div\", \"swiper-cube-shadow\"), t.wrapperEl.append(h)), h.style.height = `${o}px`) : (h = e.querySelector(\".swiper-cube-shadow\"), h || (h = (0, _utilsMin.c)(\"div\", \"swiper-cube-shadow\"), e.append(h))));\n      for (let e = 0; e < a.length; e += 1) {\n        const t = a[e];\n        let s = e;\n        w && (s = parseInt(t.getAttribute(\"data-swiper-slide-index\"), 10));\n        let o = 90 * s,\n          i = Math.floor(o / 360);\n        l && (o = -o, i = Math.floor(-o / 360));\n        const n = Math.max(Math.min(t.progress, 1), -1);\n        let h = 0,\n          m = 0,\n          u = 0;\n        s % 4 == 0 ? (h = 4 * -i * d, u = 0) : (s - 1) % 4 == 0 ? (h = 0, u = 4 * -i * d) : (s - 2) % 4 == 0 ? (h = d + 4 * i * d, u = d) : (s - 3) % 4 == 0 && (h = -d, u = 3 * d + 4 * d * i), l && (h = -h), c || (m = h, h = 0);\n        const b = `rotateX(${c ? 0 : -o}deg) rotateY(${c ? o : 0}deg) translate3d(${h}px, ${m}px, ${u}px)`;\n        n <= 1 && n > -1 && (f = 90 * s + 90 * n, l && (f = 90 * -s - 90 * n)), t.style.transform = b, p.slideShadows && r(t, n, c);\n      }\n      if (s.style.transformOrigin = `50% 50% -${d / 2}px`, s.style[\"-webkit-transform-origin\"] = `50% 50% -${d / 2}px`, p.shadow) if (c) h.style.transform = `translate3d(0px, ${o / 2 + p.shadowOffset}px, ${-o / 2}px) rotateX(90deg) rotateZ(0deg) scale(${p.shadowScale})`;else {\n        const e = Math.abs(f) - 90 * Math.floor(Math.abs(f) / 90),\n          t = 1.5 - (Math.sin(2 * e * Math.PI / 360) / 2 + Math.cos(2 * e * Math.PI / 360) / 2),\n          s = p.shadowScale,\n          a = p.shadowScale / t,\n          r = p.shadowOffset;\n        h.style.transform = `scale3d(${s}, 1, ${a}) translate3d(0px, ${i / 2 + r}px, ${-i / 2 / a}px) rotateX(-90deg)`;\n      }\n      const m = (n.isSafari || n.isWebView) && n.needPerspectiveFix ? -d / 2 : 0;\n      s.style.transform = `translate3d(0px,0,${m}px) rotateX(${t.isHorizontal() ? 0 : f}deg) rotateY(${t.isHorizontal() ? -f : 0}deg)`, s.style.setProperty(\"--swiper-cube-translate-z\", `${m}px`);\n    },\n    setTransition: e => {\n      const {\n        el: s,\n        slides: a\n      } = t;\n      if (a.forEach(t => {\n        t.style.transitionDuration = `${e}ms`, t.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach(t => {\n          t.style.transitionDuration = `${e}ms`;\n        });\n      }), t.params.cubeEffect.shadow && !t.isHorizontal()) {\n        const t = s.querySelector(\".swiper-cube-shadow\");\n        t && (t.style.transitionDuration = `${e}ms`);\n      }\n    },\n    recreateShadows: () => {\n      const e = t.isHorizontal();\n      t.slides.forEach(t => {\n        const s = Math.max(Math.min(t.progress, 1), -1);\n        r(t, s, e);\n      });\n    },\n    getEffectParams: () => t.params.cubeEffect,\n    perspective: () => !0,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: !0,\n      resistanceRatio: 0,\n      spaceBetween: 0,\n      centeredSlides: !1,\n      virtualTranslate: !0\n    })\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectFade;\nvar _effectInitMin = require(\"../shared/effect-init.min.mjs\");\nvar _effectTargetMin = require(\"../shared/effect-target.min.mjs\");\nvar _effectVirtualTransitionEndMin = require(\"../shared/effect-virtual-transition-end.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction EffectFade(e) {\n  let {\n    swiper: t,\n    extendParams: s,\n    on: a\n  } = e;\n  s({\n    fadeEffect: {\n      crossFade: !1\n    }\n  });\n  (0, _effectInitMin.e)({\n    effect: \"fade\",\n    swiper: t,\n    on: a,\n    setTranslate: () => {\n      const {\n          slides: e\n        } = t,\n        s = t.params.fadeEffect;\n      for (let a = 0; a < e.length; a += 1) {\n        const e = t.slides[a];\n        let r = -e.swiperSlideOffset;\n        t.params.virtualTranslate || (r -= t.translate);\n        let i = 0;\n        t.isHorizontal() || (i = r, r = 0);\n        const f = t.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(e.progress), 0) : 1 + Math.min(Math.max(e.progress, -1), 0),\n          n = (0, _effectTargetMin.e)(s, e);\n        n.style.opacity = f, n.style.transform = `translate3d(${r}px, ${i}px, 0px)`;\n      }\n    },\n    setTransition: e => {\n      const s = t.slides.map(e => (0, _utilsMin.k)(e));\n      s.forEach(t => {\n        t.style.transitionDuration = `${e}ms`;\n      }), (0, _effectVirtualTransitionEndMin.e)({\n        swiper: t,\n        duration: e,\n        transformElements: s,\n        allSlides: !0\n      });\n    },\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: !0,\n      spaceBetween: 0,\n      virtualTranslate: !t.params.cssMode\n    })\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWZmZWN0VGFyZ2V0TWluIiwicmVxdWlyZSIsIl9lZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZE1pbiIsIl91dGlsc01pbiIsIkVmZmVjdEZhZGUiLCJlIiwic3dpcGVyIiwidCIsImV4dGVuZFBhcmFtcyIsInMiLCJvbiIsImEiLCJmYWRlRWZmZWN0IiwiY3Jvc3NGYWRlIiwiZWZmZWN0SW5pdCIsImVmZmVjdCIsInNldFRyYW5zbGF0ZSIsInNsaWRlcyIsInBhcmFtcyIsImxlbmd0aCIsInIiLCJzd2lwZXJTbGlkZU9mZnNldCIsInZpcnR1YWxUcmFuc2xhdGUiLCJ0cmFuc2xhdGUiLCJpIiwiaXNIb3Jpem9udGFsIiwiZiIsIk1hdGgiLCJtYXgiLCJhYnMiLCJwcm9ncmVzcyIsIm1pbiIsIm4iLCJlZmZlY3RUYXJnZXQiLCJzdHlsZSIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJzZXRUcmFuc2l0aW9uIiwibWFwIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsImZvckVhY2giLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCIsImR1cmF0aW9uIiwidHJhbnNmb3JtRWxlbWVudHMiLCJhbGxTbGlkZXMiLCJvdmVyd3JpdGVQYXJhbXMiLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyR3JvdXAiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwic3BhY2VCZXR3ZWVuIiwiY3NzTW9kZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0MsSUFBQUEsZ0JBQUEsR0FBQUMsT0FBQTtBQUNFLElBQUFDLDhCQUFBLEdBQUFELE9BQUE7QUFDYyxJQUFBRSxTQUFBLEdBQUFGLE9BQUE7QUFHaEQsU0FBU0csV0FBV0MsQ0FBQTtFQUNsQjtJQUFJQyxNQUFBLEVBQ0ZDLENBQUE7SUFBTUMsWUFBQSxFQUNOQyxDQUFBO0lBQVlDLEVBQUEsRUFDWkM7RUFBQSxJQUNFTixDQUFBO0VBQ0pJLENBQUEsQ0FBYTtJQUNYRyxVQUFBLEVBQVk7TUFDVkMsU0FBQSxHQUFXO0lBQUE7RUFBQTtFQW9DZixJQUFBQyxnQkFBQSxFQUFXO0lBQ1RDLE1BQUEsRUFBUTtJQUNSVCxNQUFBLEVBQUFDLENBQUE7SUFDQUcsRUFBQSxFQUFBQyxDQUFBO0lBQ0FLLFlBQUEsRUFyQ21CQSxDQUFBO01BQ25CO1VBQU1DLE1BQUEsRUFDSlo7UUFBQSxJQUNFRSxDQUFBO1FBQ0VFLENBQUEsR0FBU0YsQ0FBQSxDQUFPVyxNQUFBLENBQU9OLFVBQUE7TUFDN0IsS0FBSyxJQUFJRCxDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJTixDQUFBLENBQU9jLE1BQUEsRUFBUVIsQ0FBQSxJQUFLLEdBQUc7UUFDekMsTUFBTU4sQ0FBQSxHQUFVRSxDQUFBLENBQU9VLE1BQUEsQ0FBT04sQ0FBQTtRQUU5QixJQUFJUyxDQUFBLElBRFdmLENBQUEsQ0FBUWdCLGlCQUFBO1FBRWxCZCxDQUFBLENBQU9XLE1BQUEsQ0FBT0ksZ0JBQUEsS0FBa0JGLENBQUEsSUFBTWIsQ0FBQSxDQUFPZ0IsU0FBQTtRQUNsRCxJQUFJQyxDQUFBLEdBQUs7UUFDSmpCLENBQUEsQ0FBT2tCLFlBQUEsT0FDVkQsQ0FBQSxHQUFLSixDQUFBLEVBQ0xBLENBQUEsR0FBSztRQUVQLE1BQU1NLENBQUEsR0FBZW5CLENBQUEsQ0FBT1csTUFBQSxDQUFPTixVQUFBLENBQVdDLFNBQUEsR0FBWWMsSUFBQSxDQUFLQyxHQUFBLENBQUksSUFBSUQsSUFBQSxDQUFLRSxHQUFBLENBQUl4QixDQUFBLENBQVF5QixRQUFBLEdBQVcsS0FBSyxJQUFJSCxJQUFBLENBQUtJLEdBQUEsQ0FBSUosSUFBQSxDQUFLQyxHQUFBLENBQUl2QixDQUFBLENBQVF5QixRQUFBLEdBQVcsSUFBSTtVQUMvSUUsQ0FBQSxHQUFXLElBQUFDLGtCQUFBLEVBQWF4QixDQUFBLEVBQVFKLENBQUE7UUFDdEMyQixDQUFBLENBQVNFLEtBQUEsQ0FBTUMsT0FBQSxHQUFVVCxDQUFBLEVBQ3pCTSxDQUFBLENBQVNFLEtBQUEsQ0FBTUUsU0FBQSxHQUFZLGVBQWVoQixDQUFBLE9BQVNJLENBQUEsVUFDckQ7TUFBQTtJQUFBO0lBbUJBYSxhQUFBLEVBakJvQmhDLENBQUE7TUFDcEIsTUFBTUksQ0FBQSxHQUFvQkYsQ0FBQSxDQUFPVSxNQUFBLENBQU9xQixHQUFBLENBQUlqQyxDQUFBLElBQVcsSUFBQWtDLFdBQUEsRUFBb0JsQyxDQUFBO01BQzNFSSxDQUFBLENBQWtCK0IsT0FBQSxDQUFRakMsQ0FBQTtRQUN4QkEsQ0FBQSxDQUFHMkIsS0FBQSxDQUFNTyxrQkFBQSxHQUFxQixHQUFHcEMsQ0FBQSxJQUFZO01BQUEsSUFFL0MsSUFBQXFDLGdDQUFBLEVBQTJCO1FBQ3pCcEMsTUFBQSxFQUFBQyxDQUFBO1FBQ0FvQyxRQUFBLEVBQUF0QyxDQUFBO1FBQ0F1QyxpQkFBQSxFQUFBbkMsQ0FBQTtRQUNBb0MsU0FBQSxHQUFXO01BQUEsRUFDWDtJQUFBO0lBUUZDLGVBQUEsRUFBaUJBLENBQUEsTUFBTTtNQUNyQkMsYUFBQSxFQUFlO01BQ2ZDLGNBQUEsRUFBZ0I7TUFDaEJDLG1CQUFBLEdBQXFCO01BQ3JCQyxZQUFBLEVBQWM7TUFDZDVCLGdCQUFBLEdBQW1CZixDQUFBLENBQU9XLE1BQUEsQ0FBT2lDO0lBQUE7RUFBQSxFQUd2QztBQUFBIn0=","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EffectFlip;\nvar _createShadowMin = require(\"../shared/create-shadow.min.mjs\");\nvar _effectInitMin = require(\"../shared/effect-init.min.mjs\");\nvar _effectTargetMin = require(\"../shared/effect-target.min.mjs\");\nvar _effectVirtualTransitionEndMin = require(\"../shared/effect-virtual-transition-end.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction EffectFlip(e) {\n  let {\n    swiper: t,\n    extendParams: s,\n    on: r\n  } = e;\n  s({\n    flipEffect: {\n      slideShadows: !0,\n      limitRotation: !0\n    }\n  });\n  const a = (e, s) => {\n    let r = t.isHorizontal() ? e.querySelector(\".swiper-slide-shadow-left\") : e.querySelector(\".swiper-slide-shadow-top\"),\n      a = t.isHorizontal() ? e.querySelector(\".swiper-slide-shadow-right\") : e.querySelector(\".swiper-slide-shadow-bottom\");\n    r || (r = (0, _createShadowMin.c)(\"flip\", e, t.isHorizontal() ? \"left\" : \"top\")), a || (a = (0, _createShadowMin.c)(\"flip\", e, t.isHorizontal() ? \"right\" : \"bottom\")), r && (r.style.opacity = Math.max(-s, 0)), a && (a.style.opacity = Math.max(s, 0));\n  };\n  (0, _effectInitMin.e)({\n    effect: \"flip\",\n    swiper: t,\n    on: r,\n    setTranslate: () => {\n      const {\n          slides: e,\n          rtlTranslate: s\n        } = t,\n        r = t.params.flipEffect;\n      for (let i = 0; i < e.length; i += 1) {\n        const o = e[i];\n        let l = o.progress;\n        t.params.flipEffect.limitRotation && (l = Math.max(Math.min(o.progress, 1), -1));\n        const f = o.swiperSlideOffset;\n        let n = -180 * l,\n          p = 0,\n          d = t.params.cssMode ? -f - t.translate : -f,\n          m = 0;\n        t.isHorizontal() ? s && (n = -n) : (m = d, d = 0, p = -n, n = 0), o.style.zIndex = -Math.abs(Math.round(l)) + e.length, r.slideShadows && a(o, l);\n        const c = `translate3d(${d}px, ${m}px, 0px) rotateX(${p}deg) rotateY(${n}deg)`;\n        (0, _effectTargetMin.e)(r, o).style.transform = c;\n      }\n    },\n    setTransition: e => {\n      const s = t.slides.map(e => (0, _utilsMin.k)(e));\n      s.forEach(t => {\n        t.style.transitionDuration = `${e}ms`, t.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach(t => {\n          t.style.transitionDuration = `${e}ms`;\n        });\n      }), (0, _effectVirtualTransitionEndMin.e)({\n        swiper: t,\n        duration: e,\n        transformElements: s\n      });\n    },\n    recreateShadows: () => {\n      t.params.flipEffect, t.slides.forEach(e => {\n        let s = e.progress;\n        t.params.flipEffect.limitRotation && (s = Math.max(Math.min(e.progress, 1), -1)), a(e, s);\n      });\n    },\n    getEffectParams: () => t.params.flipEffect,\n    perspective: () => !0,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: !0,\n      spaceBetween: 0,\n      virtualTranslate: !t.params.cssMode\n    })\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWZmZWN0SW5pdE1pbiIsInJlcXVpcmUiLCJfZWZmZWN0VGFyZ2V0TWluIiwiX2VmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kTWluIiwiX3V0aWxzTWluIiwiRWZmZWN0RmxpcCIsImUiLCJzd2lwZXIiLCJ0IiwiZXh0ZW5kUGFyYW1zIiwicyIsIm9uIiwiciIsImZsaXBFZmZlY3QiLCJzbGlkZVNoYWRvd3MiLCJsaW1pdFJvdGF0aW9uIiwiYSIsImNyZWF0ZVNsaWRlU2hhZG93cyIsImlzSG9yaXpvbnRhbCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVTaGFkb3ciLCJzdHlsZSIsIm9wYWNpdHkiLCJNYXRoIiwibWF4IiwiZWZmZWN0SW5pdCIsImVmZmVjdCIsInNldFRyYW5zbGF0ZSIsInNsaWRlcyIsInJ0bFRyYW5zbGF0ZSIsInBhcmFtcyIsImkiLCJsZW5ndGgiLCJvIiwibCIsInByb2dyZXNzIiwibWluIiwiZiIsInN3aXBlclNsaWRlT2Zmc2V0IiwibiIsInAiLCJkIiwiY3NzTW9kZSIsInRyYW5zbGF0ZSIsIm0iLCJ6SW5kZXgiLCJhYnMiLCJyb3VuZCIsImMiLCJlZmZlY3RUYXJnZXQiLCJ0cmFuc2Zvcm0iLCJzZXRUcmFuc2l0aW9uIiwibWFwIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsImZvckVhY2giLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQiLCJkdXJhdGlvbiIsInRyYW5zZm9ybUVsZW1lbnRzIiwicmVjcmVhdGVTaGFkb3dzIiwiZ2V0RWZmZWN0UGFyYW1zIiwicGVyc3BlY3RpdmUiLCJvdmVyd3JpdGVQYXJhbXMiLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyR3JvdXAiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwic3BhY2VCZXR3ZWVuIiwidmlydHVhbFRyYW5zbGF0ZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGlu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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = freeMode;\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction freeMode(e) {\n  let {\n    swiper: t,\n    extendParams: o,\n    emit: n,\n    once: s\n  } = e;\n  o({\n    freeMode: {\n      enabled: !1,\n      momentum: !0,\n      momentumRatio: 1,\n      momentumBounce: !0,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: !1,\n      minimumVelocity: .02\n    }\n  }), Object.assign(t, {\n    freeMode: {\n      onTouchStart: function () {\n        if (t.params.cssMode) return;\n        const e = t.getTranslate();\n        t.setTranslate(e), t.setTransition(0), t.touchEventsData.velocities.length = 0, t.freeMode.onTouchEnd({\n          currentPos: t.rtl ? t.translate : -t.translate\n        });\n      },\n      onTouchMove: function () {\n        if (t.params.cssMode) return;\n        const {\n          touchEventsData: e,\n          touches: o\n        } = t;\n        0 === e.velocities.length && e.velocities.push({\n          position: o[t.isHorizontal() ? \"startX\" : \"startY\"],\n          time: e.touchStartTime\n        }), e.velocities.push({\n          position: o[t.isHorizontal() ? \"currentX\" : \"currentY\"],\n          time: (0, _utilsMin.d)()\n        });\n      },\n      onTouchEnd: function (e) {\n        let {\n          currentPos: o\n        } = e;\n        if (t.params.cssMode) return;\n        const {\n            params: i,\n            wrapperEl: a,\n            rtlTranslate: r,\n            snapGrid: l,\n            touchEventsData: m\n          } = t,\n          c = (0, _utilsMin.d)() - m.touchStartTime;\n        if (o < -t.minTranslate()) t.slideTo(t.activeIndex);else if (o > -t.maxTranslate()) t.slides.length < l.length ? t.slideTo(l.length - 1) : t.slideTo(t.slides.length - 1);else {\n          if (i.freeMode.momentum) {\n            if (m.velocities.length > 1) {\n              const e = m.velocities.pop(),\n                o = m.velocities.pop(),\n                n = e.position - o.position,\n                s = e.time - o.time;\n              t.velocity = n / s, t.velocity /= 2, Math.abs(t.velocity) < i.freeMode.minimumVelocity && (t.velocity = 0), (s > 150 || (0, _utilsMin.d)() - e.time > 300) && (t.velocity = 0);\n            } else t.velocity = 0;\n            t.velocity *= i.freeMode.momentumVelocityRatio, m.velocities.length = 0;\n            let e = 1e3 * i.freeMode.momentumRatio;\n            const o = t.velocity * e;\n            let c = t.translate + o;\n            r && (c = -c);\n            let d,\n              u = !1;\n            const f = 20 * Math.abs(t.velocity) * i.freeMode.momentumBounceRatio;\n            let p;\n            if (c < t.maxTranslate()) i.freeMode.momentumBounce ? (c + t.maxTranslate() < -f && (c = t.maxTranslate() - f), d = t.maxTranslate(), u = !0, m.allowMomentumBounce = !0) : c = t.maxTranslate(), i.loop && i.centeredSlides && (p = !0);else if (c > t.minTranslate()) i.freeMode.momentumBounce ? (c - t.minTranslate() > f && (c = t.minTranslate() + f), d = t.minTranslate(), u = !0, m.allowMomentumBounce = !0) : c = t.minTranslate(), i.loop && i.centeredSlides && (p = !0);else if (i.freeMode.sticky) {\n              let e;\n              for (let t = 0; t < l.length; t += 1) if (l[t] > -c) {\n                e = t;\n                break;\n              }\n              c = Math.abs(l[e] - c) < Math.abs(l[e - 1] - c) || \"next\" === t.swipeDirection ? l[e] : l[e - 1], c = -c;\n            }\n            if (p && s(\"transitionEnd\", () => {\n              t.loopFix();\n            }), 0 !== t.velocity) {\n              if (e = r ? Math.abs((-c - t.translate) / t.velocity) : Math.abs((c - t.translate) / t.velocity), i.freeMode.sticky) {\n                const o = Math.abs((r ? -c : c) - t.translate),\n                  n = t.slidesSizesGrid[t.activeIndex];\n                e = o < n ? i.speed : o < 2 * n ? 1.5 * i.speed : 2.5 * i.speed;\n              }\n            } else if (i.freeMode.sticky) return void t.slideToClosest();\n            i.freeMode.momentumBounce && u ? (t.updateProgress(d), t.setTransition(e), t.setTranslate(c), t.transitionStart(!0, t.swipeDirection), t.animating = !0, (0, _utilsMin.i)(a, () => {\n              t && !t.destroyed && m.allowMomentumBounce && (n(\"momentumBounce\"), t.setTransition(i.speed), setTimeout(() => {\n                t.setTranslate(d), (0, _utilsMin.i)(a, () => {\n                  t && !t.destroyed && t.transitionEnd();\n                });\n              }, 0));\n            })) : t.velocity ? (n(\"_freeModeNoMomentumRelease\"), t.updateProgress(c), t.setTransition(e), t.setTranslate(c), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, (0, _utilsMin.i)(a, () => {\n              t && !t.destroyed && t.transitionEnd();\n            }))) : t.updateProgress(c), t.updateActiveIndex(), t.updateSlidesClasses();\n          } else {\n            if (i.freeMode.sticky) return void t.slideToClosest();\n            i.freeMode && n(\"_freeModeNoMomentumRelease\");\n          }\n          (!i.freeMode.momentum || c >= i.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses());\n        }\n      }\n    }\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Grid;\nfunction Grid(e) {\n  let r,\n    t,\n    a,\n    {\n      swiper: l,\n      extendParams: i\n    } = e;\n  i({\n    grid: {\n      rows: 1,\n      fill: \"column\"\n    }\n  });\n  const o = () => {\n    let e = l.params.spaceBetween;\n    return \"string\" == typeof e && e.indexOf(\"%\") >= 0 ? e = parseFloat(e.replace(\"%\", \"\")) / 100 * l.size : \"string\" == typeof e && (e = parseFloat(e)), e;\n  };\n  l.grid = {\n    initSlides: e => {\n      const {\n          slidesPerView: i\n        } = l.params,\n        {\n          rows: o,\n          fill: s\n        } = l.params.grid;\n      a = Math.floor(e / o), r = Math.floor(e / o) === e / o ? e : Math.ceil(e / o) * o, \"auto\" !== i && \"row\" === s && (r = Math.max(r, i * o)), t = r / o;\n    },\n    updateSlide: (e, i, s, p) => {\n      const {\n          slidesPerGroup: n\n        } = l.params,\n        d = o(),\n        {\n          rows: f,\n          fill: h\n        } = l.params.grid;\n      let u, c, m;\n      if (\"row\" === h && n > 1) {\n        const t = Math.floor(e / (n * f)),\n          a = e - f * n * t,\n          l = 0 === t ? n : Math.min(Math.ceil((s - t * f * n) / f), n);\n        m = Math.floor(a / l), c = a - m * l + t * n, u = c + m * r / f, i.style.order = u;\n      } else \"column\" === h ? (c = Math.floor(e / f), m = e - c * f, (c > a || c === a && m === f - 1) && (m += 1, m >= f && (m = 0, c += 1))) : (m = Math.floor(e / t), c = e - m * t);\n      i.row = m, i.column = c, i.style[p(\"margin-top\")] = 0 !== m ? d && `${d}px` : \"\";\n    },\n    updateWrapperSize: (e, t, a) => {\n      const {\n          centeredSlides: i,\n          roundLengths: s\n        } = l.params,\n        p = o(),\n        {\n          rows: n\n        } = l.params.grid;\n      if (l.virtualSize = (e + p) * r, l.virtualSize = Math.ceil(l.virtualSize / n) - p, l.wrapperEl.style[a(\"width\")] = `${l.virtualSize + p}px`, i) {\n        const e = [];\n        for (let r = 0; r < t.length; r += 1) {\n          let a = t[r];\n          s && (a = Math.floor(a)), t[r] < l.virtualSize + t[0] && e.push(a);\n        }\n        t.splice(0, t.length), t.push(...e);\n      }\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHcmlkIiwiZSIsInIiLCJ0IiwiYSIsInN3aXBlciIsImwiLCJleHRlbmRQYXJhbXMiLCJpIiwiZ3JpZCIsInJvd3MiLCJmaWxsIiwibyIsImdldFNwYWNlQmV0d2VlbiIsInBhcmFtcyIsInNwYWNlQmV0d2VlbiIsImluZGV4T2YiLCJwYXJzZUZsb2F0IiwicmVwbGFjZSIsInNpemUiLCJpbml0U2xpZGVzIiwic2xpZGVzUGVyVmlldyIsInMiLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwibWF4IiwidXBkYXRlU2xpZGUiLCJwIiwic2xpZGVzUGVyR3JvdXAiLCJuIiwiZCIsImYiLCJoIiwidSIsImMiLCJtIiwibWluIiwic3R5bGUiLCJvcmRlciIsInJvdyIsImNvbHVtbiIsInVwZGF0ZVdyYXBwZXJTaXplIiwiY2VudGVyZWRTbGlkZXMiLCJyb3VuZExlbmd0aHMiLCJ2aXJ0dWFsU2l6ZSIsIndyYXBwZXJFbCIsImxlbmd0aCIsInB1c2giLCJzcGxpY2UiXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxTQUFTQSxLQUFLQyxDQUFBO0VBQ1osSUFVSUMsQ0FBQTtJQUNBQyxDQUFBO0lBQ0FDLENBQUE7SUFBQTtNQVpBQyxNQUFBLEVBQ0ZDLENBQUE7TUFBTUMsWUFBQSxFQUNOQztJQUFBLElBQ0VQLENBQUE7RUFDSk8sQ0FBQSxDQUFhO0lBQ1hDLElBQUEsRUFBTTtNQUNKQyxJQUFBLEVBQU07TUFDTkMsSUFBQSxFQUFNO0lBQUE7RUFBQTtFQU1WLE1BQU1DLENBQUEsR0FBa0JDLENBQUE7SUFDdEIsSUFBSVosQ0FBQSxHQUFlSyxDQUFBLENBQU9RLE1BQUEsQ0FBT0MsWUFBQTtJQU1qQyxPQUw0QixtQkFBakJkLENBQUEsSUFBNkJBLENBQUEsQ0FBYWUsT0FBQSxDQUFRLFFBQVEsSUFDbkVmLENBQUEsR0FBZWdCLFVBQUEsQ0FBV2hCLENBQUEsQ0FBYWlCLE9BQUEsQ0FBUSxLQUFLLE9BQU8s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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = HashNavigation;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction HashNavigation(a) {\n  let {\n      swiper: e,\n      extendParams: t,\n      emit: s,\n      on: i\n    } = a,\n    n = !1;\n  const r = (0, _ssrWindowEsmMin.g)(),\n    h = (0, _ssrWindowEsmMin.a)();\n  t({\n    hashNavigation: {\n      enabled: !1,\n      replaceState: !1,\n      watchState: !1,\n      getSlideIndex(a, t) {\n        if (e.virtual && e.params.virtual.enabled) {\n          const a = e.slides.filter(a => a.getAttribute(\"data-hash\") === t)[0];\n          if (!a) return 0;\n          return parseInt(a.getAttribute(\"data-swiper-slide-index\"), 10);\n        }\n        return e.getSlideIndex((0, _utilsMin.e)(e.slidesEl, `.${e.params.slideClass}[data-hash=\"${t}\"], swiper-slide[data-hash=\"${t}\"]`)[0]);\n      }\n    }\n  });\n  const d = () => {\n      s(\"hashChange\");\n      const a = r.location.hash.replace(\"#\", \"\"),\n        t = e.virtual && e.params.virtual.enabled ? e.slidesEl.querySelector(`[data-swiper-slide-index=\"${e.activeIndex}\"]`) : e.slides[e.activeIndex];\n      if (a !== (t ? t.getAttribute(\"data-hash\") : \"\")) {\n        const t = e.params.hashNavigation.getSlideIndex(e, a);\n        if (void 0 === t || Number.isNaN(t)) return;\n        e.slideTo(t);\n      }\n    },\n    l = () => {\n      if (!n || !e.params.hashNavigation.enabled) return;\n      const a = e.virtual && e.params.virtual.enabled ? e.slidesEl.querySelector(`[data-swiper-slide-index=\"${e.activeIndex}\"]`) : e.slides[e.activeIndex],\n        t = a ? a.getAttribute(\"data-hash\") || a.getAttribute(\"data-history\") : \"\";\n      e.params.hashNavigation.replaceState && h.history && h.history.replaceState ? (h.history.replaceState(null, null, `#${t}` || \"\"), s(\"hashSet\")) : (r.location.hash = t || \"\", s(\"hashSet\"));\n    };\n  i(\"init\", () => {\n    e.params.hashNavigation.enabled && (() => {\n      if (!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled) return;\n      n = !0;\n      const a = r.location.hash.replace(\"#\", \"\");\n      if (a) {\n        const t = 0,\n          s = e.params.hashNavigation.getSlideIndex(e, a);\n        e.slideTo(s || 0, t, e.params.runCallbacksOnInit, !0);\n      }\n      e.params.hashNavigation.watchState && h.addEventListener(\"hashchange\", d);\n    })();\n  }), i(\"destroy\", () => {\n    e.params.hashNavigation.enabled && e.params.hashNavigation.watchState && h.removeEventListener(\"hashchange\", d);\n  }), i(\"transitionEnd _freeModeNoMomentumRelease\", () => {\n    n && l();\n  }), i(\"slideChange\", () => {\n    n && e.params.cssMode && l();\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHNNaW4iLCJyZXF1aXJlIiwiSGFzaE5hdmlnYXRpb24iLCJhIiwic3dpcGVyIiwiZSIsImV4dGVuZFBhcmFtcyIsInQiLCJlbWl0IiwicyIsIm9uIiwiaSIsIm4iLCJyIiwiZ2V0RG9jdW1lbnQiLCJoIiwiZ2V0V2luZG93IiwiaGFzaE5hdmlnYXRpb24iLCJlbmFibGVkIiwicmVwbGFjZVN0YXRlIiwid2F0Y2hTdGF0ZSIsImdldFNsaWRlSW5kZXgiLCJ2aXJ0dWFsIiwicGFyYW1zIiwic2xpZGVzIiwiZmlsdGVyIiwiZ2V0QXR0cmlidXRlIiwicGFyc2VJbnQiLCJlbGVtZW50Q2hpbGRyZW4iLCJzbGlkZXNFbCIsInNsaWRlQ2xhc3MiLCJkIiwib25IYXNoQ2hhbmdlIiwibG9jYXRpb24iLCJoYXNoIiwicmVwbGFjZSIsInF1ZXJ5U2VsZWN0b3IiLCJhY3RpdmVJbmRleCIsIk51bWJlciIsImlzTmFOIiwic2xpZGVUbyIsImwiLCJzZXRIYXNoIiwiaGlzdG9yeSIsInJ1bkNhbGxiYWNrc09uSW5pdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY3NzTW9kZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBR2pELFNBQVNDLGVBQWVDLENBQUE7RUFDdEI7TUFBSUMsTUFBQSxFQUNGQyxDQUFBO01BQU1DLFlBQUEsRUFDTkMsQ0FBQTtNQUFZQyxJQUFBLEVBQ1pDLENBQUE7TUFBSUMsRUFBQSxFQUNKQztJQUFBLElBQ0VSLENBQUE7SUFDQVMsQ0FBQSxJQUFjO0VBQ2xCLE1BQU1DLENBQUEsR0FBVyxJQUFBQyxrQkFBQTtJQUNYQyxDQUFBLEdBQVMsSUFBQUMsa0JBQUE7RUFDZlQsQ0FBQSxDQUFhO0lBQ1hVLGNBQUEsRUFBZ0I7TUFDZEMsT0FBQSxHQUFTO01BQ1RDLFlBQUEsR0FBYztNQUNkQyxVQUFB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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = History;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nfunction History(e) {\n  let {\n    swiper: t,\n    extendParams: a,\n    on: s\n  } = e;\n  a({\n    history: {\n      enabled: !1,\n      root: \"\",\n      replaceState: !1,\n      key: \"slides\",\n      keepQuery: !1\n    }\n  });\n  let r = !1,\n    i = {};\n  const o = e => e.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\"),\n    l = e => {\n      const t = (0, _ssrWindowEsmMin.a)();\n      let a;\n      a = e ? new URL(e) : t.location;\n      const s = a.pathname.slice(1).split(\"/\").filter(e => \"\" !== e),\n        r = s.length;\n      return {\n        key: s[r - 2],\n        value: s[r - 1]\n      };\n    },\n    n = (e, a) => {\n      const s = (0, _ssrWindowEsmMin.a)();\n      if (!r || !t.params.history.enabled) return;\n      let i;\n      i = t.params.url ? new URL(t.params.url) : s.location;\n      const l = t.slides[a];\n      let n = o(l.getAttribute(\"data-history\"));\n      if (t.params.history.root.length > 0) {\n        let a = t.params.history.root;\n        \"/\" === a[a.length - 1] && (a = a.slice(0, a.length - 1)), n = `${a}/${e ? `${e}/` : \"\"}${n}`;\n      } else i.pathname.includes(e) || (n = `${e ? `${e}/` : \"\"}${n}`);\n      t.params.history.keepQuery && (n += i.search);\n      const p = s.history.state;\n      p && p.value === n || (t.params.history.replaceState ? s.history.replaceState({\n        value: n\n      }, null, n) : s.history.pushState({\n        value: n\n      }, null, n));\n    },\n    p = (e, a, s) => {\n      if (a) for (let r = 0, i = t.slides.length; r < i; r += 1) {\n        const i = t.slides[r];\n        if (o(i.getAttribute(\"data-history\")) === a) {\n          const a = t.getSlideIndex(i);\n          t.slideTo(a, e, s);\n        }\n      } else t.slideTo(0, e, s);\n    },\n    d = () => {\n      i = l(t.params.url), p(t.params.speed, i.value, !1);\n    };\n  s(\"init\", () => {\n    t.params.history.enabled && (() => {\n      const e = (0, _ssrWindowEsmMin.a)();\n      if (t.params.history) {\n        if (!e.history || !e.history.pushState) return t.params.history.enabled = !1, void (t.params.hashNavigation.enabled = !0);\n        r = !0, i = l(t.params.url), i.key || i.value ? (p(0, i.value, t.params.runCallbacksOnInit), t.params.history.replaceState || e.addEventListener(\"popstate\", d)) : t.params.history.replaceState || e.addEventListener(\"popstate\", d);\n      }\n    })();\n  }), s(\"destroy\", () => {\n    t.params.history.enabled && (() => {\n      const e = (0, _ssrWindowEsmMin.a)();\n      t.params.history.replaceState || e.removeEventListener(\"popstate\", d);\n    })();\n  }), s(\"transitionEnd _freeModeNoMomentumRelease\", () => {\n    r && n(t.params.history.key, t.activeIndex);\n  }), s(\"slideChange\", () => {\n    r && t.params.cssMode && n(t.params.history.key, t.activeIndex);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIaXN0b3J5IiwiZSIsInN3aXBlciIsInQiLCJleHRlbmRQYXJhbXMiLCJhIiwib24iLCJzIiwiaGlzdG9yeSIsImVuYWJsZWQiLCJyb290IiwicmVwbGFjZVN0YXRlIiwia2V5Iiwia2VlcFF1ZXJ5IiwiciIsImkiLCJvIiwidG9TdHJpbmciLCJyZXBsYWNlIiwibCIsImdldFdpbmRvdyIsIlVSTCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJzbGljZSIsInNwbGl0IiwiZmlsdGVyIiwibGVuZ3RoIiwidmFsdWUiLCJuIiwic2V0SGlzdG9yeSIsInBhcmFtcyIsInVybCIsInNsaWRlcyIsImdldEF0dHJpYnV0ZSIsImluY2x1ZGVzIiwic2VhcmNoIiwicCIsInN0YXRlIiwicHVzaFN0YXRlIiwic2Nyb2xsVG9TbGlkZSIsImdldFNsaWRlSW5kZXgiLCJzbGlkZVRvIiwiZCIsInNldEhpc3RvcnlQb3BTdGF0ZSIsInNwZWVkIiwiaGFzaE5hdmlnYXRpb24iLCJydW5DYWxsYmFja3NPbkluaXQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUluZGV4IiwiY3NzTW9kZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQSxTQUFTQSxRQUFRQyxDQUFBO0VBQ2Y7SUFBSUMsTUFBQSxFQUNGQyxDQUFBO0lBQU1DLFlBQUEsRUFDTkMsQ0FBQTtJQUFZQyxFQUFBLEVBQ1pDO0VBQUEsSUFDRU4sQ0FBQTtFQUNKSSxDQUFBLENBQWE7SUFDWEcsT0FBQSxFQUFTO01BQ1BDLE9BQUEsR0FBUztNQUNUQyxJQUFBLEVBQU07TUFDTkMsWUFBQSxHQUFjO01BQ2RDLEdBQUEsRUFBSztNQUNMQyxTQUFBLEdBQVc7SUFBQTtFQUFBO0VBR2YsSUFBSUMsQ0FBQSxJQUFjO0lBQ2RDLENBQUEsR0FBUSxDQUFDO0VBQ2IsTUFBTUMsQ0FBQSxHQUFVZixDQUFBLElBQ1BBLENBQUEs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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Keyboard;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Keyboard(e) {\n  let {\n    swiper: t,\n    extendParams: n,\n    on: a,\n    emit: r\n  } = e;\n  const l = (0, _ssrWindowEsmMin.g)(),\n    i = (0, _ssrWindowEsmMin.a)();\n  function o(e) {\n    if (!t.enabled) return;\n    const {\n      rtlTranslate: n\n    } = t;\n    let a = e;\n    a.originalEvent && (a = a.originalEvent);\n    const o = a.keyCode || a.charCode,\n      s = t.params.keyboard.pageUpDown,\n      d = s && 33 === o,\n      f = s && 34 === o,\n      m = 37 === o,\n      b = 39 === o,\n      c = 38 === o,\n      p = 40 === o;\n    if (!t.allowSlideNext && (t.isHorizontal() && b || t.isVertical() && p || f)) return !1;\n    if (!t.allowSlidePrev && (t.isHorizontal() && m || t.isVertical() && c || d)) return !1;\n    if (!(a.shiftKey || a.altKey || a.ctrlKey || a.metaKey || l.activeElement && l.activeElement.nodeName && (\"input\" === l.activeElement.nodeName.toLowerCase() || \"textarea\" === l.activeElement.nodeName.toLowerCase()))) {\n      if (t.params.keyboard.onlyInViewport && (d || f || m || b || c || p)) {\n        let e = !1;\n        if ((0, _utilsMin.a)(t.el, `.${t.params.slideClass}, swiper-slide`).length > 0 && 0 === (0, _utilsMin.a)(t.el, `.${t.params.slideActiveClass}`).length) return;\n        const a = t.el,\n          r = a.clientWidth,\n          l = a.clientHeight,\n          o = i.innerWidth,\n          s = i.innerHeight,\n          d = (0, _utilsMin.b)(a);\n        n && (d.left -= a.scrollLeft);\n        const f = [[d.left, d.top], [d.left + r, d.top], [d.left, d.top + l], [d.left + r, d.top + l]];\n        for (let t = 0; t < f.length; t += 1) {\n          const n = f[t];\n          if (n[0] >= 0 && n[0] <= o && n[1] >= 0 && n[1] <= s) {\n            if (0 === n[0] && 0 === n[1]) continue;\n            e = !0;\n          }\n        }\n        if (!e) return;\n      }\n      t.isHorizontal() ? ((d || f || m || b) && (a.preventDefault ? a.preventDefault() : a.returnValue = !1), ((f || b) && !n || (d || m) && n) && t.slideNext(), ((d || m) && !n || (f || b) && n) && t.slidePrev()) : ((d || f || c || p) && (a.preventDefault ? a.preventDefault() : a.returnValue = !1), (f || p) && t.slideNext(), (d || c) && t.slidePrev()), r(\"keyPress\", o);\n    }\n  }\n  function s() {\n    t.keyboard.enabled || (l.addEventListener(\"keydown\", o), t.keyboard.enabled = !0);\n  }\n  function d() {\n    t.keyboard.enabled && (l.removeEventListener(\"keydown\", o), t.keyboard.enabled = !1);\n  }\n  t.keyboard = {\n    enabled: !1\n  }, n({\n    keyboard: {\n      enabled: !1,\n      onlyInViewport: !0,\n      pageUpDown: !0\n    }\n  }), a(\"init\", () => {\n    t.params.keyboard.enabled && s();\n  }), a(\"destroy\", () => {\n    t.keyboard.enabled && d();\n  }), Object.assign(t.keyboard, {\n    enable: s,\n    disable: d\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHNNaW4iLCJyZXF1aXJlIiwiS2V5Ym9hcmQiLCJlIiwic3dpcGVyIiwidCIsImV4dGVuZFBhcmFtcyIsIm4iLCJvbiIsImEiLCJlbWl0IiwiciIsImwiLCJnZXREb2N1bWVudCIsImkiLCJnZXRXaW5kb3ciLCJvIiwiZW5hYmxlZCIsInJ0bFRyYW5zbGF0ZSIsIm9yaWdpbmFsRXZlbnQiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJzIiwicGFyYW1zIiwia2V5Ym9hcmQiLCJwYWdlVXBEb3duIiwiZCIsImYiLCJtIiwiYiIsImMiLCJwIiwiYWxsb3dTbGlkZU5leHQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwiYWxsb3dTbGlkZVByZXYiLCJzaGlmdEtleSIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5IiwiYWN0aXZlRWxlbWVudCIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJvbmx5SW5WaWV3cG9ydCIsImVsZW1lbnRQYXJlbnRzIiwiZWwiLCJzbGlkZUNsYXNzIiwibGVuZ3RoIiwic2xpZGVBY3RpdmVDbGFzcyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZWxlbWVudE9mZnNldCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwicHJldmVudERlZmF1bHQiLCJyZXR1cm5WYWx1ZSIsInNsaWRlTmV4dCIsInNsaWRlUHJldiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiT2JqZWN0IiwiYXNzaWduIiwiZW5hYmxlIiwiZGlzYWJsZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBSWpELFNBQVNDLFNBQVNDLENBQUE7RUFDaEI7SUFBSUMsTUFBQSxFQUNGQyxDQUFBO0lBQU1DLFlBQUEsRUFDTkMsQ0FBQTtJQUFZQyxFQUFBLEVB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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Manipulation;\nfunction appendSlide(e) {\n  const l = this,\n    {\n      params: o,\n      slidesEl: i\n    } = l;\n  o.loop && l.loopDestroy();\n  const t = e => {\n    if (\"string\" == typeof e) {\n      const l = document.createElement(\"div\");\n      l.innerHTML = e, i.append(l.children[0]), l.innerHTML = \"\";\n    } else i.append(e);\n  };\n  if (\"object\" == typeof e && \"length\" in e) for (let l = 0; l < e.length; l += 1) e[l] && t(e[l]);else t(e);\n  l.recalcSlides(), o.loop && l.loopCreate(), o.observer && !l.isElement || l.update();\n}\nfunction prependSlide(e) {\n  const l = this,\n    {\n      params: o,\n      activeIndex: i,\n      slidesEl: t\n    } = l;\n  o.loop && l.loopDestroy();\n  let n = i + 1;\n  const d = e => {\n    if (\"string\" == typeof e) {\n      const l = document.createElement(\"div\");\n      l.innerHTML = e, t.prepend(l.children[0]), l.innerHTML = \"\";\n    } else t.prepend(e);\n  };\n  if (\"object\" == typeof e && \"length\" in e) {\n    for (let l = 0; l < e.length; l += 1) e[l] && d(e[l]);\n    n = i + e.length;\n  } else d(e);\n  l.recalcSlides(), o.loop && l.loopCreate(), o.observer && !l.isElement || l.update(), l.slideTo(n, 0, !1);\n}\nfunction addSlide(e, l) {\n  const o = this,\n    {\n      params: i,\n      activeIndex: t,\n      slidesEl: n\n    } = o;\n  let d = t;\n  i.loop && (d -= o.loopedSlides, o.loopDestroy(), o.recalcSlides());\n  const s = o.slides.length;\n  if (e <= 0) return void o.prependSlide(l);\n  if (e >= s) return void o.appendSlide(l);\n  let p = d > e ? d + 1 : d;\n  const r = [];\n  for (let l = s - 1; l >= e; l -= 1) {\n    const e = o.slides[l];\n    e.remove(), r.unshift(e);\n  }\n  if (\"object\" == typeof l && \"length\" in l) {\n    for (let e = 0; e < l.length; e += 1) l[e] && n.append(l[e]);\n    p = d > e ? d + l.length : d;\n  } else n.append(l);\n  for (let e = 0; e < r.length; e += 1) n.append(r[e]);\n  o.recalcSlides(), i.loop && o.loopCreate(), i.observer && !o.isElement || o.update(), i.loop ? o.slideTo(p + o.loopedSlides, 0, !1) : o.slideTo(p, 0, !1);\n}\nfunction removeSlide(e) {\n  const l = this,\n    {\n      params: o,\n      activeIndex: i\n    } = l;\n  let t = i;\n  o.loop && (t -= l.loopedSlides, l.loopDestroy());\n  let n,\n    d = t;\n  if (\"object\" == typeof e && \"length\" in e) {\n    for (let o = 0; o < e.length; o += 1) n = e[o], l.slides[n] && l.slides[n].remove(), n < d && (d -= 1);\n    d = Math.max(d, 0);\n  } else n = e, l.slides[n] && l.slides[n].remove(), n < d && (d -= 1), d = Math.max(d, 0);\n  l.recalcSlides(), o.loop && l.loopCreate(), o.observer && !l.isElement || l.update(), o.loop ? l.slideTo(d + l.loopedSlides, 0, !1) : l.slideTo(d, 0, !1);\n}\nfunction removeAllSlides() {\n  const e = this,\n    l = [];\n  for (let o = 0; o < e.slides.length; o += 1) l.push(o);\n  e.removeSlide(l);\n}\nfunction Manipulation(e) {\n  let {\n    swiper: l\n  } = e;\n  Object.assign(l, {\n    appendSlide: appendSlide.bind(l),\n    prependSlide: prependSlide.bind(l),\n    addSlide: addSlide.bind(l),\n    removeSlide: removeSlide.bind(l),\n    removeAllSlides: removeAllSlides.bind(l)\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcHBlbmRTbGlkZSIsImUiLCJsIiwicGFyYW1zIiwibyIsInNsaWRlc0VsIiwiaSIsImxvb3AiLCJsb29wRGVzdHJveSIsInQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJhcHBlbmQiLCJjaGlsZHJlbiIsImxlbmd0aCIsInJlY2FsY1NsaWRlcyIsImxvb3BDcmVhdGUiLCJvYnNlcnZlciIsImlzRWxlbWVudCIsInVwZGF0ZSIsInByZXBlbmRTbGlkZSIsImFjdGl2ZUluZGV4IiwibiIsImQiLCJwcmVwZW5kIiwic2xpZGVUbyIsImFkZFNsaWRlIiwibG9vcGVkU2xpZGVzIiwicyIsInNsaWRlcyIsInAiLCJyIiwicmVtb3ZlIiwidW5zaGlmdCIsInJlbW92ZVNsaWRlIiwiTWF0aCIsIm1heCIsInJlbW92ZUFsbFNsaWRlcyIsInB1c2giLCJNYW5pcHVsYXRpb24iLCJzd2lwZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIl0sInNvdXJjZXMiOlsiMCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsWUFBWUMsQ0FBQTtFQUNuQixNQUFNQyxDQUFBLEdBQVM7SUFBQTtNQUNUQyxNQUFBLEVBQ0pDLENBQUE7TUFBTUMsUUFBQSxFQUNOQztJQUFBLElBQ0VKLENBQUE7RUFDQUUsQ0FBQSxDQUFPRyxJQUFBLElBQ1RMLENBQUEsQ0FBT00sV0FBQTtFQUVULE1BQU1DLENBQUEsR0FBZ0JSLENBQUE7SUFDcEIsSUFBdUIsbUJBQVpBLENBQUEsRUFBc0I7TUFDL0IsTUFBTUMsQ0FBQSxHQUFVUSxRQUFBLENBQVNDLGFBQUEsQ0FBYztNQUN2Q1QsQ0FBQSxDQUFRVSxTQUFBLEdBQVlYLENBQUEsRUFDcEJLLENBQUEsQ0FBU08sTUFBQSxDQUFPWCxDQUFBLENBQVFZLFFBQUEsQ0FBUyxLQUNqQ1osQ0FBQSxDQUFRVSxTQUFBLEdBQVksRUFDdEI7SUFBQSxPQUNFTixDQUFBLENBQVNPLE1B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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Mousewheel;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Mousewheel(e) {\n  let {\n    swiper: t,\n    extendParams: a,\n    on: s,\n    emit: n\n  } = e;\n  const l = (0, _ssrWindowEsmMin.a)();\n  let i;\n  a({\n    mousewheel: {\n      enabled: !1,\n      releaseOnEdges: !1,\n      invert: !1,\n      forceToAxis: !1,\n      sensitivity: 1,\n      eventsTarget: \"container\",\n      thresholdDelta: null,\n      thresholdTime: null,\n      noMousewheelClass: \"swiper-no-mousewheel\"\n    }\n  }), t.mousewheel = {\n    enabled: !1\n  };\n  let r,\n    o = (0, _utilsMin.d)();\n  const d = [];\n  function m() {\n    t.enabled && (t.mouseEntered = !0);\n  }\n  function p() {\n    t.enabled && (t.mouseEntered = !1);\n  }\n  function u(e) {\n    return !(t.params.mousewheel.thresholdDelta && e.delta < t.params.mousewheel.thresholdDelta) && !(t.params.mousewheel.thresholdTime && (0, _utilsMin.d)() - o < t.params.mousewheel.thresholdTime) && (e.delta >= 6 && (0, _utilsMin.d)() - o < 60 || (e.direction < 0 ? t.isEnd && !t.params.loop || t.animating || (t.slideNext(), n(\"scroll\", e.raw)) : t.isBeginning && !t.params.loop || t.animating || (t.slidePrev(), n(\"scroll\", e.raw)), o = new l.Date().getTime(), !1));\n  }\n  function h(e) {\n    let a = e,\n      s = !0;\n    if (!t.enabled) return;\n    if (e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`)) return;\n    const l = t.params.mousewheel;\n    t.params.cssMode && a.preventDefault();\n    let o = t.el;\n    \"container\" !== t.params.mousewheel.eventsTarget && (o = document.querySelector(t.params.mousewheel.eventsTarget));\n    const m = o && o.contains(a.target);\n    if (!t.mouseEntered && !m && !l.releaseOnEdges) return !0;\n    a.originalEvent && (a = a.originalEvent);\n    let p = 0;\n    const h = t.rtlTranslate ? -1 : 1,\n      c = function (e) {\n        let t = 0,\n          a = 0,\n          s = 0,\n          n = 0;\n        return \"detail\" in e && (a = e.detail), \"wheelDelta\" in e && (a = -e.wheelDelta / 120), \"wheelDeltaY\" in e && (a = -e.wheelDeltaY / 120), \"wheelDeltaX\" in e && (t = -e.wheelDeltaX / 120), \"axis\" in e && e.axis === e.HORIZONTAL_AXIS && (t = a, a = 0), s = 10 * t, n = 10 * a, \"deltaY\" in e && (n = e.deltaY), \"deltaX\" in e && (s = e.deltaX), e.shiftKey && !s && (s = n, n = 0), (s || n) && e.deltaMode && (1 === e.deltaMode ? (s *= 40, n *= 40) : (s *= 800, n *= 800)), s && !t && (t = s < 1 ? -1 : 1), n && !a && (a = n < 1 ? -1 : 1), {\n          spinX: t,\n          spinY: a,\n          pixelX: s,\n          pixelY: n\n        };\n      }(a);\n    if (l.forceToAxis) {\n      if (t.isHorizontal()) {\n        if (!(Math.abs(c.pixelX) > Math.abs(c.pixelY))) return !0;\n        p = -c.pixelX * h;\n      } else {\n        if (!(Math.abs(c.pixelY) > Math.abs(c.pixelX))) return !0;\n        p = -c.pixelY;\n      }\n    } else p = Math.abs(c.pixelX) > Math.abs(c.pixelY) ? -c.pixelX * h : -c.pixelY;\n    if (0 === p) return !0;\n    l.invert && (p = -p);\n    let w = t.getTranslate() + p * l.sensitivity;\n    if (w >= t.minTranslate() && (w = t.minTranslate()), w <= t.maxTranslate() && (w = t.maxTranslate()), s = !!t.params.loop || !(w === t.minTranslate() || w === t.maxTranslate()), s && t.params.nested && a.stopPropagation(), t.params.freeMode && t.params.freeMode.enabled) {\n      const e = {\n          time: (0, _utilsMin.d)(),\n          delta: Math.abs(p),\n          direction: Math.sign(p)\n        },\n        s = r && e.time < r.time + 500 && e.delta <= r.delta && e.direction === r.direction;\n      if (!s) {\n        r = void 0;\n        let o = t.getTranslate() + p * l.sensitivity;\n        const m = t.isBeginning,\n          u = t.isEnd;\n        if (o >= t.minTranslate() && (o = t.minTranslate()), o <= t.maxTranslate() && (o = t.maxTranslate()), t.setTransition(0), t.setTranslate(o), t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses(), (!m && t.isBeginning || !u && t.isEnd) && t.updateSlidesClasses(), t.params.loop && t.loopFix({\n          direction: e.direction < 0 ? \"next\" : \"prev\",\n          byMousewheel: !0\n        }), t.params.freeMode.sticky) {\n          clearTimeout(i), i = void 0, d.length >= 15 && d.shift();\n          const a = d.length ? d[d.length - 1] : void 0,\n            s = d[0];\n          if (d.push(e), a && (e.delta > a.delta || e.direction !== a.direction)) d.splice(0);else if (d.length >= 15 && e.time - s.time < 500 && s.delta - e.delta >= 1 && e.delta <= 6) {\n            const a = p > 0 ? .8 : .2;\n            r = e, d.splice(0), i = (0, _utilsMin.n)(() => {\n              t.slideToClosest(t.params.speed, !0, void 0, a);\n            }, 0);\n          }\n          i || (i = (0, _utilsMin.n)(() => {\n            r = e, d.splice(0), t.slideToClosest(t.params.speed, !0, void 0, .5);\n          }, 500));\n        }\n        if (s || n(\"scroll\", a), t.params.autoplay && t.params.autoplayDisableOnInteraction && t.autoplay.stop(), l.releaseOnEdges && (o === t.minTranslate() || o === t.maxTranslate())) return !0;\n      }\n    } else {\n      const a = {\n        time: (0, _utilsMin.d)(),\n        delta: Math.abs(p),\n        direction: Math.sign(p),\n        raw: e\n      };\n      d.length >= 2 && d.shift();\n      const s = d.length ? d[d.length - 1] : void 0;\n      if (d.push(a), s ? (a.direction !== s.direction || a.delta > s.delta || a.time > s.time + 150) && u(a) : u(a), function (e) {\n        const a = t.params.mousewheel;\n        if (e.direction < 0) {\n          if (t.isEnd && !t.params.loop && a.releaseOnEdges) return !0;\n        } else if (t.isBeginning && !t.params.loop && a.releaseOnEdges) return !0;\n        return !1;\n      }(a)) return !0;\n    }\n    return a.preventDefault ? a.preventDefault() : a.returnValue = !1, !1;\n  }\n  function c(e) {\n    let a = t.el;\n    \"container\" !== t.params.mousewheel.eventsTarget && (a = document.querySelector(t.params.mousewheel.eventsTarget)), a[e](\"mouseenter\", m), a[e](\"mouseleave\", p), a[e](\"wheel\", h);\n  }\n  function w() {\n    return t.params.cssMode ? (t.wrapperEl.removeEventListener(\"wheel\", h), !0) : !t.mousewheel.enabled && (c(\"addEventListener\"), t.mousewheel.enabled = !0, !0);\n  }\n  function f() {\n    return t.params.cssMode ? (t.wrapperEl.addEventListener(event, h), !0) : !!t.mousewheel.enabled && (c(\"removeEventListener\"), t.mousewheel.enabled = !1, !0);\n  }\n  s(\"init\", () => {\n    !t.params.mousewheel.enabled && t.params.cssMode && f(), t.params.mousewheel.enabled && w();\n  }), s(\"destroy\", () => {\n    t.params.cssMode && w(), t.mousewheel.enabled && f();\n  }), Object.assign(t.mousewheel, {\n    enable: w,\n    disable: f\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Navigation;\nvar _createElementIfNotDefinedMin = require(\"../shared/create-element-if-not-defined.min.mjs\");\nfunction Navigation(a) {\n  let {\n    swiper: n,\n    extendParams: e,\n    on: i,\n    emit: t\n  } = a;\n  e({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: !1,\n      disabledClass: \"swiper-button-disabled\",\n      hiddenClass: \"swiper-button-hidden\",\n      lockClass: \"swiper-button-lock\",\n      navigationDisabledClass: \"swiper-navigation-disabled\"\n    }\n  }), n.navigation = {\n    nextEl: null,\n    prevEl: null\n  };\n  const s = a => (Array.isArray(a) ? a : [a]).filter(a => !!a);\n  function l(a) {\n    let e;\n    return a && \"string\" == typeof a && n.isElement && (e = n.el.querySelector(a), e) ? e : (a && (\"string\" == typeof a && (e = [...document.querySelectorAll(a)]), n.params.uniqueNavElements && \"string\" == typeof a && e.length > 1 && 1 === n.el.querySelectorAll(a).length && (e = n.el.querySelector(a))), a && !e ? a : e);\n  }\n  function o(a, e) {\n    const i = n.params.navigation;\n    (a = s(a)).forEach(a => {\n      a && (a.classList[e ? \"add\" : \"remove\"](...i.disabledClass.split(\" \")), \"BUTTON\" === a.tagName && (a.disabled = e), n.params.watchOverflow && n.enabled && a.classList[n.isLocked ? \"add\" : \"remove\"](i.lockClass));\n    });\n  }\n  function r() {\n    const {\n      nextEl: a,\n      prevEl: e\n    } = n.navigation;\n    if (n.params.loop) return o(e, !1), void o(a, !1);\n    o(e, n.isBeginning && !n.params.rewind), o(a, n.isEnd && !n.params.rewind);\n  }\n  function d(a) {\n    a.preventDefault(), (!n.isBeginning || n.params.loop || n.params.rewind) && (n.slidePrev(), t(\"navigationPrev\"));\n  }\n  function c(a) {\n    a.preventDefault(), (!n.isEnd || n.params.loop || n.params.rewind) && (n.slideNext(), t(\"navigationNext\"));\n  }\n  function p() {\n    const a = n.params.navigation;\n    if (n.params.navigation = (0, _createElementIfNotDefinedMin.c)(n, n.originalParams.navigation, n.params.navigation, {\n      nextEl: \"swiper-button-next\",\n      prevEl: \"swiper-button-prev\"\n    }), !a.nextEl && !a.prevEl) return;\n    let e = l(a.nextEl),\n      i = l(a.prevEl);\n    Object.assign(n.navigation, {\n      nextEl: e,\n      prevEl: i\n    }), e = s(e), i = s(i);\n    const t = (e, i) => {\n      e && e.addEventListener(\"click\", \"next\" === i ? c : d), !n.enabled && e && e.classList.add(...a.lockClass.split(\" \"));\n    };\n    e.forEach(a => t(a, \"next\")), i.forEach(a => t(a, \"prev\"));\n  }\n  function v() {\n    let {\n      nextEl: a,\n      prevEl: e\n    } = n.navigation;\n    a = s(a), e = s(e);\n    const i = (a, e) => {\n      a.removeEventListener(\"click\", \"next\" === e ? c : d), a.classList.remove(...n.params.navigation.disabledClass.split(\" \"));\n    };\n    a.forEach(a => i(a, \"next\")), e.forEach(a => i(a, \"prev\"));\n  }\n  i(\"init\", () => {\n    !1 === n.params.navigation.enabled ? g() : (p(), r());\n  }), i(\"toEdge fromEdge lock unlock\", () => {\n    r();\n  }), i(\"destroy\", () => {\n    v();\n  }), i(\"enable disable\", () => {\n    let {\n      nextEl: a,\n      prevEl: e\n    } = n.navigation;\n    a = s(a), e = s(e), [...a, ...e].filter(a => !!a).forEach(a => a.classList[n.enabled ? \"remove\" : \"add\"](n.params.navigation.lockClass));\n  }), i(\"click\", (a, e) => {\n    let {\n      nextEl: i,\n      prevEl: l\n    } = n.navigation;\n    i = s(i), l = s(l);\n    const o = e.target;\n    if (n.params.navigation.hideOnClick && !l.includes(o) && !i.includes(o)) {\n      if (n.pagination && n.params.pagination && n.params.pagination.clickable && (n.pagination.el === o || n.pagination.el.contains(o))) return;\n      let a;\n      i.length ? a = i[0].classList.contains(n.params.navigation.hiddenClass) : l.length && (a = l[0].classList.contains(n.params.navigation.hiddenClass)), t(!0 === a ? \"navigationShow\" : \"navigationHide\"), [...i, ...l].filter(a => !!a).forEach(a => a.classList.toggle(n.params.navigation.hiddenClass));\n    }\n  });\n  const g = () => {\n    n.el.classList.add(...n.params.navigation.navigationDisabledClass.split(\" \")), v();\n  };\n  Object.assign(n.navigation, {\n    enable: () => {\n      n.el.classList.remove(...n.params.navigation.navigationDisabledClass.split(\" \")), p(), r();\n    },\n    disable: g,\n    update: r,\n    init: p,\n    destroy: v\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Pagination;\nvar _classesToSelectorMin = require(\"../shared/classes-to-selector.min.mjs\");\nvar _createElementIfNotDefinedMin = require(\"../shared/create-element-if-not-defined.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Pagination(e) {\n  let {\n    swiper: a,\n    extendParams: l,\n    on: s,\n    emit: t\n  } = e;\n  const i = \"swiper-pagination\";\n  let n;\n  l({\n    pagination: {\n      el: null,\n      bulletElement: \"span\",\n      clickable: !1,\n      hideOnClick: !1,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: !1,\n      type: \"bullets\",\n      dynamicBullets: !1,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: e => e,\n      formatFractionTotal: e => e,\n      bulletClass: `${i}-bullet`,\n      bulletActiveClass: `${i}-bullet-active`,\n      modifierClass: `${i}-`,\n      currentClass: `${i}-current`,\n      totalClass: `${i}-total`,\n      hiddenClass: `${i}-hidden`,\n      progressbarFillClass: `${i}-progressbar-fill`,\n      progressbarOppositeClass: `${i}-progressbar-opposite`,\n      clickableClass: `${i}-clickable`,\n      lockClass: `${i}-lock`,\n      horizontalClass: `${i}-horizontal`,\n      verticalClass: `${i}-vertical`,\n      paginationDisabledClass: `${i}-disabled`\n    }\n  }), a.pagination = {\n    el: null,\n    bullets: []\n  };\n  let r = 0;\n  const o = e => (Array.isArray(e) ? e : [e]).filter(e => !!e);\n  function p() {\n    return !a.params.pagination.el || !a.pagination.el || Array.isArray(a.pagination.el) && 0 === a.pagination.el.length;\n  }\n  function c(e, l) {\n    const {\n      bulletActiveClass: s\n    } = a.params.pagination;\n    e && (e = e[(\"prev\" === l ? \"previous\" : \"next\") + \"ElementSibling\"]) && (e.classList.add(`${s}-${l}`), (e = e[(\"prev\" === l ? \"previous\" : \"next\") + \"ElementSibling\"]) && e.classList.add(`${s}-${l}-${l}`));\n  }\n  function d(e) {\n    const l = e.target.closest((0, _classesToSelectorMin.c)(a.params.pagination.bulletClass));\n    if (!l) return;\n    e.preventDefault();\n    const s = (0, _utilsMin.g)(l) * a.params.slidesPerGroup;\n    if (a.params.loop) {\n      if (a.realIndex === s) return;\n      const e = a.getSlideIndexByData(s),\n        l = a.getSlideIndexByData(a.realIndex);\n      e > a.slides.length - a.loopedSlides && a.loopFix({\n        direction: e > l ? \"next\" : \"prev\",\n        activeSlideIndex: e,\n        slideTo: !1\n      }), a.slideToLoop(s);\n    } else a.slideTo(s);\n  }\n  function u() {\n    const e = a.rtl,\n      l = a.params.pagination;\n    if (p()) return;\n    let s,\n      i,\n      d = a.pagination.el;\n    d = o(d);\n    const u = a.virtual && a.params.virtual.enabled ? a.virtual.slides.length : a.slides.length,\n      g = a.params.loop ? Math.ceil(u / a.params.slidesPerGroup) : a.snapGrid.length;\n    if (a.params.loop ? (i = a.previousRealIndex || 0, s = a.params.slidesPerGroup > 1 ? Math.floor(a.realIndex / a.params.slidesPerGroup) : a.realIndex) : void 0 !== a.snapIndex ? (s = a.snapIndex, i = a.previousSnapIndex) : (i = a.previousIndex || 0, s = a.activeIndex || 0), \"bullets\" === l.type && a.pagination.bullets && a.pagination.bullets.length > 0) {\n      const t = a.pagination.bullets;\n      let o, p, u;\n      if (l.dynamicBullets && (n = (0, _utilsMin.f)(t[0], a.isHorizontal() ? \"width\" : \"height\", !0), d.forEach(e => {\n        e.style[a.isHorizontal() ? \"width\" : \"height\"] = n * (l.dynamicMainBullets + 4) + \"px\";\n      }), l.dynamicMainBullets > 1 && void 0 !== i && (r += s - (i || 0), r > l.dynamicMainBullets - 1 ? r = l.dynamicMainBullets - 1 : r < 0 && (r = 0)), o = Math.max(s - r, 0), p = o + (Math.min(t.length, l.dynamicMainBullets) - 1), u = (p + o) / 2), t.forEach(e => {\n        const a = [...[\"\", \"-next\", \"-next-next\", \"-prev\", \"-prev-prev\", \"-main\"].map(e => `${l.bulletActiveClass}${e}`)].map(e => \"string\" == typeof e && e.includes(\" \") ? e.split(\" \") : e).flat();\n        e.classList.remove(...a);\n      }), d.length > 1) t.forEach(e => {\n        const t = (0, _utilsMin.g)(e);\n        t === s ? e.classList.add(...l.bulletActiveClass.split(\" \")) : a.isElement && e.setAttribute(\"part\", \"bullet\"), l.dynamicBullets && (t >= o && t <= p && e.classList.add(...`${l.bulletActiveClass}-main`.split(\" \")), t === o && c(e, \"prev\"), t === p && c(e, \"next\"));\n      });else {\n        const e = t[s];\n        if (e && e.classList.add(...l.bulletActiveClass.split(\" \")), a.isElement && t.forEach((e, a) => {\n          e.setAttribute(\"part\", a === s ? \"bullet-active\" : \"bullet\");\n        }), l.dynamicBullets) {\n          const e = t[o],\n            a = t[p];\n          for (let e = o; e <= p; e += 1) t[e] && t[e].classList.add(...`${l.bulletActiveClass}-main`.split(\" \"));\n          c(e, \"prev\"), c(a, \"next\");\n        }\n      }\n      if (l.dynamicBullets) {\n        const s = Math.min(t.length, l.dynamicMainBullets + 4),\n          i = (n * s - n) / 2 - u * n,\n          r = e ? \"right\" : \"left\";\n        t.forEach(e => {\n          e.style[a.isHorizontal() ? r : \"top\"] = `${i}px`;\n        });\n      }\n    }\n    d.forEach((e, i) => {\n      if (\"fraction\" === l.type && (e.querySelectorAll((0, _classesToSelectorMin.c)(l.currentClass)).forEach(e => {\n        e.textContent = l.formatFractionCurrent(s + 1);\n      }), e.querySelectorAll((0, _classesToSelectorMin.c)(l.totalClass)).forEach(e => {\n        e.textContent = l.formatFractionTotal(g);\n      })), \"progressbar\" === l.type) {\n        let t;\n        t = l.progressbarOpposite ? a.isHorizontal() ? \"vertical\" : \"horizontal\" : a.isHorizontal() ? \"horizontal\" : \"vertical\";\n        const i = (s + 1) / g;\n        let n = 1,\n          r = 1;\n        \"horizontal\" === t ? n = i : r = i, e.querySelectorAll((0, _classesToSelectorMin.c)(l.progressbarFillClass)).forEach(e => {\n          e.style.transform = `translate3d(0,0,0) scaleX(${n}) scaleY(${r})`, e.style.transitionDuration = `${a.params.speed}ms`;\n        });\n      }\n      \"custom\" === l.type && l.renderCustom ? (e.innerHTML = l.renderCustom(a, s + 1, g), 0 === i && t(\"paginationRender\", e)) : (0 === i && t(\"paginationRender\", e), t(\"paginationUpdate\", e)), a.params.watchOverflow && a.enabled && e.classList[a.isLocked ? \"add\" : \"remove\"](l.lockClass);\n    });\n  }\n  function g() {\n    const e = a.params.pagination;\n    if (p()) return;\n    const l = a.virtual && a.params.virtual.enabled ? a.virtual.slides.length : a.slides.length;\n    let s = a.pagination.el;\n    s = o(s);\n    let i = \"\";\n    if (\"bullets\" === e.type) {\n      let s = a.params.loop ? Math.ceil(l / a.params.slidesPerGroup) : a.snapGrid.length;\n      a.params.freeMode && a.params.freeMode.enabled && s > l && (s = l);\n      for (let l = 0; l < s; l += 1) e.renderBullet ? i += e.renderBullet.call(a, l, e.bulletClass) : i += `<${e.bulletElement} ${a.isElement ? 'part=\"bullet\"' : \"\"} class=\"${e.bulletClass}\"></${e.bulletElement}>`;\n    }\n    \"fraction\" === e.type && (i = e.renderFraction ? e.renderFraction.call(a, e.currentClass, e.totalClass) : `<span class=\"${e.currentClass}\"></span> / <span class=\"${e.totalClass}\"></span>`), \"progressbar\" === e.type && (i = e.renderProgressbar ? e.renderProgressbar.call(a, e.progressbarFillClass) : `<span class=\"${e.progressbarFillClass}\"></span>`), a.pagination.bullets = [], s.forEach(l => {\n      \"custom\" !== e.type && (l.innerHTML = i || \"\"), \"bullets\" === e.type && a.pagination.bullets.push(...l.querySelectorAll((0, _classesToSelectorMin.c)(e.bulletClass)));\n    }), \"custom\" !== e.type && t(\"paginationRender\", s[0]);\n  }\n  function m() {\n    a.params.pagination = (0, _createElementIfNotDefinedMin.c)(a, a.originalParams.pagination, a.params.pagination, {\n      el: \"swiper-pagination\"\n    });\n    const e = a.params.pagination;\n    if (!e.el) return;\n    let l;\n    \"string\" == typeof e.el && a.isElement && (l = a.el.querySelector(e.el)), l || \"string\" != typeof e.el || (l = [...document.querySelectorAll(e.el)]), l || (l = e.el), l && 0 !== l.length && (a.params.uniqueNavElements && \"string\" == typeof e.el && Array.isArray(l) && l.length > 1 && (l = [...a.el.querySelectorAll(e.el)], l.length > 1 && (l = l.filter(e => (0, _utilsMin.a)(e, \".swiper\")[0] === a.el)[0])), Array.isArray(l) && 1 === l.length && (l = l[0]), Object.assign(a.pagination, {\n      el: l\n    }), l = o(l), l.forEach(l => {\n      \"bullets\" === e.type && e.clickable && l.classList.add(e.clickableClass), l.classList.add(e.modifierClass + e.type), l.classList.add(a.isHorizontal() ? e.horizontalClass : e.verticalClass), \"bullets\" === e.type && e.dynamicBullets && (l.classList.add(`${e.modifierClass}${e.type}-dynamic`), r = 0, e.dynamicMainBullets < 1 && (e.dynamicMainBullets = 1)), \"progressbar\" === e.type && e.progressbarOpposite && l.classList.add(e.progressbarOppositeClass), e.clickable && l.addEventListener(\"click\", d), a.enabled || l.classList.add(e.lockClass);\n    }));\n  }\n  function b() {\n    const e = a.params.pagination;\n    if (p()) return;\n    let l = a.pagination.el;\n    l && (l = o(l), l.forEach(l => {\n      l.classList.remove(e.hiddenClass), l.classList.remove(e.modifierClass + e.type), l.classList.remove(a.isHorizontal() ? e.horizontalClass : e.verticalClass), e.clickable && l.removeEventListener(\"click\", d);\n    })), a.pagination.bullets && a.pagination.bullets.forEach(a => a.classList.remove(...e.bulletActiveClass.split(\" \")));\n  }\n  s(\"changeDirection\", () => {\n    if (!a.pagination || !a.pagination.el) return;\n    const e = a.params.pagination;\n    let {\n      el: l\n    } = a.pagination;\n    l = o(l), l.forEach(l => {\n      l.classList.remove(e.horizontalClass, e.verticalClass), l.classList.add(a.isHorizontal() ? e.horizontalClass : e.verticalClass);\n    });\n  }), s(\"init\", () => {\n    !1 === a.params.pagination.enabled ? f() : (m(), g(), u());\n  }), s(\"activeIndexChange\", () => {\n    void 0 === a.snapIndex && u();\n  }), s(\"snapIndexChange\", () => {\n    u();\n  }), s(\"snapGridLengthChange\", () => {\n    g(), u();\n  }), s(\"destroy\", () => {\n    b();\n  }), s(\"enable disable\", () => {\n    let {\n      el: e\n    } = a.pagination;\n    e && (e = o(e), e.forEach(e => e.classList[a.enabled ? \"remove\" : \"add\"](a.params.pagination.lockClass)));\n  }), s(\"lock unlock\", () => {\n    u();\n  }), s(\"click\", (e, l) => {\n    const s = l.target,\n      i = o(a.pagination.el);\n    if (a.params.pagination.el && a.params.pagination.hideOnClick && i && i.length > 0 && !s.classList.contains(a.params.pagination.bulletClass)) {\n      if (a.navigation && (a.navigation.nextEl && s === a.navigation.nextEl || a.navigation.prevEl && s === a.navigation.prevEl)) return;\n      const e = i[0].classList.contains(a.params.pagination.hiddenClass);\n      t(!0 === e ? \"paginationShow\" : \"paginationHide\"), i.forEach(e => e.classList.toggle(a.params.pagination.hiddenClass));\n    }\n  });\n  const f = () => {\n    a.el.classList.add(a.params.pagination.paginationDisabledClass);\n    let {\n      el: e\n    } = a.pagination;\n    e && (e = o(e), e.forEach(e => e.classList.add(a.params.pagination.paginationDisabledClass))), b();\n  };\n  Object.assign(a.pagination, {\n    enable: () => {\n      a.el.classList.remove(a.params.pagination.paginationDisabledClass);\n      let {\n        el: e\n      } = a.pagination;\n      e && (e = o(e), e.forEach(e => e.classList.remove(a.params.pagination.paginationDisabledClass))), m(), g(), u();\n    },\n    disable: f,\n    render: g,\n    update: u,\n    init: m,\n    destroy: b\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Parallax;\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Parallax(a) {\n  let {\n    swiper: r,\n    extendParams: e,\n    on: t\n  } = a;\n  e({\n    parallax: {\n      enabled: !1\n    }\n  });\n  const l = (a, e) => {\n      const {\n          rtl: t\n        } = r,\n        l = t ? -1 : 1,\n        s = a.getAttribute(\"data-swiper-parallax\") || \"0\";\n      let p = a.getAttribute(\"data-swiper-parallax-x\"),\n        i = a.getAttribute(\"data-swiper-parallax-y\");\n      const d = a.getAttribute(\"data-swiper-parallax-scale\"),\n        n = a.getAttribute(\"data-swiper-parallax-opacity\"),\n        o = a.getAttribute(\"data-swiper-parallax-rotate\");\n      if (p || i ? (p = p || \"0\", i = i || \"0\") : r.isHorizontal() ? (p = s, i = \"0\") : (i = s, p = \"0\"), p = p.indexOf(\"%\") >= 0 ? parseInt(p, 10) * e * l + \"%\" : p * e * l + \"px\", i = i.indexOf(\"%\") >= 0 ? parseInt(i, 10) * e + \"%\" : i * e + \"px\", null != n) {\n        const r = n - (n - 1) * (1 - Math.abs(e));\n        a.style.opacity = r;\n      }\n      let x = `translate3d(${p}, ${i}, 0px)`;\n      if (null != d) {\n        x += ` scale(${d - (d - 1) * (1 - Math.abs(e))})`;\n      }\n      if (o && null != o) {\n        x += ` rotate(${o * e * -1}deg)`;\n      }\n      a.style.transform = x;\n    },\n    s = () => {\n      const {\n        el: a,\n        slides: e,\n        progress: t,\n        snapGrid: s\n      } = r;\n      (0, _utilsMin.e)(a, \"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").forEach(a => {\n        l(a, t);\n      }), e.forEach((a, e) => {\n        let p = a.progress;\n        r.params.slidesPerGroup > 1 && \"auto\" !== r.params.slidesPerView && (p += Math.ceil(e / 2) - t * (s.length - 1)), p = Math.min(Math.max(p, -1), 1), a.querySelectorAll(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale], [data-swiper-parallax-rotate]\").forEach(a => {\n          l(a, p);\n        });\n      });\n    };\n  t(\"beforeInit\", () => {\n    r.params.parallax.enabled && (r.params.watchSlidesProgress = !0, r.originalParams.watchSlidesProgress = !0);\n  }), t(\"init\", () => {\n    r.params.parallax.enabled && s();\n  }), t(\"setTranslate\", () => {\n    r.params.parallax.enabled && s();\n  }), t(\"setTransition\", (a, e) => {\n    r.params.parallax.enabled && function (a) {\n      void 0 === a && (a = r.params.speed);\n      const {\n        el: e\n      } = r;\n      e.querySelectorAll(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").forEach(r => {\n        let e = parseInt(r.getAttribute(\"data-swiper-parallax-duration\"), 10) || a;\n        0 === a && (e = 0), r.style.transitionDuration = `${e}ms`;\n      });\n    }(e);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXJhbGxheCIsImEiLCJzd2lwZXIiLCJyIiwiZXh0ZW5kUGFyYW1zIiwiZSIsIm9uIiwidCIsInBhcmFsbGF4IiwiZW5hYmxlZCIsImwiLCJzZXRUcmFuc2Zvcm0iLCJydGwiLCJzIiwiZ2V0QXR0cmlidXRlIiwicCIsImkiLCJkIiwibiIsIm8iLCJpc0hvcml6b250YWwiLCJpbmRleE9mIiwicGFyc2VJbnQiLCJNYXRoIiwiYWJzIiwic3R5bGUiLCJvcGFjaXR5IiwieCIsInRyYW5zZm9ybSIsInNldFRyYW5zbGF0ZSIsImVsIiwic2xpZGVzIiwicHJvZ3Jlc3MiLCJzbmFwR3JpZCIsImVsZW1lbnRDaGlsZHJlbiIsImZvckVhY2giLCJwYXJhbXMiLCJzbGlkZXNQZXJHcm91cCIsInNsaWRlc1BlclZpZXciLCJjZWlsIiwibGVuZ3RoIiwibWluIiwibWF4IiwicXVlcnlTZWxlY3RvckFsbCIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJvcmlnaW5hbFBhcmFtcyIsInNwZWVkIiwidHJhbnNpdGlvbkR1cmF0aW9uIl0sInNvdXJjZXMiOlsiMCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLFNBQVNBLFNBQVNDLENBQUE7RUFDaEI7SUFBSUMsTUFBQSxFQUNGQyxDQUFBO0lBQU1DLFlBQUEsRUFDTkMsQ0FBQTtJQUFZQyxFQUFBLEVBQ1pDO0VBQUEsSUFDRU4sQ0FBQTtFQUNKSSxDQUFBLENBQWE7SUFDWEcsUUFBQSxFQUFVO01BQ1JDLE9BQUEsR0FBUztJQUFBO0VBQUE7RUFHYixNQUFNQyxDQUFBLEdBQWVDLENBQUNWLENBQUEsRUFBSUksQ0FBQTtNQUN4QjtVQUFNTyxHQUFBLEVBQ0pMO1FBQUEsSUFDRUosQ0FBQTtRQUNFTyxDQUFBLEdBQVlILENBQUEsSUFBTyxJQUFJO1FBQ3ZCTSxDQUFBLEdBQUlaLENBQUEsQ0FBR2EsWUFBQSxDQUFhLDJCQUEyQjtNQUNyRCxJQUFJQyxDQUFBLEdBQUlkLENBQUEsQ0FBR2Es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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Scrollbar;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nvar _createElementIfNotDefinedMin = require(\"../shared/create-element-if-not-defined.min.mjs\");\nfunction Scrollbar(l) {\n  let {\n    swiper: s,\n    extendParams: r,\n    on: a,\n    emit: e\n  } = l;\n  const t = (0, _ssrWindowEsmMin.g)();\n  let o,\n    n,\n    i,\n    c,\n    p = !1,\n    d = null,\n    m = null;\n  function b() {\n    if (!s.params.scrollbar.el || !s.scrollbar.el) return;\n    const {\n        scrollbar: l,\n        rtlTranslate: r\n      } = s,\n      {\n        dragEl: a,\n        el: e\n      } = l,\n      t = s.params.scrollbar,\n      o = s.params.loop ? s.progressLoop : s.progress;\n    let c = n,\n      p = (i - n) * o;\n    r ? (p = -p, p > 0 ? (c = n - p, p = 0) : -p + n > i && (c = i + p)) : p < 0 ? (c = n + p, p = 0) : p + n > i && (c = i - p), s.isHorizontal() ? (a.style.transform = `translate3d(${p}px, 0, 0)`, a.style.width = `${c}px`) : (a.style.transform = `translate3d(0px, ${p}px, 0)`, a.style.height = `${c}px`), t.hide && (clearTimeout(d), e.style.opacity = 1, d = setTimeout(() => {\n      e.style.opacity = 0, e.style.transitionDuration = \"400ms\";\n    }, 1e3));\n  }\n  function u() {\n    if (!s.params.scrollbar.el || !s.scrollbar.el) return;\n    const {\n        scrollbar: l\n      } = s,\n      {\n        dragEl: r,\n        el: a\n      } = l;\n    r.style.width = \"\", r.style.height = \"\", i = s.isHorizontal() ? a.offsetWidth : a.offsetHeight, c = s.size / (s.virtualSize + s.params.slidesOffsetBefore - (s.params.centeredSlides ? s.snapGrid[0] : 0)), n = \"auto\" === s.params.scrollbar.dragSize ? i * c : parseInt(s.params.scrollbar.dragSize, 10), s.isHorizontal() ? r.style.width = `${n}px` : r.style.height = `${n}px`, a.style.display = c >= 1 ? \"none\" : \"\", s.params.scrollbar.hide && (a.style.opacity = 0), s.params.watchOverflow && s.enabled && l.el.classList[s.isLocked ? \"add\" : \"remove\"](s.params.scrollbar.lockClass);\n  }\n  function f(l) {\n    return s.isHorizontal() ? l.clientX : l.clientY;\n  }\n  function g(l) {\n    const {\n        scrollbar: r,\n        rtlTranslate: a\n      } = s,\n      {\n        el: e\n      } = r;\n    let t;\n    t = (f(l) - (0, _utilsMin.b)(e)[s.isHorizontal() ? \"left\" : \"top\"] - (null !== o ? o : n / 2)) / (i - n), t = Math.max(Math.min(t, 1), 0), a && (t = 1 - t);\n    const c = s.minTranslate() + (s.maxTranslate() - s.minTranslate()) * t;\n    s.updateProgress(c), s.setTranslate(c), s.updateActiveIndex(), s.updateSlidesClasses();\n  }\n  function y(l) {\n    const r = s.params.scrollbar,\n      {\n        scrollbar: a,\n        wrapperEl: t\n      } = s,\n      {\n        el: n,\n        dragEl: i\n      } = a;\n    p = !0, o = l.target === i ? f(l) - l.target.getBoundingClientRect()[s.isHorizontal() ? \"left\" : \"top\"] : null, l.preventDefault(), l.stopPropagation(), t.style.transitionDuration = \"100ms\", i.style.transitionDuration = \"100ms\", g(l), clearTimeout(m), n.style.transitionDuration = \"0ms\", r.hide && (n.style.opacity = 1), s.params.cssMode && (s.wrapperEl.style[\"scroll-snap-type\"] = \"none\"), e(\"scrollbarDragStart\", l);\n  }\n  function h(l) {\n    const {\n        scrollbar: r,\n        wrapperEl: a\n      } = s,\n      {\n        el: t,\n        dragEl: o\n      } = r;\n    p && (l.preventDefault ? l.preventDefault() : l.returnValue = !1, g(l), a.style.transitionDuration = \"0ms\", t.style.transitionDuration = \"0ms\", o.style.transitionDuration = \"0ms\", e(\"scrollbarDragMove\", l));\n  }\n  function v(l) {\n    const r = s.params.scrollbar,\n      {\n        scrollbar: a,\n        wrapperEl: t\n      } = s,\n      {\n        el: o\n      } = a;\n    p && (p = !1, s.params.cssMode && (s.wrapperEl.style[\"scroll-snap-type\"] = \"\", t.style.transitionDuration = \"\"), r.hide && (clearTimeout(m), m = (0, _utilsMin.n)(() => {\n      o.style.opacity = 0, o.style.transitionDuration = \"400ms\";\n    }, 1e3)), e(\"scrollbarDragEnd\", l), r.snapOnRelease && s.slideToClosest());\n  }\n  function D(l) {\n    const {\n        scrollbar: r,\n        params: a\n      } = s,\n      e = r.el;\n    if (!e) return;\n    const o = e,\n      n = !!a.passiveListeners && {\n        passive: !1,\n        capture: !1\n      },\n      i = !!a.passiveListeners && {\n        passive: !0,\n        capture: !1\n      };\n    if (!o) return;\n    const c = \"on\" === l ? \"addEventListener\" : \"removeEventListener\";\n    o[c](\"pointerdown\", y, n), t[c](\"pointermove\", h, n), t[c](\"pointerup\", v, i);\n  }\n  function C() {\n    const {\n      scrollbar: l,\n      el: r\n    } = s;\n    s.params.scrollbar = (0, _createElementIfNotDefinedMin.c)(s, s.originalParams.scrollbar, s.params.scrollbar, {\n      el: \"swiper-scrollbar\"\n    });\n    const a = s.params.scrollbar;\n    if (!a.el) return;\n    let e, o;\n    \"string\" == typeof a.el && s.isElement && (e = s.el.querySelector(a.el)), e || \"string\" != typeof a.el ? e || (e = a.el) : e = t.querySelectorAll(a.el), s.params.uniqueNavElements && \"string\" == typeof a.el && e.length > 1 && 1 === r.querySelectorAll(a.el).length && (e = r.querySelector(a.el)), e.length > 0 && (e = e[0]), e.classList.add(s.isHorizontal() ? a.horizontalClass : a.verticalClass), e && (o = e.querySelector(`.${s.params.scrollbar.dragClass}`), o || (o = (0, _utilsMin.c)(\"div\", s.params.scrollbar.dragClass), e.append(o))), Object.assign(l, {\n      el: e,\n      dragEl: o\n    }), a.draggable && s.params.scrollbar.el && s.scrollbar.el && D(\"on\"), e && e.classList[s.enabled ? \"remove\" : \"add\"](s.params.scrollbar.lockClass);\n  }\n  function E() {\n    const l = s.params.scrollbar,\n      r = s.scrollbar.el;\n    r && r.classList.remove(s.isHorizontal() ? l.horizontalClass : l.verticalClass), s.params.scrollbar.el && s.scrollbar.el && D(\"off\");\n  }\n  r({\n    scrollbar: {\n      el: null,\n      dragSize: \"auto\",\n      hide: !1,\n      draggable: !1,\n      snapOnRelease: !0,\n      lockClass: \"swiper-scrollbar-lock\",\n      dragClass: \"swiper-scrollbar-drag\",\n      scrollbarDisabledClass: \"swiper-scrollbar-disabled\",\n      horizontalClass: \"swiper-scrollbar-horizontal\",\n      verticalClass: \"swiper-scrollbar-vertical\"\n    }\n  }), s.scrollbar = {\n    el: null,\n    dragEl: null\n  }, a(\"init\", () => {\n    !1 === s.params.scrollbar.enabled ? w() : (C(), u(), b());\n  }), a(\"update resize observerUpdate lock unlock\", () => {\n    u();\n  }), a(\"setTranslate\", () => {\n    b();\n  }), a(\"setTransition\", (l, r) => {\n    !function (l) {\n      s.params.scrollbar.el && s.scrollbar.el && (s.scrollbar.dragEl.style.transitionDuration = `${l}ms`);\n    }(r);\n  }), a(\"enable disable\", () => {\n    const {\n      el: l\n    } = s.scrollbar;\n    l && l.classList[s.enabled ? \"remove\" : \"add\"](s.params.scrollbar.lockClass);\n  }), a(\"destroy\", () => {\n    E();\n  });\n  const w = () => {\n    s.el.classList.add(s.params.scrollbar.scrollbarDisabledClass), s.scrollbar.el && s.scrollbar.el.classList.add(s.params.scrollbar.scrollbarDisabledClass), E();\n  };\n  Object.assign(s.scrollbar, {\n    enable: () => {\n      s.el.classList.remove(s.params.scrollbar.scrollbarDisabledClass), s.scrollbar.el && s.scrollbar.el.classList.remove(s.params.scrollbar.scrollbarDisabledClass), C(), u(), b();\n    },\n    disable: w,\n    updateSize: u,\n    setTranslate: b,\n    init: C,\n    destroy: E\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Thumb;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Thumb(e) {\n  let {\n    swiper: s,\n    extendParams: i,\n    on: t\n  } = e;\n  i({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: !0,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: \"swiper-slide-thumb-active\",\n      thumbsContainerClass: \"swiper-thumbs\"\n    }\n  });\n  let r = !1,\n    a = !1;\n  function l() {\n    const e = s.thumbs.swiper;\n    if (!e || e.destroyed) return;\n    const i = e.clickedIndex,\n      t = e.clickedSlide;\n    if (t && t.classList.contains(s.params.thumbs.slideThumbActiveClass)) return;\n    if (null == i) return;\n    let r;\n    r = e.params.loop ? parseInt(e.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10) : i, s.params.loop ? s.slideToLoop(r) : s.slideTo(r);\n  }\n  function n() {\n    const {\n      thumbs: e\n    } = s.params;\n    if (r) return !1;\n    r = !0;\n    const i = s.constructor;\n    if (e.swiper instanceof i) s.thumbs.swiper = e.swiper, Object.assign(s.thumbs.swiper.originalParams, {\n      watchSlidesProgress: !0,\n      slideToClickedSlide: !1\n    }), Object.assign(s.thumbs.swiper.params, {\n      watchSlidesProgress: !0,\n      slideToClickedSlide: !1\n    }), s.thumbs.swiper.update();else if ((0, _utilsMin.j)(e.swiper)) {\n      const t = Object.assign({}, e.swiper);\n      Object.assign(t, {\n        watchSlidesProgress: !0,\n        slideToClickedSlide: !1\n      }), s.thumbs.swiper = new i(t), a = !0;\n    }\n    return s.thumbs.swiper.el.classList.add(s.params.thumbs.thumbsContainerClass), s.thumbs.swiper.on(\"tap\", l), !0;\n  }\n  function d(e) {\n    const i = s.thumbs.swiper;\n    if (!i || i.destroyed) return;\n    const t = \"auto\" === i.params.slidesPerView ? i.slidesPerViewDynamic() : i.params.slidesPerView;\n    let r = 1;\n    const a = s.params.thumbs.slideThumbActiveClass;\n    if (s.params.slidesPerView > 1 && !s.params.centeredSlides && (r = s.params.slidesPerView), s.params.thumbs.multipleActiveThumbs || (r = 1), r = Math.floor(r), i.slides.forEach(e => e.classList.remove(a)), i.params.loop || i.params.virtual && i.params.virtual.enabled) for (let e = 0; e < r; e += 1) (0, _utilsMin.e)(i.slidesEl, `[data-swiper-slide-index=\"${s.realIndex + e}\"]`).forEach(e => {\n      e.classList.add(a);\n    });else for (let e = 0; e < r; e += 1) i.slides[s.realIndex + e] && i.slides[s.realIndex + e].classList.add(a);\n    const l = s.params.thumbs.autoScrollOffset,\n      n = l && !i.params.loop;\n    if (s.realIndex !== i.realIndex || n) {\n      const r = i.activeIndex;\n      let a, d;\n      if (i.params.loop) {\n        const e = i.slides.filter(e => e.getAttribute(\"data-swiper-slide-index\") === `${s.realIndex}`)[0];\n        a = i.slides.indexOf(e), d = s.activeIndex > s.previousIndex ? \"next\" : \"prev\";\n      } else a = s.realIndex, d = a > s.previousIndex ? \"next\" : \"prev\";\n      n && (a += \"next\" === d ? l : -1 * l), i.visibleSlidesIndexes && i.visibleSlidesIndexes.indexOf(a) < 0 && (i.params.centeredSlides ? a = a > r ? a - Math.floor(t / 2) + 1 : a + Math.floor(t / 2) - 1 : a > r && i.params.slidesPerGroup, i.slideTo(a, e ? 0 : void 0));\n    }\n  }\n  s.thumbs = {\n    swiper: null\n  }, t(\"beforeInit\", () => {\n    const {\n      thumbs: e\n    } = s.params;\n    if (e && e.swiper) if (\"string\" == typeof e.swiper || e.swiper instanceof HTMLElement) {\n      const i = (0, _ssrWindowEsmMin.g)(),\n        t = () => {\n          const t = \"string\" == typeof e.swiper ? i.querySelector(e.swiper) : e.swiper;\n          if (t && t.swiper) e.swiper = t.swiper, n(), d(!0);else if (t) {\n            const i = r => {\n              e.swiper = r.detail[0], t.removeEventListener(\"init\", i), n(), d(!0), e.swiper.update(), s.update();\n            };\n            t.addEventListener(\"init\", i);\n          }\n          return t;\n        },\n        r = () => {\n          if (s.destroyed) return;\n          t() || requestAnimationFrame(r);\n        };\n      requestAnimationFrame(r);\n    } else n(), d(!0);\n  }), t(\"slideChange update resize observerUpdate\", () => {\n    d();\n  }), t(\"setTransition\", (e, i) => {\n    const t = s.thumbs.swiper;\n    t && !t.destroyed && t.setTransition(i);\n  }), t(\"beforeDestroy\", () => {\n    const e = s.thumbs.swiper;\n    e && !e.destroyed && a && e.destroy();\n  }), Object.assign(s.thumbs, {\n    init: n,\n    update: d\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Virtual;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Virtual(e) {\n  let s,\n    {\n      swiper: r,\n      extendParams: t,\n      on: i,\n      emit: l\n    } = e;\n  t({\n    virtual: {\n      enabled: !1,\n      slides: [],\n      cache: !0,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: !0,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  const a = (0, _ssrWindowEsmMin.g)();\n  r.virtual = {\n    cache: {},\n    from: void 0,\n    to: void 0,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n  const d = a.createElement(\"div\");\n  function n(e, s) {\n    const t = r.params.virtual;\n    if (t.cache && r.virtual.cache[s]) return r.virtual.cache[s];\n    let i;\n    return t.renderSlide ? (i = t.renderSlide.call(r, e, s), \"string\" == typeof i && (d.innerHTML = i, i = d.children[0])) : i = r.isElement ? (0, _utilsMin.c)(\"swiper-slide\") : (0, _utilsMin.c)(\"div\", r.params.slideClass), i.setAttribute(\"data-swiper-slide-index\", s), t.renderSlide || (i.innerHTML = e), t.cache && (r.virtual.cache[s] = i), i;\n  }\n  function o(e) {\n    const {\n        slidesPerView: s,\n        slidesPerGroup: t,\n        centeredSlides: i,\n        loop: a\n      } = r.params,\n      {\n        addSlidesBefore: d,\n        addSlidesAfter: o\n      } = r.params.virtual,\n      {\n        from: c,\n        to: u,\n        slides: p,\n        slidesGrid: f,\n        offset: h\n      } = r.virtual;\n    r.params.cssMode || r.updateActiveIndex();\n    const m = r.activeIndex || 0;\n    let v, g, E;\n    v = r.rtlTranslate ? \"right\" : r.isHorizontal() ? \"left\" : \"top\", i ? (g = Math.floor(s / 2) + t + o, E = Math.floor(s / 2) + t + d) : (g = s + (t - 1) + o, E = (a ? s : t) + d);\n    let S = m - E,\n      x = m + g;\n    a || (S = Math.max(S, 0), x = Math.min(x, p.length - 1));\n    let w = (r.slidesGrid[S] || 0) - (r.slidesGrid[0] || 0);\n    function A() {\n      r.updateSlides(), r.updateProgress(), r.updateSlidesClasses(), l(\"virtualUpdate\");\n    }\n    if (a && m >= E ? (S -= E, i || (w += r.slidesGrid[0])) : a && m < E && (S = -E, i && (w += r.slidesGrid[0])), Object.assign(r.virtual, {\n      from: S,\n      to: x,\n      offset: w,\n      slidesGrid: r.slidesGrid,\n      slidesBefore: E,\n      slidesAfter: g\n    }), c === S && u === x && !e) return r.slidesGrid !== f && w !== h && r.slides.forEach(e => {\n      e.style[v] = w - Math.abs(r.cssOverflowAdjustment()) + \"px\";\n    }), r.updateProgress(), void l(\"virtualUpdate\");\n    if (r.params.virtual.renderExternal) return r.params.virtual.renderExternal.call(r, {\n      offset: w,\n      from: S,\n      to: x,\n      slides: function () {\n        const e = [];\n        for (let s = S; s <= x; s += 1) e.push(p[s]);\n        return e;\n      }()\n    }), void (r.params.virtual.renderExternalUpdate ? A() : l(\"virtualUpdate\"));\n    const b = [],\n      M = [],\n      y = e => {\n        let s = e;\n        return e < 0 ? s = p.length + e : s >= p.length && (s -= p.length), s;\n      };\n    if (e) r.slidesEl.querySelectorAll(`.${r.params.slideClass}, swiper-slide`).forEach(e => {\n      e.remove();\n    });else for (let e = c; e <= u; e += 1) if (e < S || e > x) {\n      const s = y(e);\n      r.slidesEl.querySelectorAll(`.${r.params.slideClass}[data-swiper-slide-index=\"${s}\"], swiper-slide[data-swiper-slide-index=\"${s}\"]`).forEach(e => {\n        e.remove();\n      });\n    }\n    const P = a ? -p.length : 0,\n      C = a ? 2 * p.length : p.length;\n    for (let s = P; s < C; s += 1) if (s >= S && s <= x) {\n      const r = y(s);\n      void 0 === u || e ? M.push(r) : (s > u && M.push(r), s < c && b.push(r));\n    }\n    if (M.forEach(e => {\n      r.slidesEl.append(n(p[e], e));\n    }), a) for (let e = b.length - 1; e >= 0; e -= 1) {\n      const s = b[e];\n      r.slidesEl.prepend(n(p[s], s));\n    } else b.sort((e, s) => s - e), b.forEach(e => {\n      r.slidesEl.prepend(n(p[e], e));\n    });\n    (0, _utilsMin.e)(r.slidesEl, \".swiper-slide, swiper-slide\").forEach(e => {\n      e.style[v] = w - Math.abs(r.cssOverflowAdjustment()) + \"px\";\n    }), A();\n  }\n  i(\"beforeInit\", () => {\n    if (!r.params.virtual.enabled) return;\n    let e;\n    if (void 0 === r.passedParams.virtual.slides) {\n      const s = [...r.slidesEl.children].filter(e => e.matches(`.${r.params.slideClass}, swiper-slide`));\n      s && s.length && (r.virtual.slides = [...s], e = !0, s.forEach((e, s) => {\n        e.setAttribute(\"data-swiper-slide-index\", s), r.virtual.cache[s] = e, e.remove();\n      }));\n    }\n    e || (r.virtual.slides = r.params.virtual.slides), r.classNames.push(`${r.params.containerModifierClass}virtual`), r.params.watchSlidesProgress = !0, r.originalParams.watchSlidesProgress = !0, r.params.initialSlide || o();\n  }), i(\"setTranslate\", () => {\n    r.params.virtual.enabled && (r.params.cssMode && !r._immediateVirtual ? (clearTimeout(s), s = setTimeout(() => {\n      o();\n    }, 100)) : o());\n  }), i(\"init update resize\", () => {\n    r.params.virtual.enabled && r.params.cssMode && (0, _utilsMin.s)(r.wrapperEl, \"--swiper-virtual-size\", `${r.virtualSize}px`);\n  }), Object.assign(r.virtual, {\n    appendSlide: function (e) {\n      if (\"object\" == typeof e && \"length\" in e) for (let s = 0; s < e.length; s += 1) e[s] && r.virtual.slides.push(e[s]);else r.virtual.slides.push(e);\n      o(!0);\n    },\n    prependSlide: function (e) {\n      const s = r.activeIndex;\n      let t = s + 1,\n        i = 1;\n      if (Array.isArray(e)) {\n        for (let s = 0; s < e.length; s += 1) e[s] && r.virtual.slides.unshift(e[s]);\n        t = s + e.length, i = e.length;\n      } else r.virtual.slides.unshift(e);\n      if (r.params.virtual.cache) {\n        const e = r.virtual.cache,\n          s = {};\n        Object.keys(e).forEach(r => {\n          const t = e[r],\n            l = t.getAttribute(\"data-swiper-slide-index\");\n          l && t.setAttribute(\"data-swiper-slide-index\", parseInt(l, 10) + i), s[parseInt(r, 10) + i] = t;\n        }), r.virtual.cache = s;\n      }\n      o(!0), r.slideTo(t, 0);\n    },\n    removeSlide: function (e) {\n      if (null == e) return;\n      let s = r.activeIndex;\n      if (Array.isArray(e)) for (let t = e.length - 1; t >= 0; t -= 1) r.virtual.slides.splice(e[t], 1), r.params.virtual.cache && delete r.virtual.cache[e[t]], e[t] < s && (s -= 1), s = Math.max(s, 0);else r.virtual.slides.splice(e, 1), r.params.virtual.cache && delete r.virtual.cache[e], e < s && (s -= 1), s = Math.max(s, 0);\n      o(!0), r.slideTo(s, 0);\n    },\n    removeAllSlides: function () {\n      r.virtual.slides = [], r.params.virtual.cache && (r.virtual.cache = {}), o(!0), r.slideTo(0, 0);\n    },\n    update: o\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Zoom;\nvar _ssrWindowEsmMin = require(\"../shared/ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"../shared/utils.min.mjs\");\nfunction Zoom(e) {\n  let {\n    swiper: t,\n    extendParams: i,\n    on: a,\n    emit: r\n  } = e;\n  const s = (0, _ssrWindowEsmMin.a)();\n  i({\n    zoom: {\n      enabled: !1,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: !0,\n      containerClass: \"swiper-zoom-container\",\n      zoomedSlideClass: \"swiper-slide-zoomed\"\n    }\n  }), t.zoom = {\n    enabled: !1\n  };\n  let o,\n    n,\n    l = 1,\n    m = !1;\n  const c = [],\n    d = {\n      originX: 0,\n      originY: 0,\n      slideEl: void 0,\n      slideWidth: void 0,\n      slideHeight: void 0,\n      imageEl: void 0,\n      imageWrapEl: void 0,\n      maxRatio: 3\n    },\n    u = {\n      isTouched: void 0,\n      isMoved: void 0,\n      currentX: void 0,\n      currentY: void 0,\n      minX: void 0,\n      minY: void 0,\n      maxX: void 0,\n      maxY: void 0,\n      width: void 0,\n      height: void 0,\n      startX: void 0,\n      startY: void 0,\n      touchesStart: {},\n      touchesCurrent: {}\n    },\n    p = {\n      x: void 0,\n      y: void 0,\n      prevPositionX: void 0,\n      prevPositionY: void 0,\n      prevTime: void 0\n    };\n  let g = 1;\n  function h() {\n    if (c.length < 2) return 1;\n    const e = c[0].pageX,\n      t = c[0].pageY,\n      i = c[1].pageX,\n      a = c[1].pageY;\n    return Math.sqrt((i - e) ** 2 + (a - t) ** 2);\n  }\n  function E(e) {\n    const i = t.isElement ? \"swiper-slide\" : `.${t.params.slideClass}`;\n    return !!e.target.matches(i) || t.slides.filter(t => t.contains(e.target)).length > 0;\n  }\n  function v(e) {\n    if (\"mouse\" === e.pointerType && c.splice(0, c.length), !E(e)) return;\n    const i = t.params.zoom;\n    if (o = !1, n = !1, c.push(e), !(c.length < 2)) {\n      if (o = !0, d.scaleStart = h(), !d.slideEl) {\n        d.slideEl = e.target.closest(`.${t.params.slideClass}, swiper-slide`), d.slideEl || (d.slideEl = t.slides[t.activeIndex]);\n        let a = d.slideEl.querySelector(`.${i.containerClass}`);\n        if (a && (a = a.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0]), d.imageEl = a, d.imageWrapEl = a ? (0, _utilsMin.a)(d.imageEl, `.${i.containerClass}`)[0] : void 0, !d.imageWrapEl) return void (d.imageEl = void 0);\n        d.maxRatio = d.imageWrapEl.getAttribute(\"data-swiper-zoom\") || i.maxRatio;\n      }\n      if (d.imageEl) {\n        const [e, t] = function () {\n          if (c.length < 2) return {\n            x: null,\n            y: null\n          };\n          const e = d.imageEl.getBoundingClientRect();\n          return [(c[0].pageX + (c[1].pageX - c[0].pageX) / 2 - e.x) / l, (c[0].pageY + (c[1].pageY - c[0].pageY) / 2 - e.y) / l];\n        }();\n        d.originX = e, d.originY = t, d.imageEl.style.transitionDuration = \"0ms\";\n      }\n      m = !0;\n    }\n  }\n  function f(e) {\n    if (!E(e)) return;\n    const i = t.params.zoom,\n      a = t.zoom,\n      r = c.findIndex(t => t.pointerId === e.pointerId);\n    r >= 0 && (c[r] = e), c.length < 2 || (n = !0, d.scaleMove = h(), d.imageEl && (a.scale = d.scaleMove / d.scaleStart * l, a.scale > d.maxRatio && (a.scale = d.maxRatio - 1 + (a.scale - d.maxRatio + 1) ** .5), a.scale < i.minRatio && (a.scale = i.minRatio + 1 - (i.minRatio - a.scale + 1) ** .5), d.imageEl.style.transform = `translate3d(0,0,0) scale(${a.scale})`));\n  }\n  function x(e) {\n    if (!E(e)) return;\n    if (\"mouse\" === e.pointerType && \"pointerout\" === e.type) return;\n    const i = t.params.zoom,\n      a = t.zoom,\n      r = c.findIndex(t => t.pointerId === e.pointerId);\n    r >= 0 && c.splice(r, 1), o && n && (o = !1, n = !1, d.imageEl && (a.scale = Math.max(Math.min(a.scale, d.maxRatio), i.minRatio), d.imageEl.style.transitionDuration = `${t.params.speed}ms`, d.imageEl.style.transform = `translate3d(0,0,0) scale(${a.scale})`, l = a.scale, m = !1, a.scale > 1 && d.slideEl ? d.slideEl.classList.add(`${i.zoomedSlideClass}`) : a.scale <= 1 && d.slideEl && d.slideEl.classList.remove(`${i.zoomedSlideClass}`), 1 === a.scale && (d.originX = 0, d.originY = 0, d.slideEl = void 0)));\n  }\n  function X(e) {\n    if (!E(e) || !function (e) {\n      const i = `.${t.params.zoom.containerClass}`;\n      return !!e.target.matches(i) || [...t.hostEl.querySelectorAll(i)].filter(t => t.contains(e.target)).length > 0;\n    }(e)) return;\n    const i = t.zoom;\n    if (!d.imageEl) return;\n    if (!u.isTouched || !d.slideEl) return;\n    u.isMoved || (u.width = d.imageEl.offsetWidth, u.height = d.imageEl.offsetHeight, u.startX = (0, _utilsMin.h)(d.imageWrapEl, \"x\") || 0, u.startY = (0, _utilsMin.h)(d.imageWrapEl, \"y\") || 0, d.slideWidth = d.slideEl.offsetWidth, d.slideHeight = d.slideEl.offsetHeight, d.imageWrapEl.style.transitionDuration = \"0ms\");\n    const a = u.width * i.scale,\n      r = u.height * i.scale;\n    if (a < d.slideWidth && r < d.slideHeight) return;\n    u.minX = Math.min(d.slideWidth / 2 - a / 2, 0), u.maxX = -u.minX, u.minY = Math.min(d.slideHeight / 2 - r / 2, 0), u.maxY = -u.minY, u.touchesCurrent.x = c.length > 0 ? c[0].pageX : e.pageX, u.touchesCurrent.y = c.length > 0 ? c[0].pageY : e.pageY;\n    if (Math.max(Math.abs(u.touchesCurrent.x - u.touchesStart.x), Math.abs(u.touchesCurrent.y - u.touchesStart.y)) > 5 && (t.allowClick = !1), !u.isMoved && !m) {\n      if (t.isHorizontal() && (Math.floor(u.minX) === Math.floor(u.startX) && u.touchesCurrent.x < u.touchesStart.x || Math.floor(u.maxX) === Math.floor(u.startX) && u.touchesCurrent.x > u.touchesStart.x)) return void (u.isTouched = !1);\n      if (!t.isHorizontal() && (Math.floor(u.minY) === Math.floor(u.startY) && u.touchesCurrent.y < u.touchesStart.y || Math.floor(u.maxY) === Math.floor(u.startY) && u.touchesCurrent.y > u.touchesStart.y)) return void (u.isTouched = !1);\n    }\n    e.cancelable && e.preventDefault(), e.stopPropagation(), u.isMoved = !0;\n    const s = (i.scale - l) / (d.maxRatio - t.params.zoom.minRatio),\n      {\n        originX: o,\n        originY: n\n      } = d;\n    u.currentX = u.touchesCurrent.x - u.touchesStart.x + u.startX + s * (u.width - 2 * o), u.currentY = u.touchesCurrent.y - u.touchesStart.y + u.startY + s * (u.height - 2 * n), u.currentX < u.minX && (u.currentX = u.minX + 1 - (u.minX - u.currentX + 1) ** .8), u.currentX > u.maxX && (u.currentX = u.maxX - 1 + (u.currentX - u.maxX + 1) ** .8), u.currentY < u.minY && (u.currentY = u.minY + 1 - (u.minY - u.currentY + 1) ** .8), u.currentY > u.maxY && (u.currentY = u.maxY - 1 + (u.currentY - u.maxY + 1) ** .8), p.prevPositionX || (p.prevPositionX = u.touchesCurrent.x), p.prevPositionY || (p.prevPositionY = u.touchesCurrent.y), p.prevTime || (p.prevTime = Date.now()), p.x = (u.touchesCurrent.x - p.prevPositionX) / (Date.now() - p.prevTime) / 2, p.y = (u.touchesCurrent.y - p.prevPositionY) / (Date.now() - p.prevTime) / 2, Math.abs(u.touchesCurrent.x - p.prevPositionX) < 2 && (p.x = 0), Math.abs(u.touchesCurrent.y - p.prevPositionY) < 2 && (p.y = 0), p.prevPositionX = u.touchesCurrent.x, p.prevPositionY = u.touchesCurrent.y, p.prevTime = Date.now(), d.imageWrapEl.style.transform = `translate3d(${u.currentX}px, ${u.currentY}px,0)`;\n  }\n  function Y() {\n    const e = t.zoom;\n    d.slideEl && t.activeIndex !== t.slides.indexOf(d.slideEl) && (d.imageEl && (d.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\"), d.imageWrapEl && (d.imageWrapEl.style.transform = \"translate3d(0,0,0)\"), d.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`), e.scale = 1, l = 1, d.slideEl = void 0, d.imageEl = void 0, d.imageWrapEl = void 0, d.originX = 0, d.originY = 0);\n  }\n  function y(e) {\n    const i = t.zoom,\n      a = t.params.zoom;\n    if (!d.slideEl) {\n      e && e.target && (d.slideEl = e.target.closest(`.${t.params.slideClass}, swiper-slide`)), d.slideEl || (t.params.virtual && t.params.virtual.enabled && t.virtual ? d.slideEl = (0, _utilsMin.e)(t.slidesEl, `.${t.params.slideActiveClass}`)[0] : d.slideEl = t.slides[t.activeIndex]);\n      let i = d.slideEl.querySelector(`.${a.containerClass}`);\n      i && (i = i.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0]), d.imageEl = i, d.imageWrapEl = i ? (0, _utilsMin.a)(d.imageEl, `.${a.containerClass}`)[0] : void 0;\n    }\n    if (!d.imageEl || !d.imageWrapEl) return;\n    let r, o, n, m, c, p, g, h, E, v, f, x, X, Y, y, z, C, w;\n    t.params.cssMode && (t.wrapperEl.style.overflow = \"hidden\", t.wrapperEl.style.touchAction = \"none\"), d.slideEl.classList.add(`${a.zoomedSlideClass}`), void 0 === u.touchesStart.x && e ? (r = e.pageX, o = e.pageY) : (r = u.touchesStart.x, o = u.touchesStart.y);\n    const M = \"number\" == typeof e ? e : null;\n    1 === l && M && (r = void 0, o = void 0), i.scale = M || d.imageWrapEl.getAttribute(\"data-swiper-zoom\") || a.maxRatio, l = M || d.imageWrapEl.getAttribute(\"data-swiper-zoom\") || a.maxRatio, !e || 1 === l && M ? (g = 0, h = 0) : (C = d.slideEl.offsetWidth, w = d.slideEl.offsetHeight, n = (0, _utilsMin.b)(d.slideEl).left + s.scrollX, m = (0, _utilsMin.b)(d.slideEl).top + s.scrollY, c = n + C / 2 - r, p = m + w / 2 - o, E = d.imageEl.offsetWidth, v = d.imageEl.offsetHeight, f = E * i.scale, x = v * i.scale, X = Math.min(C / 2 - f / 2, 0), Y = Math.min(w / 2 - x / 2, 0), y = -X, z = -Y, g = c * i.scale, h = p * i.scale, g < X && (g = X), g > y && (g = y), h < Y && (h = Y), h > z && (h = z)), M && 1 === i.scale && (d.originX = 0, d.originY = 0), d.imageWrapEl.style.transitionDuration = \"300ms\", d.imageWrapEl.style.transform = `translate3d(${g}px, ${h}px,0)`, d.imageEl.style.transitionDuration = \"300ms\", d.imageEl.style.transform = `translate3d(0,0,0) scale(${i.scale})`;\n  }\n  function z() {\n    const e = t.zoom,\n      i = t.params.zoom;\n    if (!d.slideEl) {\n      t.params.virtual && t.params.virtual.enabled && t.virtual ? d.slideEl = (0, _utilsMin.e)(t.slidesEl, `.${t.params.slideActiveClass}`)[0] : d.slideEl = t.slides[t.activeIndex];\n      let e = d.slideEl.querySelector(`.${i.containerClass}`);\n      e && (e = e.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0]), d.imageEl = e, d.imageWrapEl = e ? (0, _utilsMin.a)(d.imageEl, `.${i.containerClass}`)[0] : void 0;\n    }\n    d.imageEl && d.imageWrapEl && (t.params.cssMode && (t.wrapperEl.style.overflow = \"\", t.wrapperEl.style.touchAction = \"\"), e.scale = 1, l = 1, d.imageWrapEl.style.transitionDuration = \"300ms\", d.imageWrapEl.style.transform = \"translate3d(0,0,0)\", d.imageEl.style.transitionDuration = \"300ms\", d.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\", d.slideEl.classList.remove(`${i.zoomedSlideClass}`), d.slideEl = void 0, d.originX = 0, d.originY = 0);\n  }\n  function C(e) {\n    const i = t.zoom;\n    i.scale && 1 !== i.scale ? z() : y(e);\n  }\n  function w() {\n    return {\n      passiveListener: !!t.params.passiveListeners && {\n        passive: !0,\n        capture: !1\n      },\n      activeListenerWithCapture: !t.params.passiveListeners || {\n        passive: !1,\n        capture: !0\n      }\n    };\n  }\n  function M() {\n    const e = t.zoom;\n    if (e.enabled) return;\n    e.enabled = !0;\n    const {\n      passiveListener: i,\n      activeListenerWithCapture: a\n    } = w();\n    t.wrapperEl.addEventListener(\"pointerdown\", v, i), t.wrapperEl.addEventListener(\"pointermove\", f, a), [\"pointerup\", \"pointercancel\", \"pointerout\"].forEach(e => {\n      t.wrapperEl.addEventListener(e, x, i);\n    }), t.wrapperEl.addEventListener(\"pointermove\", X, a);\n  }\n  function W() {\n    const e = t.zoom;\n    if (!e.enabled) return;\n    e.enabled = !1;\n    const {\n      passiveListener: i,\n      activeListenerWithCapture: a\n    } = w();\n    t.wrapperEl.removeEventListener(\"pointerdown\", v, i), t.wrapperEl.removeEventListener(\"pointermove\", f, a), [\"pointerup\", \"pointercancel\", \"pointerout\"].forEach(e => {\n      t.wrapperEl.removeEventListener(e, x, i);\n    }), t.wrapperEl.removeEventListener(\"pointermove\", X, a);\n  }\n  Object.defineProperty(t.zoom, \"scale\", {\n    get: () => g,\n    set(e) {\n      if (g !== e) {\n        const t = d.imageEl,\n          i = d.slideEl;\n        r(\"zoomChange\", e, t, i);\n      }\n      g = e;\n    }\n  }), a(\"init\", () => {\n    t.params.zoom.enabled && M();\n  }), a(\"destroy\", () => {\n    W();\n  }), a(\"touchStart\", (e, i) => {\n    t.zoom.enabled && function (e) {\n      const i = t.device;\n      if (!d.imageEl) return;\n      if (u.isTouched) return;\n      i.android && e.cancelable && e.preventDefault(), u.isTouched = !0;\n      const a = c.length > 0 ? c[0] : e;\n      u.touchesStart.x = a.pageX, u.touchesStart.y = a.pageY;\n    }(i);\n  }), a(\"touchEnd\", (e, i) => {\n    t.zoom.enabled && function () {\n      const e = t.zoom;\n      if (!d.imageEl) return;\n      if (!u.isTouched || !u.isMoved) return u.isTouched = !1, void (u.isMoved = !1);\n      u.isTouched = !1, u.isMoved = !1;\n      let i = 300,\n        a = 300;\n      const r = p.x * i,\n        s = u.currentX + r,\n        o = p.y * a,\n        n = u.currentY + o;\n      0 !== p.x && (i = Math.abs((s - u.currentX) / p.x)), 0 !== p.y && (a = Math.abs((n - u.currentY) / p.y));\n      const l = Math.max(i, a);\n      u.currentX = s, u.currentY = n;\n      const m = u.width * e.scale,\n        c = u.height * e.scale;\n      u.minX = Math.min(d.slideWidth / 2 - m / 2, 0), u.maxX = -u.minX, u.minY = Math.min(d.slideHeight / 2 - c / 2, 0), u.maxY = -u.minY, u.currentX = Math.max(Math.min(u.currentX, u.maxX), u.minX), u.currentY = Math.max(Math.min(u.currentY, u.maxY), u.minY), d.imageWrapEl.style.transitionDuration = `${l}ms`, d.imageWrapEl.style.transform = `translate3d(${u.currentX}px, ${u.currentY}px,0)`;\n    }();\n  }), a(\"doubleTap\", (e, i) => {\n    !t.animating && t.params.zoom.enabled && t.zoom.enabled && t.params.zoom.toggle && C(i);\n  }), a(\"transitionEnd\", () => {\n    t.zoom.enabled && t.params.zoom.enabled && Y();\n  }), a(\"slideChange\", () => {\n    t.zoom.enabled && t.params.zoom.enabled && t.params.cssMode && Y();\n  }), Object.assign(t.zoom, {\n    enable: M,\n    disable: W,\n    in: y,\n    out: z,\n    toggle: C\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.c = classesToSelector;\nfunction classesToSelector(e) {\n  return void 0 === e && (e = \"\"), `.${e.trim().replace(/([\\.:!+\\/])/g, \"\\\\$1\").replace(/ /g, \".\")}`;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjbGFzc2VzVG9TZWxlY3RvciIsImUiLCJ0cmltIiwicmVwbGFjZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQVNBLGtCQUFrQkMsQ0FBQTtFQUl6QixZQUhnQixNQUFaQSxDQUFBLEtBQ0ZBLENBQUEsR0FBVSxLQUVMLElBQUlBLENBQUEsQ0FBUUMsSUFBQSxHQUFPQyxPQUFBLENBQVEsZ0JBQWdCLFFBQ2pEQSxPQUFBLENBQVEsTUFBTSxNQUNqQjtBQUFBIn0=","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.c = createElementIfNotDefined;\nvar _utilsMin = require(\"./utils.min.mjs\");\nfunction createElementIfNotDefined(e, t, n, a) {\n  return e.params.createElements && Object.keys(a).forEach(l => {\n    if (!n[l] && !0 === n.auto) {\n      let r = (0, _utilsMin.e)(e.el, `.${a[l]}`)[0];\n      r || (r = (0, _utilsMin.c)(\"div\", a[l]), r.className = a[l], e.el.append(r)), n[l] = r, t[l] = r;\n    }\n  }), n;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIiwiZSIsInQiLCJuIiwiYSIsInBhcmFtcyIsImNyZWF0ZUVsZW1lbnRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJsIiwiYXV0byIsInIiLCJlbGVtZW50Q2hpbGRyZW4iLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJhcHBlbmQiXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsU0FBU0EsMEJBQTBCQyxDQUFBLEVBQVFDLENBQUEsRUFBZ0JDLENBQUEsRUFBUUMsQ0FBQTtFQWVqRSxPQWRJSCxDQUFBLENBQU9JLE1BQUEsQ0FBT0MsY0FBQSxJQUNoQkMsTUFBQSxDQUFPQyxJQUFBLENBQUtKLENBQUEsRUFBWUssT0FBQSxDQUFRQyxDQUFBO0lBQzlCLEtBQUtQLENBQUEsQ0FBT08sQ0FBQSxNQUF3QixNQUFoQlAsQ0FBQSxDQUFPUSxJQUFBLEVBQWU7TUFDeEMsSUFBSUMsQ0FBQSxHQUFVLElBQUFDLFdBQUEsRUFBZ0JaLENBQUEsQ0FBT2EsRUFBQSxFQUFJLElBQUlWLENBQUEsQ0FBV00sQ0FBQSxLQUFRO01BQzNERSxDQUFBLEtBQ0hBLENBQUEsR0FBVSxJQUFBRyxXQUFBLEVBQWMsT0FBT1gsQ0FBQSxDQUFXTSxDQUFBLElBQzFDRSxDQUFBLENBQVFJLFNBQUEsR0FBWVosQ0FBQSxDQUFXTSxDQUFBLEdBQy9CVCxDQUFBLENBQU9hLEVBQUEsQ0FBR0csTUFBQSxDQUFPTCxDQUFBLElBRW5CVCxDQUFBLENBQU9PLENBQUEsSUFBT0UsQ0FBQSxFQUNkVixDQUFBLENBQWVRLENBQUEsSUFBT0UsQ0FDeEI7SUFBQTtFQUFBLElBR0dULENBQ1Q7QUFBQSJ9","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.c = createShadow;\nvar _utilsMin = require(\"./utils.min.mjs\");\nfunction createShadow(e, t, r) {\n  const s = `swiper-slide-shadow${r ? `-${r}` : \"\"}${e ? ` swiper-slide-shadow-${e}` : \"\"}`,\n    a = (0, _utilsMin.k)(t);\n  let i = a.querySelector(`.${s.split(\" \").join(\".\")}`);\n  return i || (i = (0, _utilsMin.c)(\"div\", s.split(\" \")), a.append(i)), i;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVTaGFkb3ciLCJlIiwidCIsInIiLCJzIiwiYSIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJpIiwicXVlcnlTZWxlY3RvciIsInNwbGl0Iiwiam9pbiIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmQiXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsU0FBU0EsYUFBYUMsQ0FBQSxFQUFRQyxDQUFBLEVBQVNDLENBQUE7RUFDckMsTUFBTUMsQ0FBQSxHQUFjLHNCQUFzQkQsQ0FBQSxHQUFPLElBQUlBLENBQUEsS0FBUyxLQUFLRixDQUFBLEdBQVMsd0JBQXdCQSxDQUFBLEtBQVc7SUFDekdJLENBQUEsR0FBa0IsSUFBQUMsV0FBQSxFQUFvQkosQ0FBQTtFQUM1QyxJQUFJSyxDQUFBLEdBQVdGLENBQUEsQ0FBZ0JHLGFBQUEsQ0FBYyxJQUFJSixDQUFBLENBQVlLLEtBQUEsQ0FBTSxLQUFLQyxJQUFBLENBQUs7RUFLN0UsT0FKS0gsQ0FBQSxLQUNIQSxDQUFBLEdBQVcsSUFBQUksV0FBQSxFQUFjLE9BQU9QLENBQUEsQ0FBWUssS0FBQSxDQUFNLE9BQ2xESixDQUFBLENBQWdCTyxNQUFBLENBQU9MLENBQUEsSUFFbEJBLENBQ1Q7QUFBQSJ9","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.e = effectInit;\nfunction effectInit(e) {\n  const {\n    effect: s,\n    swiper: a,\n    on: t,\n    setTranslate: r,\n    setTransition: i,\n    overwriteParams: n,\n    perspective: o,\n    recreateShadows: f,\n    getEffectParams: l\n  } = e;\n  let c;\n  t(\"beforeInit\", () => {\n    if (a.params.effect !== s) return;\n    a.classNames.push(`${a.params.containerModifierClass}${s}`), o && o() && a.classNames.push(`${a.params.containerModifierClass}3d`);\n    const e = n ? n() : {};\n    Object.assign(a.params, e), Object.assign(a.originalParams, e);\n  }), t(\"setTranslate\", () => {\n    a.params.effect === s && r();\n  }), t(\"setTransition\", (e, t) => {\n    a.params.effect === s && i(t);\n  }), t(\"transitionEnd\", () => {\n    if (a.params.effect === s && f) {\n      if (!l || !l().slideShadows) return;\n      a.slides.forEach(e => {\n        e.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach(e => e.remove());\n      }), f();\n    }\n  }), t(\"virtualUpdate\", () => {\n    a.params.effect === s && (a.slides.length || (c = !0), requestAnimationFrame(() => {\n      c && a.slides && a.slides.length && (r(), c = !1);\n    }));\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlZmZlY3RJbml0IiwiZSIsImVmZmVjdCIsInMiLCJzd2lwZXIiLCJhIiwib24iLCJ0Iiwic2V0VHJhbnNsYXRlIiwiciIsInNldFRyYW5zaXRpb24iLCJpIiwib3ZlcndyaXRlUGFyYW1zIiwibiIsInBlcnNwZWN0aXZlIiwibyIsInJlY3JlYXRlU2hhZG93cyIsImYiLCJnZXRFZmZlY3RQYXJhbXMiLCJsIiwiYyIsInBhcmFtcyIsImNsYXNzTmFtZXMiLCJwdXNoIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsIk9iamVjdCIsImFzc2lnbiIsIm9yaWdpbmFsUGFyYW1zIiwic2xpZGVTaGFkb3dzIiwic2xpZGVzIiwiZm9yRWFjaCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW1vdmUiLCJsZW5ndGgiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxTQUFTQSxXQUFXQyxDQUFBO0VBQ2xCO0lBQU1DLE1BQUEsRUFDSkMsQ0FBQTtJQUFNQyxNQUFBLEVBQ05DLENBQUE7SUFBTUMsRUFBQSxFQUNOQyxDQUFBO0lBQUVDLFlBQUEsRUFDRkMsQ0FBQTtJQUFZQyxhQUFBLEVBQ1pDLENBQUE7SUFBYUMsZUFBQSxFQUNiQyxDQUFBO0lBQWVDLFdBQUEsRUFDZkMsQ0FBQTtJQUFXQyxlQUFBLEVBQ1hDLENBQUE7SUFBZUMsZUFBQSxFQUNmQztFQUFBLElBQ0VsQixDQUFBO0VBK0JKLElBQUltQixDQUFBO0VBOUJKYixDQUFBLENBQUcsY0FBYztJQUNmLElBQUlGLENBQUEsQ0FBT2dCLE1BQUEsQ0FBT25CLE1BQUEsS0FBV0MsQ0FBQSxFQUFRO0lBQ3JDRSxDQUFBLENBQU9pQixVQUFBLENBQVdDLElBQUEsQ0FBSyxHQUFHbEIsQ0FBQSxDQUFPZ0IsTUFBQSxDQUFPRyxzQkFBQSxHQUF5QnJCLENBQUEsS0FDN0RZLENBQUEsSUFBZUEsQ0FBQSxNQUNqQlYsQ0FBQSxDQUFPaUIsVUFBQSxDQUFXQyxJQUFBLENBQUssR0FBR2xCLENBQUEsQ0FBT2dCLE1BQUEsQ0FBT0csc0JBQUE7SUFFMUMsTUFBTXZCLENBQUEsR0FBd0JZLENBQUEsR0FBa0JBLENBQUEsS0FBb0IsQ0FBQztJQUNyRVksTUFBQSxDQUFPQyxNQUFBLENBQU9yQixDQUFBLENBQU9nQixNQUFBLEVBQVFwQixDQUFBLEdBQzdCd0IsTUFBQSxDQUFPQyxNQUFBLENBQU9yQixDQUFBLENBQU9zQixjQUFBLEVBQWdCMUIsQ0FBQSxDQUFzQjtFQUFBLElBRTdETSxDQUFBLENBQUcsZ0JBQWdCO0lBQ2JGLENBQUEsQ0FBT2dCLE1BQUEsQ0FBT25CLE1BQUEsS0FBV0MsQ0FBQSxJQUM3Qk0sQ0FBQSxFQUFjO0VBQUEsSUFFaEJGLENBQUEsQ0FBRyxpQkFBaUIsQ0FBQ04sQ0FBQSxFQUFJTSxDQUFBO0lBQ25CRixDQUFBLENBQU9nQixNQUFBLENBQU9uQixNQUFBLEtBQVdDLENBQUEsSUFDN0JRLENBQUEsQ0FBY0osQ0FBQSxDQUFTO0VBQUEsSUFFekJBLENBQUEsQ0FBRyxpQkFBaUI7SUFDbEIsSUFBSUYsQ0FBQSxDQUFPZ0IsTUFBQSxDQUFPbkIsTUFBQSxLQUFXQyxDQUFBLElBQ3pCYyxDQUFBLEVBQWlCO01BQ25CLEtBQUtFLENBQUEsS0FBb0JBLENBQUEsR0FBa0JTLFlBQUEsRUFBYztNQUV6RHZCLENBQUEsQ0FBT3dCLE1BQUEsQ0FBT0MsT0FBQSxDQUFRN0IsQ0FBQTtRQUNwQkEsQ0FBQSxDQUFROEIsZ0JBQUEsQ0FBaUIsZ0hBQWdIRCxPQUFBLENBQVE3QixDQUFBLElBQVlBLENBQUEsQ0FBUytCLE1BQUEsR0FBUztNQUFBLElBR2pMZixDQUFBLEVBQ0Y7SUFBQTtFQUFBLElBR0ZWLENBQUEsQ0FBRyxpQkFBaUI7SUFDZEYsQ0FBQSxDQUFPZ0IsTUFBQSxDQUFPbkIsTUFBQSxLQUFXQyxDQUFBLEtBQ3hCRSxDQUFBLENBQU93QixNQUFBLENBQU9JLE1BQUEsS0FDakJiLENBQUEsSUFBeUIsSUFFM0JjLHFCQUFBLENBQXNCO01BQ2hCZCxDQUFBLElBQTBCZixDQUFBLENBQU93QixNQUFBLElBQVV4QixDQUFBLENBQU93QixNQUFBLENBQU9JLE1BQUEsS0FDM0R4QixDQUFBLElBQ0FXLENBQUEsSUFBeUIsRUFDM0I7SUFBQSxHQUNBO0VBQUEsRUFFTjtBQUFBIn0=","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.e = effectTarget;\nvar _utilsMin = require(\"./utils.min.mjs\");\nfunction effectTarget(e, i) {\n  const t = (0, _utilsMin.k)(i);\n  return t !== i && (t.style.backfaceVisibility = \"hidden\", t.style[\"-webkit-backface-visibility\"] = \"hidden\"), t;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlZmZlY3RUYXJnZXQiLCJlIiwiaSIsInQiLCJnZXRTbGlkZVRyYW5zZm9ybUVsIiwic3R5bGUiLCJiYWNrZmFjZVZpc2liaWxpdHkiXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsU0FBU0EsYUFBYUMsQ0FBQSxFQUFjQyxDQUFBO0VBQ2xDLE1BQU1DLENBQUEsR0FBYyxJQUFBQyxXQUFBLEVBQW9CRixDQUFBO0VBS3hDLE9BSklDLENBQUEsS0FBZ0JELENBQUEsS0FDbEJDLENBQUEsQ0FBWUUsS0FBQSxDQUFNQyxrQkFBQSxHQUFxQixVQUN2Q0gsQ0FBQSxDQUFZRSxLQUFBLENBQU0saUNBQWlDLFdBRTlDRixDQUNUO0FBQUEifQ==","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.e = effectVirtualTransitionEnd;\nvar _utilsMin = require(\"./utils.min.mjs\");\nfunction effectVirtualTransitionEnd(e) {\n  let {\n    swiper: t,\n    duration: n,\n    transformElements: r,\n    allSlides: i\n  } = e;\n  const {\n    activeIndex: a\n  } = t;\n  if (t.params.virtualTranslate && 0 !== n) {\n    let e,\n      n = !1;\n    e = i ? r : r.filter(e => {\n      const n = e.classList.contains(\"swiper-slide-transform\") ? (e => {\n        if (!e.parentElement) return t.slides.filter(t => t.shadowRoot && t.shadowRoot === e.parentNode)[0];\n        return e.parentElement;\n      })(e) : e;\n      return t.getSlideIndex(n) === a;\n    }), e.forEach(e => {\n      (0, _utilsMin.i)(e, () => {\n        if (n) return;\n        if (!t || t.destroyed) return;\n        n = !0, t.animating = !1;\n        const e = new window.CustomEvent(\"transitionend\", {\n          bubbles: !0,\n          cancelable: !0\n        });\n        t.wrapperEl.dispatchEvent(e);\n      });\n    });\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCIsImUiLCJzd2lwZXIiLCJ0IiwiZHVyYXRpb24iLCJuIiwidHJhbnNmb3JtRWxlbWVudHMiLCJyIiwiYWxsU2xpZGVzIiwiaSIsImFjdGl2ZUluZGV4IiwiYSIsInBhcmFtcyIsInZpcnR1YWxUcmFuc2xhdGUiLCJmaWx0ZXIiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInBhcmVudEVsZW1lbnQiLCJzbGlkZXMiLCJzaGFkb3dSb290IiwicGFyZW50Tm9kZSIsImdldFNsaWRlSW5kZXgiLCJmb3JFYWNoIiwiZWxlbWVudFRyYW5zaXRpb25FbmQiLCJkZXN0cm95ZWQiLCJhbmltYXRpbmciLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwid3JhcHBlckVsIiwiZGlzcGF0Y2hFdmVudCJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQSxTQUFTQSwyQkFBMkJDLENBQUE7RUFDbEM7SUFBSUMsTUFBQSxFQUNGQyxDQUFBO0lBQU1DLFFBQUEsRUFDTkMsQ0FBQTtJQUFRQyxpQkFBQSxFQUNSQyxDQUFBO0lBQWlCQyxTQUFBLEVBQ2pCQztFQUFBLElBQ0VSLENBQUE7RUFDSjtJQUFNUyxXQUFBLEVBQ0pDO0VBQUEsSUFDRVIsQ0FBQTtFQVNKLElBQUlBLENBQUEsQ0FBT1MsTUFBQSxDQUFPQyxnQkFBQSxJQUFpQyxNQUFiUixDQUFBLEVBQWdCO0lBQ3BELElBQ0lKLENBQUE7TUFEQUksQ0FBQSxJQUFpQjtJQUduQkosQ0FBQSxHQURFUSxDQUFBLEdBQ29CRixDQUFBLEdBRUFBLENBQUEsQ0FBa0JPLE1BQUEsQ0FBT2IsQ0FBQTtNQUM3QyxNQUFNSSxDQUFBLEdBQUtKLENBQUEsQ0FBWWMsU0FBQSxDQUFVQyxRQUFBLENBQVMsNEJBZi9CLENBQUFmLENBQUE7UUFDZixLQUFLQSxDQUFBLENBQUdnQixhQUFBLEVBR04sT0FEY2QsQ0FBQSxDQUFPZSxNQUFBLENBQU9KLE1BQUEsQ0FBT1gsQ0FBQSxJQUFXQSxDQUFBLENBQVFnQixVQUFBLElBQWNoQixDQUFBLENBQVFnQixVQUFBLEtBQWVsQixDQUFBLENBQUdtQixVQUFBLEVBQVk7UUFHNUcsT0FBT25CLENBQUEsQ0FBR2dCLGFBQWE7TUFBQSxHQVM0RGhCLENBQUEsSUFBZUEsQ0FBQTtNQUM5RixPQUFPRSxDQUFBLENBQU9rQixhQUFBLENBQWNoQixDQUFBLE1BQVFNLENBQVc7SUFBQSxJQUduRFYsQ0FBQSxDQUFvQnFCLE9BQUEsQ0FBUXJCLENBQUE7TUFDMUIsSUFBQXNCLFdBQUEsRUFBcUJ0QixDQUFBLEVBQUk7UUFDdkIsSUFBSUksQ0FBQSxFQUFnQjtRQUNwQixLQUFLRixDQUFBLElBQVVBLENBQUEsQ0FBT3FCLFNBQUEsRUFBVztRQUNqQ25CLENBQUEsSUFBaUIsR0FDakJGLENBQUEsQ0FBT3NCLFNBQUEsSUFBWTtRQUNuQixNQUFNeEIsQ0FBQSxHQUFNLElBQUl5QixNQUFBLENBQU9DLFdBQUEsQ0FBWSxpQkFBaUI7VUFDbERDLE9BQUEsR0FBUztVQUNUQyxVQUFBLEdBQVk7UUFBQTtRQUVkMUIsQ0FBQSxDQUFPMkIsU0FBQSxDQUFVQyxhQUFBLENBQWM5QixDQUFBLENBQUk7TUFBQSxFQUNuQztJQUFBLEVBRU47RUFBQTtBQUNGIn0=","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.a = getWindow;\nexports.g = getDocument;\nfunction isObject(e) {\n  return null !== e && \"object\" == typeof e && \"constructor\" in e && e.constructor === Object;\n}\nfunction extend(e, t) {\n  void 0 === e && (e = {}), void 0 === t && (t = {}), Object.keys(t).forEach(n => {\n    void 0 === e[n] ? e[n] = t[n] : isObject(t[n]) && isObject(e[n]) && Object.keys(t[n]).length > 0 && extend(e[n], t[n]);\n  });\n}\nconst ssrDocument = {\n  body: {},\n  addEventListener() {},\n  removeEventListener() {},\n  activeElement: {\n    blur() {},\n    nodeName: \"\"\n  },\n  querySelector: () => null,\n  querySelectorAll: () => [],\n  getElementById: () => null,\n  createEvent: () => ({\n    initEvent() {}\n  }),\n  createElement: () => ({\n    children: [],\n    childNodes: [],\n    style: {},\n    setAttribute() {},\n    getElementsByTagName: () => []\n  }),\n  createElementNS: () => ({}),\n  importNode: () => null,\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  }\n};\nfunction getDocument() {\n  const e = \"undefined\" != typeof document ? document : {};\n  return extend(e, ssrDocument), e;\n}\nconst ssrWindow = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: \"\"\n  },\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  },\n  history: {\n    replaceState() {},\n    pushState() {},\n    go() {},\n    back() {}\n  },\n  CustomEvent: function () {\n    return this;\n  },\n  addEventListener() {},\n  removeEventListener() {},\n  getComputedStyle: () => ({\n    getPropertyValue: () => \"\"\n  }),\n  Image() {},\n  Date() {},\n  screen: {},\n  setTimeout() {},\n  clearTimeout() {},\n  matchMedia: () => ({}),\n  requestAnimationFrame: e => \"undefined\" == typeof setTimeout ? (e(), null) : setTimeout(e, 0),\n  cancelAnimationFrame(e) {\n    \"undefined\" != typeof setTimeout && clearTimeout(e);\n  }\n};\nfunction getWindow() {\n  const e = \"undefined\" != typeof window ? window : {};\n  return extend(e, ssrWindow), e;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc09iamVjdCIsImUiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImV4dGVuZCIsInQiLCJrZXlzIiwiZm9yRWFjaCIsIm4iLCJsZW5ndGgiLCJzc3JEb2N1bWVudCIsImJvZHkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImdldERvY3VtZW50IiwiZG9jdW1lbnQiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJnZXRXaW5kb3ciLCJ3aW5kb3ciXSwic291cmNlcyI6WyIwIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBWUEsU0FBU0EsU0FBU0MsQ0FBQTtFQUNoQixPQUFlLFNBQVJBLENBQUEsSUFBK0IsbUJBQVJBLENBQUEsSUFBb0Is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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.d = exports.S = void 0;\nvar _ssrWindowEsmMin = require(\"./ssr-window.esm.min.mjs\");\nvar _utilsMin = require(\"./utils.min.mjs\");\nlet support, deviceCached, browser;\nfunction calcSupport() {\n  const e = (0, _ssrWindowEsmMin.a)(),\n    t = (0, _ssrWindowEsmMin.g)();\n  return {\n    smoothScroll: t.documentElement && t.documentElement.style && \"scrollBehavior\" in t.documentElement.style,\n    touch: !!(\"ontouchstart\" in e || e.DocumentTouch && t instanceof e.DocumentTouch)\n  };\n}\nfunction getSupport() {\n  return support || (support = calcSupport()), support;\n}\nfunction calcDevice(e) {\n  let {\n    userAgent: t\n  } = void 0 === e ? {} : e;\n  const s = getSupport(),\n    i = (0, _ssrWindowEsmMin.a)(),\n    r = i.navigator.platform,\n    a = t || i.navigator.userAgent,\n    n = {\n      ios: !1,\n      android: !1\n    },\n    l = i.screen.width,\n    o = i.screen.height,\n    d = a.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n  let c = a.match(/(iPad).*OS\\s([\\d_]+)/);\n  const p = a.match(/(iPod)(.*OS\\s([\\d_]+))?/),\n    u = !c && a.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/),\n    h = \"Win32\" === r;\n  let m = \"MacIntel\" === r;\n  return !c && m && s.touch && [\"1024x1366\", \"1366x1024\", \"834x1194\", \"1194x834\", \"834x1112\", \"1112x834\", \"768x1024\", \"1024x768\", \"820x1180\", \"1180x820\", \"810x1080\", \"1080x810\"].indexOf(`${l}x${o}`) >= 0 && (c = a.match(/(Version)\\/([\\d.]+)/), c || (c = [0, 1, \"13_0_0\"]), m = !1), d && !h && (n.os = \"android\", n.android = !0), (c || u || p) && (n.os = \"ios\", n.ios = !0), n;\n}\nfunction getDevice(e) {\n  return void 0 === e && (e = {}), deviceCached || (deviceCached = calcDevice(e)), deviceCached;\n}\nfunction calcBrowser() {\n  const e = (0, _ssrWindowEsmMin.a)();\n  let t = !1;\n  function s() {\n    const t = e.navigator.userAgent.toLowerCase();\n    return t.indexOf(\"safari\") >= 0 && t.indexOf(\"chrome\") < 0 && t.indexOf(\"android\") < 0;\n  }\n  if (s()) {\n    const s = String(e.navigator.userAgent);\n    if (s.includes(\"Version/\")) {\n      const [e, i] = s.split(\"Version/\")[1].split(\" \")[0].split(\".\").map(e => Number(e));\n      t = e < 16 || 16 === e && i < 2;\n    }\n  }\n  return {\n    isSafari: t || s(),\n    needPerspectiveFix: t,\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)\n  };\n}\nfunction getBrowser() {\n  return browser || (browser = calcBrowser()), browser;\n}\nfunction Resize(e) {\n  let {\n    swiper: t,\n    on: s,\n    emit: i\n  } = e;\n  const r = (0, _ssrWindowEsmMin.a)();\n  let a = null,\n    n = null;\n  const l = () => {\n      t && !t.destroyed && t.initialized && (i(\"beforeResize\"), i(\"resize\"));\n    },\n    o = () => {\n      t && !t.destroyed && t.initialized && i(\"orientationchange\");\n    };\n  s(\"init\", () => {\n    t.params.resizeObserver && void 0 !== r.ResizeObserver ? t && !t.destroyed && t.initialized && (a = new ResizeObserver(e => {\n      n = r.requestAnimationFrame(() => {\n        const {\n          width: s,\n          height: i\n        } = t;\n        let r = s,\n          a = i;\n        e.forEach(e => {\n          let {\n            contentBoxSize: s,\n            contentRect: i,\n            target: n\n          } = e;\n          n && n !== t.el || (r = i ? i.width : (s[0] || s).inlineSize, a = i ? i.height : (s[0] || s).blockSize);\n        }), r === s && a === i || l();\n      });\n    }), a.observe(t.el)) : (r.addEventListener(\"resize\", l), r.addEventListener(\"orientationchange\", o));\n  }), s(\"destroy\", () => {\n    n && r.cancelAnimationFrame(n), a && a.unobserve && t.el && (a.unobserve(t.el), a = null), r.removeEventListener(\"resize\", l), r.removeEventListener(\"orientationchange\", o);\n  });\n}\nfunction Observer(e) {\n  let {\n    swiper: t,\n    extendParams: s,\n    on: i,\n    emit: r\n  } = e;\n  const a = [],\n    n = (0, _ssrWindowEsmMin.a)(),\n    l = function (e, s) {\n      void 0 === s && (s = {});\n      const i = new (n.MutationObserver || n.WebkitMutationObserver)(e => {\n        if (t.__preventObserver__) return;\n        if (1 === e.length) return void r(\"observerUpdate\", e[0]);\n        const s = function () {\n          r(\"observerUpdate\", e[0]);\n        };\n        n.requestAnimationFrame ? n.requestAnimationFrame(s) : n.setTimeout(s, 0);\n      });\n      i.observe(e, {\n        attributes: void 0 === s.attributes || s.attributes,\n        childList: void 0 === s.childList || s.childList,\n        characterData: void 0 === s.characterData || s.characterData\n      }), a.push(i);\n    };\n  s({\n    observer: !1,\n    observeParents: !1,\n    observeSlideChildren: !1\n  }), i(\"init\", () => {\n    if (t.params.observer) {\n      if (t.params.observeParents) {\n        const e = (0, _utilsMin.a)(t.hostEl);\n        for (let t = 0; t < e.length; t += 1) l(e[t]);\n      }\n      l(t.hostEl, {\n        childList: t.params.observeSlideChildren\n      }), l(t.wrapperEl, {\n        attributes: !1\n      });\n    }\n  }), i(\"destroy\", () => {\n    a.forEach(e => {\n      e.disconnect();\n    }), a.splice(0, a.length);\n  });\n}\nvar eventsEmitter = {\n  on(e, t, s) {\n    const i = this;\n    if (!i.eventsListeners || i.destroyed) return i;\n    if (\"function\" != typeof t) return i;\n    const r = s ? \"unshift\" : \"push\";\n    return e.split(\" \").forEach(e => {\n      i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][r](t);\n    }), i;\n  },\n  once(e, t, s) {\n    const i = this;\n    if (!i.eventsListeners || i.destroyed) return i;\n    if (\"function\" != typeof t) return i;\n    function r() {\n      i.off(e, r), r.__emitterProxy && delete r.__emitterProxy;\n      for (var s = arguments.length, a = new Array(s), n = 0; n < s; n++) a[n] = arguments[n];\n      t.apply(i, a);\n    }\n    return r.__emitterProxy = t, i.on(e, r, s);\n  },\n  onAny(e, t) {\n    const s = this;\n    if (!s.eventsListeners || s.destroyed) return s;\n    if (\"function\" != typeof e) return s;\n    const i = t ? \"unshift\" : \"push\";\n    return s.eventsAnyListeners.indexOf(e) < 0 && s.eventsAnyListeners[i](e), s;\n  },\n  offAny(e) {\n    const t = this;\n    if (!t.eventsListeners || t.destroyed) return t;\n    if (!t.eventsAnyListeners) return t;\n    const s = t.eventsAnyListeners.indexOf(e);\n    return s >= 0 && t.eventsAnyListeners.splice(s, 1), t;\n  },\n  off(e, t) {\n    const s = this;\n    return !s.eventsListeners || s.destroyed ? s : s.eventsListeners ? (e.split(\" \").forEach(e => {\n      void 0 === t ? s.eventsListeners[e] = [] : s.eventsListeners[e] && s.eventsListeners[e].forEach((i, r) => {\n        (i === t || i.__emitterProxy && i.__emitterProxy === t) && s.eventsListeners[e].splice(r, 1);\n      });\n    }), s) : s;\n  },\n  emit() {\n    const e = this;\n    if (!e.eventsListeners || e.destroyed) return e;\n    if (!e.eventsListeners) return e;\n    let t, s, i;\n    for (var r = arguments.length, a = new Array(r), n = 0; n < r; n++) a[n] = arguments[n];\n    \"string\" == typeof a[0] || Array.isArray(a[0]) ? (t = a[0], s = a.slice(1, a.length), i = e) : (t = a[0].events, s = a[0].data, i = a[0].context || e), s.unshift(i);\n    return (Array.isArray(t) ? t : t.split(\" \")).forEach(t => {\n      e.eventsAnyListeners && e.eventsAnyListeners.length && e.eventsAnyListeners.forEach(e => {\n        e.apply(i, [t, ...s]);\n      }), e.eventsListeners && e.eventsListeners[t] && e.eventsListeners[t].forEach(e => {\n        e.apply(i, s);\n      });\n    }), e;\n  }\n};\nfunction updateSize() {\n  const e = this;\n  let t, s;\n  const i = e.el;\n  t = void 0 !== e.params.width && null !== e.params.width ? e.params.width : i.clientWidth, s = void 0 !== e.params.height && null !== e.params.height ? e.params.height : i.clientHeight, 0 === t && e.isHorizontal() || 0 === s && e.isVertical() || (t = t - parseInt((0, _utilsMin.l)(i, \"padding-left\") || 0, 10) - parseInt((0, _utilsMin.l)(i, \"padding-right\") || 0, 10), s = s - parseInt((0, _utilsMin.l)(i, \"padding-top\") || 0, 10) - parseInt((0, _utilsMin.l)(i, \"padding-bottom\") || 0, 10), Number.isNaN(t) && (t = 0), Number.isNaN(s) && (s = 0), Object.assign(e, {\n    width: t,\n    height: s,\n    size: e.isHorizontal() ? t : s\n  }));\n}\nfunction updateSlides() {\n  const e = this;\n  function t(t) {\n    return e.isHorizontal() ? t : {\n      width: \"height\",\n      \"margin-top\": \"margin-left\",\n      \"margin-bottom \": \"margin-right\",\n      \"margin-left\": \"margin-top\",\n      \"margin-right\": \"margin-bottom\",\n      \"padding-left\": \"padding-top\",\n      \"padding-right\": \"padding-bottom\",\n      marginRight: \"marginBottom\"\n    }[t];\n  }\n  function s(e, s) {\n    return parseFloat(e.getPropertyValue(t(s)) || 0);\n  }\n  const i = e.params,\n    {\n      wrapperEl: r,\n      slidesEl: a,\n      size: n,\n      rtlTranslate: l,\n      wrongRTL: o\n    } = e,\n    d = e.virtual && i.virtual.enabled,\n    c = d ? e.virtual.slides.length : e.slides.length,\n    p = (0, _utilsMin.e)(a, `.${e.params.slideClass}, swiper-slide`),\n    u = d ? e.virtual.slides.length : p.length;\n  let h = [];\n  const m = [],\n    f = [];\n  let v = i.slidesOffsetBefore;\n  \"function\" == typeof v && (v = i.slidesOffsetBefore.call(e));\n  let g = i.slidesOffsetAfter;\n  \"function\" == typeof g && (g = i.slidesOffsetAfter.call(e));\n  const w = e.snapGrid.length,\n    S = e.slidesGrid.length;\n  let T = i.spaceBetween,\n    b = -v,\n    x = 0,\n    E = 0;\n  if (void 0 === n) return;\n  \"string\" == typeof T && T.indexOf(\"%\") >= 0 ? T = parseFloat(T.replace(\"%\", \"\")) / 100 * n : \"string\" == typeof T && (T = parseFloat(T)), e.virtualSize = -T, p.forEach(e => {\n    l ? e.style.marginLeft = \"\" : e.style.marginRight = \"\", e.style.marginBottom = \"\", e.style.marginTop = \"\";\n  }), i.centeredSlides && i.cssMode && ((0, _utilsMin.s)(r, \"--swiper-centered-offset-before\", \"\"), (0, _utilsMin.s)(r, \"--swiper-centered-offset-after\", \"\"));\n  const y = i.grid && i.grid.rows > 1 && e.grid;\n  let C;\n  y && e.grid.initSlides(u);\n  const M = \"auto\" === i.slidesPerView && i.breakpoints && Object.keys(i.breakpoints).filter(e => void 0 !== i.breakpoints[e].slidesPerView).length > 0;\n  for (let r = 0; r < u; r += 1) {\n    let a;\n    if (C = 0, p[r] && (a = p[r]), y && e.grid.updateSlide(r, a, u, t), !p[r] || \"none\" !== (0, _utilsMin.l)(a, \"display\")) {\n      if (\"auto\" === i.slidesPerView) {\n        M && (p[r].style[t(\"width\")] = \"\");\n        const n = getComputedStyle(a),\n          l = a.style.transform,\n          o = a.style.webkitTransform;\n        if (l && (a.style.transform = \"none\"), o && (a.style.webkitTransform = \"none\"), i.roundLengths) C = e.isHorizontal() ? (0, _utilsMin.f)(a, \"width\", !0) : (0, _utilsMin.f)(a, \"height\", !0);else {\n          const e = s(n, \"width\"),\n            t = s(n, \"padding-left\"),\n            i = s(n, \"padding-right\"),\n            r = s(n, \"margin-left\"),\n            l = s(n, \"margin-right\"),\n            o = n.getPropertyValue(\"box-sizing\");\n          if (o && \"border-box\" === o) C = e + r + l;else {\n            const {\n              clientWidth: s,\n              offsetWidth: n\n            } = a;\n            C = e + t + i + r + l + (n - s);\n          }\n        }\n        l && (a.style.transform = l), o && (a.style.webkitTransform = o), i.roundLengths && (C = Math.floor(C));\n      } else C = (n - (i.slidesPerView - 1) * T) / i.slidesPerView, i.roundLengths && (C = Math.floor(C)), p[r] && (p[r].style[t(\"width\")] = `${C}px`);\n      p[r] && (p[r].swiperSlideSize = C), f.push(C), i.centeredSlides ? (b = b + C / 2 + x / 2 + T, 0 === x && 0 !== r && (b = b - n / 2 - T), 0 === r && (b = b - n / 2 - T), Math.abs(b) < .001 && (b = 0), i.roundLengths && (b = Math.floor(b)), E % i.slidesPerGroup == 0 && h.push(b), m.push(b)) : (i.roundLengths && (b = Math.floor(b)), (E - Math.min(e.params.slidesPerGroupSkip, E)) % e.params.slidesPerGroup == 0 && h.push(b), m.push(b), b = b + C + T), e.virtualSize += C + T, x = C, E += 1;\n    }\n  }\n  if (e.virtualSize = Math.max(e.virtualSize, n) + g, l && o && (\"slide\" === i.effect || \"coverflow\" === i.effect) && (r.style.width = `${e.virtualSize + T}px`), i.setWrapperSize && (r.style[t(\"width\")] = `${e.virtualSize + T}px`), y && e.grid.updateWrapperSize(C, h, t), !i.centeredSlides) {\n    const t = [];\n    for (let s = 0; s < h.length; s += 1) {\n      let r = h[s];\n      i.roundLengths && (r = Math.floor(r)), h[s] <= e.virtualSize - n && t.push(r);\n    }\n    h = t, Math.floor(e.virtualSize - n) - Math.floor(h[h.length - 1]) > 1 && h.push(e.virtualSize - n);\n  }\n  if (d && i.loop) {\n    const t = f[0] + T;\n    if (i.slidesPerGroup > 1) {\n      const s = Math.ceil((e.virtual.slidesBefore + e.virtual.slidesAfter) / i.slidesPerGroup),\n        r = t * i.slidesPerGroup;\n      for (let e = 0; e < s; e += 1) h.push(h[h.length - 1] + r);\n    }\n    for (let s = 0; s < e.virtual.slidesBefore + e.virtual.slidesAfter; s += 1) 1 === i.slidesPerGroup && h.push(h[h.length - 1] + t), m.push(m[m.length - 1] + t), e.virtualSize += t;\n  }\n  if (0 === h.length && (h = [0]), 0 !== T) {\n    const s = e.isHorizontal() && l ? \"marginLeft\" : t(\"marginRight\");\n    p.filter((e, t) => !(i.cssMode && !i.loop) || t !== p.length - 1).forEach(e => {\n      e.style[s] = `${T}px`;\n    });\n  }\n  if (i.centeredSlides && i.centeredSlidesBounds) {\n    let e = 0;\n    f.forEach(t => {\n      e += t + (T || 0);\n    }), e -= T;\n    const t = e - n;\n    h = h.map(e => e <= 0 ? -v : e > t ? t + g : e);\n  }\n  if (i.centerInsufficientSlides) {\n    let e = 0;\n    if (f.forEach(t => {\n      e += t + (T || 0);\n    }), e -= T, e < n) {\n      const t = (n - e) / 2;\n      h.forEach((e, s) => {\n        h[s] = e - t;\n      }), m.forEach((e, s) => {\n        m[s] = e + t;\n      });\n    }\n  }\n  if (Object.assign(e, {\n    slides: p,\n    snapGrid: h,\n    slidesGrid: m,\n    slidesSizesGrid: f\n  }), i.centeredSlides && i.cssMode && !i.centeredSlidesBounds) {\n    (0, _utilsMin.s)(r, \"--swiper-centered-offset-before\", -h[0] + \"px\"), (0, _utilsMin.s)(r, \"--swiper-centered-offset-after\", e.size / 2 - f[f.length - 1] / 2 + \"px\");\n    const t = -e.snapGrid[0],\n      s = -e.slidesGrid[0];\n    e.snapGrid = e.snapGrid.map(e => e + t), e.slidesGrid = e.slidesGrid.map(e => e + s);\n  }\n  if (u !== c && e.emit(\"slidesLengthChange\"), h.length !== w && (e.params.watchOverflow && e.checkOverflow(), e.emit(\"snapGridLengthChange\")), m.length !== S && e.emit(\"slidesGridLengthChange\"), i.watchSlidesProgress && e.updateSlidesOffset(), !(d || i.cssMode || \"slide\" !== i.effect && \"fade\" !== i.effect)) {\n    const t = `${i.containerModifierClass}backface-hidden`,\n      s = e.el.classList.contains(t);\n    u <= i.maxBackfaceHiddenSlides ? s || e.el.classList.add(t) : s && e.el.classList.remove(t);\n  }\n}\nfunction updateAutoHeight(e) {\n  const t = this,\n    s = [],\n    i = t.virtual && t.params.virtual.enabled;\n  let r,\n    a = 0;\n  \"number\" == typeof e ? t.setTransition(e) : !0 === e && t.setTransition(t.params.speed);\n  const n = e => i ? t.slides[t.getSlideIndexByData(e)] : t.slides[e];\n  if (\"auto\" !== t.params.slidesPerView && t.params.slidesPerView > 1) {\n    if (t.params.centeredSlides) (t.visibleSlides || []).forEach(e => {\n      s.push(e);\n    });else for (r = 0; r < Math.ceil(t.params.slidesPerView); r += 1) {\n      const e = t.activeIndex + r;\n      if (e > t.slides.length && !i) break;\n      s.push(n(e));\n    }\n  } else s.push(n(t.activeIndex));\n  for (r = 0; r < s.length; r += 1) if (void 0 !== s[r]) {\n    const e = s[r].offsetHeight;\n    a = e > a ? e : a;\n  }\n  (a || 0 === a) && (t.wrapperEl.style.height = `${a}px`);\n}\nfunction updateSlidesOffset() {\n  const e = this,\n    t = e.slides,\n    s = e.isElement ? e.isHorizontal() ? e.wrapperEl.offsetLeft : e.wrapperEl.offsetTop : 0;\n  for (let i = 0; i < t.length; i += 1) t[i].swiperSlideOffset = (e.isHorizontal() ? t[i].offsetLeft : t[i].offsetTop) - s - e.cssOverflowAdjustment();\n}\nfunction updateSlidesProgress(e) {\n  void 0 === e && (e = this && this.translate || 0);\n  const t = this,\n    s = t.params,\n    {\n      slides: i,\n      rtlTranslate: r,\n      snapGrid: a\n    } = t;\n  if (0 === i.length) return;\n  void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset();\n  let n = -e;\n  r && (n = e), i.forEach(e => {\n    e.classList.remove(s.slideVisibleClass);\n  }), t.visibleSlidesIndexes = [], t.visibleSlides = [];\n  let l = s.spaceBetween;\n  \"string\" == typeof l && l.indexOf(\"%\") >= 0 ? l = parseFloat(l.replace(\"%\", \"\")) / 100 * t.size : \"string\" == typeof l && (l = parseFloat(l));\n  for (let e = 0; e < i.length; e += 1) {\n    const o = i[e];\n    let d = o.swiperSlideOffset;\n    s.cssMode && s.centeredSlides && (d -= i[0].swiperSlideOffset);\n    const c = (n + (s.centeredSlides ? t.minTranslate() : 0) - d) / (o.swiperSlideSize + l),\n      p = (n - a[0] + (s.centeredSlides ? t.minTranslate() : 0) - d) / (o.swiperSlideSize + l),\n      u = -(n - d),\n      h = u + t.slidesSizesGrid[e];\n    (u >= 0 && u < t.size - 1 || h > 1 && h <= t.size || u <= 0 && h >= t.size) && (t.visibleSlides.push(o), t.visibleSlidesIndexes.push(e), i[e].classList.add(s.slideVisibleClass)), o.progress = r ? -c : c, o.originalProgress = r ? -p : p;\n  }\n}\nfunction updateProgress(e) {\n  const t = this;\n  if (void 0 === e) {\n    const s = t.rtlTranslate ? -1 : 1;\n    e = t && t.translate && t.translate * s || 0;\n  }\n  const s = t.params,\n    i = t.maxTranslate() - t.minTranslate();\n  let {\n    progress: r,\n    isBeginning: a,\n    isEnd: n,\n    progressLoop: l\n  } = t;\n  const o = a,\n    d = n;\n  if (0 === i) r = 0, a = !0, n = !0;else {\n    r = (e - t.minTranslate()) / i;\n    const s = Math.abs(e - t.minTranslate()) < 1,\n      l = Math.abs(e - t.maxTranslate()) < 1;\n    a = s || r <= 0, n = l || r >= 1, s && (r = 0), l && (r = 1);\n  }\n  if (s.loop) {\n    const s = t.getSlideIndexByData(0),\n      i = t.getSlideIndexByData(t.slides.length - 1),\n      r = t.slidesGrid[s],\n      a = t.slidesGrid[i],\n      n = t.slidesGrid[t.slidesGrid.length - 1],\n      o = Math.abs(e);\n    l = o >= r ? (o - r) / n : (o + n - a) / n, l > 1 && (l -= 1);\n  }\n  Object.assign(t, {\n    progress: r,\n    progressLoop: l,\n    isBeginning: a,\n    isEnd: n\n  }), (s.watchSlidesProgress || s.centeredSlides && s.autoHeight) && t.updateSlidesProgress(e), a && !o && t.emit(\"reachBeginning toEdge\"), n && !d && t.emit(\"reachEnd toEdge\"), (o && !a || d && !n) && t.emit(\"fromEdge\"), t.emit(\"progress\", r);\n}\nfunction updateSlidesClasses() {\n  const e = this,\n    {\n      slides: t,\n      params: s,\n      slidesEl: i,\n      activeIndex: r\n    } = e,\n    a = e.virtual && s.virtual.enabled,\n    n = e => (0, _utilsMin.e)(i, `.${s.slideClass}${e}, swiper-slide${e}`)[0];\n  let l;\n  if (t.forEach(e => {\n    e.classList.remove(s.slideActiveClass, s.slideNextClass, s.slidePrevClass);\n  }), a) {\n    if (s.loop) {\n      let t = r - e.virtual.slidesBefore;\n      t < 0 && (t = e.virtual.slides.length + t), t >= e.virtual.slides.length && (t -= e.virtual.slides.length), l = n(`[data-swiper-slide-index=\"${t}\"]`);\n    } else l = n(`[data-swiper-slide-index=\"${r}\"]`);\n  } else l = t[r];\n  if (l) {\n    l.classList.add(s.slideActiveClass);\n    let e = (0, _utilsMin.m)(l, `.${s.slideClass}, swiper-slide`)[0];\n    s.loop && !e && (e = t[0]), e && e.classList.add(s.slideNextClass);\n    let i = (0, _utilsMin.o)(l, `.${s.slideClass}, swiper-slide`)[0];\n    s.loop && 0 === !i && (i = t[t.length - 1]), i && i.classList.add(s.slidePrevClass);\n  }\n  e.emitSlidesClasses();\n}\nconst processLazyPreloader = (e, t) => {\n    if (!e || e.destroyed || !e.params) return;\n    const s = t.closest(e.isElement ? \"swiper-slide\" : `.${e.params.slideClass}`);\n    if (s) {\n      const t = s.querySelector(`.${e.params.lazyPreloaderClass}`);\n      t && t.remove();\n    }\n  },\n  unlazy = (e, t) => {\n    if (!e.slides[t]) return;\n    const s = e.slides[t].querySelector('[loading=\"lazy\"]');\n    s && s.removeAttribute(\"loading\");\n  },\n  preload = e => {\n    if (!e || e.destroyed || !e.params) return;\n    let t = e.params.lazyPreloadPrevNext;\n    const s = e.slides.length;\n    if (!s || !t || t < 0) return;\n    t = Math.min(t, s);\n    const i = \"auto\" === e.params.slidesPerView ? e.slidesPerViewDynamic() : Math.ceil(e.params.slidesPerView),\n      r = e.activeIndex;\n    if (e.params.grid && e.params.grid.rows > 1) {\n      const s = r,\n        a = [s - t];\n      return a.push(...Array.from({\n        length: t\n      }).map((e, t) => s + i + t)), void e.slides.forEach((t, s) => {\n        a.includes(t.column) && unlazy(e, s);\n      });\n    }\n    const a = r + i - 1;\n    if (e.params.rewind || e.params.loop) for (let i = r - t; i <= a + t; i += 1) {\n      const t = (i % s + s) % s;\n      (t < r || t > a) && unlazy(e, t);\n    } else for (let i = Math.max(r - t, 0); i <= Math.min(a + t, s - 1); i += 1) i !== r && (i > a || i < r) && unlazy(e, i);\n  };\nfunction getActiveIndexByTranslate(e) {\n  const {\n      slidesGrid: t,\n      params: s\n    } = e,\n    i = e.rtlTranslate ? e.translate : -e.translate;\n  let r;\n  for (let e = 0; e < t.length; e += 1) void 0 !== t[e + 1] ? i >= t[e] && i < t[e + 1] - (t[e + 1] - t[e]) / 2 ? r = e : i >= t[e] && i < t[e + 1] && (r = e + 1) : i >= t[e] && (r = e);\n  return s.normalizeSlideIndex && (r < 0 || void 0 === r) && (r = 0), r;\n}\nfunction updateActiveIndex(e) {\n  const t = this,\n    s = t.rtlTranslate ? t.translate : -t.translate,\n    {\n      snapGrid: i,\n      params: r,\n      activeIndex: a,\n      realIndex: n,\n      snapIndex: l\n    } = t;\n  let o,\n    d = e;\n  const c = e => {\n    let s = e - t.virtual.slidesBefore;\n    return s < 0 && (s = t.virtual.slides.length + s), s >= t.virtual.slides.length && (s -= t.virtual.slides.length), s;\n  };\n  if (void 0 === d && (d = getActiveIndexByTranslate(t)), i.indexOf(s) >= 0) o = i.indexOf(s);else {\n    const e = Math.min(r.slidesPerGroupSkip, d);\n    o = e + Math.floor((d - e) / r.slidesPerGroup);\n  }\n  if (o >= i.length && (o = i.length - 1), d === a) return o !== l && (t.snapIndex = o, t.emit(\"snapIndexChange\")), void (t.params.loop && t.virtual && t.params.virtual.enabled && (t.realIndex = c(d)));\n  let p;\n  p = t.virtual && r.virtual.enabled && r.loop ? c(d) : t.slides[d] ? parseInt(t.slides[d].getAttribute(\"data-swiper-slide-index\") || d, 10) : d, Object.assign(t, {\n    previousSnapIndex: l,\n    snapIndex: o,\n    previousRealIndex: n,\n    realIndex: p,\n    previousIndex: a,\n    activeIndex: d\n  }), t.initialized && preload(t), t.emit(\"activeIndexChange\"), t.emit(\"snapIndexChange\"), n !== p && t.emit(\"realIndexChange\"), (t.initialized || t.params.runCallbacksOnInit) && t.emit(\"slideChange\");\n}\nfunction updateClickedSlide(e) {\n  const t = this,\n    s = t.params,\n    i = e.closest(`.${s.slideClass}, swiper-slide`);\n  let r,\n    a = !1;\n  if (i) for (let e = 0; e < t.slides.length; e += 1) if (t.slides[e] === i) {\n    a = !0, r = e;\n    break;\n  }\n  if (!i || !a) return t.clickedSlide = void 0, void (t.clickedIndex = void 0);\n  t.clickedSlide = i, t.virtual && t.params.virtual.enabled ? t.clickedIndex = parseInt(i.getAttribute(\"data-swiper-slide-index\"), 10) : t.clickedIndex = r, s.slideToClickedSlide && void 0 !== t.clickedIndex && t.clickedIndex !== t.activeIndex && t.slideToClickedSlide();\n}\nvar update = {\n  updateSize: updateSize,\n  updateSlides: updateSlides,\n  updateAutoHeight: updateAutoHeight,\n  updateSlidesOffset: updateSlidesOffset,\n  updateSlidesProgress: updateSlidesProgress,\n  updateProgress: updateProgress,\n  updateSlidesClasses: updateSlidesClasses,\n  updateActiveIndex: updateActiveIndex,\n  updateClickedSlide: updateClickedSlide\n};\nfunction getSwiperTranslate(e) {\n  void 0 === e && (e = this.isHorizontal() ? \"x\" : \"y\");\n  const {\n    params: t,\n    rtlTranslate: s,\n    translate: i,\n    wrapperEl: r\n  } = this;\n  if (t.virtualTranslate) return s ? -i : i;\n  if (t.cssMode) return i;\n  let a = (0, _utilsMin.h)(r, e);\n  return a += this.cssOverflowAdjustment(), s && (a = -a), a || 0;\n}\nfunction setTranslate(e, t) {\n  const s = this,\n    {\n      rtlTranslate: i,\n      params: r,\n      wrapperEl: a,\n      progress: n\n    } = s;\n  let l = 0,\n    o = 0;\n  let d;\n  s.isHorizontal() ? l = i ? -e : e : o = e, r.roundLengths && (l = Math.floor(l), o = Math.floor(o)), s.previousTranslate = s.translate, s.translate = s.isHorizontal() ? l : o, r.cssMode ? a[s.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = s.isHorizontal() ? -l : -o : r.virtualTranslate || (s.isHorizontal() ? l -= s.cssOverflowAdjustment() : o -= s.cssOverflowAdjustment(), a.style.transform = `translate3d(${l}px, ${o}px, 0px)`);\n  const c = s.maxTranslate() - s.minTranslate();\n  d = 0 === c ? 0 : (e - s.minTranslate()) / c, d !== n && s.updateProgress(e), s.emit(\"setTranslate\", s.translate, t);\n}\nfunction minTranslate() {\n  return -this.snapGrid[0];\n}\nfunction maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}\nfunction translateTo(e, t, s, i, r) {\n  void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === s && (s = !0), void 0 === i && (i = !0);\n  const a = this,\n    {\n      params: n,\n      wrapperEl: l\n    } = a;\n  if (a.animating && n.preventInteractionOnTransition) return !1;\n  const o = a.minTranslate(),\n    d = a.maxTranslate();\n  let c;\n  if (c = i && e > o ? o : i && e < d ? d : e, a.updateProgress(c), n.cssMode) {\n    const e = a.isHorizontal();\n    if (0 === t) l[e ? \"scrollLeft\" : \"scrollTop\"] = -c;else {\n      if (!a.support.smoothScroll) return (0, _utilsMin.p)({\n        swiper: a,\n        targetPosition: -c,\n        side: e ? \"left\" : \"top\"\n      }), !0;\n      l.scrollTo({\n        [e ? \"left\" : \"top\"]: -c,\n        behavior: \"smooth\"\n      });\n    }\n    return !0;\n  }\n  return 0 === t ? (a.setTransition(0), a.setTranslate(c), s && (a.emit(\"beforeTransitionStart\", t, r), a.emit(\"transitionEnd\"))) : (a.setTransition(t), a.setTranslate(c), s && (a.emit(\"beforeTransitionStart\", t, r), a.emit(\"transitionStart\")), a.animating || (a.animating = !0, a.onTranslateToWrapperTransitionEnd || (a.onTranslateToWrapperTransitionEnd = function (e) {\n    a && !a.destroyed && e.target === this && (a.wrapperEl.removeEventListener(\"transitionend\", a.onTranslateToWrapperTransitionEnd), a.onTranslateToWrapperTransitionEnd = null, delete a.onTranslateToWrapperTransitionEnd, s && a.emit(\"transitionEnd\"));\n  }), a.wrapperEl.addEventListener(\"transitionend\", a.onTranslateToWrapperTransitionEnd))), !0;\n}\nvar translate = {\n  getTranslate: getSwiperTranslate,\n  setTranslate: setTranslate,\n  minTranslate: minTranslate,\n  maxTranslate: maxTranslate,\n  translateTo: translateTo\n};\nfunction setTransition(e, t) {\n  const s = this;\n  s.params.cssMode || (s.wrapperEl.style.transitionDuration = `${e}ms`), s.emit(\"setTransition\", e, t);\n}\nfunction transitionEmit(e) {\n  let {\n    swiper: t,\n    runCallbacks: s,\n    direction: i,\n    step: r\n  } = e;\n  const {\n    activeIndex: a,\n    previousIndex: n\n  } = t;\n  let l = i;\n  if (l || (l = a > n ? \"next\" : a < n ? \"prev\" : \"reset\"), t.emit(`transition${r}`), s && a !== n) {\n    if (\"reset\" === l) return void t.emit(`slideResetTransition${r}`);\n    t.emit(`slideChangeTransition${r}`), \"next\" === l ? t.emit(`slideNextTransition${r}`) : t.emit(`slidePrevTransition${r}`);\n  }\n}\nfunction transitionStart(e, t) {\n  void 0 === e && (e = !0);\n  const s = this,\n    {\n      params: i\n    } = s;\n  i.cssMode || (i.autoHeight && s.updateAutoHeight(), transitionEmit({\n    swiper: s,\n    runCallbacks: e,\n    direction: t,\n    step: \"Start\"\n  }));\n}\nfunction transitionEnd(e, t) {\n  void 0 === e && (e = !0);\n  const s = this,\n    {\n      params: i\n    } = s;\n  s.animating = !1, i.cssMode || (s.setTransition(0), transitionEmit({\n    swiper: s,\n    runCallbacks: e,\n    direction: t,\n    step: \"End\"\n  }));\n}\nvar transition = {\n  setTransition: setTransition,\n  transitionStart: transitionStart,\n  transitionEnd: transitionEnd\n};\nfunction slideTo(e, t, s, i, r) {\n  void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === s && (s = !0), \"string\" == typeof e && (e = parseInt(e, 10));\n  const a = this;\n  let n = e;\n  n < 0 && (n = 0);\n  const {\n    params: l,\n    snapGrid: o,\n    slidesGrid: d,\n    previousIndex: c,\n    activeIndex: p,\n    rtlTranslate: u,\n    wrapperEl: h,\n    enabled: m\n  } = a;\n  if (a.animating && l.preventInteractionOnTransition || !m && !i && !r) return !1;\n  const f = Math.min(a.params.slidesPerGroupSkip, n);\n  let v = f + Math.floor((n - f) / a.params.slidesPerGroup);\n  v >= o.length && (v = o.length - 1);\n  const g = -o[v];\n  if (l.normalizeSlideIndex) for (let e = 0; e < d.length; e += 1) {\n    const t = -Math.floor(100 * g),\n      s = Math.floor(100 * d[e]),\n      i = Math.floor(100 * d[e + 1]);\n    void 0 !== d[e + 1] ? t >= s && t < i - (i - s) / 2 ? n = e : t >= s && t < i && (n = e + 1) : t >= s && (n = e);\n  }\n  if (a.initialized && n !== p) {\n    if (!a.allowSlideNext && (u ? g > a.translate && g > a.minTranslate() : g < a.translate && g < a.minTranslate())) return !1;\n    if (!a.allowSlidePrev && g > a.translate && g > a.maxTranslate() && (p || 0) !== n) return !1;\n  }\n  let w;\n  if (n !== (c || 0) && s && a.emit(\"beforeSlideChangeStart\"), a.updateProgress(g), w = n > p ? \"next\" : n < p ? \"prev\" : \"reset\", u && -g === a.translate || !u && g === a.translate) return a.updateActiveIndex(n), l.autoHeight && a.updateAutoHeight(), a.updateSlidesClasses(), \"slide\" !== l.effect && a.setTranslate(g), \"reset\" !== w && (a.transitionStart(s, w), a.transitionEnd(s, w)), !1;\n  if (l.cssMode) {\n    const e = a.isHorizontal(),\n      s = u ? g : -g;\n    if (0 === t) {\n      const t = a.virtual && a.params.virtual.enabled;\n      t && (a.wrapperEl.style.scrollSnapType = \"none\", a._immediateVirtual = !0), t && !a._cssModeVirtualInitialSet && a.params.initialSlide > 0 ? (a._cssModeVirtualInitialSet = !0, requestAnimationFrame(() => {\n        h[e ? \"scrollLeft\" : \"scrollTop\"] = s;\n      })) : h[e ? \"scrollLeft\" : \"scrollTop\"] = s, t && requestAnimationFrame(() => {\n        a.wrapperEl.style.scrollSnapType = \"\", a._immediateVirtual = !1;\n      });\n    } else {\n      if (!a.support.smoothScroll) return (0, _utilsMin.p)({\n        swiper: a,\n        targetPosition: s,\n        side: e ? \"left\" : \"top\"\n      }), !0;\n      h.scrollTo({\n        [e ? \"left\" : \"top\"]: s,\n        behavior: \"smooth\"\n      });\n    }\n    return !0;\n  }\n  return a.setTransition(t), a.setTranslate(g), a.updateActiveIndex(n), a.updateSlidesClasses(), a.emit(\"beforeTransitionStart\", t, i), a.transitionStart(s, w), 0 === t ? a.transitionEnd(s, w) : a.animating || (a.animating = !0, a.onSlideToWrapperTransitionEnd || (a.onSlideToWrapperTransitionEnd = function (e) {\n    a && !a.destroyed && e.target === this && (a.wrapperEl.removeEventListener(\"transitionend\", a.onSlideToWrapperTransitionEnd), a.onSlideToWrapperTransitionEnd = null, delete a.onSlideToWrapperTransitionEnd, a.transitionEnd(s, w));\n  }), a.wrapperEl.addEventListener(\"transitionend\", a.onSlideToWrapperTransitionEnd)), !0;\n}\nfunction slideToLoop(e, t, s, i) {\n  if (void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === s && (s = !0), \"string\" == typeof e) {\n    e = parseInt(e, 10);\n  }\n  const r = this;\n  let a = e;\n  return r.params.loop && (r.virtual && r.params.virtual.enabled ? a += r.virtual.slidesBefore : a = r.getSlideIndexByData(a)), r.slideTo(a, t, s, i);\n}\nfunction slideNext(e, t, s) {\n  void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);\n  const i = this,\n    {\n      enabled: r,\n      params: a,\n      animating: n\n    } = i;\n  if (!r) return i;\n  let l = a.slidesPerGroup;\n  \"auto\" === a.slidesPerView && 1 === a.slidesPerGroup && a.slidesPerGroupAuto && (l = Math.max(i.slidesPerViewDynamic(\"current\", !0), 1));\n  const o = i.activeIndex < a.slidesPerGroupSkip ? 1 : l,\n    d = i.virtual && a.virtual.enabled;\n  if (a.loop) {\n    if (n && !d && a.loopPreventsSliding) return !1;\n    i.loopFix({\n      direction: \"next\"\n    }), i._clientLeft = i.wrapperEl.clientLeft;\n  }\n  return a.rewind && i.isEnd ? i.slideTo(0, e, t, s) : i.slideTo(i.activeIndex + o, e, t, s);\n}\nfunction slidePrev(e, t, s) {\n  void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);\n  const i = this,\n    {\n      params: r,\n      snapGrid: a,\n      slidesGrid: n,\n      rtlTranslate: l,\n      enabled: o,\n      animating: d\n    } = i;\n  if (!o) return i;\n  const c = i.virtual && r.virtual.enabled;\n  if (r.loop) {\n    if (d && !c && r.loopPreventsSliding) return !1;\n    i.loopFix({\n      direction: \"prev\"\n    }), i._clientLeft = i.wrapperEl.clientLeft;\n  }\n  function p(e) {\n    return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e);\n  }\n  const u = p(l ? i.translate : -i.translate),\n    h = a.map(e => p(e));\n  let m = a[h.indexOf(u) - 1];\n  if (void 0 === m && r.cssMode) {\n    let e;\n    a.forEach((t, s) => {\n      u >= t && (e = s);\n    }), void 0 !== e && (m = a[e > 0 ? e - 1 : e]);\n  }\n  let f = 0;\n  if (void 0 !== m && (f = n.indexOf(m), f < 0 && (f = i.activeIndex - 1), \"auto\" === r.slidesPerView && 1 === r.slidesPerGroup && r.slidesPerGroupAuto && (f = f - i.slidesPerViewDynamic(\"previous\", !0) + 1, f = Math.max(f, 0))), r.rewind && i.isBeginning) {\n    const r = i.params.virtual && i.params.virtual.enabled && i.virtual ? i.virtual.slides.length - 1 : i.slides.length - 1;\n    return i.slideTo(r, e, t, s);\n  }\n  return i.slideTo(f, e, t, s);\n}\nfunction slideReset(e, t, s) {\n  void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);\n  return this.slideTo(this.activeIndex, e, t, s);\n}\nfunction slideToClosest(e, t, s, i) {\n  void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === i && (i = .5);\n  const r = this;\n  let a = r.activeIndex;\n  const n = Math.min(r.params.slidesPerGroupSkip, a),\n    l = n + Math.floor((a - n) / r.params.slidesPerGroup),\n    o = r.rtlTranslate ? r.translate : -r.translate;\n  if (o >= r.snapGrid[l]) {\n    const e = r.snapGrid[l];\n    o - e > (r.snapGrid[l + 1] - e) * i && (a += r.params.slidesPerGroup);\n  } else {\n    const e = r.snapGrid[l - 1];\n    o - e <= (r.snapGrid[l] - e) * i && (a -= r.params.slidesPerGroup);\n  }\n  return a = Math.max(a, 0), a = Math.min(a, r.slidesGrid.length - 1), r.slideTo(a, e, t, s);\n}\nfunction slideToClickedSlide() {\n  const e = this,\n    {\n      params: t,\n      slidesEl: s\n    } = e,\n    i = \"auto\" === t.slidesPerView ? e.slidesPerViewDynamic() : t.slidesPerView;\n  let r,\n    a = e.clickedIndex;\n  const n = e.isElement ? \"swiper-slide\" : `.${t.slideClass}`;\n  if (t.loop) {\n    if (e.animating) return;\n    r = parseInt(e.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10), t.centeredSlides ? a < e.loopedSlides - i / 2 || a > e.slides.length - e.loopedSlides + i / 2 ? (e.loopFix(), a = e.getSlideIndex((0, _utilsMin.e)(s, `${n}[data-swiper-slide-index=\"${r}\"]`)[0]), (0, _utilsMin.n)(() => {\n      e.slideTo(a);\n    })) : e.slideTo(a) : a > e.slides.length - i ? (e.loopFix(), a = e.getSlideIndex((0, _utilsMin.e)(s, `${n}[data-swiper-slide-index=\"${r}\"]`)[0]), (0, _utilsMin.n)(() => {\n      e.slideTo(a);\n    })) : e.slideTo(a);\n  } else e.slideTo(a);\n}\nvar slide = {\n  slideTo: slideTo,\n  slideToLoop: slideToLoop,\n  slideNext: slideNext,\n  slidePrev: slidePrev,\n  slideReset: slideReset,\n  slideToClosest: slideToClosest,\n  slideToClickedSlide: slideToClickedSlide\n};\nfunction loopCreate(e) {\n  const t = this,\n    {\n      params: s,\n      slidesEl: i\n    } = t;\n  if (!s.loop || t.virtual && t.params.virtual.enabled) return;\n  (0, _utilsMin.e)(i, `.${s.slideClass}, swiper-slide`).forEach((e, t) => {\n    e.setAttribute(\"data-swiper-slide-index\", t);\n  }), t.loopFix({\n    slideRealIndex: e,\n    direction: s.centeredSlides ? void 0 : \"next\"\n  });\n}\nfunction loopFix(e) {\n  let {\n    slideRealIndex: t,\n    slideTo: s = !0,\n    direction: i,\n    setTranslate: r,\n    activeSlideIndex: a,\n    byController: n,\n    byMousewheel: l\n  } = void 0 === e ? {} : e;\n  const o = this;\n  if (!o.params.loop) return;\n  o.emit(\"beforeLoopFix\");\n  const {\n    slides: d,\n    allowSlidePrev: c,\n    allowSlideNext: p,\n    slidesEl: u,\n    params: h\n  } = o;\n  if (o.allowSlidePrev = !0, o.allowSlideNext = !0, o.virtual && h.virtual.enabled) return s && (h.centeredSlides || 0 !== o.snapIndex ? h.centeredSlides && o.snapIndex < h.slidesPerView ? o.slideTo(o.virtual.slides.length + o.snapIndex, 0, !1, !0) : o.snapIndex === o.snapGrid.length - 1 && o.slideTo(o.virtual.slidesBefore, 0, !1, !0) : o.slideTo(o.virtual.slides.length, 0, !1, !0)), o.allowSlidePrev = c, o.allowSlideNext = p, void o.emit(\"loopFix\");\n  const m = \"auto\" === h.slidesPerView ? o.slidesPerViewDynamic() : Math.ceil(parseFloat(h.slidesPerView, 10));\n  let f = h.loopedSlides || m;\n  f % h.slidesPerGroup != 0 && (f += h.slidesPerGroup - f % h.slidesPerGroup), o.loopedSlides = f;\n  const v = [],\n    g = [];\n  let w = o.activeIndex;\n  void 0 === a ? a = o.getSlideIndex(o.slides.filter(e => e.classList.contains(h.slideActiveClass))[0]) : w = a;\n  const S = \"next\" === i || !i,\n    T = \"prev\" === i || !i;\n  let b = 0,\n    x = 0;\n  if (a < f) {\n    b = Math.max(f - a, h.slidesPerGroup);\n    for (let e = 0; e < f - a; e += 1) {\n      const t = e - Math.floor(e / d.length) * d.length;\n      v.push(d.length - t - 1);\n    }\n  } else if (a > o.slides.length - 2 * f) {\n    x = Math.max(a - (o.slides.length - 2 * f), h.slidesPerGroup);\n    for (let e = 0; e < x; e += 1) {\n      const t = e - Math.floor(e / d.length) * d.length;\n      g.push(t);\n    }\n  }\n  if (T && v.forEach(e => {\n    o.slides[e].swiperLoopMoveDOM = !0, u.prepend(o.slides[e]), o.slides[e].swiperLoopMoveDOM = !1;\n  }), S && g.forEach(e => {\n    o.slides[e].swiperLoopMoveDOM = !0, u.append(o.slides[e]), o.slides[e].swiperLoopMoveDOM = !1;\n  }), o.recalcSlides(), \"auto\" === h.slidesPerView && o.updateSlides(), h.watchSlidesProgress && o.updateSlidesOffset(), s) if (v.length > 0 && T) {\n    if (void 0 === t) {\n      const e = o.slidesGrid[w],\n        t = o.slidesGrid[w + b] - e;\n      l ? o.setTranslate(o.translate - t) : (o.slideTo(w + b, 0, !1, !0), r && (o.touches[o.isHorizontal() ? \"startX\" : \"startY\"] += t, o.touchEventsData.currentTranslate = o.translate));\n    } else r && (o.slideToLoop(t, 0, !1, !0), o.touchEventsData.currentTranslate = o.translate);\n  } else if (g.length > 0 && S) if (void 0 === t) {\n    const e = o.slidesGrid[w],\n      t = o.slidesGrid[w - x] - e;\n    l ? o.setTranslate(o.translate - t) : (o.slideTo(w - x, 0, !1, !0), r && (o.touches[o.isHorizontal() ? \"startX\" : \"startY\"] += t, o.touchEventsData.currentTranslate = o.translate));\n  } else o.slideToLoop(t, 0, !1, !0);\n  if (o.allowSlidePrev = c, o.allowSlideNext = p, o.controller && o.controller.control && !n) {\n    const e = {\n      slideRealIndex: t,\n      slideTo: !1,\n      direction: i,\n      setTranslate: r,\n      activeSlideIndex: a,\n      byController: !0\n    };\n    Array.isArray(o.controller.control) ? o.controller.control.forEach(t => {\n      !t.destroyed && t.params.loop && t.loopFix(e);\n    }) : o.controller.control instanceof o.constructor && o.controller.control.params.loop && o.controller.control.loopFix(e);\n  }\n  o.emit(\"loopFix\");\n}\nfunction loopDestroy() {\n  const e = this,\n    {\n      params: t,\n      slidesEl: s\n    } = e;\n  if (!t.loop || e.virtual && e.params.virtual.enabled) return;\n  e.recalcSlides();\n  const i = [];\n  e.slides.forEach(e => {\n    const t = void 0 === e.swiperSlideIndex ? 1 * e.getAttribute(\"data-swiper-slide-index\") : e.swiperSlideIndex;\n    i[t] = e;\n  }), e.slides.forEach(e => {\n    e.removeAttribute(\"data-swiper-slide-index\");\n  }), i.forEach(e => {\n    s.append(e);\n  }), e.recalcSlides(), e.slideTo(e.realIndex, 0);\n}\nvar loop = {\n  loopCreate: loopCreate,\n  loopFix: loopFix,\n  loopDestroy: loopDestroy\n};\nfunction setGrabCursor(e) {\n  const t = this;\n  if (!t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode) return;\n  const s = \"container\" === t.params.touchEventsTarget ? t.el : t.wrapperEl;\n  t.isElement && (t.__preventObserver__ = !0), s.style.cursor = \"move\", s.style.cursor = e ? \"grabbing\" : \"grab\", t.isElement && requestAnimationFrame(() => {\n    t.__preventObserver__ = !1;\n  });\n}\nfunction unsetGrabCursor() {\n  const e = this;\n  e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.isElement && (e.__preventObserver__ = !0), e[\"container\" === e.params.touchEventsTarget ? \"el\" : \"wrapperEl\"].style.cursor = \"\", e.isElement && requestAnimationFrame(() => {\n    e.__preventObserver__ = !1;\n  }));\n}\nvar grabCursor = {\n  setGrabCursor: setGrabCursor,\n  unsetGrabCursor: unsetGrabCursor\n};\nfunction closestElement(e, t) {\n  return void 0 === t && (t = this), function t(s) {\n    if (!s || s === (0, _ssrWindowEsmMin.g)() || s === (0, _ssrWindowEsmMin.a)()) return null;\n    s.assignedSlot && (s = s.assignedSlot);\n    const i = s.closest(e);\n    return i || s.getRootNode ? i || t(s.getRootNode().host) : null;\n  }(t);\n}\nfunction onTouchStart(e) {\n  const t = this,\n    s = (0, _ssrWindowEsmMin.g)(),\n    i = (0, _ssrWindowEsmMin.a)(),\n    r = t.touchEventsData;\n  r.evCache.push(e);\n  const {\n    params: a,\n    touches: n,\n    enabled: l\n  } = t;\n  if (!l) return;\n  if (!a.simulateTouch && \"mouse\" === e.pointerType) return;\n  if (t.animating && a.preventInteractionOnTransition) return;\n  !t.animating && a.cssMode && a.loop && t.loopFix();\n  let o = e;\n  o.originalEvent && (o = o.originalEvent);\n  let d = o.target;\n  if (\"wrapper\" === a.touchEventsTarget && !t.wrapperEl.contains(d)) return;\n  if (\"which\" in o && 3 === o.which) return;\n  if (\"button\" in o && o.button > 0) return;\n  if (r.isTouched && r.isMoved) return;\n  const c = !!a.noSwipingClass && \"\" !== a.noSwipingClass,\n    p = e.composedPath ? e.composedPath() : e.path;\n  c && o.target && o.target.shadowRoot && p && (d = p[0]);\n  const u = a.noSwipingSelector ? a.noSwipingSelector : `.${a.noSwipingClass}`,\n    h = !(!o.target || !o.target.shadowRoot);\n  if (a.noSwiping && (h ? closestElement(u, d) : d.closest(u))) return void (t.allowClick = !0);\n  if (a.swipeHandler && !d.closest(a.swipeHandler)) return;\n  n.currentX = o.pageX, n.currentY = o.pageY;\n  const m = n.currentX,\n    f = n.currentY,\n    v = a.edgeSwipeDetection || a.iOSEdgeSwipeDetection,\n    g = a.edgeSwipeThreshold || a.iOSEdgeSwipeThreshold;\n  if (v && (m <= g || m >= i.innerWidth - g)) {\n    if (\"prevent\" !== v) return;\n    e.preventDefault();\n  }\n  Object.assign(r, {\n    isTouched: !0,\n    isMoved: !1,\n    allowTouchCallbacks: !0,\n    isScrolling: void 0,\n    startMoving: void 0\n  }), n.startX = m, n.startY = f, r.touchStartTime = (0, _utilsMin.d)(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, a.threshold > 0 && (r.allowThresholdMove = !1);\n  let w = !0;\n  d.matches(r.focusableElements) && (w = !1, \"SELECT\" === d.nodeName && (r.isTouched = !1)), s.activeElement && s.activeElement.matches(r.focusableElements) && s.activeElement !== d && s.activeElement.blur();\n  const S = w && t.allowTouchMove && a.touchStartPreventDefault;\n  !a.touchStartForcePreventDefault && !S || d.isContentEditable || o.preventDefault(), a.freeMode && a.freeMode.enabled && t.freeMode && t.animating && !a.cssMode && t.freeMode.onTouchStart(), t.emit(\"touchStart\", o);\n}\nfunction onTouchMove(e) {\n  const t = (0, _ssrWindowEsmMin.g)(),\n    s = this,\n    i = s.touchEventsData,\n    {\n      params: r,\n      touches: a,\n      rtlTranslate: n,\n      enabled: l\n    } = s;\n  if (!l) return;\n  if (!r.simulateTouch && \"mouse\" === e.pointerType) return;\n  let o = e;\n  if (o.originalEvent && (o = o.originalEvent), !i.isTouched) return void (i.startMoving && i.isScrolling && s.emit(\"touchMoveOpposite\", o));\n  const d = i.evCache.findIndex(e => e.pointerId === o.pointerId);\n  d >= 0 && (i.evCache[d] = o);\n  const c = i.evCache.length > 1 ? i.evCache[0] : o,\n    p = c.pageX,\n    u = c.pageY;\n  if (o.preventedByNestedSwiper) return a.startX = p, void (a.startY = u);\n  if (!s.allowTouchMove) return o.target.matches(i.focusableElements) || (s.allowClick = !1), void (i.isTouched && (Object.assign(a, {\n    startX: p,\n    startY: u,\n    prevX: s.touches.currentX,\n    prevY: s.touches.currentY,\n    currentX: p,\n    currentY: u\n  }), i.touchStartTime = (0, _utilsMin.d)()));\n  if (r.touchReleaseOnEdges && !r.loop) if (s.isVertical()) {\n    if (u < a.startY && s.translate <= s.maxTranslate() || u > a.startY && s.translate >= s.minTranslate()) return i.isTouched = !1, void (i.isMoved = !1);\n  } else if (p < a.startX && s.translate <= s.maxTranslate() || p > a.startX && s.translate >= s.minTranslate()) return;\n  if (t.activeElement && o.target === t.activeElement && o.target.matches(i.focusableElements)) return i.isMoved = !0, void (s.allowClick = !1);\n  if (i.allowTouchCallbacks && s.emit(\"touchMove\", o), o.targetTouches && o.targetTouches.length > 1) return;\n  a.currentX = p, a.currentY = u;\n  const h = a.currentX - a.startX,\n    m = a.currentY - a.startY;\n  if (s.params.threshold && Math.sqrt(h ** 2 + m ** 2) < s.params.threshold) return;\n  if (void 0 === i.isScrolling) {\n    let e;\n    s.isHorizontal() && a.currentY === a.startY || s.isVertical() && a.currentX === a.startX ? i.isScrolling = !1 : h * h + m * m >= 25 && (e = 180 * Math.atan2(Math.abs(m), Math.abs(h)) / Math.PI, i.isScrolling = s.isHorizontal() ? e > r.touchAngle : 90 - e > r.touchAngle);\n  }\n  if (i.isScrolling && s.emit(\"touchMoveOpposite\", o), void 0 === i.startMoving && (a.currentX === a.startX && a.currentY === a.startY || (i.startMoving = !0)), i.isScrolling || s.zoom && s.params.zoom && s.params.zoom.enabled && i.evCache.length > 1) return void (i.isTouched = !1);\n  if (!i.startMoving) return;\n  s.allowClick = !1, !r.cssMode && o.cancelable && o.preventDefault(), r.touchMoveStopPropagation && !r.nested && o.stopPropagation();\n  let f = s.isHorizontal() ? h : m,\n    v = s.isHorizontal() ? a.currentX - a.previousX : a.currentY - a.previousY;\n  r.oneWayMovement && (f = Math.abs(f) * (n ? 1 : -1), v = Math.abs(v) * (n ? 1 : -1)), a.diff = f, f *= r.touchRatio, n && (f = -f, v = -v);\n  const g = s.touchesDirection;\n  s.swipeDirection = f > 0 ? \"prev\" : \"next\", s.touchesDirection = v > 0 ? \"prev\" : \"next\";\n  const w = s.params.loop && !r.cssMode;\n  if (!i.isMoved) {\n    if (w && s.loopFix({\n      direction: s.swipeDirection\n    }), i.startTranslate = s.getTranslate(), s.setTransition(0), s.animating) {\n      const e = new window.CustomEvent(\"transitionend\", {\n        bubbles: !0,\n        cancelable: !0\n      });\n      s.wrapperEl.dispatchEvent(e);\n    }\n    i.allowMomentumBounce = !1, !r.grabCursor || !0 !== s.allowSlideNext && !0 !== s.allowSlidePrev || s.setGrabCursor(!0), s.emit(\"sliderFirstMove\", o);\n  }\n  let S;\n  i.isMoved && g !== s.touchesDirection && w && Math.abs(f) >= 1 && (s.loopFix({\n    direction: s.swipeDirection,\n    setTranslate: !0\n  }), S = !0), s.emit(\"sliderMove\", o), i.isMoved = !0, i.currentTranslate = f + i.startTranslate;\n  let T = !0,\n    b = r.resistanceRatio;\n  if (r.touchReleaseOnEdges && (b = 0), f > 0 ? (w && !S && i.currentTranslate > (r.centeredSlides ? s.minTranslate() - s.size / 2 : s.minTranslate()) && s.loopFix({\n    direction: \"prev\",\n    setTranslate: !0,\n    activeSlideIndex: 0\n  }), i.currentTranslate > s.minTranslate() && (T = !1, r.resistance && (i.currentTranslate = s.minTranslate() - 1 + (-s.minTranslate() + i.startTranslate + f) ** b))) : f < 0 && (w && !S && i.currentTranslate < (r.centeredSlides ? s.maxTranslate() + s.size / 2 : s.maxTranslate()) && s.loopFix({\n    direction: \"next\",\n    setTranslate: !0,\n    activeSlideIndex: s.slides.length - (\"auto\" === r.slidesPerView ? s.slidesPerViewDynamic() : Math.ceil(parseFloat(r.slidesPerView, 10)))\n  }), i.currentTranslate < s.maxTranslate() && (T = !1, r.resistance && (i.currentTranslate = s.maxTranslate() + 1 - (s.maxTranslate() - i.startTranslate - f) ** b))), T && (o.preventedByNestedSwiper = !0), !s.allowSlideNext && \"next\" === s.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !s.allowSlidePrev && \"prev\" === s.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), s.allowSlidePrev || s.allowSlideNext || (i.currentTranslate = i.startTranslate), r.threshold > 0) {\n    if (!(Math.abs(f) > r.threshold || i.allowThresholdMove)) return void (i.currentTranslate = i.startTranslate);\n    if (!i.allowThresholdMove) return i.allowThresholdMove = !0, a.startX = a.currentX, a.startY = a.currentY, i.currentTranslate = i.startTranslate, void (a.diff = s.isHorizontal() ? a.currentX - a.startX : a.currentY - a.startY);\n  }\n  r.followFinger && !r.cssMode && ((r.freeMode && r.freeMode.enabled && s.freeMode || r.watchSlidesProgress) && (s.updateActiveIndex(), s.updateSlidesClasses()), r.freeMode && r.freeMode.enabled && s.freeMode && s.freeMode.onTouchMove(), s.updateProgress(i.currentTranslate), s.setTranslate(i.currentTranslate));\n}\nfunction onTouchEnd(e) {\n  const t = this,\n    s = t.touchEventsData,\n    i = s.evCache.findIndex(t => t.pointerId === e.pointerId);\n  if (i >= 0 && s.evCache.splice(i, 1), [\"pointercancel\", \"pointerout\", \"pointerleave\"].includes(e.type)) {\n    if (!(\"pointercancel\" === e.type && (t.browser.isSafari || t.browser.isWebView))) return;\n  }\n  const {\n    params: r,\n    touches: a,\n    rtlTranslate: n,\n    slidesGrid: l,\n    enabled: o\n  } = t;\n  if (!o) return;\n  if (!r.simulateTouch && \"mouse\" === e.pointerType) return;\n  let d = e;\n  if (d.originalEvent && (d = d.originalEvent), s.allowTouchCallbacks && t.emit(\"touchEnd\", d), s.allowTouchCallbacks = !1, !s.isTouched) return s.isMoved && r.grabCursor && t.setGrabCursor(!1), s.isMoved = !1, void (s.startMoving = !1);\n  r.grabCursor && s.isMoved && s.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);\n  const c = (0, _utilsMin.d)(),\n    p = c - s.touchStartTime;\n  if (t.allowClick) {\n    const e = d.path || d.composedPath && d.composedPath();\n    t.updateClickedSlide(e && e[0] || d.target), t.emit(\"tap click\", d), p < 300 && c - s.lastClickTime < 300 && t.emit(\"doubleTap doubleClick\", d);\n  }\n  if (s.lastClickTime = (0, _utilsMin.d)(), (0, _utilsMin.n)(() => {\n    t.destroyed || (t.allowClick = !0);\n  }), !s.isTouched || !s.isMoved || !t.swipeDirection || 0 === a.diff || s.currentTranslate === s.startTranslate) return s.isTouched = !1, s.isMoved = !1, void (s.startMoving = !1);\n  let u;\n  if (s.isTouched = !1, s.isMoved = !1, s.startMoving = !1, u = r.followFinger ? n ? t.translate : -t.translate : -s.currentTranslate, r.cssMode) return;\n  if (r.freeMode && r.freeMode.enabled) return void t.freeMode.onTouchEnd({\n    currentPos: u\n  });\n  let h = 0,\n    m = t.slidesSizesGrid[0];\n  for (let e = 0; e < l.length; e += e < r.slidesPerGroupSkip ? 1 : r.slidesPerGroup) {\n    const t = e < r.slidesPerGroupSkip - 1 ? 1 : r.slidesPerGroup;\n    void 0 !== l[e + t] ? u >= l[e] && u < l[e + t] && (h = e, m = l[e + t] - l[e]) : u >= l[e] && (h = e, m = l[l.length - 1] - l[l.length - 2]);\n  }\n  let f = null,\n    v = null;\n  r.rewind && (t.isBeginning ? v = r.virtual && r.virtual.enabled && t.virtual ? t.virtual.slides.length - 1 : t.slides.length - 1 : t.isEnd && (f = 0));\n  const g = (u - l[h]) / m,\n    w = h < r.slidesPerGroupSkip - 1 ? 1 : r.slidesPerGroup;\n  if (p > r.longSwipesMs) {\n    if (!r.longSwipes) return void t.slideTo(t.activeIndex);\n    \"next\" === t.swipeDirection && (g >= r.longSwipesRatio ? t.slideTo(r.rewind && t.isEnd ? f : h + w) : t.slideTo(h)), \"prev\" === t.swipeDirection && (g > 1 - r.longSwipesRatio ? t.slideTo(h + w) : null !== v && g < 0 && Math.abs(g) > r.longSwipesRatio ? t.slideTo(v) : t.slideTo(h));\n  } else {\n    if (!r.shortSwipes) return void t.slideTo(t.activeIndex);\n    t.navigation && (d.target === t.navigation.nextEl || d.target === t.navigation.prevEl) ? d.target === t.navigation.nextEl ? t.slideTo(h + w) : t.slideTo(h) : (\"next\" === t.swipeDirection && t.slideTo(null !== f ? f : h + w), \"prev\" === t.swipeDirection && t.slideTo(null !== v ? v : h));\n  }\n}\nfunction onResize() {\n  const e = this,\n    {\n      params: t,\n      el: s\n    } = e;\n  if (s && 0 === s.offsetWidth) return;\n  t.breakpoints && e.setBreakpoint();\n  const {\n      allowSlideNext: i,\n      allowSlidePrev: r,\n      snapGrid: a\n    } = e,\n    n = e.virtual && e.params.virtual.enabled;\n  e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), e.updateSlidesClasses();\n  const l = n && t.loop;\n  !(\"auto\" === t.slidesPerView || t.slidesPerView > 1) || !e.isEnd || e.isBeginning || e.params.centeredSlides || l ? e.params.loop && !n ? e.slideToLoop(e.realIndex, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0) : e.slideTo(e.slides.length - 1, 0, !1, !0), e.autoplay && e.autoplay.running && e.autoplay.paused && (clearTimeout(e.autoplay.resizeTimeout), e.autoplay.resizeTimeout = setTimeout(() => {\n    e.autoplay && e.autoplay.running && e.autoplay.paused && e.autoplay.resume();\n  }, 500)), e.allowSlidePrev = r, e.allowSlideNext = i, e.params.watchOverflow && a !== e.snapGrid && e.checkOverflow();\n}\nfunction onClick(e) {\n  const t = this;\n  t.enabled && (t.allowClick || (t.params.preventClicks && e.preventDefault(), t.params.preventClicksPropagation && t.animating && (e.stopPropagation(), e.stopImmediatePropagation())));\n}\nfunction onScroll() {\n  const e = this,\n    {\n      wrapperEl: t,\n      rtlTranslate: s,\n      enabled: i\n    } = e;\n  if (!i) return;\n  let r;\n  e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = -t.scrollLeft : e.translate = -t.scrollTop, 0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses();\n  const a = e.maxTranslate() - e.minTranslate();\n  r = 0 === a ? 0 : (e.translate - e.minTranslate()) / a, r !== e.progress && e.updateProgress(s ? -e.translate : e.translate), e.emit(\"setTranslate\", e.translate, !1);\n}\nfunction onLoad(e) {\n  const t = this;\n  processLazyPreloader(t, e.target), t.params.cssMode || \"auto\" !== t.params.slidesPerView && !t.params.autoHeight || t.update();\n}\nlet dummyEventAttached = !1;\nfunction dummyEventListener() {}\nconst events = (e, t) => {\n  const s = (0, _ssrWindowEsmMin.g)(),\n    {\n      params: i,\n      el: r,\n      wrapperEl: a,\n      device: n\n    } = e,\n    l = !!i.nested,\n    o = \"on\" === t ? \"addEventListener\" : \"removeEventListener\",\n    d = t;\n  r[o](\"pointerdown\", e.onTouchStart, {\n    passive: !1\n  }), s[o](\"pointermove\", e.onTouchMove, {\n    passive: !1,\n    capture: l\n  }), s[o](\"pointerup\", e.onTouchEnd, {\n    passive: !0\n  }), s[o](\"pointercancel\", e.onTouchEnd, {\n    passive: !0\n  }), s[o](\"pointerout\", e.onTouchEnd, {\n    passive: !0\n  }), s[o](\"pointerleave\", e.onTouchEnd, {\n    passive: !0\n  }), (i.preventClicks || i.preventClicksPropagation) && r[o](\"click\", e.onClick, !0), i.cssMode && a[o](\"scroll\", e.onScroll), i.updateOnWindowResize ? e[d](n.ios || n.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", onResize, !0) : e[d](\"observerUpdate\", onResize, !0), r[o](\"load\", e.onLoad, {\n    capture: !0\n  });\n};\nfunction attachEvents() {\n  const e = this,\n    t = (0, _ssrWindowEsmMin.g)(),\n    {\n      params: s\n    } = e;\n  e.onTouchStart = onTouchStart.bind(e), e.onTouchMove = onTouchMove.bind(e), e.onTouchEnd = onTouchEnd.bind(e), s.cssMode && (e.onScroll = onScroll.bind(e)), e.onClick = onClick.bind(e), e.onLoad = onLoad.bind(e), dummyEventAttached || (t.addEventListener(\"touchstart\", dummyEventListener), dummyEventAttached = !0), events(e, \"on\");\n}\nfunction detachEvents() {\n  events(this, \"off\");\n}\nvar events$1 = {\n  attachEvents: attachEvents,\n  detachEvents: detachEvents\n};\nconst isGridEnabled = (e, t) => e.grid && t.grid && t.grid.rows > 1;\nfunction setBreakpoint() {\n  const e = this,\n    {\n      realIndex: t,\n      initialized: s,\n      params: i,\n      el: r\n    } = e,\n    a = i.breakpoints;\n  if (!a || a && 0 === Object.keys(a).length) return;\n  const n = e.getBreakpoint(a, e.params.breakpointsBase, e.el);\n  if (!n || e.currentBreakpoint === n) return;\n  const l = (n in a ? a[n] : void 0) || e.originalParams,\n    o = isGridEnabled(e, i),\n    d = isGridEnabled(e, l),\n    c = i.enabled;\n  o && !d ? (r.classList.remove(`${i.containerModifierClass}grid`, `${i.containerModifierClass}grid-column`), e.emitContainerClasses()) : !o && d && (r.classList.add(`${i.containerModifierClass}grid`), (l.grid.fill && \"column\" === l.grid.fill || !l.grid.fill && \"column\" === i.grid.fill) && r.classList.add(`${i.containerModifierClass}grid-column`), e.emitContainerClasses()), [\"navigation\", \"pagination\", \"scrollbar\"].forEach(t => {\n    if (void 0 === l[t]) return;\n    const s = i[t] && i[t].enabled,\n      r = l[t] && l[t].enabled;\n    s && !r && e[t].disable(), !s && r && e[t].enable();\n  });\n  const p = l.direction && l.direction !== i.direction,\n    u = i.loop && (l.slidesPerView !== i.slidesPerView || p);\n  p && s && e.changeDirection(), (0, _utilsMin.q)(e.params, l);\n  const h = e.params.enabled;\n  Object.assign(e, {\n    allowTouchMove: e.params.allowTouchMove,\n    allowSlideNext: e.params.allowSlideNext,\n    allowSlidePrev: e.params.allowSlidePrev\n  }), c && !h ? e.disable() : !c && h && e.enable(), e.currentBreakpoint = n, e.emit(\"_beforeBreakpoint\", l), u && s && (e.loopDestroy(), e.loopCreate(t), e.updateSlides()), e.emit(\"breakpoint\", l);\n}\nfunction getBreakpoint(e, t, s) {\n  if (void 0 === t && (t = \"window\"), !e || \"container\" === t && !s) return;\n  let i = !1;\n  const r = (0, _ssrWindowEsmMin.a)(),\n    a = \"window\" === t ? r.innerHeight : s.clientHeight,\n    n = Object.keys(e).map(e => {\n      if (\"string\" == typeof e && 0 === e.indexOf(\"@\")) {\n        const t = parseFloat(e.substr(1));\n        return {\n          value: a * t,\n          point: e\n        };\n      }\n      return {\n        value: e,\n        point: e\n      };\n    });\n  n.sort((e, t) => parseInt(e.value, 10) - parseInt(t.value, 10));\n  for (let e = 0; e < n.length; e += 1) {\n    const {\n      point: a,\n      value: l\n    } = n[e];\n    \"window\" === t ? r.matchMedia(`(min-width: ${l}px)`).matches && (i = a) : l <= s.clientWidth && (i = a);\n  }\n  return i || \"max\";\n}\nvar breakpoints = {\n  setBreakpoint: setBreakpoint,\n  getBreakpoint: getBreakpoint\n};\nfunction prepareClasses(e, t) {\n  const s = [];\n  return e.forEach(e => {\n    \"object\" == typeof e ? Object.keys(e).forEach(i => {\n      e[i] && s.push(t + i);\n    }) : \"string\" == typeof e && s.push(t + e);\n  }), s;\n}\nfunction addClasses() {\n  const e = this,\n    {\n      classNames: t,\n      params: s,\n      rtl: i,\n      el: r,\n      device: a\n    } = e,\n    n = prepareClasses([\"initialized\", s.direction, {\n      \"free-mode\": e.params.freeMode && s.freeMode.enabled\n    }, {\n      autoheight: s.autoHeight\n    }, {\n      rtl: i\n    }, {\n      grid: s.grid && s.grid.rows > 1\n    }, {\n      \"grid-column\": s.grid && s.grid.rows > 1 && \"column\" === s.grid.fill\n    }, {\n      android: a.android\n    }, {\n      ios: a.ios\n    }, {\n      \"css-mode\": s.cssMode\n    }, {\n      centered: s.cssMode && s.centeredSlides\n    }, {\n      \"watch-progress\": s.watchSlidesProgress\n    }], s.containerModifierClass);\n  t.push(...n), r.classList.add(...t), e.emitContainerClasses();\n}\nfunction removeClasses() {\n  const {\n    el: e,\n    classNames: t\n  } = this;\n  e.classList.remove(...t), this.emitContainerClasses();\n}\nvar classes = {\n  addClasses: addClasses,\n  removeClasses: removeClasses\n};\nfunction checkOverflow() {\n  const e = this,\n    {\n      isLocked: t,\n      params: s\n    } = e,\n    {\n      slidesOffsetBefore: i\n    } = s;\n  if (i) {\n    const t = e.slides.length - 1,\n      s = e.slidesGrid[t] + e.slidesSizesGrid[t] + 2 * i;\n    e.isLocked = e.size > s;\n  } else e.isLocked = 1 === e.snapGrid.length;\n  !0 === s.allowSlideNext && (e.allowSlideNext = !e.isLocked), !0 === s.allowSlidePrev && (e.allowSlidePrev = !e.isLocked), t && t !== e.isLocked && (e.isEnd = !1), t !== e.isLocked && e.emit(e.isLocked ? \"lock\" : \"unlock\");\n}\nvar checkOverflow$1 = {\n    checkOverflow: checkOverflow\n  },\n  defaults = {\n    init: !0,\n    direction: \"horizontal\",\n    oneWayMovement: !1,\n    touchEventsTarget: \"wrapper\",\n    initialSlide: 0,\n    speed: 300,\n    cssMode: !1,\n    updateOnWindowResize: !0,\n    resizeObserver: !0,\n    nested: !1,\n    createElements: !1,\n    enabled: !0,\n    focusableElements: \"input, select, option, textarea, button, video, label\",\n    width: null,\n    height: null,\n    preventInteractionOnTransition: !1,\n    userAgent: null,\n    url: null,\n    edgeSwipeDetection: !1,\n    edgeSwipeThreshold: 20,\n    autoHeight: !1,\n    setWrapperSize: !1,\n    virtualTranslate: !1,\n    effect: \"slide\",\n    breakpoints: void 0,\n    breakpointsBase: \"window\",\n    spaceBetween: 0,\n    slidesPerView: 1,\n    slidesPerGroup: 1,\n    slidesPerGroupSkip: 0,\n    slidesPerGroupAuto: !1,\n    centeredSlides: !1,\n    centeredSlidesBounds: !1,\n    slidesOffsetBefore: 0,\n    slidesOffsetAfter: 0,\n    normalizeSlideIndex: !0,\n    centerInsufficientSlides: !1,\n    watchOverflow: !0,\n    roundLengths: !1,\n    touchRatio: 1,\n    touchAngle: 45,\n    simulateTouch: !0,\n    shortSwipes: !0,\n    longSwipes: !0,\n    longSwipesRatio: .5,\n    longSwipesMs: 300,\n    followFinger: !0,\n    allowTouchMove: !0,\n    threshold: 5,\n    touchMoveStopPropagation: !1,\n    touchStartPreventDefault: !0,\n    touchStartForcePreventDefault: !1,\n    touchReleaseOnEdges: !1,\n    uniqueNavElements: !0,\n    resistance: !0,\n    resistanceRatio: .85,\n    watchSlidesProgress: !1,\n    grabCursor: !1,\n    preventClicks: !0,\n    preventClicksPropagation: !0,\n    slideToClickedSlide: !1,\n    loop: !1,\n    loopedSlides: null,\n    loopPreventsSliding: !0,\n    rewind: !1,\n    allowSlidePrev: !0,\n    allowSlideNext: !0,\n    swipeHandler: null,\n    noSwiping: !0,\n    noSwipingClass: \"swiper-no-swiping\",\n    noSwipingSelector: null,\n    passiveListeners: !0,\n    maxBackfaceHiddenSlides: 10,\n    containerModifierClass: \"swiper-\",\n    slideClass: \"swiper-slide\",\n    slideActiveClass: \"swiper-slide-active\",\n    slideVisibleClass: \"swiper-slide-visible\",\n    slideNextClass: \"swiper-slide-next\",\n    slidePrevClass: \"swiper-slide-prev\",\n    wrapperClass: \"swiper-wrapper\",\n    lazyPreloaderClass: \"swiper-lazy-preloader\",\n    lazyPreloadPrevNext: 0,\n    runCallbacksOnInit: !0,\n    _emitClasses: !1\n  };\nexports.d = defaults;\nfunction moduleExtendParams(e, t) {\n  return function (s) {\n    void 0 === s && (s = {});\n    const i = Object.keys(s)[0],\n      r = s[i];\n    \"object\" == typeof r && null !== r ? ([\"navigation\", \"pagination\", \"scrollbar\"].indexOf(i) >= 0 && !0 === e[i] && (e[i] = {\n      auto: !0\n    }), i in e && \"enabled\" in r ? (!0 === e[i] && (e[i] = {\n      enabled: !0\n    }), \"object\" != typeof e[i] || \"enabled\" in e[i] || (e[i].enabled = !0), e[i] || (e[i] = {\n      enabled: !1\n    }), (0, _utilsMin.q)(t, s)) : (0, _utilsMin.q)(t, s)) : (0, _utilsMin.q)(t, s);\n  };\n}\nconst prototypes = {\n    eventsEmitter: eventsEmitter,\n    update: update,\n    translate: translate,\n    transition: transition,\n    slide: slide,\n    loop: loop,\n    grabCursor: grabCursor,\n    events: events$1,\n    breakpoints: breakpoints,\n    checkOverflow: checkOverflow$1,\n    classes: classes\n  },\n  extendedDefaults = {};\nclass Swiper {\n  constructor() {\n    let e, t;\n    for (var s = arguments.length, i = new Array(s), r = 0; r < s; r++) i[r] = arguments[r];\n    1 === i.length && i[0].constructor && \"Object\" === Object.prototype.toString.call(i[0]).slice(8, -1) ? t = i[0] : [e, t] = i, t || (t = {}), t = (0, _utilsMin.q)({}, t), e && !t.el && (t.el = e);\n    const a = (0, _ssrWindowEsmMin.g)();\n    if (t.el && \"string\" == typeof t.el && a.querySelectorAll(t.el).length > 1) {\n      const e = [];\n      return a.querySelectorAll(t.el).forEach(s => {\n        const i = (0, _utilsMin.q)({}, t, {\n          el: s\n        });\n        e.push(new Swiper(i));\n      }), e;\n    }\n    const n = this;\n    n.__swiper__ = !0, n.support = getSupport(), n.device = getDevice({\n      userAgent: t.userAgent\n    }), n.browser = getBrowser(), n.eventsListeners = {}, n.eventsAnyListeners = [], n.modules = [...n.__modules__], t.modules && Array.isArray(t.modules) && n.modules.push(...t.modules);\n    const l = {};\n    n.modules.forEach(e => {\n      e({\n        params: t,\n        swiper: n,\n        extendParams: moduleExtendParams(t, l),\n        on: n.on.bind(n),\n        once: n.once.bind(n),\n        off: n.off.bind(n),\n        emit: n.emit.bind(n)\n      });\n    });\n    const o = (0, _utilsMin.q)({}, defaults, l);\n    return n.params = (0, _utilsMin.q)({}, o, extendedDefaults, t), n.originalParams = (0, _utilsMin.q)({}, n.params), n.passedParams = (0, _utilsMin.q)({}, t), n.params && n.params.on && Object.keys(n.params.on).forEach(e => {\n      n.on(e, n.params.on[e]);\n    }), n.params && n.params.onAny && n.onAny(n.params.onAny), Object.assign(n, {\n      enabled: n.params.enabled,\n      el: e,\n      classNames: [],\n      slides: [],\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      isHorizontal: () => \"horizontal\" === n.params.direction,\n      isVertical: () => \"vertical\" === n.params.direction,\n      activeIndex: 0,\n      realIndex: 0,\n      isBeginning: !0,\n      isEnd: !1,\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: !1,\n      cssOverflowAdjustment() {\n        return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\n      },\n      allowSlideNext: n.params.allowSlideNext,\n      allowSlidePrev: n.params.allowSlidePrev,\n      touchEventsData: {\n        isTouched: void 0,\n        isMoved: void 0,\n        allowTouchCallbacks: void 0,\n        touchStartTime: void 0,\n        isScrolling: void 0,\n        currentTranslate: void 0,\n        startTranslate: void 0,\n        allowThresholdMove: void 0,\n        focusableElements: n.params.focusableElements,\n        lastClickTime: 0,\n        clickTimeout: void 0,\n        velocities: [],\n        allowMomentumBounce: void 0,\n        startMoving: void 0,\n        evCache: []\n      },\n      allowClick: !0,\n      allowTouchMove: n.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      imagesToLoad: [],\n      imagesLoaded: 0\n    }), n.emit(\"_swiper\"), n.params.init && n.init(), n;\n  }\n  getSlideIndex(e) {\n    const {\n        slidesEl: t,\n        params: s\n      } = this,\n      i = (0, _utilsMin.e)(t, `.${s.slideClass}, swiper-slide`),\n      r = (0, _utilsMin.g)(i[0]);\n    return (0, _utilsMin.g)(e) - r;\n  }\n  getSlideIndexByData(e) {\n    return this.getSlideIndex(this.slides.filter(t => 1 * t.getAttribute(\"data-swiper-slide-index\") === e)[0]);\n  }\n  recalcSlides() {\n    const {\n      slidesEl: e,\n      params: t\n    } = this;\n    this.slides = (0, _utilsMin.e)(e, `.${t.slideClass}, swiper-slide`);\n  }\n  enable() {\n    const e = this;\n    e.enabled || (e.enabled = !0, e.params.grabCursor && e.setGrabCursor(), e.emit(\"enable\"));\n  }\n  disable() {\n    const e = this;\n    e.enabled && (e.enabled = !1, e.params.grabCursor && e.unsetGrabCursor(), e.emit(\"disable\"));\n  }\n  setProgress(e, t) {\n    const s = this;\n    e = Math.min(Math.max(e, 0), 1);\n    const i = s.minTranslate(),\n      r = (s.maxTranslate() - i) * e + i;\n    s.translateTo(r, void 0 === t ? 0 : t), s.updateActiveIndex(), s.updateSlidesClasses();\n  }\n  emitContainerClasses() {\n    const e = this;\n    if (!e.params._emitClasses || !e.el) return;\n    const t = e.el.className.split(\" \").filter(t => 0 === t.indexOf(\"swiper\") || 0 === t.indexOf(e.params.containerModifierClass));\n    e.emit(\"_containerClasses\", t.join(\" \"));\n  }\n  getSlideClasses(e) {\n    const t = this;\n    return t.destroyed ? \"\" : e.className.split(\" \").filter(e => 0 === e.indexOf(\"swiper-slide\") || 0 === e.indexOf(t.params.slideClass)).join(\" \");\n  }\n  emitSlidesClasses() {\n    const e = this;\n    if (!e.params._emitClasses || !e.el) return;\n    const t = [];\n    e.slides.forEach(s => {\n      const i = e.getSlideClasses(s);\n      t.push({\n        slideEl: s,\n        classNames: i\n      }), e.emit(\"_slideClass\", s, i);\n    }), e.emit(\"_slideClasses\", t);\n  }\n  slidesPerViewDynamic(e, t) {\n    void 0 === e && (e = \"current\"), void 0 === t && (t = !1);\n    const {\n      params: s,\n      slides: i,\n      slidesGrid: r,\n      slidesSizesGrid: a,\n      size: n,\n      activeIndex: l\n    } = this;\n    let o = 1;\n    if (s.centeredSlides) {\n      let e,\n        t = i[l] ? i[l].swiperSlideSize : 0;\n      for (let s = l + 1; s < i.length; s += 1) i[s] && !e && (t += i[s].swiperSlideSize, o += 1, t > n && (e = !0));\n      for (let s = l - 1; s >= 0; s -= 1) i[s] && !e && (t += i[s].swiperSlideSize, o += 1, t > n && (e = !0));\n    } else if (\"current\" === e) for (let e = l + 1; e < i.length; e += 1) {\n      (t ? r[e] + a[e] - r[l] < n : r[e] - r[l] < n) && (o += 1);\n    } else for (let e = l - 1; e >= 0; e -= 1) {\n      r[l] - r[e] < n && (o += 1);\n    }\n    return o;\n  }\n  update() {\n    const e = this;\n    if (!e || e.destroyed) return;\n    const {\n      snapGrid: t,\n      params: s\n    } = e;\n    function i() {\n      const t = e.rtlTranslate ? -1 * e.translate : e.translate,\n        s = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());\n      e.setTranslate(s), e.updateActiveIndex(), e.updateSlidesClasses();\n    }\n    let r;\n    if (s.breakpoints && e.setBreakpoint(), [...e.el.querySelectorAll('[loading=\"lazy\"]')].forEach(t => {\n      t.complete && processLazyPreloader(e, t);\n    }), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), s.freeMode && s.freeMode.enabled && !s.cssMode) i(), s.autoHeight && e.updateAutoHeight();else {\n      if ((\"auto\" === s.slidesPerView || s.slidesPerView > 1) && e.isEnd && !s.centeredSlides) {\n        const t = e.virtual && s.virtual.enabled ? e.virtual.slides : e.slides;\n        r = e.slideTo(t.length - 1, 0, !1, !0);\n      } else r = e.slideTo(e.activeIndex, 0, !1, !0);\n      r || i();\n    }\n    s.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit(\"update\");\n  }\n  changeDirection(e, t) {\n    void 0 === t && (t = !0);\n    const s = this,\n      i = s.params.direction;\n    return e || (e = \"horizontal\" === i ? \"vertical\" : \"horizontal\"), e === i || \"horizontal\" !== e && \"vertical\" !== e || (s.el.classList.remove(`${s.params.containerModifierClass}${i}`), s.el.classList.add(`${s.params.containerModifierClass}${e}`), s.emitContainerClasses(), s.params.direction = e, s.slides.forEach(t => {\n      \"vertical\" === e ? t.style.width = \"\" : t.style.height = \"\";\n    }), s.emit(\"changeDirection\"), t && s.update()), s;\n  }\n  changeLanguageDirection(e) {\n    const t = this;\n    t.rtl && \"rtl\" === e || !t.rtl && \"ltr\" === e || (t.rtl = \"rtl\" === e, t.rtlTranslate = \"horizontal\" === t.params.direction && t.rtl, t.rtl ? (t.el.classList.add(`${t.params.containerModifierClass}rtl`), t.el.dir = \"rtl\") : (t.el.classList.remove(`${t.params.containerModifierClass}rtl`), t.el.dir = \"ltr\"), t.update());\n  }\n  mount(e) {\n    const t = this;\n    if (t.mounted) return !0;\n    let s = e || t.params.el;\n    if (\"string\" == typeof s && (s = document.querySelector(s)), !s) return !1;\n    s.swiper = t, s.parentNode && s.parentNode.host && \"SWIPER-CONTAINER\" === s.parentNode.host.nodeName && (t.isElement = !0);\n    const i = () => `.${(t.params.wrapperClass || \"\").trim().split(\" \").join(\".\")}`;\n    let r = (() => {\n      if (s && s.shadowRoot && s.shadowRoot.querySelector) {\n        return s.shadowRoot.querySelector(i());\n      }\n      return (0, _utilsMin.e)(s, i())[0];\n    })();\n    return !r && t.params.createElements && (r = (0, _utilsMin.c)(\"div\", t.params.wrapperClass), s.append(r), (0, _utilsMin.e)(s, `.${t.params.slideClass}`).forEach(e => {\n      r.append(e);\n    })), Object.assign(t, {\n      el: s,\n      wrapperEl: r,\n      slidesEl: t.isElement && !s.parentNode.host.slideSlots ? s.parentNode.host : r,\n      hostEl: t.isElement ? s.parentNode.host : s,\n      mounted: !0,\n      rtl: \"rtl\" === s.dir.toLowerCase() || \"rtl\" === (0, _utilsMin.l)(s, \"direction\"),\n      rtlTranslate: \"horizontal\" === t.params.direction && (\"rtl\" === s.dir.toLowerCase() || \"rtl\" === (0, _utilsMin.l)(s, \"direction\")),\n      wrongRTL: \"-webkit-box\" === (0, _utilsMin.l)(r, \"display\")\n    }), !0;\n  }\n  init(e) {\n    const t = this;\n    if (t.initialized) return t;\n    return !1 === t.mount(e) || (t.emit(\"beforeInit\"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.enabled && t.setGrabCursor(), t.params.loop && t.virtual && t.params.virtual.enabled ? t.slideTo(t.params.initialSlide + t.virtual.slidesBefore, 0, t.params.runCallbacksOnInit, !1, !0) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit, !1, !0), t.params.loop && t.loopCreate(), t.attachEvents(), [...t.el.querySelectorAll('[loading=\"lazy\"]')].forEach(e => {\n      e.complete ? processLazyPreloader(t, e) : e.addEventListener(\"load\", e => {\n        processLazyPreloader(t, e.target);\n      });\n    }), preload(t), t.initialized = !0, preload(t), t.emit(\"init\"), t.emit(\"afterInit\")), t;\n  }\n  destroy(e, t) {\n    void 0 === e && (e = !0), void 0 === t && (t = !0);\n    const s = this,\n      {\n        params: i,\n        el: r,\n        wrapperEl: a,\n        slides: n\n      } = s;\n    return void 0 === s.params || s.destroyed || (s.emit(\"beforeDestroy\"), s.initialized = !1, s.detachEvents(), i.loop && s.loopDestroy(), t && (s.removeClasses(), r.removeAttribute(\"style\"), a.removeAttribute(\"style\"), n && n.length && n.forEach(e => {\n      e.classList.remove(i.slideVisibleClass, i.slideActiveClass, i.slideNextClass, i.slidePrevClass), e.removeAttribute(\"style\"), e.removeAttribute(\"data-swiper-slide-index\");\n    })), s.emit(\"destroy\"), Object.keys(s.eventsListeners).forEach(e => {\n      s.off(e);\n    }), !1 !== e && (s.el.swiper = null, (0, _utilsMin.r)(s)), s.destroyed = !0), null;\n  }\n  static extendDefaults(e) {\n    (0, _utilsMin.q)(extendedDefaults, e);\n  }\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n  static get defaults() {\n    return defaults;\n  }\n  static installModule(e) {\n    Swiper.prototype.__modules__ || (Swiper.prototype.__modules__ = []);\n    const t = Swiper.prototype.__modules__;\n    \"function\" == typeof e && t.indexOf(e) < 0 && t.push(e);\n  }\n  static use(e) {\n    return Array.isArray(e) ? (e.forEach(e => Swiper.installModule(e)), Swiper) : (Swiper.installModule(e), Swiper);\n  }\n}\nexports.S = Swiper;\nObject.keys(prototypes).forEach(e => {\n  Object.keys(prototypes[e]).forEach(t => {\n    Swiper.prototype[t] = prototypes[e][t];\n  });\n}), Swiper.use([Resize, Observer]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHNNaW4iLCJyZXF1aXJlIiwic3VwcG9ydCIsImRldmljZUNhY2hlZCIsImJyb3dzZXIiLCJjYWxjU3VwcG9ydCIsImUiLCJnZXRXaW5kb3ciLCJ0IiwiZ2V0RG9jdW1lbnQiLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsImdldFN1cHBvcnQiLCJjYWxjRGV2aWNlIiwidXNlckFnZW50IiwicyIsImkiLCJyIiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJhIiwibiIsImlvcyIsImFuZHJvaWQiLCJsIiwic2NyZWVuIiwid2lkdGgiLCJvIiwiaGVpZ2h0IiwiZCIsIm1hdGNoIiwiYyIsInAiLCJ1IiwiaCIsIm0iLCJpbmRleE9mIiwib3MiLCJnZXREZXZpY2UiLCJjYWxjQnJvd3NlciIsInRvTG93ZXJDYXNlIiwiU3RyaW5nIiwiaW5jbHVkZXMiLCJzcGxpdCIsIm1hcCIsIk51bWJlciIsImlzU2FmYXJpIiwibmVlZFBlcnNwZWN0aXZlRml4IiwiaXNXZWJWaWV3IiwidGVzdCIsImdldEJyb3dzZXIiLCJSZXNpemUiLCJzd2lwZXIiLCJvbiIsImVtaXQiLCJyZXNpemVIYW5kbGVyIiwiZGVzdHJveWVkIiwiaW5pdGlhbGl6ZWQiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJwYXJhbXMiLCJyZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm9yRWFjaCIsImNvbnRlbnRCb3hTaXplIiwiY29udGVudFJlY3QiLCJ0YXJnZXQiLCJlbCIsImlubGluZVNpemUiLCJibG9ja1NpemUiLCJvYnNlcnZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidW5vYnNlcnZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk9ic2VydmVyIiwiZXh0ZW5kUGFyYW1zIiwiYXR0YWNoIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJfX3ByZXZlbnRPYnNlcnZlcl9fIiwibGVuZ3RoIiwib2JzZXJ2ZXJVcGRhdGUiLCJzZXRUaW1lb3V0IiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJwdXNoIiwib2JzZXJ2ZXIiLCJvYnNlcnZlUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiZWxlbWVudFBhcmVudHMiLCJob3N0RWwiLCJ3cmFwcGVyRWwiLCJkaXNjb25uZWN0Iiwic3BsaWNlIiwiZXZlbnRzRW1pdHRlciIsImV2ZW50c0xpc3RlbmVycyIsIm9uY2UiLCJvZmYiLCJfX2VtaXR0ZXJQcm94eSIsImFyZ3VtZW50cyIsIkFycmF5IiwiYXBwbHkiLCJvbkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsIm9mZkFueSIsImlzQXJyYXkiLCJzbGljZSIsImV2ZW50cyIsImRhdGEiLCJjb250ZXh0IiwidW5zaGlmdCIsInVwZGF0ZVNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsImVsZW1lbnRTdHlsZSIsImlzTmFOIiwiT2JqZWN0IiwiYXNzaWduIiwic2l6ZSIsInVwZGF0ZVNsaWRlcyIsIm1hcmdpblJpZ2h0IiwicGFyc2VGbG9hdCIsImdldFByb3BlcnR5VmFsdWUiLCJzbGlkZXNFbCIsInJ0bFRyYW5zbGF0ZSIsIndyb25nUlRMIiwidmlydHVhbCIsImVuYWJsZWQiLCJzbGlkZXMiLCJlbGVtZW50Q2hpbGRyZW4iLCJzbGlkZUNsYXNzIiwiZiIsInYiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJjYWxsIiwiZyIsInNsaWRlc09mZnNldEFmdGVyIiwidyIsInNuYXBHcmlkIiwiUyIsInNsaWRlc0dyaWQiLCJUIiwic3BhY2VCZXR3ZWVuIiwiYiIsIngiLCJFIiwicmVwbGFjZSIsInZpcnR1YWxTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsInNldENTU1Byb3BlcnR5IiwieSIsImdyaWQiLCJyb3dzIiwiQyIsImluaXRTbGlkZXMiLCJNIiwic2xpZGVzUGVyVmlldyIsImJyZWFrcG9pbnRzIiwia2V5cyIsImZpbHRlciIsInVwZGF0ZVNsaWRlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsImVsZW1lbnRPdXRlclNpemUiLCJvZmZzZXRXaWR0aCIsIk1hdGgiLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwIiwibWluIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwibWF4IiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsImxvb3AiLCJjZWlsIiwic2xpZGVzQmVmb3JlIiwic2xpZGVzQWZ0ZXIiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsInNsaWRlc1NpemVzR3JpZCIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93Iiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsInVwZGF0ZVNsaWRlc09mZnNldCIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzIiwiYWRkIiwicmVtb3ZlIiwidXBkYXRlQXV0b0hlaWdodCIsInNldFRyYW5zaXRpb24iLCJzcGVlZCIsImdldFNsaWRlSW5kZXhCeURhdGEiLCJ2aXNpYmxlU2xpZGVzIiwiYWN0aXZlSW5kZXgiLCJvZmZzZXRIZWlnaHQiLCJpc0VsZW1lbnQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJjc3NPdmVyZmxvd0FkanVzdG1lbnQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsInRyYW5zbGF0ZSIsInNsaWRlVmlzaWJsZUNsYXNzIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJtaW5UcmFuc2xhdGUiLCJwcm9ncmVzcyIsIm9yaWdpbmFsUHJvZ3Jlc3MiLCJ1cGRhdGVQcm9ncmVzcyIsIm1heFRyYW5zbGF0ZSIsImlzQmVnaW5uaW5nIiwiaXNFbmQiLCJwcm9ncmVzc0xvb3AiLCJhdXRvSGVpZ2h0IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwiZWxlbWVudE5leHRBbGwiLCJlbGVtZW50UHJldkFsbCIsImVtaXRTbGlkZXNDbGFzc2VzIiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJjbG9zZXN0IiwicXVlcnlTZWxlY3RvciIsImxhenlQcmVsb2FkZXJDbGFzcyIsInVubGF6eSIsInJlbW92ZUF0dHJpYnV0ZSIsInByZWxvYWQiLCJsYXp5UHJlbG9hZFByZXZOZXh0Iiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJmcm9tIiwiY29sdW1uIiwicmV3aW5kIiwiZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZSIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJ1cGRhdGVBY3RpdmVJbmRleCIsInJlYWxJbmRleCIsInNuYXBJbmRleCIsImdldEF0dHJpYnV0ZSIsInByZXZpb3VzU25hcEluZGV4IiwicHJldmlvdXNSZWFsSW5kZXgiLCJwcmV2aW91c0luZGV4IiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInVwZGF0ZSIsImdldFN3aXBlclRyYW5zbGF0ZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJnZXRUcmFuc2xhdGUiLCJzZXRUcmFuc2xhdGUiLCJwcmV2aW91c1RyYW5zbGF0ZSIsInRyYW5zbGF0ZVRvIiwiYW5pbWF0aW5nIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzY3JvbGxUbyIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkVtaXQiLCJydW5DYWxsYmFja3MiLCJkaXJlY3Rpb24iLCJzdGVwIiwidHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb24iLCJzbGlkZVRvIiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInNjcm9sbFNuYXBUeXBlIiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0IiwiaW5pdGlhbFNsaWRlIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsInNsaWRlTmV4dCIsInNsaWRlc1Blckdyb3VwQXV0byIsImxvb3BQcmV2ZW50c1NsaWRpbmciLCJsb29wRml4IiwiX2NsaWVudExlZnQiLCJjbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsIm5leHRUaWNrIiwic2xpZGUiLCJsb29wQ3JlYXRlIiwic2V0QXR0cmlidXRlIiwic2xpZGVSZWFsSW5kZXgiLCJhY3RpdmVTbGlkZUluZGV4IiwiYnlDb250cm9sbGVyIiwiYnlNb3VzZXdoZWVsIiwic3dpcGVyTG9vcE1vdmVET00iLCJwcmVwZW5kIiwiYXBwZW5kIiwicmVjYWxjU2xpZGVzIiwidG91Y2hlcyIsInRvdWNoRXZlbnRzRGF0YSIsImN1cnJlbnRUcmFuc2xhdGUiLCJjb250cm9sbGVyIiwiY29udHJvbCIsImNvbnN0cnVjdG9yIiwibG9vcERlc3Ryb3kiLCJzd2lwZXJTbGlkZUluZGV4Iiwic2V0R3JhYkN1cnNvciIsInNpbXVsYXRlVG91Y2giLCJpc0xvY2tlZCIsInRvdWNoRXZlbnRzVGFyZ2V0IiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwiZ3JhYkN1cnNvciIsImNsb3Nlc3RFbGVtZW50IiwiYXNzaWduZWRTbG90IiwiZ2V0Um9vdE5vZGUiLCJob3N0Iiwib25Ub3VjaFN0YXJ0IiwiZXZDYWNoZSIsInBvaW50ZXJUeXBlIiwib3JpZ2luYWxFdmVudCIsIndoaWNoIiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsIm5vU3dpcGluZ0NsYXNzIiwiY29tcG9zZWRQYXRoIiwicGF0aCIsInNoYWRvd1Jvb3QiLCJub1N3aXBpbmdTZWxlY3RvciIsIm5vU3dpcGluZyIsImFsbG93Q2xpY2siLCJzd2lwZUhhbmRsZXIiLCJjdXJyZW50WCIsInBhZ2VYIiwiY3VycmVudFkiLCJwYWdlWSIsImVkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImlubmVyV2lkdGgiLCJwcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwic3RhcnRYIiwic3RhcnRZIiwidG91Y2hTdGFydFRpbWUiLCJub3ciLCJzd2lwZURpcmVjdGlvbiIsInRocmVzaG9sZCIsImFsbG93VGhyZXNob2xkTW92ZSIsIm1hdGNoZXMiLCJmb2N1c2FibGVFbGVtZW50cyIsIm5vZGVOYW1lIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJmcmVlTW9kZSIsIm9uVG91Y2hNb3ZlIiwiZmluZEluZGV4IiwicG9pbnRlcklkIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJwcmV2WCIsInByZXZZIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInRhcmdldFRvdWNoZXMiLCJzcXJ0IiwiYXRhbjIiLCJQSSIsInRvdWNoQW5nbGUiLCJ6b29tIiwiY2FuY2VsYWJsZSIsInRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiIsIm5lc3RlZCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsIm9uZVdheU1vdmVtZW50IiwiZGlmZiIsInRvdWNoUmF0aW8iLCJ0b3VjaGVzRGlyZWN0aW9uIiwic3RhcnRUcmFuc2xhdGUiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkaXNwYXRjaEV2ZW50IiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwidHlwZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwibG9uZ1N3aXBlc01zIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsIm9uUmVzaXplIiwic2V0QnJlYWtwb2ludCIsImF1dG9wbGF5IiwicnVubmluZyIsInBhdXNlZCIsImNsZWFyVGltZW91dCIsInJlc2l6ZVRpbWVvdXQiLCJyZXN1bWUiLCJvbkNsaWNrIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uU2Nyb2xsIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uTG9hZCIsImR1bW15RXZlbnRBdHRhY2hlZCIsImR1bW15RXZlbnRMaXN0ZW5lciIsImRldmljZSIsInBhc3NpdmUiLCJjYXB0dXJlIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJhdHRhY2hFdmVudHMiLCJiaW5kIiwiZGV0YWNoRXZlbnRzIiwiZXZlbnRzJDEiLCJpc0dyaWRFbmFibGVkIiwiZ2V0QnJlYWtwb2ludCIsImJyZWFrcG9pbnRzQmFzZSIsImN1cnJlbnRCcmVha3BvaW50Iiwib3JpZ2luYWxQYXJhbXMiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsImZpbGwiLCJkaXNhYmxlIiwiZW5hYmxlIiwiY2hhbmdlRGlyZWN0aW9uIiwiZXh0ZW5kIiwiaW5uZXJIZWlnaHQiLCJzdWJzdHIiLCJ2YWx1ZSIsInBvaW50Iiwic29ydCIsIm1hdGNoTWVkaWEiLCJwcmVwYXJlQ2xhc3NlcyIsImFkZENsYXNzZXMiLCJjbGFzc05hbWVzIiwicnRsIiwiYXV0b2hlaWdodCIsImNlbnRlcmVkIiwicmVtb3ZlQ2xhc3NlcyIsImNsYXNzZXMiLCJjaGVja092ZXJmbG93JDEiLCJkZWZhdWx0cyIsImluaXQiLCJjcmVhdGVFbGVtZW50cyIsInVybCIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicGFzc2l2ZUxpc3RlbmVycyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsImV4cG9ydHMiLCJtb2R1bGVFeHRlbmRQYXJhbXMiLCJhdXRvIiwicHJvdG90eXBlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfX3N3aXBlcl9fIiwibW9kdWxlcyIsIl9fbW9kdWxlc19fIiwicGFzc2VkUGFyYW1zIiwidmVsb2NpdHkiLCJ0cnVuYyIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJpbWFnZXNUb0xvYWQiLCJpbWFnZXNMb2FkZWQiLCJlbGVtZW50SW5kZXgiLCJzZXRQcm9ncmVzcyIsImNsYXNzTmFtZSIsImpvaW4iLCJnZXRTbGlkZUNsYXNzZXMiLCJzbGlkZUVsIiwiY29tcGxldGUiLCJjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbiIsImRpciIsIm1vdW50IiwibW91bnRlZCIsImRvY3VtZW50IiwicGFyZW50Tm9kZSIsImdldFdyYXBwZXJTZWxlY3RvciIsInRyaW0iLCJjcmVhdGVFbGVtZW50Iiwic2xpZGVTbG90cyIsImRlc3Ryb3kiLCJkZWxldGVQcm9wcyIsImV4dGVuZERlZmF1bHRzIiwiaW5zdGFsbE1vZHVsZSIsInVzZSJdLCJzb3VyY2VzIjpbIjAiXSwic291cmNlc0Nv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","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.a = elementParents;\nexports.b = elementOffset;\nexports.c = createElement;\nexports.d = now;\nexports.e = elementChildren;\nexports.f = elementOuterSize;\nexports.g = elementIndex;\nexports.h = getTranslate;\nexports.i = elementTransitionEnd;\nexports.j = isObject;\nexports.k = getSlideTransformEl;\nexports.l = elementStyle;\nexports.m = elementNextAll;\nexports.n = nextTick;\nexports.o = elementPrevAll;\nexports.p = animateCSSModeScroll;\nexports.q = extend;\nexports.r = deleteProps;\nexports.s = setCSSProperty;\nvar _ssrWindowEsmMin = require(\"./ssr-window.esm.min.mjs\");\nfunction deleteProps(e) {\n  const t = e;\n  Object.keys(t).forEach(e => {\n    try {\n      t[e] = null;\n    } catch (e) {}\n    try {\n      delete t[e];\n    } catch (e) {}\n  });\n}\nfunction nextTick(e, t) {\n  return void 0 === t && (t = 0), setTimeout(e, t);\n}\nfunction now() {\n  return Date.now();\n}\nfunction getComputedStyle(e) {\n  const t = (0, _ssrWindowEsmMin.a)();\n  let n;\n  return t.getComputedStyle && (n = t.getComputedStyle(e, null)), !n && e.currentStyle && (n = e.currentStyle), n || (n = e.style), n;\n}\nfunction getTranslate(e, t) {\n  void 0 === t && (t = \"x\");\n  const n = (0, _ssrWindowEsmMin.a)();\n  let r, o, l;\n  const s = getComputedStyle(e);\n  return n.WebKitCSSMatrix ? (o = s.transform || s.webkitTransform, o.split(\",\").length > 6 && (o = o.split(\", \").map(e => e.replace(\",\", \".\")).join(\", \")), l = new n.WebKitCSSMatrix(\"none\" === o ? \"\" : o)) : (l = s.MozTransform || s.OTransform || s.MsTransform || s.msTransform || s.transform || s.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\"), r = l.toString().split(\",\")), \"x\" === t && (o = n.WebKitCSSMatrix ? l.m41 : 16 === r.length ? parseFloat(r[12]) : parseFloat(r[4])), \"y\" === t && (o = n.WebKitCSSMatrix ? l.m42 : 16 === r.length ? parseFloat(r[13]) : parseFloat(r[5])), o || 0;\n}\nfunction isObject(e) {\n  return \"object\" == typeof e && null !== e && e.constructor && \"Object\" === Object.prototype.toString.call(e).slice(8, -1);\n}\nfunction isNode(e) {\n  return \"undefined\" != typeof window && void 0 !== window.HTMLElement ? e instanceof HTMLElement : e && (1 === e.nodeType || 11 === e.nodeType);\n}\nfunction extend() {\n  const e = Object(arguments.length <= 0 ? void 0 : arguments[0]),\n    t = [\"__proto__\", \"constructor\", \"prototype\"];\n  for (let n = 1; n < arguments.length; n += 1) {\n    const r = n < 0 || arguments.length <= n ? void 0 : arguments[n];\n    if (null != r && !isNode(r)) {\n      const n = Object.keys(Object(r)).filter(e => t.indexOf(e) < 0);\n      for (let t = 0, o = n.length; t < o; t += 1) {\n        const o = n[t],\n          l = Object.getOwnPropertyDescriptor(r, o);\n        void 0 !== l && l.enumerable && (isObject(e[o]) && isObject(r[o]) ? r[o].__swiper__ ? e[o] = r[o] : extend(e[o], r[o]) : !isObject(e[o]) && isObject(r[o]) ? (e[o] = {}, r[o].__swiper__ ? e[o] = r[o] : extend(e[o], r[o])) : e[o] = r[o]);\n      }\n    }\n  }\n  return e;\n}\nfunction setCSSProperty(e, t, n) {\n  e.style.setProperty(t, n);\n}\nfunction animateCSSModeScroll(e) {\n  let {\n    swiper: t,\n    targetPosition: n,\n    side: r\n  } = e;\n  const o = (0, _ssrWindowEsmMin.a)(),\n    l = -t.translate;\n  let s,\n    i = null;\n  const a = t.params.speed;\n  t.wrapperEl.style.scrollSnapType = \"none\", o.cancelAnimationFrame(t.cssModeFrameID);\n  const c = n > l ? \"next\" : \"prev\",\n    m = (e, t) => \"next\" === c && e >= t || \"prev\" === c && e <= t,\n    u = () => {\n      s = new Date().getTime(), null === i && (i = s);\n      const e = Math.max(Math.min((s - i) / a, 1), 0),\n        c = .5 - Math.cos(e * Math.PI) / 2;\n      let p = l + c * (n - l);\n      if (m(p, n) && (p = n), t.wrapperEl.scrollTo({\n        [r]: p\n      }), m(p, n)) return t.wrapperEl.style.overflow = \"hidden\", t.wrapperEl.style.scrollSnapType = \"\", setTimeout(() => {\n        t.wrapperEl.style.overflow = \"\", t.wrapperEl.scrollTo({\n          [r]: p\n        });\n      }), void o.cancelAnimationFrame(t.cssModeFrameID);\n      t.cssModeFrameID = o.requestAnimationFrame(u);\n    };\n  u();\n}\nfunction getSlideTransformEl(e) {\n  return e.querySelector(\".swiper-slide-transform\") || e.shadowRoot && e.shadowRoot.querySelector(\".swiper-slide-transform\") || e;\n}\nfunction elementChildren(e, t) {\n  return void 0 === t && (t = \"\"), [...e.children].filter(e => e.matches(t));\n}\nfunction createElement(e, t) {\n  void 0 === t && (t = []);\n  const n = document.createElement(e);\n  return n.classList.add(...(Array.isArray(t) ? t : [t])), n;\n}\nfunction elementOffset(e) {\n  const t = (0, _ssrWindowEsmMin.a)(),\n    n = (0, _ssrWindowEsmMin.g)(),\n    r = e.getBoundingClientRect(),\n    o = n.body,\n    l = e.clientTop || o.clientTop || 0,\n    s = e.clientLeft || o.clientLeft || 0,\n    i = e === t ? t.scrollY : e.scrollTop,\n    a = e === t ? t.scrollX : e.scrollLeft;\n  return {\n    top: r.top + i - l,\n    left: r.left + a - s\n  };\n}\nfunction elementPrevAll(e, t) {\n  const n = [];\n  for (; e.previousElementSibling;) {\n    const r = e.previousElementSibling;\n    t ? r.matches(t) && n.push(r) : n.push(r), e = r;\n  }\n  return n;\n}\nfunction elementNextAll(e, t) {\n  const n = [];\n  for (; e.nextElementSibling;) {\n    const r = e.nextElementSibling;\n    t ? r.matches(t) && n.push(r) : n.push(r), e = r;\n  }\n  return n;\n}\nfunction elementStyle(e, t) {\n  return (0, _ssrWindowEsmMin.a)().getComputedStyle(e, null).getPropertyValue(t);\n}\nfunction elementIndex(e) {\n  let t,\n    n = e;\n  if (n) {\n    for (t = 0; null !== (n = n.previousSibling);) 1 === n.nodeType && (t += 1);\n    return t;\n  }\n}\nfunction elementParents(e, t) {\n  const n = [];\n  let r = e.parentElement;\n  for (; r;) t ? r.matches(t) && n.push(r) : n.push(r), r = r.parentElement;\n  return n;\n}\nfunction elementTransitionEnd(e, t) {\n  t && e.addEventListener(\"transitionend\", function n(r) {\n    r.target === e && (t.call(e, r), e.removeEventListener(\"transitionend\", n));\n  });\n}\nfunction elementOuterSize(e, t, n) {\n  const r = (0, _ssrWindowEsmMin.a)();\n  return n ? e[\"width\" === t ? \"offsetWidth\" : \"offsetHeight\"] + parseFloat(r.getComputedStyle(e, null).getPropertyValue(\"width\" === t ? \"margin-right\" : \"margin-top\")) + parseFloat(r.getComputedStyle(e, null).getPropertyValue(\"width\" === t ? \"margin-left\" : \"margin-bottom\")) : e.offsetWidth;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Swiper\", {\n  enumerable: true,\n  get: function () {\n    return _swiperCoreMin.S;\n  }\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _swiperCoreMin.S;\n  }\n});\nvar _swiperCoreMin = require(\"./shared/swiper-core.min.mjs\");\nvar _virtualMin = _interopRequireDefault(require(\"./modules/virtual.min.mjs\"));\nvar _keyboardMin = _interopRequireDefault(require(\"./modules/keyboard.min.mjs\"));\nvar _mousewheelMin = _interopRequireDefault(require(\"./modules/mousewheel.min.mjs\"));\nvar _navigationMin = _interopRequireDefault(require(\"./modules/navigation.min.mjs\"));\nvar _paginationMin = _interopRequireDefault(require(\"./modules/pagination.min.mjs\"));\nvar _scrollbarMin = _interopRequireDefault(require(\"./modules/scrollbar.min.mjs\"));\nvar _parallaxMin = _interopRequireDefault(require(\"./modules/parallax.min.mjs\"));\nvar _zoomMin = _interopRequireDefault(require(\"./modules/zoom.min.mjs\"));\nvar _controllerMin = _interopRequireDefault(require(\"./modules/controller.min.mjs\"));\nvar _a11yMin = _interopRequireDefault(require(\"./modules/a11y.min.mjs\"));\nvar _historyMin = _interopRequireDefault(require(\"./modules/history.min.mjs\"));\nvar _hashNavigationMin = _interopRequireDefault(require(\"./modules/hash-navigation.min.mjs\"));\nvar _autoplayMin = _interopRequireDefault(require(\"./modules/autoplay.min.mjs\"));\nvar _thumbsMin = _interopRequireDefault(require(\"./modules/thumbs.min.mjs\"));\nvar _freeModeMin = _interopRequireDefault(require(\"./modules/free-mode.min.mjs\"));\nvar _gridMin = _interopRequireDefault(require(\"./modules/grid.min.mjs\"));\nvar _manipulationMin = _interopRequireDefault(require(\"./modules/manipulation.min.mjs\"));\nvar _effectFadeMin = _interopRequireDefault(require(\"./modules/effect-fade.min.mjs\"));\nvar _effectCubeMin = _interopRequireDefault(require(\"./modules/effect-cube.min.mjs\"));\nvar _effectFlipMin = _interopRequireDefault(require(\"./modules/effect-flip.min.mjs\"));\nvar _effectCoverflowMin = _interopRequireDefault(require(\"./modules/effect-coverflow.min.mjs\"));\nvar _effectCreativeMin = _interopRequireDefault(require(\"./modules/effect-creative.min.mjs\"));\nvar _effectCardsMin = _interopRequireDefault(require(\"./modules/effect-cards.min.mjs\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Swiper 10.1.0\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2023 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: August 1, 2023\n */\n\nconst modules = [_virtualMin.default, _keyboardMin.default, _mousewheelMin.default, _navigationMin.default, _paginationMin.default, _scrollbarMin.default, _parallaxMin.default, _zoomMin.default, _controllerMin.default, _a11yMin.default, _historyMin.default, _hashNavigationMin.default, _autoplayMin.default, _thumbsMin.default, _freeModeMin.default, _gridMin.default, _manipulationMin.default, _effectFadeMin.default, _effectCubeMin.default, _effectFlipMin.default, _effectCoverflowMin.default, _effectCreativeMin.default, _effectCardsMin.default];\n_swiperCoreMin.S.use(modules);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdmlydHVhbE1pbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2tleWJvYXJkTWluIiwiX21vdXNld2hlZWxNaW4iLCJfbmF2aWdhdGlvbk1pbiIsIl9wYWdpbmF0aW9uTWluIiwiX3Njcm9sbGJhck1pbiIsIl9wYXJhbGxheE1pbiIsIl96b29tTWluIiwiX2NvbnRyb2xsZXJNaW4iLCJfYTExeU1pbiIsIl9oaXN0b3J5TWluIiwiX2hhc2hOYXZpZ2F0aW9uTWluIiwiX2F1dG9wbGF5TWluIiwiX3RodW1ic01pbiIsIl9mcmVlTW9kZU1pbiIsIl9ncmlkTWluIiwiX21hbmlwdWxhdGlvbk1pbiIsIl9lZmZlY3RGYWRlTWluIiwiX2VmZmVjdEN1YmVNaW4iLCJfZWZmZWN0RmxpcE1pbiIsIl9lZmZlY3RDb3ZlcmZsb3dNaW4iLCJfZWZmZWN0Q3JlYXRpdmVNaW4iLCJfZWZmZWN0Q2FyZHNNaW4iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm1vZHVsZXMiLCJWaXJ0dWFsIiwiS2V5Ym9hcmQiLCJNb3VzZXdoZWVsIiwiTmF2aWdhdGlvbiIsIlBhZ2luYXRpb24iLCJTY3JvbGxiYXIiLCJQYXJhbGxheCIsIlpvb20iLCJDb250cm9sbGVyIiwiQTExeSIsIkhpc3RvcnkiLCJIYXNoTmF2aWdhdGlvbiIsIkF1dG9wbGF5IiwiVGh1bWIiLCJmcmVlTW9kZSIsIkdyaWQiLCJNYW5pcHVsYXRpb24iLCJFZmZlY3RGYWRlIiwiRWZmZWN0Q3ViZSIsIkVmZmVjdEZsaXAiLCJFZmZlY3RDb3ZlcmZsb3ciLCJFZmZlY3RDcmVhdGl2ZSIsIkVmZmVjdENhcmRzIiwiU3dpcGVyIiwidXNlIl0sInNvdXJjZXMiOlsiMCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWTRCLElBQUFBLFdBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNSLElBQUFDLFlBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNDLElBQUFFLGNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNFLElBQUFHLGNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLGNBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLGFBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNELElBQUFNLFlBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNELElBQUFPLFFBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNKLElBQUFRLGNBQUEsR0FBQVQsc0JBQUEsQ0FBQUMsT0FBQTtBQUNNLElBQUFTLFFBQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNOLElBQUFVLFdBQUEsR0FBQVgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNHLElBQUFXLGtCQUFBLEdBQUFaLHNCQUFBLENBQUFDLE9BQUE7QUFDTyxJQUFBWSxZQUFBLEdBQUFiLHNCQUFBLENBQUFDLE9BQUE7QUFDTixJQUFBYSxVQUFBLEdBQUFkLHNCQUFBLENBQUFDLE9BQUE7QUFDSCxJQUFBYyxZQUFBLEdBQUFmLHNCQUFBLENBQUFDLE9BQUE7QUFDRyxJQUFBZSxRQUFBLEdBQUFoQixzQkFBQSxDQUFBQyxPQUFBO0FBQ0osSUFBQWdCLGdCQUFBLEdBQUFqQixzQkFBQSxDQUFBQyxPQUFBO0FBQ1EsSUFBQWlCLGNBQUEsR0FBQWxCLHNCQUFBLENBQUFDLE9BQUE7QUFDRixJQUFBa0IsY0FBQSxHQUFBbkIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFtQixjQUFBLEdBQUFwQixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQW9CLG1CQUFBLEdBQUFyQixzQkFBQSxDQUFBQyxPQUFBO0FBQ0ssSUFBQXFCLGtCQUFBLEdBQUF0QixzQkFBQSxDQUFBQyxPQUFBO0FBQ0QsSUFBQXNCLGVBQUEsR0FBQXZCLHNCQUFBLENBQUFDLE9BQUE7QUFJM0IsU0FBQUQsdUJBQUF3QixHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBOzs7Ozs7Ozs7Ozs7O0FBQUEsTUFBTUcsT0FBQSxHQUFVLENBQUNDLG1CQUFBLEVBQVNDLG9CQUFBLEVBQVVDLHNCQUFBLEVBQVlDLHNCQUFBLEVBQVlDLHNCQUFBLEVBQVlDLHFCQUFBLEVBQVdDLG9CQUFBLEVBQVVDLGdCQUFBLEVBQU1DLHNCQUFBLEVBQVlDLGdCQUFBLEVBQU1DLG1CQUFBLEVBQVNDLDBCQUFBLEVBQWdCQyxvQkFBQSxFQUFVQyxrQkFBQSxFQUFPQyxvQkFBQSxFQUFVQyxnQkFBQSxFQUFNQyx3QkFBQSxFQUFjQyxzQkFBQSxFQUFZQyxzQkFBQSxFQUFZQyxzQkFBQSxFQUFZQywyQkFBQSxFQUFpQkMsMEJBQUEsRUFBZ0JDLHVCQUFBO0FBQ2xRQyxnQkFBQSxDQUFPQyxHQUFBLENBQUl6QixPQUFBIn0=","import $ from 'jquery';\nimport { $wrapper } from '../variables/variables.js';\n\n\n\n$(() => {\n\t// Create a phone mask\n\t(() => {\n\t\tconst TEL_MASK = '+7 (000) 000-00-00';\n\n\t\t$('.field__text[type=\"tel\"]').attr('maxlength', TEL_MASK.length).on('input', function() {\n\t\t\tlet val          = this.value,\n\t\t\t\tselectionEnd = this.selectionEnd;\n\n\t\t\tif (-1 !== TEL_MASK.indexOf('+7') && /^8/.test(val)) {\n\t\t\t\tval = val.replace('8', '7');\n\t\t\t}\n\t\t\tval = val.split('');\n\n\t\t\tfor (let i = 0; i < TEL_MASK.length; i++) {\n\t\t\t\tif (!val[i]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst IS_MASK_INT = '0' === TEL_MASK[i],\n\t\t\t\t\tIS_VAL_INT    = /\\d/g.test(val[i]) && (IS_MASK_INT || val[i] !== TEL_MASK[i]);\n\n\t\t\t\tif (IS_MASK_INT) {\n\t\t\t\t\tif (!IS_VAL_INT) {\n\t\t\t\t\t\tval.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (IS_VAL_INT) {\n\t\t\t\t\t\tval.splice(i, 0, TEL_MASK[i]);\n\n\t\t\t\t\t\tif (i <= selectionEnd && 1 <= (selectionEnd - i)) {\n\t\t\t\t\t\t\tselectionEnd++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tval[i] = TEL_MASK[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.value = val.join('').substring(0, TEL_MASK.length);\n\t\t\tthis.selectionStart = this.selectionEnd = selectionEnd;\n\t\t});\n\t})();\n\n\n\n\t// Increase/decrease a number\n\t$wrapper.on('plus minus', '.field__number', function(e) {\n\t\tlet $el = $(this),\n\t\t\tval = +$el.val().replace(',', '.');\n\n\t\tconst OLD_VAL = val,\n\t\t\tIS_PLUS   = 'plus' === e.type,\n\t\t\tMIN       = +$el.attr('data-min'),\n\t\t\tMAX       = +$el.attr('data-max'),\n\t\t\tSTEP      = +$el.attr('data-step') || 1,\n\t\t\tDIGITS    = ('' + STEP).replace(/^.+\\./,'').length || 0,\n\t\t\tNOT_MAX   = (!MAX || !val || (val + STEP <= MAX)),\n\t\t\tNOT_MIN   = (!MIN || !val || (MIN <= val - STEP));\n\n\t\tif (MIN && MAX && (MIN > MAX)) {\n\t\t\tval = IS_PLUS ? MIN : MAX;\n\t\t\t$el.val(+val.toFixed(DIGITS));\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (IS_PLUS && NOT_MAX) {\n\t\t\tval = (MIN && !val) ? ((MIN > MAX) ? MAX : MIN) : (val + STEP);\n\t\t\tval = (MIN && val < MIN) ? MIN : val;\n\t\t}\n\n\t\tif (!IS_PLUS && NOT_MIN) {\n\t\t\tval = (MIN && !val) ? MIN : (val - STEP);\n\t\t\tval = (MAX && val > MAX) ? MAX : val;\n\t\t}\n\t\tval = +val.toFixed(DIGITS);\n\t\tval = ('' + val).replace('.', ',');\n\t\t$el.val(val);\n\n\t\tif (OLD_VAL !== +val) {\n\t\t\t$el.trigger('change');\n\t\t}\n\t});\n\n\n\t// Input only the numbers\n\t$wrapper.on('input keydown contextmenu', '.field__number', function(e) {\n\t\tconst $el = $(this);\n\n\t\tlet val = $el.val().replace(',', '.').replace(/\\s/g, '');\n\n\t\tconst MAX               = $el.attr('data-max'),\n\t\t\tIS_CORRECT_LENGTH = !MAX || val.length <= MAX.length,\n\t\t\tSTEP              = $el.attr('data-step'),\n\t\t\tIS_STEP_FLOAT     = STEP ? ((+STEP % 1) !== 0) : false,\n\t\t\tpatternNumper     = IS_STEP_FLOAT ? /^$|^[0-9.,+-]+$/ : /^$|^[0-9+-]+$/;\n\n\t\tif (/Up|Down/g.test(e.key) && !/Page/g.test(e.key)) {\n\t\t\te.preventDefault();\n\t\t\t$el.trigger(/Up/g.test(e.key) ? 'plus' : 'minus');\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (patternNumper.test(val) && IS_CORRECT_LENGTH) {\n\t\t\tlet offset = $el[0].oldVal ? $el[0].oldVal.substring(0, $el[0].oldStart).replace(/\\S/g, '').length : 0;\n\n\t\t\tif (+val && $el.hasClass('field__number_price')) {\n\t\t\t\tval = (+val).toLocaleString().split(',')[0];\n\t\t\t}\n\t\t\tif ($el[0].oldVal) {\n\t\t\t\toffset = val.substring(0, $el[0].oldStart).replace(/\\S/g, '').length - offset;\n\t\t\t}\n\n\t\t\t$el.val(val);\n\t\t\tif (('input' === e.type) && (val === $el[0].oldVal)) {\n\t\t\t\t$el[0].selectionStart = $el[0].selectionEnd = $el[0].oldStart + offset;\n\t\t\t}\n\n\t\t\t$el[0].oldVal   = val;\n\t\t\t$el[0].oldStart = $el[0].selectionStart;\n\t\t\t$el[0].oldEnd   = $el[0].selectionEnd;\n\t\t} else if ($el[0].hasOwnProperty('oldVal')) {\n\t\t\tconst START = $el[0].oldStart,\n\t\t\t\tEND     = $el[0].oldEnd,\n\t\t\t\tLENGTH  = $el[0].oldVal.length;\n\n\t\t\tval = $el[0].oldVal.substring(0, START) + $el[0].oldVal.substring(END, LENGTH);\n\t\t\t$el.val(val);\n\t\t\t$el[0].selectionStart = $el[0].selectionEnd = START;\n\t\t}\n\t});\n\n\n\t// If on focusout or on change value above/below the limit then set the limit\n\t$wrapper.on('focusout change', '.field__number', function() {\n\t\tconst $input = $(this),\n\t\t\tVAL      = $input.val().replace(/\\s/g, ''),\n\t\t\tMIN      = +$input.attr('data-min'),\n\t\t\tMAX      = +$input.attr('data-max'),\n\t\t\tIS_PRICE = $input.hasClass('field__number_price');\n\n\t\tif ('' === VAL) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (+VAL < MIN) {\n\t\t\t$input.val(IS_PRICE ? MIN.toLocaleString().split(',')[0] : MIN);\n\t\t}\n\t\tif (MAX < +VAL) {\n\t\t\t$input.val(IS_PRICE ? MAX.toLocaleString().split(',')[0] : MAX);\n\t\t}\n\t});\n});\n","import $ from 'jquery';\nimport { $window, $wrapper, MIN_DELAY, TRANSITION } from '../variables/variables.js';\nimport loader from '../loader/loader.js';\nimport * as popup from '../popup/popup.js';\n\n\n\nfunction addError($el, text) {\n\tremoveError($el);\n\tif (text) {\n\t\t$el.addClass('form__error-control').parent().append('<span class=\"form__error-text\">' + text + '</span>');\n\t}\n\t$window.trigger('resize');\n}\n\n\n\nfunction removeError($el) {\n\tif ($el.hasClass('form__error-control')) {\n\t\t$el.removeClass('form__error-control').each(function() {\n\t\t\t$(this).parent().children('.form__error-text').remove();\n\t\t});\n\t\t$window.trigger('resize');\n\t}\n}\n\n\n\nfunction isComplete($el) {\n\tif ('checkbox' === $el.attr('type')) {\n\t\treturn $el.filter(':checked').length;\n\t}\n\n\treturn ($el.val() || '').trim();\n}\n\n\n\nfunction isValid($el) {\n\tconst patternEmail = /^[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/;\n\n\tconst TYPE         = $el.attr('type'),\n\t\tVAL            = $el.val(),\n\t\tIS_EMAIL       = 'email' === TYPE,\n\t\tIS_TEL         = 'tel' === TYPE,\n\t\tIS_EMAIL_VALID = patternEmail.test(VAL),\n\t\tIS_TEL_VALID   = /^\\+\\d\\s\\(\\d{3}\\)\\s\\d{3}-\\d{2}-\\d{2}$/.test(VAL);\n\n\tif ((IS_EMAIL && !IS_EMAIL_VALID) || (IS_TEL && !IS_TEL_VALID)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n\n\nfunction validate(success, error) {\n\treturn function(e) {\n\t\tlet $form      = $(this),\n\t\t\t$els       = $('[data-required]:visible, [data-error]:visible', this),\n\t\t\tisValidAll = true;\n\n\t\t$els.each(function() {\n\t\t\tlet $input         = $(this),\n\t\t\t\t$inputRequired = $input.filter('[data-required]'),\n\t\t\t\t$inputError    = $input.filter('[data-error]'),\n\t\t\t\tIS_COMPLETE    = $inputRequired.length ? isComplete($inputRequired) : true,\n\t\t\t\tIS_VALID       = $inputError.length ? (!isComplete($inputError) || isValid($inputError)) : true;\n\n\t\t\tif (!IS_COMPLETE) {\n\t\t\t\tisValidAll = false;\n\t\t\t\taddError($inputRequired, $inputRequired.attr('data-required'));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!IS_VALID) {\n\t\t\t\tisValidAll = false;\n\t\t\t\taddError($inputError, $inputError.attr('data-error'));\n\t\t\t}\n\t\t});\n\n\t\tif (!isValidAll) {\n\t\t\te.preventDefault();\n\t\t\tscrollTo($form.find('.form__error-control:visible'));\n\n\t\t\terror = error ? error : function() {};\n\t\t\terror.call(this, e);\n\n\t\t\treturn;\n\t\t}\n\t\tsuccess = success ? success : function() {};\n\t\tsuccess.call(this, e);\n\t}\n}\n\n\n\nfunction scrollTo($el, transition) {\n\tif (!$el.length) {\n\t\treturn;\n\t}\n\n\tsetTimeout(function() {\n\t\tlet $popup  = $el.closest('.popup__wrapper'),\n\t\t\t$parent = $popup.length ? $popup : $('html, body');\n\n\t\tconst OFFSET_TOP = $popup.length ? popup.getOffset($el).top : $el.offset().top,\n\t\t\tSCROLL_TOP   = OFFSET_TOP - (innerHeight - $el.height()) / 2;\n\n\t\tif (SCROLL_TOP) {\n\t\t\ttransition = (undefined !== transition) ? transition : TRANSITION;\n\t\t\t$parent.animate({\n\t\t\t\tscrollTop: SCROLL_TOP\n\t\t\t}, transition);\n\t\t}\n\t}, MIN_DELAY);\n}\n\n\n\n$(() => {\n\tscrollTo($('.form__error-control:visible'), 0);\n\n\n\n\t// Remove errors after changing value.\n\t$wrapper.on('input change', '[data-required], [data-error]', function() {\n\t\tremoveError($(this));\n\t});\n\n\n\n\t// Send form.\n\t$('.form_send').trigger('reset').on('submit', validate(function(e) {\n\t\tconst $form = $(this);\n\n\t\t$form.addClass('lock');\n\t\te.preventDefault();\n\t\t$\n\t\t\t.ajax({\n\t\t\t\ttype: 'post',\n\t\t\t\turl:  wp_data.admin_ajax,\n\t\t\t\tdata: $form.serialize(),\n\t\t\t})\n\t\t\t.done(loader($form, () => {\n\t\t\t\tpopup.open({\n\t\t\t\t\tid:      $form.attr('data-success'),\n\t\t\t\t\tcloseID: '#' + $('.popup_active').attr('id'),\n\t\t\t\t\tonOpen:  () => {\n\t\t\t\t\t\t$form.trigger('reset').removeClass('lock');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}));\n\t}));\n});\n\n\n\nexport { validate, scrollTo };\n","import $ from 'jquery';\nimport { MIN_DELAY } from '../variables/variables.js';\n\n\n\nfunction debounce( cb ) {\n\tlet timeoutID;\n\n\treturn () => {\n\t\tclearTimeout( timeoutID );\n\t\ttimeoutID = setTimeout( cb, MIN_DELAY )\n\t};\n}\n\n\n\nexport { debounce };\n","import $ from 'jquery';\nimport { TRANSITION, $window, $wrapper, breakpoint } from '../variables/variables.js';\nimport { debounce } from '../functions/functions.js';\nimport * as page from '../page/page.js';\n\n\n\nlet $header;\n\n\n\n$(() => {\n\t$header = $('.header');\n\n\n\n\tfunction toggleShadow() {\n\t\tconst SHADOW_SCROLL_TOP = 10;\n\n\t\tif (!page.isScroll) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (SHADOW_SCROLL_TOP < $window.scrollTop()) {\n\t\t\t$header.addClass('header_shadow');\n\t\t} else {\n\t\t\t$header.removeClass('header_shadow');\n\t\t}\n\t}\n\ttoggleShadow();\n\t$window.on('scroll', toggleShadow);\n\n\n\n\tconst togglePanel = (() => {\n\t\tlet toggleScrollTop = $header.innerHeight(),\n\t\t\toldInnerHeight  = innerHeight,\n\t\t\toldScrollTop;\n\n\t\t$window.on('resizeWidth', debounce(() => {\n\t\t\ttoggleScrollTop = $header.innerHeight();\n\t\t}));\n\n\t\treturn () => {\n\t\t\tconst SCROLL_TOP         = $window.scrollTop(),\n\t\t\t\tHAS_SCROLL           = SCROLL_TOP !== oldScrollTop,\n\t\t\t\tIS_TOGGLE_SCROLL_TOP = toggleScrollTop < SCROLL_TOP,\n\t\t\t\tIS_RESIZE_HEIGHT     = innerHeight !== oldInnerHeight;\n\n\t\t\tif (!page.isScroll || !HAS_SCROLL) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$header.removeClass('header_active-menu');\n\n\t\t\tif (IS_TOGGLE_SCROLL_TOP && !IS_RESIZE_HEIGHT) {\n\t\t\t\tconst IS_SCROLL_UP = SCROLL_TOP < oldScrollTop;\n\n\t\t\t\t// So that it is fixed on the desktop when loading.\n\t\t\t\tif (!breakpoint.isTablet) {\n\t\t\t\t\t$header.addClass('header_fixed');\n\t\t\t\t}\n\n\t\t\t\tif (IS_SCROLL_UP) {\n\t\t\t\t\t// So that it is fixed on the mobile when scroll up.\n\t\t\t\t\tif (breakpoint.isTablet) {\n\t\t\t\t\t\t$header.addClass('header_fixed');\n\t\t\t\t\t}\n\t\t\t\t\t$header.removeClass('header_out');\n\t\t\t\t} else {\n\t\t\t\t\t$header.addClass('header_out');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!IS_TOGGLE_SCROLL_TOP) {\n\t\t\t\t$header.removeClass('header_out');\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t$header.addClass('header_fixed');\n\t\t\t\t}, TRANSITION);\n\t\t\t}\n\t\t\toldScrollTop   = SCROLL_TOP;\n\t\t\toldInnerHeight = innerHeight;\n\t\t};\n\t})();\n\ttogglePanel();\n\t$window.on('scroll', togglePanel);\n\n\n\n\t// The menu on the mobile.\n\t(() => {\n\t\t//  Show/hide.\n\t\t$('.header__toggle').on('click', () => {\n\t\t\tif (breakpoint.isTablet) {\n\t\t\t\t$header.toggleClass('header_active-menu');\n\t\t\t\tpage.scrollToggle();\n\t\t\t}\n\t\t});\n\n\n\n\t\t// Hide when click outside.\n\t\t$wrapper.on('click', (e) => {\n\t\t\tif (breakpoint.isTablet &&\n\t\t\t\t\t$header.hasClass('header_active-menu') &&\n\t\t\t\t\t!$(e.target).closest('.header__toggle, .header__menu').length) {\n\t\t\t\tpage.scrollOn();\n\t\t\t\t$header.removeClass('header_active-menu')\n\t\t\t}\n\t\t});\n\n\n\n\t\t// Enable/disable the scroll page when changing the window width.\n\t\t$window.on('resizeWidth', debounce(() => {\n\t\t\tconst IS_ACTIVE_MENU         = $header.hasClass('header_active-menu'),\n\t\t\t\tIS_ENABLE_SCROLL_DESKTOP = (IS_ACTIVE_MENU && !page.isScroll && !breakpoint.isTablet),\n\t\t\t\tIS_DISABLE_SCROLL_MOBILE = (IS_ACTIVE_MENU && page.isScroll && breakpoint.isTablet);\n\n\t\t\tif (IS_ENABLE_SCROLL_DESKTOP || IS_DISABLE_SCROLL_MOBILE) {\n\t\t\t\tpage.scrollToggle();\n\t\t\t}\n\t\t}));\n\t})();\n});\n","import $ from 'jquery';\nimport Swiper from 'swiper/swiper-bundle.min';\n\n\n\n$(() => {\n\tif (!$('.home').length) {\n\t\treturn;\n\t}\n});\n","import $ from 'jquery';\n\n\n\nlet $elems,\n\tobservers = [];\n\n\n\nfunction observe($el, cb) {\n\tif (window.IntersectionObserver) {\n\t\tconst observer = new IntersectionObserver((entries, observer) => {\n\t\t\tentries.forEach((entry) => {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tcb()\n\t\t\t\t\tobserver.unobserve($el[0]);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tobserver.observe($el[0]);\n\t} else {\n\t\tcb();\n\t}\n}\n\n\nfunction load($elem) {\n\tif ($elem[0].dataset.src) {\n\t\t$elem.attr('src', $elem[0].dataset.src);\n\t}\n\tif ($elem[0].dataset.bg) {\n\t\t$elem.css('background-image', 'url(' + $elem[0].dataset.bg + ')');\n\t}\n}\n\n\nfunction init() {\n\tobservers.forEach(function(observer, i) {\n\t\tobserver.unobserve($elems.eq(i)[0]);\n\t});\n\n\t$elems    = $('[data-src], [data-bg]');\n\tobservers = [];\n\n\t$elems.each(function() {\n\t\tconst $elem = $(this);\n\n\t\tobserve($elem, () => {\n\t\t\tload($elem);\n\t\t});\n\t});\n}\n\n\n\n\n$(() => {\n\tinit();\n});\n\n\n\nexport { observe, init };\n","import $ from 'jquery';\nimport { $window, MIN_DELAY, TRANSITION } from '../variables/variables.js';\nimport { isScroll } from '../page/page.js';\n\nfunction addDataTimeoutID( $loader, timeoutID ) {\n\tlet timeoutIDs = $loader.data( 'timeoutIDs' ) || [];\n\n\ttimeoutIDs.push( timeoutID );\n\t$loader.data( 'timeoutIDs', timeoutIDs );\n}\n\nexport default ( $parent, callback ) => {\n\tconst $loader = $parent.find( '.loader' );\n\n\tlet delay      = new Date().getTime();\n\tlet timeoutIDs = $loader.data( 'timeoutIDs' ) || [];\n\n\twhile( timeoutIDs.length ) {\n\t\tclearTimeout( timeoutIDs.shift() );\n\t}\n\t$loader.addClass( 'loader_animate' );\n\n\tconst TIMEOUT_ID1 = setTimeout( () => {\n\t\t$loader.addClass( 'loader_active' );\n\t}, MIN_DELAY );\n\n\taddDataTimeoutID( $loader, TIMEOUT_ID1 );\n\n\treturn function() {\n\t\tconst callArguments = arguments;\n\t\tconst MIN_DELAY     = 700;\n\n\t\tdelay = MIN_DELAY - ( new Date().getTime() - delay );\n\t\tdelay = Math.max( delay, 0 );\n\n\t\tconst TIMEOUT_ID2 = setTimeout( () => {\n\t\t\tcallback.apply( null, callArguments );\n\t\t\t$loader.removeClass( 'loader_animate' );\n\n\t\t\tlet TIMEOUT_ID3 =setTimeout( () => {\n\t\t\t\t$loader.removeClass( 'loader_active' );\n\t\t\t}, TRANSITION + 1 );\n\n\t\t\taddDataTimeoutID( $loader, TIMEOUT_ID3 );\n\t\t}, delay );\n\n\t\taddDataTimeoutID( $loader, TIMEOUT_ID2 );\n\t};\n};\n","import $ from 'jquery';\nimport { MIN_DELAY, $window, $wrapper, isMobile } from '../variables/variables.js';\nimport { debounce } from '../functions/functions.js';\n\n\nconst patternApple = /iPhone|iPad|iPod|Mac/i;\n\nlet isScroll = true,\n\tisIOS    = patternApple.test(navigator.platform) && navigator.maxTouchPoints > 1,\n\t$el,\n\tscrollTop;\n\n\n\nconst compensateScrollbar = (function() {\n\tconst getScrollbarWidth = (() => {\n\t\tconst $outer = $('<div>'),\n\t\t\t$inner   = $('<div>');\n\n\t\treturn () => {\n\t\t\t$outer.css('overflow-y', 'scroll');\n\t\t\t$inner.appendTo($outer);\n\t\t\t$outer.appendTo($el);\n\n\t\t\tconst RESULT = ($el.height() !== $wrapper.height()) ? ($outer.width() - $inner.width()) : 0;\n\n\t\t\t$outer.remove();\n\n\t\t\treturn RESULT;\n\t\t};\n\t})();\n\n\n\n\tconst $paddingElems = $('.page__compensate-scrollbar').filter(function() {\n\t\treturn -1 === ['absolute', 'fixed'].indexOf($(this).css('position'));\n\t});\n\n\tconst $marginElems = $('.page__compensate-scrollbar').not($paddingElems);\n\n\n\n\treturn () => {\n\t\t$paddingElems.each(function() {\n\t\t\tconst $paddingElem    = $(this),\n\t\t\t\t$popup          = $paddingElem.closest('.popup'),\n\t\t\t\tIS_ACTIVE_POPUP = $popup.hasClass('popup_active');\n\n\t\t\tif (!IS_ACTIVE_POPUP) {\n\t\t\t\t$popup.addClass('popup_active');\n\t\t\t}\n\n\t\t\tvar HAS_SCROLLBAR = 1 < Math.abs($paddingElem.outerHeight() - $paddingElem[0].scrollHeight);\n\n\t\t\tif (isScroll || HAS_SCROLLBAR) {\n\t\t\t\t$paddingElem.css('padding-right', 0);\n\t\t\t} else {\n\t\t\t\t$paddingElem.css('padding-right', getScrollbarWidth());\n\t\t\t}\n\n\t\t\tif (!IS_ACTIVE_POPUP) {\n\t\t\t\t$popup.removeClass('popup_active');\n\t\t\t}\n\t\t});\n\t\t$marginElems.css('margin-right', isScroll ? 0 : getScrollbarWidth());\n\t};\n})();\n\n\n\nfunction scrollOn() {\n\tif (!isScroll) {\n\t\tisScroll = true;\n\t\tcompensateScrollbar();\n\t\t$el.attr('style', '');\n\n\t\t// On the desktop also need, since when the window shrinks then the page offsets, so forsed set the scroll page position.\n\t\t$window.scrollTop(scrollTop);\n\n\t\tif (isIOS) {\n\t\t\tsetTimeout(() => {\n\t\t\t\t$window.scrollTop(scrollTop);\n\t\t\t}, MIN_DELAY);\n\t\t}\n\t}\n}\n\n\n\nfunction fixed() {\n\t$el.css({\n\t\tposition: 'fixed',\n\t\ttop:      -scrollTop,\n\t\tleft:     0,\n\t\tright:    0,\n\t});\n}\nfunction scrollOff() {\n\tif (isScroll) {\n\t\tscrollTop = $window.scrollTop();\n\t\tisScroll  = false;\n\t\tcompensateScrollbar();\n\n\t\tif (!isIOS) {\n\t\t\t$el.css('overflow', 'hidden');\n\n\t\t\t// On the desktop when the window shrinks then the page offsets, so forsed set the scroll page position.\n\t\t\t$window.scrollTop(scrollTop);\n\t\t} else {\n\t\t\t// Sometimes on the Safari IOS jumps to the top of the page which is why needs a delay.\n\t\t\tfixed();\n\t\t\tsetTimeout(fixed, MIN_DELAY);\n\t\t}\n\t}\n}\n\n\n\nfunction scrollToggle() {\n\tif (isScroll) {\n\t\tscrollOff();\n\t} else {\n\t\tscrollOn();\n\t}\n}\n\n\n\n$(() => {\n\t$el = $('.page');\n\n\t$window.on('resize', debounce(() => {\n\t\tisIOS = patternApple.test(navigator.platform) && navigator.maxTouchPoints > 1;\n\t\tcompensateScrollbar();\n\t}));\n\n\n\n\t// Disable css transition on resize/\n\t$window.on('resize', debounce(() => {\n\t\t$el.addClass('trans-off');\n\t\tsetTimeout(() => {\n\t\t\t$el.removeClass('trans-off');\n\t\t}, MIN_DELAY);\n\t}));\n\n\n\n\tfunction toggleMobile() {\n\t\tif (isMobile) {\n\t\t\t$el.addClass('page_mobile');\n\t\t} else {\n\t\t\t$el.removeClass('page_mobile');\n\t\t}\n\t}\n\ttoggleMobile();\n\t$window.on('resize', debounce(toggleMobile));\n\n\n\n\t// Prevent the selection of elemnts by double clicking.\n\t(() => {\n\t\tconst CLICK_DELAY = 1000;\n\t\tlet timeoutID;\n\n\t\t$el.on('dblclick', () => {\n\t\t\t$el.css('user-select', 'none');\n\t\t\tclearTimeout(timeoutID);\n\n\t\t\ttimeoutID = setTimeout(() => {\n\t\t\t\t$el.css('user-select', 'unset');\n\t\t\t}, CLICK_DELAY);\n\t\t});\n\t})();\n});\n\n\n\nexport { $el, isScroll, scrollOn, scrollOff, scrollToggle };\n","import $ from 'jquery';\nimport PhotoSwipe from 'photoswipe/dist/photoswipe.esm.min';\nimport PhotoSwipeLightbox from 'photoswipe/dist/photoswipe-lightbox.esm.min';\nimport { $wrapper, MIN_DELAY, TRANSITION } from '../variables/variables.js';\nimport * as page from '../page/page.js';\nimport { init as svgUseExternalUpdate } from '../svg-use-external/svg-use-external.js';\n\n\n\nfunction close($el) {\n\t$el.removeClass('popup_animate');\n\tsetTimeout(function() {\n\t\t$el.removeClass('popup_active');\n\t\tif (!$('.popup_active').length) {\n\t\t\tpage.scrollOn();\n\t\t}\n\t}, TRANSITION);\n}\n\n\n\nfunction open(options) {\n\toptions = $.extend({\n\t\tid:       null,\n\t\tcloseID:  null,\n\t\tposition: 0,\n\t\tonOpen:   () => {},\n\t}, options);\n\n\tconst $popup    = $(options.id),\n\t\t$popupClose = $(options.closeID),\n\t\tDELAY       = $popupClose.length ? TRANSITION : 0;\n\n\n\tif ($popupClose.length) {\n\t\tclose($popupClose);\n\t} else {\n\t\tpage.scrollOff();\n\t}\n\t$popup.addClass('popup_active');\n\n\tsetTimeout(() => {\n\t\toptions.onOpen();\n\n\t\tsetTimeout(() => {\n\t\t\t$popup.addClass('popup_animate');\n\t\t}, MIN_DELAY);\n\t}, DELAY);\n\n\n\tconst $popupTitle = $popup.find('.popup__title'),\n\t\t$inputTitle   = $popup.find('[name=\"title\"]');\n\n\tconst POPUP_TITLE = options.title || $popupTitle.attr('data-title');\n\n\tif (POPUP_TITLE) {\n\t\t$popupTitle.text(POPUP_TITLE);\n\t\t$inputTitle.val(POPUP_TITLE);\n\t}\n}\n\n\n\nfunction getOffset($el) {\n\tlet $parent = $el.offsetParent();\n\n\tconst $box = $el.closest('.popup__box'),\n\t\tresult = $el.position();\n\n\tif (($parent[0] !== $box[0]) && !$.contains($box[0], $parent[0])) {\n\t\treturn;\n\t}\n\n\tresult.top += parseFloat($box.parent('.popup__content').css('padding-top'));\n\twhile ($parent[0] !== $box[0]) {\n\t\tlet position = $parent.position();\n\n\t\tresult.top  += position.top;\n\t\tresult.left += position.left;\n\t\t$parent = $parent.offsetParent();\n\t}\n\n\treturn result;\n}\n\n\n\nfunction createGallery(opts) {\n\tconst lightbox = new PhotoSwipeLightbox($.extend({\n\t\tshowHideAnimationType: 'fade',\n\t\ttapAction:             'close',\n\t\tloop:                  false,\n\t\tpswpModule:            PhotoSwipe,\n\t}, opts));\n\n\tlightbox.init();\n\n\tif (opts.dataSource) {\n\t\tlightbox.loadAndOpen(0);\n\t}\n}\n\n\n\n$(() => {\n\t// Open the popup on click.\n\t$wrapper.on('click', '.open-popup', function(e) {\n\t\tconst $button   = $(this),\n\t\t\t$closePopup = $('.popup_active'),\n\t\t\tDELAY       = +$button.attr('data-delay') || 0;\n\n\t\tif ($button.hasClass('open-popup_active')) {\n\t\t\treturn;\n\t\t}\n\t\t$button.addClass('open-popup_active');\n\n\t\te.preventDefault();\n\t\tsetTimeout(() => {\n\t\t\topen({\n\t\t\t\tid:      $button.attr('href'),\n\t\t\t\tcloseID: $closePopup.length ? ('#' + $closePopup.attr('id')) : null,\n\t\t\t\ttitle:   $button.attr('data-title'),\n\t\t\t});\n\t\t\t$button.removeClass('open-popup_active');\n\t\t}, DELAY);\n\t});\n\n\n\n\t// Close the popup on click Esc on the mouseboard.\n\t$wrapper.on('keydown', function(e) {\n\t\tif (-1 !== ('' + e.key).indexOf('Esc')) {\n\t\t\t$('.popup_active .popup__close').trigger('click');\n\t\t}\n\t});\n\n\n\n\t// Close the popup.\n\t$wrapper.on('click', '.popup', function(e) {\n\t\tconst $target = $(e.target),\n\t\t\tIS_CLOSE  = $target.closest('.popup__close').length,\n\t\t\tIS_BOX    = $target.closest('.popup__box').length,\n\t\t\tIS_SLIDER = $target.closest('.popup__slider').length;\n\n\t\tif ((!IS_BOX && !IS_SLIDER) || IS_CLOSE) {\n\t\t\tclose($target.closest('.popup'));\n\t\t}\n\t});\n\n\n\n\t// Create a gallery.\n\tcreateGallery({\n\t\tgallery:  '.popup-gallery',\n\t\tchildren: '[data-pswp-width][data-pswp-height]',\n\t});\n});\n\n\n\nexport { open, getOffset, createGallery };\n","import $ from 'jquery';\nimport { $window, isMobile, MIN_DELAY } from '../variables/variables.js';\n\n\n\nclass Select {\n\tconstructor(el) {\n\t\tthis.$el       = $(el);\n\t\tthis.$default  = this.$el.children('.select__default');\n\t\tthis.$head     = this.$el.children('.select__head');\n\t\tthis.iSelected = 0;\n\n\t\tthis.$el.addClass('select_init');\n\t\tthis.toggleEventMobile();\n\t\tthis.addEventHead();\n\t\tthis.createItems();\n\t\tthis.addEventsItems();\n\t\tthis.addEventOutside();\n\t\tthis.addEventDefault();\n\t}\n\n\n\n\ttoggleEventMobile() {\n\t\tlet isSelectMobile = false;\n\n\n\t\tvar toggle = () => {\n\t\t\tif (isMobile && !isSelectMobile) {\n\t\t\t\tthis.$el.addClass('select_mobile');\n\t\t\t\tisSelectMobile = true;\n\t\t\t}\n\t\t\tif (!isMobile && isSelectMobile) {\n\t\t\t\tthis.$el.removeClass('select_mobile');\n\t\t\t\tisSelectMobile = false;\n\t\t\t}\n\t\t}\n\t\ttoggle();\n\t\t$window.on('resize', toggle);\n\t}\n\n\n\n\taddEventHead() {\n\t\tthis.$head.on('click', () => {\n\t\t\tthis.$el.toggleClass('select_active');\n\t\t\tthis.$items.removeClass('select__item_active'); \n\t\t\tthis.$items.eq(this.iSelected).addClass('select__item_active');\n\t\t});\n\t}\n\n\n\n\tcreateItems() {\n\t\tlet self      = this,\n\t\t\t$options  = self.$default.children('option'),\n\t\t\t$selected = $options.filter('[selected]'),\n\t\t\tlist      = '<ul class=\"select__list\">';\n\n\t\t$selected = $selected.length ? $selected : $options.filter(':not([disabled])').eq(0);\n\t\tthis.$head.text($selected.text());\n\n\t\t$options.each(function() {\n\t\t\tlet $option   = $(this),\n\t\t\t\tattrClass = 'select__item',\n\t\t\t\tattrValue = $option.attr('value');\n\n\t\t\tif ($option.attr('disabled')) {\n\t\t\t\tattrClass += ' select__item_disable';\n\t\t\t}\n\t\t\tif ($option.attr('selected')) {\n\t\t\t\tattrClass += ' select__item_active';\n\t\t\t\tself.iSelected = $option.index();\n\t\t\t}\n\n\t\t\tattrValue = attrValue ? 'data-value=\"' + attrValue + '\"' : '';\n\t\t\tlist += '<li class=\"' + attrClass + '\"' + attrValue + '>' + $option.text() + '</li>';\n\t\t});\n\t\tlist += '</ul>';\n\n\t\tthis.$el.append(list);\n\t\tthis.$items = this.$el.find('.select__item');\n\t}\n\n\n\n\taddEventsItems() {\n\t\tlet self = this;\n\n\t\tself.$items\n\t\t\t.on('mouseenter', function() {\n\t\t\t\tlet $item = $(this);\n\n\t\t\t\tif (!$item.hasClass('select__item_disable')) {\n\t\t\t\t\tself.$items.removeClass('select__item_active'); \n\t\t\t\t\t$item.addClass('select__item_active');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('click', function() {\n\t\t\t\tlet $item = $(this),\n\t\t\t\t\tval   = $item.attr('data-value') || $item.text();\n\n\t\t\t\tif (!$item.hasClass('select__item_disable')) {\n\t\t\t\t\tself.iSelected = $item.index();\n\n\t\t\t\t\tif (val !== self.$default.val()) {\n\t\t\t\t\t\tself.$default.val(val).trigger('change');\n\t\t\t\t\t}\n\t\t\t\t\tself.$el.removeClass('select_active');\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\n\n\taddEventOutside() {\n\t\t$('body').on('click', (e) => {\n\t\t\tif (this.$el.hasClass('select_active') && !$(e.target).closest(this.$el).length) {\n\t\t\t\tthis.$el.removeClass('select_active');\n\t\t\t\tthis.$items.removeClass('select__item_active'); \n\t\t\t\tthis.$items.eq(this.iSelected).addClass('select__item_active');\n\t\t\t}\n\t\t});\n\t}\n\n\n\n\taddEventDefault() {\n\t\tlet self = this;\n\n\t\tfunction reinit() {\n\t\t\tself.$default.prop('selectedIndex', -1).trigger('change');\n\t\t\tself.$el.find('.select__list').remove();\n\t\t\tself.createItems();\n\t\t\tself.addEventsItems();\n\t\t}\n\n\t\tself.$default\n\t\t\t.on('change changeVal', function() {\n\t\t\t\t// Delay is needed because when the page loads the value of the select is not defidned.\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst VAL = self.$default.val();\n\n\t\t\t\t\tif (!VAL) {\n\t\t\t\t\t\tself.$el.addClass('select_empty');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.$el.removeClass('select_empty');\n\t\t\t\t\t}\n\n\t\t\t\t\tself.$items.each(function(i) {\n\t\t\t\t\t\tlet $item = $(this),\n\t\t\t\t\t\t\ttext  = $item.text();\n\n\t\t\t\t\t\tif ((VAL === $item.attr('data-value')) || (VAL === text) || (!VAL && $item.hasClass('select__item_disable'))) {\n\t\t\t\t\t\t\tself.iSelected = i;\n\t\t\t\t\t\t\tself.$head.text(text);\n\t\t\t\t\t\t\tself.$items.removeClass('select__item_active'); \n\t\t\t\t\t\t\t$item.addClass('select__item_active');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, MIN_DELAY);\n\t\t\t})\n\t\t\t.on('changeHtml', reinit)\n\t\t\t.closest('form').on('reset', reinit);\n\t}\n}\n\n\n\nfunction init() {\n\t$('.select:not(.select_init)').each(function() {\n\t\tnew Select(this);\n\t});\n}\n\n\n\n$(() => {\n\tinit();\n});\n\n\n\nexport { init };\n","import $ from 'jquery';\nimport { $window, MIN_DELAY } from '../variables/variables.js';\nimport { debounce } from '../functions/functions.js';\n\n\n\nfunction init() {\n\tif (/MSIE|trident/i.test(navigator.userAgent)) {\n\t\tlet $uses = $('use');\n\n\t\tif (!$uses.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst SPRITE_HREF = $uses.attr('xlink:href').split('#').shift();\n\n\t\t$.get(SPRITE_HREF, (sprite) => {\n\t\t\t$uses.each(function() {\n\t\t\t\tlet $use = $(this);\n\n\t\t\t\tconst ID = $use.attr('xlink:href').split('#').pop();\n\n\t\t\t\tlet svg = sprite.getElementById(ID);\n\n\t\t\t\tif (-1 === $use.attr('xlink:href').indexOf(SPRITE_HREF)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (svg) {\n\t\t\t\t\tsvg = svg.cloneNode(true);\n\t\t\t\t\tsvg.removeAttribute('id');\n\t\t\t\t\t$use.replaceWith(svg);\n\t\t\t\t} else {\n\t\t\t\t\t$use.remove();\n\t\t\t\t}\n\t\t\t});\n\t\t\tinit();\n\t\t});\n\t}\n}\n\n\n\n$(() => {\n\tinit();\n\t$window.on('resizeWidth', debounce(() => {\n\t\tsetTimeout(init, MIN_DELAY);\n\t}));\n});\n\n\n\nexport { init };\n","import $ from 'jquery';\nimport { $window, isMobile } from '../variables/variables.js';\nimport { debounce } from '../functions/functions.js';\n\n\n\n$(() => {\n\tlet tag    = '<a',\n\t\toldTag = tag;\n\n\tfunction replace() {\n\t\ttag = isMobile ? '<a' : '<div';\n\t\tif (tag === oldTag) { \n\t\t\treturn;\n\t\t}\n\n\t\t$('.tel').each(function() {\n\t\t\tlet $tel    = $(this),\n\t\t\t\tcontent = $tel.html(),\n\t\t\t\twrapper = $('<div>').append($tel.html('').clone()).html();\n\n\t\t\twrapper = wrapper.replace(oldTag, tag);\n\t\t\twrapper = wrapper.replace(oldTag.replace('<', '</'), tag.replace('<', '</'));\n\t\t\twrapper = $(wrapper).html(content)\n\t\t\t$tel.replaceWith(wrapper);\n\t\t});\n\t\toldTag = tag;\n\t}\n\treplace();\n\t$window.on('resize', debounce(replace));\n});\n","import $ from 'jquery';\nimport { debounce } from '../functions/functions.js';\n\n\n\nconst PREV_ARROW = `<button type=\"button\" class=\"slick-prev\">\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 9 14\">\n\t\t<rect transform=\"rotate(42)\" x=\"4.5799\" y=\"3.3533\" width=\"10.9\" height=\"2.1\" ry=\"1.1\"/>\n\t\t<rect transform=\"rotate(-42)\" x=\"-4.7985\" y=\"4.9413\" width=\"10.9\" height=\"2.1\" ry=\"1.1\"/>\n\t</svg>\n</button>`;\n\nconst NEXT_ARROW = PREV_ARROW.replace('prev', 'next'),\n\tTRANSITION   = 300,\n\tMIN_DELAY    = 50, // The minimum delay at which the function in setTimeout is called earlier than the main code.\n\tregDevices   = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n\nlet isMobile       = regDevices.test(navigator.userAgent),\n\toldWindowWidth = innerWidth,\n\t$window,\n\t$wrapper;\n\n\nconst breakpoint = {\n\tTABLET: 1280,\n\tPHONE:  600,\n\n\tsetState: () => {\n\t\tbreakpoint.isTablet = innerWidth <= breakpoint.TABLET;\n\t\tbreakpoint.isPhone  = innerWidth <= breakpoint.PHONE;\n\t}\n};\nbreakpoint.setState();\n\n\n$(() => {\n\t$window  = $(window);\n\t$wrapper = $('.page__wrapper');\n\n\t$window\n\t\t.on('resize', debounce(() => {\n\t\t\tisMobile = regDevices.test(navigator.userAgent);\n\n\t\t\tif (oldWindowWidth !== innerWidth) {\n\t\t\t\toldWindowWidth = innerWidth;\n\t\t\t\t$window.trigger('resizeWidth');\n\t\t\t}\n\t\t}))\n\t\t.on('resizeWidth', debounce(breakpoint.setState));\n});\n\n\n\nexport { PREV_ARROW, NEXT_ARROW, TRANSITION, MIN_DELAY, $window, $wrapper, breakpoint, isMobile };\n","import '../components/tel/tel.js';\nimport '../components/field/field.js';\nimport '../components/select/select.js';\nimport '../components/form/form.js';\nimport '../components/lazyload/lazyload.js';\nimport '../components/popup/popup.js';\nimport '../components/header/header.js';\n\nimport '../components/home/home.js';\n\nimport '../components/svg-use-external/svg-use-external.js';\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwibm9kZV9tb2R1bGVzL3Bob3Rvc3dpcGUvZGlzdC9waG90b3N3aXBlLWxpZ2h0Ym94LmVzbS5taW4uanMiLCJub2RlX21vZHVsZXMvcGhvdG9zd2lwZS9kaXN0L3Bob3Rvc3dpcGUuZXNtLm1pbi5qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9hMTF5Lm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvYXV0b3BsYXkubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9jb250cm9sbGVyLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNhcmRzLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNvdmVyZmxvdy5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1jcmVhdGl2ZS5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1jdWJlLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZhZGUubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmxpcC5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ZyZWUtbW9kZS5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2dyaWQubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oYXNoLW5hdmlnYXRpb24ubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oaXN0b3J5Lm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMva2V5Ym9hcmQubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24ubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tb3VzZXdoZWVsLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24ubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYXJhbGxheC5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3Njcm9sbGJhci5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3RodW1icy5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3ZpcnR1YWwubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy96b29tLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLXNoYWRvdy5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LWluaXQubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC10YXJnZXQubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zc3Itd2luZG93LmVzbS5taW4ubWpzIiwibm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3dpcGVyLWNvcmUubWluLm1qcyIsIm5vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLm1pbi5tanMiLCJub2RlX21vZHVsZXMvc3dpcGVyL3N3aXBlci1idW5kbGUubWluLm1qcyIsInJlc291cmNlcy9jb21wb25lbnRzL2ZpZWxkL2ZpZWxkLmpzIiwicmVzb3VyY2VzL2NvbXBvbmVudHMvZm9ybS9mb3JtLmpzIiwicmVzb3VyY2VzL2NvbXBvbmVudHMvZnVuY3Rpb25zL2Z1bmN0aW9ucy5qcyIsInJlc291cmNlcy9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuanMiLCJyZXNvdXJjZXMvY29tcG9uZW50cy9ob21lL2hvbWUuanMiLCJyZXNvdXJjZXMvY29tcG9uZW50cy9sYXp5bG9hZC9sYXp5bG9hZC5qcyIsInJlc291cmNlcy9jb21wb25lbnRzL2xvYWRlci9sb2FkZXIuanMiLCJyZXNvdXJjZXMvY29tcG9uZW50cy9wYWdlL3BhZ2UuanMiLCJyZXNvdXJjZXMvY29tcG9uZW50cy9wb3B1cC9wb3B1cC5qcyIsInJlc291cmNlcy9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuanMiLCJyZXNvdXJjZXMvY29tcG9uZW50cy9zdmctdXNlLWV4dGVybmFsL3N2Zy11c2UtZXh0ZXJuYWwuanMiLCJyZXNvdXJjZXMvY29tcG9uZW50cy90ZWwvdGVsLmpzIiwicmVzb3VyY2VzL2NvbXBvbmVudHMvdmFyaWFibGVzL3ZhcmlhYmxlcy5qcyIsInJlc291cmNlcy9qcy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDaDlVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsTUFBTSxDQUFDLEdBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7RUFBQyxPQUFPLENBQUMsS0FBRyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7QUFBQTtBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsUUFBUSxJQUFFLE9BQU8sQ0FBQyxHQUFFLEdBQUUsQ0FBRSxJQUFHLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFDLFFBQVEsSUFBRSxPQUFPLENBQUMsR0FBRSxHQUFFLENBQUUsSUFBRyxHQUFDLENBQUM7QUFBQTtBQUFDLE1BQU0sQ0FBQyxHQUFDLE1BQU07RUFBQyxDQUFDLEdBQUMsU0FBUztFQUFDLENBQUMsR0FBQyxRQUFRO0VBQUMsQ0FBQyxHQUFDLE9BQU87QUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxRQUFRLEVBQUM7RUFBQyxJQUFJLENBQUMsR0FBQyxFQUFFO0VBQUMsSUFBRyxDQUFDLFlBQVksT0FBTyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLFlBQVksUUFBUSxJQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSTtJQUFDLE1BQU0sQ0FBQyxHQUFDLFFBQVEsSUFBRSxPQUFPLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQztJQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsT0FBTyxDQUFDO0FBQUE7QUFBQyxTQUFTLENBQUMsQ0FBQSxFQUFFO0VBQUMsT0FBTSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQUE7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxjQUFjLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBQyxDQUFDLENBQUM7RUFBQTtBQUFDO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFDLGtDQUFrQyxFQUFDLENBQUMsR0FBQyxLQUFLLEdBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztNQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPO01BQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUMsY0FBYyxDQUFDO0lBQUE7SUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUMsTUFBTSxDQUFDO0VBQUE7RUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLE9BQU8sS0FBRyxLQUFLLEtBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7TUFBQyxJQUFJLENBQUMsR0FBRSxlQUFjLENBQUUsTUFBSyxDQUFDLElBQUUsQ0FBRSxPQUFNO01BQUMsT0FBTyxLQUFLLENBQUMsS0FBRyxDQUFDLEtBQUcsQ0FBQyxJQUFHLFlBQVcsQ0FBRSxJQUFHLENBQUUsS0FBSSxDQUFDLEVBQUMsQ0FBQztJQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLE9BQU8sQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsSUFBSTtFQUFBO0FBQUM7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsbUJBQW1CLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxvQkFBb0IsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsSUFBSSxHQUFDLE9BQU8sR0FBQyxJQUFJLENBQUMsSUFBSSxHQUFDLE1BQU0sRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUM7TUFBQyxPQUFPLEVBQUM7SUFBSSxDQUFDLENBQUM7RUFBQTtFQUFDLGlCQUFpQixDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsV0FBVyxJQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUUsVUFBVSxDQUFFLE1BQUk7TUFBQyxJQUFJLENBQUMsV0FBVyxLQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLEtBQUssQ0FBQyxDQUFDO0lBQUEsQ0FBQyxFQUFFLEdBQUcsQ0FBQztFQUFBO0VBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLElBQUksQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsSUFBRyxJQUFJLENBQUMsV0FBVyxFQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO01BQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsSUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQUEsQ0FBQyxNQUFJO01BQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxJQUFJLENBQUM7TUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUFBO0lBQUMsSUFBSSxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUM7TUFBQyxPQUFPLEVBQUMsSUFBSTtNQUFDLE1BQU0sRUFBQztJQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixLQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsbUJBQW1CLElBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUUsRUFBRSxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxTQUFTLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsRUFBQztNQUFDLE9BQU8sRUFBQyxJQUFJO01BQUMsTUFBTSxFQUFDO0lBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUM7SUFBTyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTztJQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUUsRUFBRSxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxNQUFJO01BQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsTUFBSTtNQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUMsQ0FBQztFQUFBO0VBQUMsUUFBUSxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsSUFBSTtFQUFBO0VBQUMsUUFBUSxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxJQUFFLElBQUksQ0FBQyxPQUFPLEtBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFDO01BQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxLQUFLO01BQUMsT0FBTyxFQUFDO0lBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLElBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxLQUFHLENBQUMsSUFBRSxJQUFJLENBQUMsS0FBSyxLQUFHLENBQUMsSUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxPQUFPLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEtBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFDO01BQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxLQUFLO01BQUMsT0FBTyxF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RUFBRTtJQUFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsdUJBQXVCLEVBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDO0VBQUE7RUFBQyxRQUFRLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFDO01BQUMsT0FBTyxFQUFDO0lBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsZUFBZSxDQUFBLEVBQUU7SUFBQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLHNCQUFzQixFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQztFQUFBO0VBQUMsT0FBTyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUM7TUFBQyxPQUFPLEVBQUM7SUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsS0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxLQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLE9BQU8sS0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsWUFBWSxDQUFBLEVBQUU7SUFBQyxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUM7TUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUMsS0FBSyxDQUFDO01BQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLElBQUUsRUFBRSxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMseUNBQXlDLEVBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUFBO0VBQUM7RUFBQyxNQUFNLENBQUEsRUFBRTtJQUFDLElBQUcsSUFBSSxDQUFDLFVBQVUsSUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUM7SUFBTyxJQUFHLElBQUksQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssS0FBRyxDQUFDLEVBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUFDLElBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFDO01BQUMsT0FBTyxFQUFDO0lBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUM7SUFBTyxNQUFNLENBQUMsSUFBQyxRQUFRLElBQUcsSUFBSSxDQUFDLE9BQU87SUFBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsSUFBSSxD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QUM7QUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQztFQUFDLElBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUk7SUFBQyxNQUFNLENBQUMsR0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQztBQUFBO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsQ0FBQztFQUFBO0VBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUM7TUFBQyxVQUFVLEVBQUMsSUFBSTtNQUFDLFNBQVMsRUFBQyxJQUFJLENBQUM7SUFBUSxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLEdBQUMsV0FBVztNQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUcsQ0FBQyxFQUFDLE9BQU0sVUFBVSxJQUFFLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxNQUFNLEtBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsS0FBSyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxHQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFBQyxPQUFPLENBQUMsS0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxJQUFFLENBQUMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBQyxHQUFHLEtBQUcsQ0FBQyxHQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFBLEVBQUU7SUFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUUsSUFBSSxDQUFDLEdBQUc7RUFBQTtFQUFDLENBQUMsQ0FBQSxFQUFFO0lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0VBQUE7QUFBQztBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7RUFBQyxJQUFJLENBQUM7RUFBQyxNQUFLO0lBQUMsT0FBTyxFQUFDO0VBQUMsQ0FBQyxHQUFDLENBQUM7RUFBQyxJQUFHLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQztJQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO01BQUMsSUFBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUFDLElBQUcsQ0FBQyxFQUFDLE9BQU8sQ0FBQztNQUFBO01BQUMsT0FBTTtRQUFDLENBQUMsRUFBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVc7UUFBQyxDQUFDLEVBQUMsTUFBTSxDQUFDO01BQVcsQ0FBQztJQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7TUFBQyxPQUFNO1FBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQztJQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDO0FBQUE7QUFBQyxNQUFNLENBQUMsU0FBUyxjQUFjLE1BQUs7RUFBQyxXQUFXLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxHQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsS0FBSyxDQUFDO0VBQUE7RUFBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsR0FBRyxFQUFDO0lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO01BQUMsRUFBRSxFQUFDLENBQUM7TUFBQyxRQUFRLEVBQUM7SUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsUUFBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxLQUFHLENBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksSUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxZQUFZLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFDLElBQUU7TUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUFBLENBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUcsSUFBSSxDQUFDLElBQUksRUFBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFDLElBQUU7TUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7SUFBQSxDQUFFLENBQUMsRUFBQyxDQUFDO0VBQUE7QUFBQyxDQUFDO0VBQUMsV0FBVyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVO0lBQUMsQ0FBQyxJQUFFLFFBQVEsSUFBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxJQUFFLFNBQVMsSUFBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUssS0FBRyxDQUFDLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFDO01BQUMsVUFBVSxFQUFDLENBQUM7TUFBQyxRQUFRLEVBQUM7SUFBQyxDQUFDLENBQUM7SUFBQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVTtJQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQztJQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsU0FBUyxJQUFHLENBQUMsS0FBRyxDQUFDLENBQUMsS0FBSyxLQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxHQUFDLENBQUM7SUFBQyxDQUFDLFlBQVksT0FBTyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUM7TUFBQyxRQUFRLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQztNQUFDLEtBQUssRUFBQztJQUFDLENBQUMsQ0FBQztJQUFDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxJQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsYUFBYSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBQyxDQUFDLENBQUMsSUFBRSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFNLENBQUMsR0FBQztRQUFDLE9BQU8sRUFBQztNQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsR0FBRyxLQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO0lBQUMsSUFBRyxDQUFDLEVBQUM7TUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBQyxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBRyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7TUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLE1BQUksQ0FBQyxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsQ0FBQztJQUFBO0lBQUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztFQUFBO0FBQUMsQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUM7SUFBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7RUFBQTtFQUFDLElBQUksQ0FBQSxF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QUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRSxDQUFDLElBQUU7TUFBQyxJQUFHLElBQUksQ0FBQyxVQUFVLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO01BQUE7SUFBQyxDQUFFLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsVUFBVSxFQUFDO0lBQU8sSUFBRyxJQUFJLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUM7SUFBTyxNQUFNLENBQUMsR0FBQyxRQUFRLElBQUUsT0FBTyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFFLENBQUMsSUFBRTtNQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFFLENBQUMsSUFBRTtRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztNQUFBLENBQUUsQ0FBQztJQUFBLENBQUUsQ0FBQyxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUU7TUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFDLElBQUU7UUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7TUFBQSxDQUFFLENBQUM7SUFBQSxDQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsTUFBSTtNQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxNQUFNLENBQUMsSUFBSTtJQUFBLENBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUFBO0VBQUMsT0FBTyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUU7TUFBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUFBLENBQUUsQ0FBQztFQUFBO0FBQUM7QUFBQyxPQUFBLENBQUEsT0FBQSxHQUFBLENBQUE7Ozs7Ozs7OztBQ0oxb2E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztFQUFDLE1BQU0sQ0FBQyxHQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0VBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO0FBQUE7QUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUFBO0FBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0VBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFBO0FBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztFQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztBQUFBO0FBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUM7QUFBQTtBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUFBO0FBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7RUFBQyxJQUFJLENBQUMsR0FBRSxlQUFjLENBQUUsTUFBSyxDQUFDLElBQUUsQ0FBRSxPQUFNO0VBQUMsT0FBTyxLQUFLLENBQUMsS0FBRyxDQUFDLEtBQUcsQ0FBQyxJQUFHLFlBQVcsQ0FBRSxJQUFHLENBQUUsS0FBSSxDQUFDLEVBQUMsQ0FBQztBQUFBO0FBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQUE7QUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7RUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBQyxDQUFDLEdBQUUsR0FBRSxDQUFFLElBQUcsQ0FBRSxNQUFLLENBQUMsSUFBRSwwQkFBMkIsRUFBQyxHQUFDLE1BQU07QUFBQTtBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsUUFBUSxJQUFFLE9BQU8sQ0FBQyxHQUFFLEdBQUUsQ0FBRSxJQUFHLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFDLFFBQVEsSUFBRSxPQUFPLENBQUMsR0FBRSxHQUFFLENBQUUsSUFBRyxHQUFDLENBQUM7QUFBQTtBQUFDLE1BQU0sQ0FBQyxHQUFDLE1BQU07RUFBQyxDQUFDLEdBQUMsU0FBUztFQUFDLENBQUMsR0FBQyxRQUFRO0VBQUMsQ0FBQyxHQUFDLE9BQU87QUFBQyxTQUFTLENBQUMsQ0FBQSxFQUFFO0VBQUMsT0FBTSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQUE7QUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUM7QUFBQyxJQUFHO0VBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLEVBQUM7SUFBQyxHQUFHLEVBQUMsQ0FBQSxLQUFJO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztJQUFBO0VBQUMsQ0FBQyxDQUFDLENBQUM7QUFBQSxDQUFDLFFBQU0sQ0FBQyxFQUFDLENBQUM7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRTtFQUFBO0VBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLFNBQVMsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUUsQ0FBQyxJQUFFO01BQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUEsQ0FBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxFQUFFO0VBQUE7RUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLENBQUMsQ0FBQyxFQUFDO0lBQU8sTUFBTSxDQUFDLEdBQUMsQ0FBQyxHQUFDLHFCQUFxQixHQUFDLGtCQUFrQjtJQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFFLENBQUMsSUFBRTtNQUFDLElBQUcsQ0FBQyxFQUFDO1FBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsUUFBUSxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxLQUFHLENBQUUsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1VBQUMsTUFBTSxFQUFDLENBQUM7VUFBQyxJQUFJLEVBQUMsQ0FBQztVQUFDLFFBQVEsRUFBQyxDQUFDO1VBQUMsT0FBTyxFQUFDO1FBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFO1VBQUMsT0FBTyxFQUFDLENBQUMsSUFBRSxDQUFDO1FBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztNQUFBO0lBQUMsQ0FBRSxDQUFDO0VBQUE7QUFBQztBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7RUFBQyxJQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQUMsSUFBRyxDQUFDLEVBQUMsT0FBTyxDQUFDO0VBQUE7RUFBQyxPQUFNO0lBQUMsQ0FBQyxFQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsV0FBVztJQUFDLENBQUMsRUFBQyxNQUFNLENBQUM7RUFBVyxDQUFDO0FBQUE7QUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQztFQUFDLElBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUk7SUFBQyxNQUFNLENBQUMsR0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQztBQUFBO0FBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsT0FBTTtJQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztFQUFDLENBQUM7QUFBQTtBQUFDLE1BQU0sQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDO01BQUMsQ0FBQyxFQUFDLENBQUM7TUFBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUM7RUFBQTtFQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBQztNQUFDLEtBQUssRUFBQyxJQUFJLENBQUM7SUFBSyxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFLO1FBQUMsSUFBSSxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFHLENBQUMsR0FBQyxPQUFPLEdBQUMsUUFBUSxDQUFDLEdBQUMsSUFBSSxDQUFDLGFBQWE7TUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBRyxDQUFDLEdBQUMsTUFBTSxHQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7TUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEtBQUssQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDO0VBQUE7RUFBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtBQUFDO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsQ0FBQztFQUFBO0VBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUM7TUFBQyxVQUFVLEVBQUMsSUFBSTtNQUFDLFNBQVMsRUFBQyxJQUFJLENBQUM7SUFBUSxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLEdBQUMsV0FBVztNQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUcsQ0FBQyxFQUFDLE9BQU0sVUFBVSxJQUFFLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxNQUFNLEtBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsS0FBSyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxHQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFBQyxPQUFPLENBQUMsS0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxJQUFFLENBQUMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBQyxHQUFHLEtBQUcsQ0FBQyxHQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFBLEVBQUU7SUFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUUsSUFBSSxDQUFDLEdBQUc7RUFBQTtFQUFDLENBQUMsQ0FBQSxFQUFFO0lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0VBQUE7QUFBQztBQUFDLE1BQU0sQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDO01BQUMsQ0FBQyxFQUFDLENBQUM7TUFBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsSUFBSSxDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBQztNQUFDLEtBQUssRUFBQyxJQUFJO01BQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxJQUFJO01BQUMsS0FBSyxFQUFDO0lBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLElBQUksRUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLGFBQWEsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQyxrQkFBa0IsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsbUJBQW1CLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFDO01BQUMsS0FBSyxFQUFDO0lBQUksQ0FBQyxDQUFDO0VBQUE7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxJQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsUUFBUSxJQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztFQUFBO0VBQUMsTUFBTSxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxhQUFhLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLElBQUksS0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBQztNQUFDLEtBQUssRUFBQztJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUM7TUFBQyxLQUFLLEVBQUM7SUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxJQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxJQUFJLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFDO01BQUMsS0FBSyxFQUFDO0lBQUksQ0FBQyxDQUFDO0VBQUE7RUFBQyxXQUFXLENBQUEsRUFBRTtJQUFDLE1BQUs7TUFBQyxJQUFJLEVBQUM7SUFBQyxDQUFDLEdBQUMsSUFBSTtJQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0s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Q0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFBLEtBQUk7TUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztNQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7TUFBQyxJQUFJLEVBQUMsUUFBUTtNQUFDLE1BQU0sRUFBQyxJQUFJLENBQUMsU0FBUztNQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztNQUFDLFVBQVUsRUFBQyxDQUFDO01BQUMsUUFBUSxFQUFDLENBQUM7TUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxVQUFVLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztFQUFBO0VBQUMsWUFBWSxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxhQUFhLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7RUFBQTtFQUFDLHdCQUF3QixDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxhQUFhLEdBQUMsQ0FBQztJQUFDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0VBQUE7RUFBQyxVQUFVLENBQUEsRUFBRTtJQUFDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBRSxJQUFJLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRztFQUFBO0VBQUMsVUFBVSxDQUFBLEVBQUU7SUFBQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztFQUFBO0VBQUMsbUJBQW1CLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFDLElBQUksS0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUM7TUFBQyxLQUFLLEVBQUM7SUFBSSxDQUFDLENBQUM7RUFBQTtFQUFDLG1CQUFtQixDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFDO01BQUMsS0FBSyxFQUFDO0lBQUksQ0FBQyxDQUFDO0VBQUE7RUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLElBQUUsSUFBSSxDQUFDLGlCQUFpQixJQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxhQUFhLENBQUEsRUFBRTtJQUFDLE1BQUs7TUFBQyxJQUFJLEVBQUM7SUFBQyxDQUFDLEdBQUMsSUFBSTtJQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFDO01BQUMsS0FBSyxFQUFDO0lBQUksQ0FBQyxDQUFDO0VBQUE7RUFBQyxtQkFBbUIsQ0FBQSxFQUFFO0lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLGFBQWEsSUFBRSxJQUFJLENBQUMsaUJBQWlCLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7SUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLGlCQUFpQixLQUFHLElBQUksQ0FBQyxpQkFBaUIsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0VBQUE7QUFBQztBQUFDLE1BQU0sQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQztFQUFBO0VBQUMsS0FBSyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUFBO0VBQUMsTUFBTSxDQUFBLEVBQUU7SUFBQyxNQUFLO1FBQUMsRUFBRSxFQUFDLENBQUM7UUFBQyxNQUFNLEVBQUMsQ0FBQztRQUFDLFFBQVEsRUFBQztNQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsUUFBUTtNQUFDO1FBQUMsU0FBUyxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJO0lBQUMsSUFBRyxHQUFHLEtBQUcsQ0FBQyxJQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsYUFBYSxJQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUM7TUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFBQyxJQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFDO1FBQUMsSUFBSSxFQUFDO01BQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7TUFBQTtJQUFDLENBQUMsTUFBSTtNQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQTtFQUFDO0VBQUMsR0FBRyxDQUFBLEVBQUU7SUFBQyxNQUFLO1FBQUMsUUFBUSxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRO01BQUM7UUFBQyxVQUFVLEVBQUMsQ0FBQztRQUFDLFNBQVMsRUFBQztNQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSTtJQUFDLElBQUksQ0FBQyxHQUFDLENBQUM7SUFBQyxJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUM7TUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztNQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLElBQUUsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsSUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFFLElBQUUsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxJQUFFLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUUsSUFBRSxDQUFDLEdBQUMsRUFBRSxNQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQTtJQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsYUFBYSxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztJQUFDLE1BQUs7UUFBQyxRQUFRLEVBQUM7TUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVE7TUFBQztRQUFDLFNBQVMsRUFBQztNQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSTtJQUFDLElBQUcsQ0FBQyxDQUFDLEVBQUM7SUFBTyxNQUFLO1FBQUMsR0FBRyxFQUFDLENBQUM7UUFBQyxNQUFNLEVBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsSUFBRSxHQUFHLEtBQUcsQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO1FBQUMsT0FBTyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUM7TUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQztJQUFDLElBQUcsQ0FBQyxFQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFBQyxJQUFHLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxJQUFFLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLEVBQUUsRUFBQyxPQUFPLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUFBO0lBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQUMsSUFBRyxDQUFDLEtBQUcsQ0FBQyxFQUFDO0lBQU8sTUFBTSxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsR0FBRztNQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7TUFBQyxJQUFJLEVBQUMsWUFBWSxHQUFDLENBQUM7TUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO01BQUMsS0FBSyxFQUFDLENBQUM7TUFBQyxHQUFHLEVBQUMsQ0FBQztNQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQUMsWUFBWSxFQUFDLENBQUM7TUFBQyxRQUFRLEVBQUMsQ0FBQyxJQUFFO1FBQUMsSUFBRyxDQUFDLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFDO1VBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDO1VBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUFBO1FBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7TUFBQTtJQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztJQUFDLE1BQUs7UUFBQyxFQUFFLEVBQUMsQ0FBQztRQUFDLFFBQVEsRUFBQyxDQUFDO1FBQUMsTUFBTSxFQUFDLENBQUM7UUFBQyxZQUFZLEVBQUM7TUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVE7TUFBQztRQUFDLFNBQVMsRUFBQyxDQUFDO1FBQUMsVUFBVSxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQztJQUFDLElBQUcsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUM7SUFBQyxJQUFHLEdBQUcsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQUMsTUFBSztRQUFDLE1BQU0sRUFBQztNQUFDLENBQUMsR0FBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQztJQUFDLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxJQUFFLEdBQUcsS0FBRyxDQUFDLElBQUUsR0FBRyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBQztNQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO01BQUMsSUFBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUM7UUFBQyxJQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO01BQUEsQ0FBQyxNQUFLLElBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDO1FBQUMsSUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztNQUFBLENBQUMsTUFBSyxJQUFHLENBQUMsS0FBRyxDQUFDLEVBQUM7UUFBQyxJQUFHLENBQUMsR0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQUMsSUFBRyxDQUFDLEdBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztNQUFBLENBQUMsTUFBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFBQSxDQUFDLE1BQUksR0FBRyxLQUFHLENBQUMsS0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFDLE9BQU0sQ0FBQyxDQUFDO0VBQUE7RUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0lBQUMsT0FBTSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxNQUFLO01BQUMsU0FBUyxFQUFDO0lBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJO0lBQUMsSUFBRyxDQUFDLENBQUMsRUFBQztJQUFPLE1BQUs7TUFBQyxHQUFHLEVBQUMsQ0FBQztNQUFDLE1BQU0sRUFBQztJQUFDLENBQUMsR0FBQyxDQUFDO0lBQUMsSUFBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxFQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLElBQUUsR0FBRyxDQUFDO0lBQUEsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDO0VBQUE7QUFBQztBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDO0FBQUE7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDO01BQUMsQ0FBQyxFQUFDLENBQUM7TUFBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUM7RUFBQTtFQUFDLEtBQUssQ0FBQSxFQUFFO0lBQUMsTUFBSztNQUFDLFNBQVMsRUFBQztJQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUk7SUFBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxNQUFNLENBQUEsRUFBRTtJQUFDLE1BQUs7UUFBQyxFQUFFLEVBQUMsQ0FBQztRQUFDLE9BQU8sRUFBQyxDQUFDO1FBQUMsRUFBRSxFQUFDLENBQUM7UUFBQyxPQUFPLEVBQUMsQ0FBQztRQUFDLElBQUksRUFBQztNQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsUUFBUTtNQUFDO1FBQUMsU0FBUyxFQUFDO01BQUMsQ0FBQyxHQUFDLENBQUM7SUFBQyxJQUFHLENBQUMsQ0FBQyxFQUFDO0lBQU8sTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRztJQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUM7SUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUM7SUFBQyxJQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBQyxFQUFFLEtBQUcsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDO01BQUMsSUFBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBQztRQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEdBQUcsQ0FBQztRQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFDO1VBQUMsU0FBUyxFQUFDO1FBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLElBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7TUFBQSxDQUFDLE1BQUssQ0FBQyxHQUFDLENBQUMsR0FBQyxHQUFHLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQztJQUFDLE9BQUssQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLEdBQUcsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0VBQUE7RUFBQyxHQUFHLENBQUEsRUFBRTtJQUFDLE1BQUs7UUFBQyxJQUFJLEVBQUM7TUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVE7TUFBQztRQUFDLFNBQVMsRUFBQztNQUFDLENBQUMsR0FBQyxDQUFDO0lBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsYUFBYSxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxLQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUM7RUFBQTtFQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFLO1FBQUMsSUFBSSxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRO01BQUM7UUFBQyxTQUFTLEVBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQztJQUFDLElBQUcsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBQztJQUFPLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYTtJQUFDLElBQUksQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxFQUFDLENBQUM7UUFBQyxDQUFDLEVBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDO01BQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztNQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDO0lBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFDLElBQUcsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7TUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO01BQUMsS0FBSyxFQUFDLENBQUM7TUFBQyxHQUFHLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxDQUFDO01BQUMsWUFBWSxFQUFDLENBQUM7TUFBQyxnQkFBZ0IsRUFBQyxFQUFFO01BQUMsUUFBUSxFQUFDLENBQUMsSUFBRTtRQUFDLElBQUcsQ0FBQyxJQUFFLEdBQUcsRUFBQyxDQUFDLElBQUUsQ0FBQyxFQUFDO1VBQUMsSUFBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7WUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUM7WUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztVQUFBO1VBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFBQTtRQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7TUFBQSxDQUFDO01BQUMsVUFBVSxFQUFDLENBQUEsS0FBSTtRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7TUFBQTtJQUFDLENB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SUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDO01BQUMsQ0FBQyxFQUFDLENBQUM7TUFBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDO01BQUMsQ0FBQyxFQUFDLENBQUM7TUFBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLGNBQWMsSUFBRyxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsSUFBRSxTQUFTLENBQUMsY0FBYyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxhQUFhLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxNQUFJO01BQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsUUFBUSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUMsTUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBQyxNQUFJLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLElBQUksQ0FBQztJQUFBLENBQUUsQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLE1BQUs7UUFBQyxJQUFJLEVBQUM7TUFBQyxDQUFDLEdBQUMsSUFBSTtNQUFDO1FBQUMsTUFBTSxFQUFDO01BQUMsQ0FBQyxHQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsRUFBRTtJQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLE1BQU0sRUFBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUFBO0VBQUMsYUFBYSxDQUFDLENBQUMsRUFBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLFdBQVcsS0FBRyxDQUFDLENBQUMsSUFBSSxJQUFFLE9BQU8sS0FBRyxDQUFDLENBQUMsV0FBVztJQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO0lBQU8sTUFBSztNQUFDLElBQUksRUFBQztJQUFDLENBQUMsR0FBQyxJQUFJO0lBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUM7TUFBQyxhQUFhLEVBQUM7SUFBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsS0FBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsRUFBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsUUFBUSxHQUFDLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7RUFBQTtFQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBQztNQUFDLGFBQWEsRUFBQztJQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixLQUFHLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLFFBQVEsSUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxJQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBRyxJQUFJLENBQUMsU0FBUyxLQUFHLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxDQUFDLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxVQUFVLEtBQUcsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUM7RUFBQTtFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBQztNQUFDLGFBQWEsRUFBQztJQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixLQUFHLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsWUFBWSxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsU0FBUyxLQUFHLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxRQUFRLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxDQUFDLENBQUEsRUFBRTtJQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBRSxJQUFJLENBQUMsU0FBUyxNQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxHQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDO0lBQUMsQ0FBQyxHQUFDLEVBQUUsSUFBRSxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztJQUFDLE1BQUs7TUFBQyxVQUFVLEVBQUM7SUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUk7SUFBQyxJQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUMsQ0FBQyxFQUFDO0lBQU8sSUFBRyxTQUFTLEtBQUcsQ0FBQyxDQUFDLElBQUksSUFBRSxPQUFPLEtBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBQyxPQUFPLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEdBQUMsR0FBRyxHQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxVQUFVLENBQUUsTUFBSTtNQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxDQUFDLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxDQUFDLEtBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQztFQUFBO0VBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsR0FBRyxLQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztJQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztFQUFBO0VBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLElBQUksQ0FBQyxDQUFDLEVBQUM7TUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxLQUFHLENBQUMsQ0FBQyxTQUFVLENBQUM7TUFBQyxJQUFJLEtBQUcsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsTUFBTSxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUM7UUFBQyxDQUFDLEVBQUMsQ0FBQztRQUFDLENBQUMsRUFBQztNQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUEsQ0FBQyxNQUFJO01BQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQztNQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksS0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQUE7RUFBQztFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7RUFBQTtFQUFDLENBQUMsQ0FBQSxFQUFFO0lBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsSUFBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsR0FBRyxDQUFDLEtBQUk7TUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztNQUFDLElBQUcsQ0FBQyxLQUFHLENBQUMsRUFBQztRQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLEdBQUc7UUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsS0FBRyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQztNQUFBO0lBQUM7RUFBQztFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsV0FBVyxJQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFVBQVUsS0FBRyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBQyxDQUFDO0VBQUE7RUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUFBO0FBQUM7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLEVBQUU7RUFBQTtFQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFLO1FBQUMsSUFBSSxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUk7TUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLFVBQVU7SUFBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHO01BQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFBQSxDQUFFLENBQUM7RUFBQTtFQUFDLGFBQWEsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLGFBQWEsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLFdBQVcsR0FBQyxFQUFFO0lBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQztNQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO01BQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsRUFBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBQyxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLE9BQU8sR0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFBQyxFQUFFLEVBQUM7TUFBQyxDQUFDLENBQUM7SUFBQTtFQUFDO0VBQUMsV0FBVyxDQUFBLEVBQUU7SUFBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBQyxDQUFDO0VBQUE7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxNQUFLO01BQUMsSUFBSSxFQUFDO0lBQUMsQ0FBQyxHQUFDLElBQUk7SUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsY0FBYyxHQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFBQyxJQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDO0lBQUEsQ0FBQyxNQUFLLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsY0FBYztJQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFBQyxJQUFHLENBQUMsRUFBQztNQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQztRQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsQ0FBQztRQUFDLEdBQUcsRUFBQyxDQUFDO1FBQUMsUUFBUSxFQUFDLENBQUMsSUFBRSxDQUFDO1FBQUMsZ0JBQWdCLEVBQUMsRUFBRTtRQUFDLFlBQVksRUFBQyxDQUFDO1FBQUMsUUFBUSxFQUFDLENBQUMsSUFBRTtVQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQUEsQ0FBQztRQUFDLFVBQVUsRUFBQyxDQUFBLEtBQUk7VUFBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7UUFBQTtNQUFDLENBQUMsQ0FBQztNQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLFNBQVM7TUFBQyxJQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDO01BQUE7TUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFBQSxDQUFDLE1BQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFBQyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLGFBQWEsQ0FBQSxFQUFFO0lBQUMsT0FBTyxJQUFJLENBQUMsVUFBVSxHQUFDLElBQUksQ0FBQyxFQUFFO0VBQUE7RUFBQyxTQUFTLENBQUEsRUFBRTtJQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7RUFBQTtFQUFDLGNBQWMsQ0FBQSxFQUFFO0lBQUMsTUFBSztRQUFDLElBQUksRUFBQztNQUFDLENBQUMsR0FBQyxJQUFJO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUU7SUFBQyxJQUFHLENBQUMsQ0FBQyxFQUFDO0lBQU8sSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLGNBQWM7SUFBQyxJQUFJLENBQUM7TUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLElBQUUsQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztJQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUMsRUFBRSxJQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHO01BQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDO0lBQUEsQ0FBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxJQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0VBQUE7RUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDO01BQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxVQUFVO01BQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztNQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7TUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxNQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUM7SUFBQTtJQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsUUFBUSxFQUFDLENBQUMsSUFBRSxDQUFDO0lBQUMsQ0FBQyxDQUFDO0VBQUE7QUFBQztBQUFDLE1BQU0sQ0FBQyxHQUFDO0lBQUMsTUFBTSxFQUFDLEVBQUU7SUFBQyxDQUFDLEVBQUMsRUFBRTtJQUFDLFNBQVMsRUFBQyxFQUFFO0lBQUMsT0FBTyxFQUFDLEVBQUU7SUFBQyxVQUFVLEVBQUMsRUFBRTtJQUFDLFNBQVMsRUFBQyxFQUFFO0lBQUMsR0FBRyxFQUFDO0VBQUMsQ0FBQztFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsTUFBSTtNQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFBQSxDQUFFLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxRQUFRLENBQUMsYUFBYTtJQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQUk7TUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBRSxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFBQSxDQUFFLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztJQUFDLE1BQUs7TUFBQyxJQUFJLEVBQUM7SUFBQyxDQUFDLEdBQUMsSUFBSTtJQUFDLElBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUM7TUFBQyxhQUFhLEVBQUM7SUFBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQztJQUFPLElBQUcsVUFBUyxDQUFDLEVBQUM7TUFBQyxPQUFNLFFBQVEsSUFBRyxDQUFDLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLFFBQVE7SUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFBTyxJQUFJLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztJQUFDLE1BQU0sQ0FBQyxJQUFDLEtBQUssSUFBRyxDQUFDO0lBQUMsUUFBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsT0FBTztNQUFFLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBRyxDQUFDLEdBQUMsT0FBTyxDQUFDO1FBQUM7TUFBTSxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLFlBQVk7UUFBQztNQUFNLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsR0FBRztRQUFDO01BQU0sS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxHQUFHO1FBQUM7TUFBTSxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLEdBQUcsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO1FBQUM7TUFBTSxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxHQUFHO1FBQUM7TUFBTSxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQUE7SUFBQyxJQUFHLENBQUMsRUFBQztNQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztNQUFDLE1BQUs7UUFBQyxTQUFTLEVBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQztNQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFFLEdBQUcsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsTUFBTSxHQUFDLE1BQU0sR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLGFBQWEsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEVBQUUsR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUE7SUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztJQUFDLE1BQUs7TUFBQyxRQUFRLEVBQUM7SUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUk7SUFBQyxDQUFDLElBQUUsUUFBUSxLQUFHLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7RUFBQTtBQUFDO0FBQUMsTUFBTSxDQUFDLEdBQUMsMEJBQTBCO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQztJQUFDLE1BQUs7TUFBQyxNQUFNLEVBQUMsQ0FBQztNQUFDLFVBQVUsRUFBQyxDQUFDO01BQUMsU0FBUyxFQUFDLENBQUM7TUFBQyxRQUFRLEVBQUMsQ0FBQyxHQUFFLENBQUEsS0FBSSxDQUFDLENBQUU7TUFBQyxRQUFRLEVBQUMsQ0FBQyxHQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDO0lBQUMsQ0FBQyxHQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLEdBQUMsV0FBVyxHQUFDLFNBQVM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUU7SUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxVQUFVLENBQUUsTUFBSTtNQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLFVBQVUsQ0FBRSxNQUFJO1FBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGVBQWUsRUFBQyxJQUFJLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLFVBQVUsQ0FBRSxNQUFJO1VBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQUEsQ0FBQyxFQUFFLENBQUMsR0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUM7TUFBQSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUFBO0VBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztJQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUcsSUFBSSxDQUFDLEVBQUUsSUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLEVBQUUsS0FBRyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLE9BQU8sQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLEVBQUUsSUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQUE7QUFBQztBQUFDLE1BQU0sQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsR0FBRyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsSUFBRSxHQUFHLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLElBQUUsRUFBRSxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQUE7RUFBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDO0lBQUMsQ0FBQyxJQUFFLEdBQUc7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQztJQUFDLElBQUcsQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxHQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQztNQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsSUFBRSxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7TUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxHQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsSUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUM7SUFBQTtJQUFDLE9BQU8sQ0FBQztFQUFBO0FBQUM7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDO0lBQUMsTUFBSztNQUFDLEtBQUssRUFBQyxDQUFDO01BQUMsR0FBRyxFQUFDLENBQUM7TUFBQyxRQUFRLEVBQUMsQ0FBQztNQUFDLFFBQVEsRUFBQyxDQUFDO01BQUMsVUFBVSxFQUFDLENBQUM7TUFBQyxRQUFRLEVBQUMsQ0FBQyxHQUFFLENBQUEsS0FBSSxDQUFDLENBQUU7TUFBQyxZQUFZLEVBQUMsQ0FBQztNQUFDLGdCQUFnQixFQUFDO0lBQUMsQ0FBQyxHQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUEsS0FBSTtNQUFDLElBQUksQ0FBQyxFQUFFLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFDLEVBQUUsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxPQUFPLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxJQUFFLG9CQUFvQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUM7RUFBQTtBQUFDO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUMsRUFBRTtFQUFBO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxlQUFlLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUFDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxHQUFDLE1BQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO0VBQUE7RUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxPQUFPLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUUsQ0FBQyxJQUFFO01BQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFDLEVBQUU7RUFBQTtFQUFDLFVBQVUsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztFQUFBO0VBQUMsY0FBYyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksS0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBRSxDQUFDO0VBQUE7RUFBQyxZQUFZLENBQUEsRUFBRTtJQUFDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFNLENBQUM7RUFBQTtBQUFDO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQUE7RUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQUMsTUFBSztNQUFDLFNBQVMsRUFBQztJQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSTtJQUFDLElBQUc7TUFBQyxNQUFNLEVBQUMsQ0FBQztNQUFDLE1BQU0sRUFBQztJQUFDLENBQUMsR0FBQyxDQUFDO0lBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUM7TUFBQyxhQUFhLEVBQUM7SUFBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQyxJQUFHLENBQUMsQ0FBQyxPQUFPLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFDO01BQUMsSUFBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsSUFBRSxHQUFHLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxHQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQztVQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTztVQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFBTyxDQUFDLENBQUM7TUFBQTtJQUFDLENBQUMsTUFBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFNBQVMsS0FBRyxDQUFDLElBQUUsRUFBRSxFQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0FBQUM7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLElBQUUsQ0FBQyxDQUFDLFNBQVM7SUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSTtJQUFDLElBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQztJQUFPLFFBQVEsSUFBRSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUM7TUFBQyxJQUFJLEVBQUM7SUFBQyxDQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsR0FBQyxFQUFFO0lBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBRSxDQUFDLElBQUUsZUFBZSxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsU0FBUyxJQUFHLGlCQUFnQixDQUFDLENBQUMsSUFBSyxFQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxTQUFTLElBQUcsU0FBUSxDQUFDLENBQUMsSUFBSyxFQUFDO0lBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsT0FBTyxJQUFFLFFBQVEsR0FBQyxDQUFDLENBQUMsT0FBTyxJQUFFLEtBQUs7SUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFBQyxJQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUM7TUFBQyxRQUFRLEtBQUcsQ0FBQyxLQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUMsUUFBUSxDQUFDO01BQUMsSUFBRztRQUFDLEtBQUssRUFBQztNQUFDLENBQUMsR0FBQyxDQUFDO01BQUMsTUFBSztRQUFDLFNBQVMsRUFBQztNQUFDLENBQUMsR0FBQyxDQUFDO01BQUMsUUFBUSxJQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUM7TUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDO0lBQUE7SUFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLFVBQVMsQ0FBQyxFQUFDO01BQUMsSUFBRyxRQUFRLElBQUUsT0FBTyxDQUFDLEVBQUMsT0FBTyxDQUFDO01BQUMsSUFBRyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsT0FBTSxFQUFFO01BQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQztNQUFDLElBQUksQ0FBQyxHQUFDLHVGQUF1RjtNQUFDLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUUsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBRyxDQUFDLElBQUUsNkNBQTZDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLElBQUUsUUFBUSxFQUFDLENBQUM7SUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxLQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxJQUFFO01BQUMsUUFBUSxJQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFVLElBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFBQSxDQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxJQUFFLEtBQUs7SUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTztJQUFDLEtBQUssS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBRyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxtQ0FBbUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsRUFBQyxTQUFTLEtBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0FBQUM7QUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBSTtJQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQSxDQUFFLENBQUM7QUFBQTtBQUFDLE1BQU0sQ0FBQyxHQUFDO0lBQUMsSUFBSSxFQUFDLFdBQVc7SUFBQyxTQUFTLEVBQUMsMkJBQTJCO0lBQUMsS0FBSyxFQUFDLFVBQVU7SUFBQyxLQUFLLEVBQUMsRUFBRTtJQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFBQyxRQUFRLEVBQUMsU0FBUztJQUFDLElBQUksRUFBQztNQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7TUFBQyxJQUFJLEVBQUMsRUFBRTtNQUFDLEtBQUssRUFBQywyRUFBMkU7TUFBQyxTQUFTLEVBQUM7SUFBaUIsQ0FBQztJQUFDLE9BQU8sRUFBQyxNQUFNO0lBQUMsTUFBTSxFQUFDO0VBQUMsQ0FBQztFQUFDLENBQUMsR0FBQztJQUFDLElBQUksRUFBQyxXQUFXO0lBQUMsU0FBUyxFQUFDLDJCQUEyQjtJQUFDLEtBQUssRUFBQyxNQUFNO0lBQUMsS0FBSyxFQUFDLEVBQUU7SUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQUMsUUFBUSxFQUFDLFNBQVM7SUFBQyxJQUFJLEVBQUM7TUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO01BQUMsSUFBSSxFQUFDLEVBQUU7TUFBQyxLQUFLLEVBQUMsc0NBQXNDO01BQUMsU0FBUyxFQUFDO0lBQWlCLENBQUM7SUFBQyxPQUFPLEVBQUMsTUFBTTtJQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUc7TUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUFBO0VBQUMsQ0FBQztFQUFDLENBQUMsR0FBQztJQUFDLElBQUksRUFBQyxPQUFPO0lBQUMsS0FBSyxFQUFDLE9BQU87SUFBQyxLQUFLLEVBQUMsRUFBRTtJQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFBQyxJQUFJLEVBQUM7TUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO01BQUMsS0FBSyxFQUFDLHVGQUF1RjtNQUFDLFNBQVMsRUFBQztJQUFpQixDQUFDO0lBQUMsT0FBTyxFQUFDO0VBQU8sQ0FBQztFQUFDLENBQUMsR0FBQztJQUFDLElBQUksRUFBQyxNQUFNO0lBQUMsS0FBSyxFQUFDLE1BQU07SUFBQyxLQUFLLEVBQUMsRUFBRTtJQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFBQyxJQUFJLEVBQUM7TUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO01BQUMsS0FBSyxFQUFDLHNQQUFzUDtNQUFDLFNBQVMsRUFBQztJQUFnQixDQUFDO0lBQUMsT0FBTyxFQUFDO0VBQVksQ0FBQztFQUFDLENBQUMsR0FBQztJQUFDLElBQUksRUFBQyxXQUFXO0lBQUMsUUFBUSxFQUFDLEtBQUs7SUFBQyxLQUFLLEVBQUMsQ0FBQztJQUFDLElBQUksRUFBQztNQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7TUFBQyxLQUFLLEVBQUMsaUlBQWlJO01BQUMsU0FBUyxFQUFDO0lBQW1CLENBQUM7SUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHO01BQUMsSUFBSSxDQUFDO1FBQUMsQ0FBQyxHQUFDLElBQUk7TUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLElBQUU7VUFBQyxJQUFJLENBQUMsRUFBQyxDQUFDO1VBQUMsQ0FBQyxLQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxRQUFRLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQSxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUEsS0FBSTtVQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBSyxDQUFDLEtBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQztVQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsVUFBVSxDQUFFLE1BQUk7WUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJO1VBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFBQSxDQUFDO01BQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFFO1FBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBRyxDQUFDLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxDQUFDO01BQUEsQ0FBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLHlCQUF5QixHQUFDLENBQUMsQ0FBQztJQUFBO0VBQUMsQ0FBQztFQUFDLENBQUMsR0FBQztJQUFDLElBQUksRUFBQyxTQUFTO0lBQUMsS0FBSyxFQUFDLENBQUM7SUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHO01BQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBSTtRQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7TUFBQSxDQUFFLENBQUM7SUFBQTtFQUFDLENBQUM7QUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0VBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUMsQ0FBQyxDQUFDO0FBQUE7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsY0FBYyxHQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMseUJBQXlCLEdBQUMsTUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQztFQUFBO0VBQUMsSUFBSSxDQUFBLEVBQUU7SUFBQyxNQUFLO01BQUMsSUFBSSxFQUFDO0lBQUMsQ0FBQyxHQUFDLElBQUk7SUFBQyxJQUFJLENBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUUsQ0FBQyxJQUFFO01BQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFBQSxDQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFJO01BQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUFBLENBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLE1BQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7RUFBQTtFQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsWUFBWSxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsTUFBSztNQUFDLFFBQVEsRUFBQyxDQUFDO01BQUMsU0FBUyxFQUFDLENBQUM7TUFBQyxPQUFPLEVBQUM7SUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUk7SUFBQyxJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBRSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBQztJQUFPLElBQUc7TUFBQyxhQUFhLEVBQUM7SUFBQyxDQUFDLEdBQUMsQ0FBQztJQUFDLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxFQUFDO0lBQU8sSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTO0lBQUMsSUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsSUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUM7SUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztJQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEtBQUcsQ0FBQyxDQUFDLEVBQUMsTUFBTSxLQUFHLENBQUMsQ0FBQyxnQkFBZ0IsSUFBRSxlQUFlLEtBQUcsQ0FBQyxDQUFDLGdCQUFnQixJQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDO0VBQUE7QUFBQztBQUFDLE1BQU0sQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLGNBQWMsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFDLENBQUMsQ0FBQztFQUFBO0FBQUM7QUFBQyxNQUFNLENBQUM7RUFBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUcsSUFBSSxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsa0NBQWtDLEVBQUMsQ0FBQyxHQUFDLEtBQUssR0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU87TUFBQyxDQUFDLENBQUMsUUFBUSxHQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBQyxjQUFjLENBQUM7SUFBQTtJQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBQyxNQUFNLENBQUM7RUFBQTtFQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsT0FBTyxLQUFHLEtBQUssS0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsT0FBTyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxJQUFJO0VBQUE7QUFBQztBQUFDLE1BQU0sQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxtQkFBbUIsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLG9CQUFvQixHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsT0FBTyxHQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBQztNQUFDLE9BQU8sRUFBQztJQUFJLENBQUMsQ0FBQztFQUFBO0VBQUMsaUJBQWlCLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxXQUFXLElBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBRSxVQUFVLENBQUUsTUFBSTtNQUFDLElBQUksQ0FBQyxXQUFXLEtBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsS0FBSyxDQUFDLENBQUM7SUFBQSxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQUE7RUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUcsSUFBSSxDQUFDLEtBQUssSUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQyxJQUFHLElBQUksQ0FBQyxXQUFXLEVBQUM7TUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87TUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFBQSxDQUFDLE1BQUk7TUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFDLElBQUksQ0FBQztNQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQUE7SUFBQyxJQUFJLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBQztNQUFDLE9BQU8sRUFBQyxJQUFJO01BQUMsTUFBTSxFQUFDO0lBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEtBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxtQkFBbUIsSUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBRSxFQUFFLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEtBQUssSUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGtCQUFrQixFQUFDO01BQUMsT0FBTyxFQUFDLElBQUk7TUFBQyxNQUFNLEVBQUM7SUFBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQztJQUFPLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPO0lBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBRyxDQUFDLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBRSxFQUFFLEVBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxHQUFDLE1BQUk7TUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFBQSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxNQUFJO01BQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQyxDQUFDO0VBQUE7RUFBQyxRQUFRLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxJQUFJO0VBQUE7RUFBQyxRQUFRLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLE9BQU8sS0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUM7TUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEtBQUs7TUFBQyxPQUFPLEVBQUM7SUFBSSxDQUFD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QUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQUE7RUFBQztFQUFDLE1BQU0sQ0FBQSxFQUFFO0lBQUMsSUFBRyxJQUFJLENBQUMsVUFBVSxJQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQztJQUFPLElBQUcsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxLQUFHLENBQUMsRUFBQyxPQUFPLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQUMsSUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUM7TUFBQyxPQUFPLEVBQUM7SUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQztJQUFPLE1BQU0sQ0FBQyxJQUFDLFFBQVEsSUFBRyxJQUFJLENBQUMsT0FBTztJQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsS0FBSyxLQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBRSxNQUFJLENBQUMsQ0FBRSxDQUFDLENBQUMsT0FBTyxDQUFFLE1BQUk7TUFBQyxJQUFJLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUFBLENBQUUsQ0FBQyxJQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLElBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8s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LEVBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQztBQUFBO0FBQUMsTUFBTSxDQUFDO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxFQUFFO0VBQUE7RUFBQyxVQUFVLENBQUMsQ0FBQyxFQUFDO0lBQUMsTUFBSztNQUFDLElBQUksRUFBQztJQUFDLENBQUMsR0FBQyxJQUFJO0lBQUMsSUFBRyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFDO0lBQU8sTUFBSztRQUFDLE9BQU8sRUFBQztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTztNQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUM7SUFBQyxJQUFJLENBQUM7SUFBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztNQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO01BQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFDO1FBQUMsS0FBSyxFQUFDLENBQUM7UUFBQyxRQUFRLEVBQUM7TUFBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUFDLE9BQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7RUFBQTtFQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxLQUFLLEVBQUM7TUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVMsQ0FBQztNQUFDLElBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO01BQUE7SUFBQztFQUFDO0VBQUMsYUFBYSxDQUFDLENBQUMsRUFBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxLQUFHLENBQUUsQ0FBQztJQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUM7SUFBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxLQUFHLENBQUUsQ0FBQztFQUFBO0VBQUMsT0FBTyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLEVBQUU7RUFBQTtBQUFDO0FBQUMsTUFBTSxFQUFFO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7RUFBQTtFQUFDLElBQUksQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQUE7RUFBQyxLQUFLLENBQUEsRUFBRTtJQUFDLElBQUcsSUFBSSxDQUFDLFFBQVEsSUFBRSxJQUFJLENBQUMsU0FBUyxJQUFFLElBQUksQ0FBQyxTQUFTLEVBQUM7SUFBTyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7SUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsYUFBYSxHQUFDLENBQUMsQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEtBQUcsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxVQUFVLENBQUUsTUFBSTtNQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUFBLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFDLEVBQUUsR0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsSUFBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQztNQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztNQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsS0FBSyxJQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixLQUFHLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQUE7RUFBQztFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsTUFBSztRQUFDLElBQUksRUFBQztNQUFDLENBQUMsR0FBQyxJQUFJO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztNQUFDO1FBQUMsT0FBTyxFQUFDO01BQUMsQ0FBQyxHQUFDLENBQUM7SUFBQyxJQUFHLE1BQU0sS0FBRyxDQUFDLENBQUMscUJBQXFCLElBQUUsQ0FBQyxDQUFDLGVBQWUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQyxJQUFFLE1BQU0sS0FBRyxDQUFDLENBQUMscUJBQXFCLElBQUUsQ0FBQyxDQUFDLGVBQWUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQyxJQUFFLElBQUksQ0FBQyxTQUFTLElBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsS0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGVBQWUsSUFBRSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFDLElBQUksRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxPQUFPLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLE1BQUssSUFBSSxDQUFDLFNBQVMsS0FBRyxDQUFDLENBQUMsT0FBTyxLQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLElBQUUsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxFQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxJQUFFLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsS0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBQyxXQUFXLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLFNBQVMsS0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxFQUFFLElBQUUsS0FBSyxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFDLElBQUksT0FBTyxDQUFFLENBQUMsSUFBRTtNQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUM7TUFBQyxJQUFJLENBQUM7TUFBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLFFBQVEsSUFBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFFLE1BQUksQ0FBQyxDQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxHQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxPQUFPLENBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHO1FBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxNQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxHQUFDLENBQUM7TUFBQSxDQUFFLENBQUMsRUFBRSxPQUFPLENBQUUsTUFBSTtRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQUEsQ0FBRSxDQUFDLEVBQUMsVUFBVSxDQUFFLE1BQUk7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUFBLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQztJQUFBLENBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxNQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQUE7RUFBQyxFQUFFLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsNEJBQTRCLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFDLHVCQUF1QixHQUFDLHVCQUF1QixDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxJQUFFLElBQUksQ0FBQyxTQUFTLEdBQUMsSUFBSSxHQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsRUFBRSxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsU0FBUyxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQUE7RUFBQyxFQUFFLENBQUEsRUFBRTtJQUFDLE1BQUs7TUFBQyxJQUFJLEVBQUM7SUFBQyxDQUFDLEdBQUMsSUFBSTtJQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxTQUFTLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxxQkFBcUIsR0FBQyxxQkFBcUIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxJQUFFLElBQUksQ0FBQyxNQUFNLEdBQUMsT0FBTyxHQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxLQUFHLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsRUFBRSxDQUFBLEVBQUU7SUFBQyxNQUFLO01BQUMsSUFBSSxFQUFDO0lBQUMsQ0FBQyxHQUFDLElBQUk7SUFBQyxJQUFJLENBQUMsRUFBRSxLQUFHLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsSUFBRSxJQUFJLENBQUMsRUFBRSxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxXQUFXLEVBQUMsb0JBQW9CLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsV0FBVyxFQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFDLFdBQVcsRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsU0FBUyxFQUFDLEdBQUcsQ0FBQztFQUFBO0VBQUMsRUFBRSxDQUFBLEVBQUU7SUFBQyxNQUFLO01BQUMsSUFBSSxFQUFDO0lBQUMsQ0FBQyxHQUFDLElBQUk7SUFBQyxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUMsR0FBRyxJQUFFLENBQUMsQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxPQUFPLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxHQUFHLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQztJQUFPLE1BQUs7UUFBQyxJQUFJLEVBQUM7TUFBQyxDQUFDLEdBQUMsSUFBSTtNQUFDO1FBQUMsU0FBUyxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFO01BQUM7UUFBQyxTQUFTLEVBQUMsQ0FBQztRQUFDLFlBQVksRUFBQztNQUFDLENBQUMsR0FBQyxDQUFDO0lBQUMsSUFBRyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxFQUFFLEVBQUM7TUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO01BQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFD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QUM7SUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsUUFBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxLQUFHLENBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksSUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxZQUFZLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFDLElBQUU7TUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUFBLENBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztJQUFDLElBQUcsSUFBSSxDQUFDLElBQUksRUFBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFDLElBQUU7TUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7SUFBQSxDQUFFLENBQUMsRUFBQyxDQUFDO0VBQUE7QUFBQyxDQUFDO0VBQUMsV0FBVyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVO0lBQUMsQ0FBQyxJQUFFLFFBQVEsSUFBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxJQUFFLFNBQVMsSUFBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUssS0FBRyxDQUFDLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFDO01BQUMsVUFBVSxFQUFDLENBQUM7TUFBQyxRQUFRLEVBQUM7SUFBQyxDQUFDLENBQUM7SUFBQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsV0FBVyxDQUFDLENBQUMsRUFBQztJQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVTtJQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQztJQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsU0FBUyxJQUFHLENBQUMsS0FBRyxDQUFDLENBQUMsS0FBSyxLQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxHQUFDLENBQUM7SUFBQyxDQUFDLFlBQVksT0FBTyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUM7TUFBQyxRQUFRLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQztNQUFDLEtBQUssRUFBQztJQUFDLENBQUMsQ0FBQztJQUFDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUM7SUFBQyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxJQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsYUFBYSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsUUFBUSxFQUFDO01BQUMsSUFBSSxDQUFDLEdBQUMsRUFBRTtNQUFDLElBQUcsQ0FBQyxZQUFZLE9BQU8sRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUcsQ0FBQyxZQUFZLFFBQVEsSUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUk7UUFBQyxNQUFNLENBQUMsR0FBQyxRQUFRLElBQUUsT0FBTyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUM7UUFBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFBQTtNQUFDLE9BQU8sQ0FBQztJQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBQyxDQUFDLENBQUMsSUFBRSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUM7SUFBQyxNQUFNLENBQUMsR0FBQztRQUFDLE9BQU8sRUFBQztNQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsR0FBRyxLQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO0lBQUMsSUFBRyxDQUFDLEVBQUM7TUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBQyxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBRyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO01BQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7TUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLE1BQUksQ0FBQyxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsQ0FBQztJQUFBO0lBQUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztFQUFBO0FBQUMsQ0FBQztFQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUM7SUFBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDO01BQUMsQ0FBQyxFQUFDLENBQUM7TUFBQyxDQUFDLEVBQUM7SUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQztNQUFDLENBQUMsRUFBQyxDQUFDO01BQUMsQ0FBQyxFQUFDO0lBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLEdBQUM7TUFBQyxDQUFDLEVBQUMsQ0FBQztNQUFDLENBQUMsRUFBQztJQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsY0FBYyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxHQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsQ0FBRCxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsQ0FBRCxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztFQUFBO0VBQUMsSUFBSSxDQUFBLEVBQUU7SUFBQyxJQUFHLElBQUksQ0FBQyxNQUFNLElBQUUsSUFBSSxDQUFDLFlBQVksRUFBQyxPQUFNLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxHQUFDLFlBQVk7SUFBQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxLQUFHLENBQUMsSUFBRSxjQUFjLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsS0FBRyxDQUFDLElBQUUsR0FBRyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sS0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBRSxHQUFHLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLGNBQWMsR0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsR0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFFLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxTQUFTLElBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQUksSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsSUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBQyxNQUFNLENBQUMsV0FBVyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUM7TUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLFNBQVM7TUFBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLEVBQUU7TUFBQyxLQUFLLEVBQUMsS0FBSztJQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLE1BQUk7TUFBQyxNQUFLO1FBQUMsV0FBVyxFQUFDO01BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVO01BQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztJQUFBLENBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxjQUFjLENBQUMsQ0FBQyxFQUFDO0lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksS0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO0VBQUE7RUFBQyxXQUFXLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUU7TUFBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQUEsQ0FBRSxDQUFDO0VBQUE7RUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO0VBQUE7RUFBQyxJQUFJLENBQUEsRUFBRTtJQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLElBQUksQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFDLENBQUMsQ0FBQztFQUFBO0VBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7RUFBQTtFQUFDLFVBQVUsQ0FBQSxFQUFFO0lBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztFQUFBO0VBQUMsS0FBSyxDQUFBLEVBQUU7SUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUcsSUFBSSxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUFDLE9BQU8sQ0FBQSxFQUFFO0lBQUMsSUFBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixHQUFDLE1BQU0sRUFBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxLQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFDLElBQUksRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFFLENBQUMsSUFBRTtNQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztFQUFBO0VBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsS0FBRztNQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLElBQUUsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDO01BQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxLQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsS0FBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUFBLENBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0VBQUE7RUFBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7SUFBQyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQztNQUFDLElBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFDO01BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsS0FBSyxDQUFDO0lBQUE7SUFBQyxJQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLElBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBQztJQUFPLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsU0FBUyxLQUFHLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7RUFBQTtFQUFDLHNCQUFzQixDQUFBLEVBQUU7SUFBQyxPQUFNO01BQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFDLENBQUM7TUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUM7SUFBQyxDQUFDO0VBQUE7RUFBQyxVQUFVLENBQUMsQ0FBQyxFQUFDO0lBQUMsSUFBRyxJQUFJLENBQUMsWUFBWSxFQUFDO0lBQU8sTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDO0lBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7RUFBQTtFQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUM7SUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEtBQUcsSUFBSSxDQUFDLEVBQUUsQ0FB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QUFDLENBQUM7TUFBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBQztRQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFFLEtBQUs7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7TUFBQTtNQUFDLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztVQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDO1VBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQztVQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDO1VBQUMsQ0FBQyxHQUFDO1lBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQztZQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUM7WUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDO1VBQUMsQ0FBQztRQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsR0FBQztVQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSztVQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTTtVQUFDLENBQUMsRUFBQyxDQUFDO1VBQUMsQ0FBQyxFQUFDO1FBQUMsQ0FBQyxFQUFDLENBQUM7TUFBQSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFBQyxPQUFNO1VBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJO1VBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHO1VBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUFLLENBQUM7TUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUM7RUFBQTtFQUFDLE9BQU8sQ0FBQSxFQUFFO0lBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBQyxDQUFDO0VBQUE7RUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFDO0lBQUMsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsT0FBTyxLQUFHLENBQUMsQ0FBQyxxQkFBcUIsR0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLHFCQUFxQixHQUFDLENBQUMsQ0FBQyxFQUFDO01BQUMsR0FBRyxFQUFFO01BQUMsR0FBRztJQUFDLENBQUM7RUFBQTtBQUFDO0FBQUMsT0FBQSxDQUFBLE9BQUEsR0FBQSxFQUFBOzs7QUNKOTJtRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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O0VBQUE7RUFBQSxJQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBO0lBQUE7TUFBQSxPQUFBLEVBQUE7SUFBQTtFQUFBO0VBQUEsSUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBO0VBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBO0lBQUEsT0FBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUE7RUFBQTtFQUFBLElBQUEsTUFBQTtFQUFBLElBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQTtFQUFBLFNBQUEsR0FBQSxJQUFBLEdBQUE7SUFBQSxJQUFBLEdBQUEsa0JBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBO01BQUEsSUFBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQTtNQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUE7UUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQTtNQUFBO1FBQUEsTUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQTtNQUFBO0lBQUE7RUFBQTtFQUFBLE1BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQTtFQUFBLElBQUEsS0FBQTtJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUE7RUFBQTtFQUFBLE9BQUEsTUFBQTtBQUFBO0FBQUEsU0FBQSx1QkFBQSxHQUFBO0VBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBO0lBQUEsT0FBQSxFQUFBO0VBQUE7QUFBQTtBQUl2RixTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUU7RUFDbkIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUM7RUFDaEMsVUFBVSxDQUFDLFlBQVc7SUFDckIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7SUFDL0IsSUFBSSxDQUFDLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLEVBQUU7TUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hCO0VBQ0QsQ0FBQyxFQUFFLFVBQUEsQ0FBQSxVQUFVLENBQUM7QUFDZjtBQUlBLFNBQVMsSUFBSSxDQUFDLE9BQU8sRUFBRTtFQUN0QixPQUFPLEdBQUcsT0FBQSxDQUFBLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDbEIsRUFBRSxFQUFRLElBQUk7SUFDZCxPQUFPLEVBQUcsSUFBSTtJQUNkLFFBQVEsRUFBRSxDQUFDO0lBQ1gsTUFBTSxFQUFJLENBQUEsS0FBTSxDQUFDO0VBQ2xCLENBQUMsRUFBRSxPQUFPLENBQUM7RUFFWCxNQUFNLE1BQU0sR0FBTSxJQUFBLE9BQUEsQ0FBQSxPQUFDLEVBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztJQUM5QixXQUFXLEdBQUcsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDaEMsS0FBSyxHQUFTLFdBQVcsQ0FBQyxNQUFNLEdBQUcsVUFBQSxDQUFBLFVBQVUsR0FBRyxDQUFDO0VBR2xELElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtJQUN2QixLQUFLLENBQUMsV0FBVyxDQUFDO0VBQ25CLENBQUMsTUFBTTtJQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztFQUNqQjtFQUNBLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDO0VBRS9CLFVBQVUsQ0FBQyxNQUFNO0lBQ2hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVoQixVQUFVLENBQUMsTUFBTTtNQUNoQixNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztJQUNqQyxDQUFDLEVBQUUsVUFBQSxDQUFBLFNBQVMsQ0FBQztFQUNkLENBQUMsRUFBRSxLQUFLLENBQUM7RUFHVCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUMvQyxXQUFXLEdBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztFQUU5QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0VBRW5FLElBQUksV0FBVyxFQUFFO0lBQ2hCLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzdCLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO0VBQzdCO0FBQ0Q7QUFJQSxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUU7RUFDdkIsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0VBRWhDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ3RDLE1BQU0sR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7RUFFeEIsSUFBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFLLENBQUMsT0FBQSxDQUFBLE9BQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ2pFO0VBQ0Q7RUFFQSxNQUFNLENBQUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0VBQzNFLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUM5QixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFakMsTUFBTSxDQUFDLEdBQUcsSUFBSyxRQUFRLENBQUMsR0FBRztJQUMzQixNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJO0lBQzVCLE9BQU8sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7RUFDakM7RUFFQSxPQUFPLE1BQU07QUFDZDtBQUlBLFNBQVMsYUFBYSxDQUFDLElBQUksRUFBRTtFQUM1QixNQUFNLFFBQVEsR0FBRyxJQUFJLHNCQUFBLENBQUEsT0FBa0IsQ0FBQyxPQUFBLENBQUEsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNoRCxxQkFBcUIsRUFBRSxNQUFNO0lBQzdCLFNBQVMsRUFBYyxPQUFPO0lBQzlCLElBQUksRUFBbUIsS0FBSztJQUM1QixVQUFVLEVBQWEsY0FBQSxDQUFBO0VBQ3hCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztFQUVULFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUVmLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtJQUNwQixRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUN4QjtBQUNEO0FBSUEsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLE1BQU07RUFDUDtFQUNBLFVBQUEsQ0FBQSxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBUyxDQUFDLEVBQUU7SUFDL0MsTUFBTSxPQUFPLEdBQUssSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLElBQUksQ0FBQztNQUN4QixXQUFXLEdBQUcsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLGVBQWUsQ0FBQztNQUNoQyxLQUFLLEdBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFFL0MsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7TUFDMUM7SUFDRDtJQUNBLE9BQU8sQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7SUFFckMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xCLFVBQVUsQ0FBQyxNQUFNO01BQ2hCLElBQUksQ0FBQztRQUNKLEVBQUUsRUFBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QixPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sR0FBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBSSxJQUFJO1FBQ25FLEtBQUssRUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVk7TUFDbkMsQ0FBQyxDQUFDO01BQ0YsT0FBTyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztJQUN6QyxDQUFDLEVBQUUsS0FBSyxDQUFDO0VBQ1YsQ0FBQyxDQUFDOztFQUlGO0VBQ0EsVUFBQSxDQUFBLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVMsQ0FBQyxFQUFFO0lBQ2xDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7TUFDdkMsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLDZCQUE2QixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUNsRDtFQUNELENBQUMsQ0FBQzs7RUFJRjtFQUNBLFVBQUEsQ0FBQSxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBUyxDQUFDLEVBQUU7SUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7TUFDMUIsUUFBUSxHQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTTtNQUNuRCxNQUFNLEdBQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNO01BQ2pELFNBQVMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTTtJQUVyRCxJQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxJQUFLLFFBQVEsRUFBRTtNQUN4QyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQztFQUNELENBQUMsQ0FBQzs7RUFJRjtFQUNBLGFBQWEsQ0FBQztJQUNiLE9BQU8sRUFBRyxnQkFBZ0I7SUFDMUIsUUFBUSxFQUFFO0VBQ1gsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDOzs7Ozs7Ozs7QUM3SkYsSUFBQSxPQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxVQUFBLEdBQUEsT0FBQTtBQUF5RSxTQUFBLHVCQUFBLEdBQUE7RUFBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUE7SUFBQSxPQUFBLEVBQUE7RUFBQTtBQUFBO0FBSXpFLE1BQU0sTUFBTSxDQUFDO0VBQ1osV0FBVyxDQUFDLEVBQUUsRUFBRTtJQUNmLElBQUksQ0FBQyxHQUFHLEdBQVMsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLEVBQUUsQ0FBQztJQUN0QixJQUFJLENBQUMsUUFBUSxHQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDO0lBQ3RELElBQUksQ0FBQyxLQUFLLEdBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO0lBQ25ELElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQztJQUVsQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7SUFDaEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsQixJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztFQUN2QjtFQUlBLGlCQUFpQixDQUFBLEVBQUc7SUFDbkIsSUFBSSxjQUFjLEdBQUcsS0FBSztJQUcxQixJQUFJLE1BQU0sR0FBRyxDQUFBLEtBQU07TUFDbEIsSUFBSSxVQUFBLENBQUEsUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztRQUNsQyxjQUFjLEdBQUcsSUFBSTtNQUN0QjtNQUNBLElBQUksQ0FBQyxVQUFBLENBQUEsUUFBUSxJQUFJLGNBQWMsRUFBRTtRQUNoQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUM7UUFDckMsY0FBYyxHQUFHLEtBQUs7TUFDdkI7SUFDRCxDQUFDO0lBQ0QsTUFBTSxDQUFDLENBQUM7SUFDUixVQUFBLENBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO0VBQzdCO0VBSUEsWUFBWSxDQUFBLEVBQUc7SUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTTtNQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUM7TUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUM7TUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztJQUMvRCxDQUFDLENBQUM7RUFDSDtFQUlBLFdBQVcsQ0FBQSxFQUFHO0lBQ2IsSUFBSSxJQUFJLEdBQVEsSUFBSTtNQUNuQixRQUFRLEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO01BQzVDLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztNQUN6QyxJQUFJLEdBQVEsMkJBQTJCO0lBRXhDLFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVqQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVc7TUFDeEIsSUFBSSxPQUFPLEdBQUssSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLElBQUksQ0FBQztRQUN0QixTQUFTLEdBQUcsY0FBYztRQUMxQixTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7TUFFbEMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzdCLFNBQVMsSUFBSSx1QkFBdUI7TUFDckM7TUFDQSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDN0IsU0FBUyxJQUFJLHNCQUFzQjtRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztNQUNqQztNQUVBLFNBQVMsR0FBRyxTQUFTLEdBQUcsY0FBYyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsRUFBRTtNQUM3RCxJQUFJLElBQUksYUFBYSxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxPQUFPO0lBQ3JGLENBQUMsQ0FBQztJQUNGLElBQUksSUFBSSxPQUFPO0lBRWYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO0VBQzdDO0VBSUEsY0FBYyxDQUFBLEVBQUc7SUFDaEIsSUFBSSxJQUFJLEdBQUcsSUFBSTtJQUVmLElBQUksQ0FBQyxNQUFNLENBQ1QsRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFXO01BQzVCLElBQUksS0FBSyxHQUFHLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxJQUFJLENBQUM7TUFFbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsRUFBRTtRQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQztRQUM5QyxLQUFLLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO01BQ3RDO0lBQ0QsQ0FBQyxDQUFDLENBQ0QsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFXO01BQ3ZCLElBQUksS0FBSyxHQUFHLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxJQUFJLENBQUM7UUFDbEIsR0FBRyxHQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO01BRWpELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLEVBQUU7UUFDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFOUIsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1VBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDekM7UUFDQSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUM7TUFDdEM7SUFDRCxDQUFDLENBQUM7RUFDSjtFQUlBLGVBQWUsQ0FBQSxFQUFHO0lBQ2pCLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFHLENBQUMsSUFBSztNQUM1QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUNoRixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztNQUMvRDtJQUNELENBQUMsQ0FBQztFQUNIO0VBSUEsZUFBZSxDQUFBLEVBQUc7SUFDakIsSUFBSSxJQUFJLEdBQUcsSUFBSTtJQUVmLFNBQVMsTUFBTSxDQUFBLEVBQUc7TUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUN6RCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7TUFDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RCO0lBRUEsSUFBSSxDQUFDLFFBQVEsQ0FDWCxFQUFFLENBQUMsa0JBQWtCLEVBQUUsWUFBVztNQUNsQztNQUNBLFVBQVUsQ0FBQyxNQUFNO1FBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFL0IsSUFBSSxDQUFDLEdBQUcsRUFBRTtVQUNULElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztRQUNsQyxDQUFDLE1BQU07VUFDTixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7UUFDckM7UUFFQSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBRTtVQUM1QixJQUFJLEtBQUssR0FBRyxJQUFBLE9BQUEsQ0FBQSxPQUFDLEVBQUMsSUFBSSxDQUFDO1lBQ2xCLElBQUksR0FBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7VUFFckIsSUFBSyxHQUFHLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBTSxHQUFHLEtBQUssSUFBSyxJQUFLLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUUsRUFBRTtZQUM3RyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUM7WUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDO1lBQzlDLEtBQUssQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7VUFDdEM7UUFDRCxDQUFDLENBQUM7TUFDSCxDQUFDLEVBQUUsVUFBQSxDQUFBLFNBQVMsQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUNELEVBQUUsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztFQUN0QztBQUNEO0FBSUEsU0FBUyxJQUFJLENBQUEsRUFBRztFQUNmLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQywyQkFBMkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFXO0lBQzlDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQztFQUNqQixDQUFDLENBQUM7QUFDSDtBQUlBLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxNQUFNO0VBQ1AsSUFBSSxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7Ozs7Ozs7OztBQ25MRixJQUFBLE9BQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFVBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxVQUFBLEdBQUEsT0FBQTtBQUFxRCxTQUFBLHVCQUFBLEdBQUE7RUFBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUE7SUFBQSxPQUFBLEVBQUE7RUFBQTtBQUFBO0FBSXJELFNBQVMsSUFBSSxDQUFBLEVBQUc7RUFDZixJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0lBQzlDLElBQUksS0FBSyxHQUFHLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxLQUFLLENBQUM7SUFFcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7TUFDbEI7SUFDRDtJQUVBLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRS9ELE9BQUEsQ0FBQSxPQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRyxNQUFNLElBQUs7TUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFXO1FBQ3JCLElBQUksSUFBSSxHQUFHLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxJQUFJLENBQUM7UUFFbEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkQsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7UUFFbkMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRTtVQUN4RDtRQUNEO1FBRUEsSUFBSSxHQUFHLEVBQUU7VUFDUixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7VUFDekIsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7VUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUM7UUFDdEIsQ0FBQyxNQUFNO1VBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2Q7TUFDRCxDQUFDLENBQUM7TUFDRixJQUFJLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztFQUNIO0FBQ0Q7QUFJQSxJQUFBLE9BQUEsQ0FBQSxPQUFDLEVBQUMsTUFBTTtFQUNQLElBQUksQ0FBQyxDQUFDO0VBQ04sVUFBQSxDQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUEsVUFBQSxDQUFBLFFBQVEsRUFBQyxNQUFNO0lBQ3hDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsVUFBQSxDQUFBLFNBQVMsQ0FBQztFQUM1QixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQzs7Ozs7QUNoREYsSUFBQSxPQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxVQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFBcUQsU0FBQSx1QkFBQSxHQUFBO0VBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBO0lBQUEsT0FBQSxFQUFBO0VBQUE7QUFBQTtBQUlyRCxJQUFBLE9BQUEsQ0FBQSxPQUFDLEVBQUMsTUFBTTtFQUNQLElBQUksR0FBRyxHQUFNLElBQUk7SUFDaEIsTUFBTSxHQUFHLEdBQUc7RUFFYixTQUFTLE9BQU8sQ0FBQSxFQUFHO0lBQ2xCLEdBQUcsR0FBRyxVQUFBLENBQUEsUUFBUSxHQUFHLElBQUksR0FBRyxNQUFNO0lBQzlCLElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRTtNQUNuQjtJQUNEO0lBRUEsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFXO01BQ3pCLElBQUksSUFBSSxHQUFNLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxJQUFJLENBQUM7UUFDcEIsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixPQUFPLEdBQUcsSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUUxRCxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO01BQ3RDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO01BQzVFLE9BQU8sR0FBRyxJQUFBLE9BQUEsQ0FBQSxPQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztNQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUMxQixDQUFDLENBQUM7SUFDRixNQUFNLEdBQUcsR0FBRztFQUNiO0VBQ0EsT0FBTyxDQUFDLENBQUM7RUFDVCxVQUFBLENBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBQSxVQUFBLENBQUEsUUFBUSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLENBQUMsQ0FBQzs7Ozs7Ozs7O0FDOUJGLElBQUEsT0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFBcUQsU0FBQSx1QkFBQSxHQUFBO0VBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBO0lBQUEsT0FBQSxFQUFBO0VBQUE7QUFBQTtBQUlyRCxNQUFNLFVBQVUsR0FBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFBQyxPQUFBLENBQUEsVUFBQSxHQUFBLFVBQUE7QUFFWCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7RUFDcEQsVUFBVSxHQUFLLEdBQUc7RUFDbEIsU0FBUyxHQUFNLEVBQUU7RUFBRTtFQUNuQixVQUFVLEdBQUssZ0VBQWdFO0FBQUMsT0FBQSxDQUFBLFNBQUEsR0FBQSxTQUFBO0FBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxVQUFBO0FBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxVQUFBO0FBRWpGLElBQUksUUFBUSxHQUFTLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztFQUN4RCxjQUFjLEdBQUcsVUFBVTtFQUMzQixPQUFPO0VBQ1AsUUFBUTtBQUFDLE9BQUEsQ0FBQSxRQUFBLEdBQUEsUUFBQTtBQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsT0FBQTtBQUFBLE9BQUEsQ0FBQSxRQUFBLEdBQUEsUUFBQTtBQUdWLE1BQU0sVUFBVSxHQUFHO0VBQ2xCLE1BQU0sRUFBRSxJQUFJO0VBQ1osS0FBSyxFQUFHLEdBQUc7RUFFWCxRQUFRLEVBQUUsQ0FBQSxLQUFNO0lBQ2YsVUFBVSxDQUFDLFFBQVEsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU07SUFDckQsVUFBVSxDQUFDLE9BQU8sR0FBSSxVQUFVLElBQUksVUFBVSxDQUFDLEtBQUs7RUFDckQ7QUFDRCxDQUFDO0FBQUMsT0FBQSxDQUFBLFVBQUEsR0FBQSxVQUFBO0FBQ0YsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBR3JCLElBQUEsT0FBQSxDQUFBLE9BQUMsRUFBQyxNQUFNO0VBQ1AsT0FBQSxDQUFBLE9BQUEsR0FBQSxPQUFPLEdBQUksSUFBQSxPQUFBLENBQUEsT0FBQyxFQUFDLE1BQU0sQ0FBQztFQUNwQixPQUFBLENBQUEsUUFBQSxHQUFBLFFBQVEsR0FBRyxJQUFBLE9BQUEsQ0FBQSxPQUFDLEVBQUMsZ0JBQWdCLENBQUM7RUFFOUIsT0FBTyxDQUNMLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBQSxVQUFBLENBQUEsUUFBUSxFQUFDLE1BQU07SUFDNUIsT0FBQSxDQUFBLFFBQUEsR0FBQSxRQUFRLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBRS9DLElBQUksY0FBYyxLQUFLLFVBQVUsRUFBRTtNQUNsQyxjQUFjLEdBQUcsVUFBVTtNQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUMvQjtFQUNELENBQUMsQ0FBQyxDQUFDLENBQ0YsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFBLFVBQUEsQ0FBQSxRQUFRLEVBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25ELENBQUMsQ0FBQzs7Ozs7QUNqREYsT0FBQTtBQUNBLE9BQUE7QUFDQSxPQUFBO0FBQ0EsT0FBQTtBQUNBLE9BQUE7QUFDQSxPQUFBO0FBQ0EsT0FBQTtBQUVBLE9BQUE7QUFFQSxPQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjcuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMy0wNS0xMVQxODoyOVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgdHJhYy0xNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXIgdmVyc2lvbiA9IFwiMy43LjBcIixcblxuXHRyaHRtbFN1ZmZpeCA9IC9IVE1MJC9pLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXG5cdC8vIFJldHJpZXZlIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuXHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbm9kZSxcblx0XHRcdHJldCA9IFwiXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRcdHJldCArPSBqUXVlcnkudGV4dCggbm9kZSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHRcdH1cblxuXHRcdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0aXNYTUxEb2M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZVxuXHRcdC8vIGRvY3VtZW50IGZyYWdtZW50cy5cblx0XHRyZXR1cm4gIXJodG1sU3VmZml4LnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHBvcCA9IGFyci5wb3A7XG5cblxudmFyIHNvcnQgPSBhcnIuc29ydDtcblxuXG52YXIgc3BsaWNlID0gYXJyLnNwbGljZTtcblxuXG52YXIgd2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIjtcblxuXG52YXIgcnRyaW1DU1MgPSBuZXcgUmVnRXhwKFxuXHRcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLFxuXHRcImdcIlxuKTtcblxuXG5cblxuLy8gTm90ZTogYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxualF1ZXJ5LmNvbnRhaW5zID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdHZhciBidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblxuXHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHQvLyBJRSBkb2Vzbid0IGhhdmUgYGNvbnRhaW5zYCBvbiBTVkcuXG5cdFx0YS5jb250YWlucyA/XG5cdFx0XHRhLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0KSApO1xufTtcblxuXG5cblxuLy8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cbi8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xudmFyIHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXHg4MC1cXHVGRkZGXFx3LV0vZztcblxuZnVuY3Rpb24gZmNzc2VzY2FwZSggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHR9XG5cblx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdH1cblxuXHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdHJldHVybiBcIlxcXFxcIiArIGNoO1xufVxuXG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuXG5cblxudmFyIHByZWZlcnJlZERvYyA9IGRvY3VtZW50LFxuXHRwdXNoTmF0aXZlID0gcHVzaDtcblxuKCBmdW5jdGlvbigpIHtcblxudmFyIGksXG5cdEV4cHIsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXHRwdXNoID0gcHVzaE5hdGl2ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdGRvY3VtZW50LFxuXHRkb2N1bWVudEVsZW1lbnQsXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdG1hdGNoZXMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0galF1ZXJ5LmV4cGFuZG8sXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8XCIgK1xuXHRcdFwibG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJsZWFkaW5nQ29tYmluYXRvciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0SUQ6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRDTEFTUzogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRUQUc6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRBVFRSOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRQU0VVRE86IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdENISUxEOiBuZXcgUmVnRXhwKFxuXHRcdFx0XCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdGJvb2w6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0bmVlZHNDb250ZXh0OiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0aWYgKCBub25IZXggKSB7XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0cmV0dXJuIG5vbkhleDtcblx0XHR9XG5cblx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdHJldHVybiBoaWdoIDwgMCA/XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXM7IHNlZSBgc2V0RG9jdW1lbnRgLlxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRS9FZGdlLlxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgbm9kZU5hbWUoIGVsZW0sIFwiZmllbGRzZXRcIiApO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7XG5cdFx0YXBwbHk6IGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9LFxuXHRcdGNhbGw6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApICk7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBmaW5kKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggIW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCBybGVhZGluZ0NvbWJpbmF0b3IudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW5cblx0XHRcdFx0XHQvLyBzdHJpY3QtY29tcGFyaW5nIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IGpRdWVyeS5lc2NhcGVTZWxlY3RvciggbmlkICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXNcblx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8xNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBqUXVlcnkgc2VsZWN0b3IgbW9kdWxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IG5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICkgKSAmJlxuXHRcdFx0ZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExK1xuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIGpRdWVyeSBzZWxlY3RvciBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW25vZGVdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbmZ1bmN0aW9uIHNldERvY3VtZW50KCBub2RlICkge1xuXHR2YXIgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhalF1ZXJ5LmlzWE1MRG9jKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUyA3IG9ubHksIElFIDkgLSAxMStcblx0Ly8gT2xkZXIgYnJvd3NlcnMgZGlkbid0IHN1cHBvcnQgdW5wcmVmaXhlZCBgbWF0Y2hlc2AuXG5cdG1hdGNoZXMgPSBkb2N1bWVudEVsZW1lbnQubWF0Y2hlcyB8fFxuXHRcdGRvY3VtZW50RWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2N1bWVudEVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKHNlZSB0cmFjLTEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBqUXVlcnkuZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8XG5cdFx0XHQhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGpRdWVyeS5leHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlLlxuXHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0cmV0dXJuIG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIElFL0VkZ2UgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlXCIgKTtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTEgb25seSwgU2FmYXJpIDE1LjQgLSAxNi4zIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBpcyBwYXJzZWQgdW5mb3JnaXZpbmdseS5cblx0Ly8gV2UgaW5jbHVkZSBgKmAgaW4gdGhlIHRlc3QgdG8gZGV0ZWN0IGJ1Z2d5IGltcGxlbWVudGF0aW9ucyB0aGF0IGFyZVxuXHQvLyBfc2VsZWN0aXZlbHlfIGZvcmdpdmluZyAoc3BlY2lmaWNhbGx5IHdoZW4gdGhlIGxpc3QgaW5jbHVkZXMgYXQgbGVhc3Rcblx0Ly8gb25lIHZhbGlkIHNlbGVjdG9yKS5cblx0Ly8gTm90ZSB0aGF0IHdlIHRyZWF0IGNvbXBsZXRlIGxhY2sgb2Ygc3VwcG9ydCBmb3IgYDpoYXMoKWAgYXMgaWYgaXQgd2VyZVxuXHQvLyBzcGVjLWNvbXBsaWFudCBzdXBwb3J0LCB3aGljaCBpcyBmaW5lIGJlY2F1c2UgdXNlIG9mIGA6aGFzKClgIGluIHN1Y2hcblx0Ly8gZW52aXJvbm1lbnRzIHdpbGwgZmFpbCBpbiB0aGUgcVNBIHBhdGggYW5kIGZhbGwgYmFjayB0byBqUXVlcnkgdHJhdmVyc2FsXG5cdC8vIGFueXdheS5cblx0c3VwcG9ydC5jc3NIYXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBcIjpoYXMoKiw6anFmYWtlKVwiICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZC5JRCA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kLklEID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmQuVEFHID0gZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmQuQ0xBU1MgPSBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0cmJ1Z2d5UVNBID0gW107XG5cblx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHR2YXIgaW5wdXQ7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID1cblx0XHRcdFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJyBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz5cIiArXG5cdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOCBvbmx5XG5cdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseSBpbiBzb21lIFhNTCBkb2N1bWVudHNcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDggb25seVxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDggb25seVxuXHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0xMDUrLCBGaXJlZm94IDw9MTA0KywgU2FmYXJpIDw9MTUuNCtcblx0XHQvLyBJbiBzb21lIG9mIHRoZSBkb2N1bWVudCBraW5kcywgdGhlc2Ugc2VsZWN0b3JzIHdvdWxkbid0IHdvcmsgbmF0aXZlbHkuXG5cdFx0Ly8gVGhpcyBpcyBwcm9iYWJseSBPSyBidXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdlIHdhbnQgdG8gbWFpbnRhaW5cblx0XHQvLyBoYW5kbGluZyB0aGVtIHRocm91Z2ggalF1ZXJ5IHRyYXZlcnNhbCBpbiBqUXVlcnkgMy54LlxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTEwNSssIEZpcmVmb3ggPD0xMDQrLCBTYWZhcmkgPD0xNS40K1xuXHRcdC8vIEluIHNvbWUgb2YgdGhlIGRvY3VtZW50IGtpbmRzLCB0aGVzZSBzZWxlY3RvcnMgd291bGRuJ3Qgd29yayBuYXRpdmVseS5cblx0XHQvLyBUaGlzIGlzIHByb2JhYmx5IE9LIGJ1dCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2Ugd2FudCB0byBtYWludGFpblxuXHRcdC8vIGhhbmRsaW5nIHRoZW0gdGhyb3VnaCBqUXVlcnkgdHJhdmVyc2FsIGluIGpRdWVyeSAzLnguXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHR9XG5cdH0gKTtcblxuXHRpZiAoICFzdXBwb3J0LmNzc0hhcyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTArLCBTYWZhcmkgMTUuNCAtIDE2LjMrXG5cdFx0Ly8gT3VyIHJlZ3VsYXIgYHRyeS1jYXRjaGAgbWVjaGFuaXNtIGZhaWxzIHRvIGRldGVjdCBuYXRpdmVseS11bnN1cHBvcnRlZFxuXHRcdC8vIHBzZXVkby1jbGFzc2VzIGluc2lkZSBgOmhhcygpYCAoc3VjaCBhcyBgOmhhcyg6Y29udGFpbnMoXCJGb29cIikpYClcblx0XHQvLyBpbiBicm93c2VycyB0aGF0IHBhcnNlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBhcyBhIGZvcmdpdmluZyBzZWxlY3RvciBsaXN0LlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMvI3JlbGF0aW9uYWwgbm93IHJlcXVpcmVzIHRoZSBhcmd1bWVudFxuXHRcdC8vIHRvIGJlIHBhcnNlZCB1bmZvcmdpdmluZ2x5LCBidXQgYnJvd3NlcnMgaGF2ZSBub3QgeWV0IGZ1bGx5IGFkanVzdGVkLlxuXHRcdHJidWdneVFTQS5wdXNoKCBcIjpoYXNcIiApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0ZmluZC5jb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufVxuXG5maW5kLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBmaW5kKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuZmluZC5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmaW5kKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuZmluZC5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblxuZmluZC5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSB0cmFjLTEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCB2YWwgIT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG59O1xuXG5maW5kLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cbmpRdWVyeS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdC8vXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjArXG5cdC8vIFRlc3RpbmcgZm9yIGRldGVjdGluZyBkdXBsaWNhdGVzIGlzIHVucHJlZGljdGFibGUgc28gaW5zdGVhZCBhc3N1bWUgd2UgY2FuJ3Rcblx0Ly8gZGVwZW5kIG9uIGR1cGxpY2F0ZSBkZXRlY3Rpb24gaW4gYWxsIGJyb3dzZXJzIHdpdGhvdXQgYSBzdGFibGUgc29ydC5cblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuc29ydFN0YWJsZTtcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiBzbGljZS5jYWxsKCByZXN1bHRzLCAwICk7XG5cdHNvcnQuY2FsbCggcmVzdWx0cywgc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRzcGxpY2UuY2FsbCggcmVzdWx0cywgZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG5qUXVlcnkuZm4udW5pcXVlU29ydCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS51bmlxdWVTb3J0KCBzbGljZS5hcHBseSggdGhpcyApICkgKTtcbn07XG5cbkV4cHIgPSBqUXVlcnkuZXhwciA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRBVFRSOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIiApXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0Q0hJTEQ6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiIClcblx0XHRcdFx0KTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwci5DSElMRC50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0VEFHOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBleHBlY3RlZE5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgZXhwZWN0ZWROb2RlTmFtZSApO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRDTEFTUzogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArXG5cdFx0XHRcdFx0XCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRBVFRSOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgPT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiIT1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICE9PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIl49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiKj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIiQ9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApXG5cdFx0XHRcdFx0XHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwifD1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdENISUxEOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZU5hbWUoIG5vZGUsIG5hbWUgKSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8ICggcGFyZW50WyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlTmFtZSggbm9kZSwgbmFtZSApIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBqUXVlcnkgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YuY2FsbCggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRub3Q6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvaXNzdWVzLzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0aGFzOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGZpbmQoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Y29udGFpbnM6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGpRdWVyeS50ZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0bGFuZzogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0dGFyZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRyb290OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSxcblxuXHRcdGZvY3VzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmXG5cdFx0XHRcdGRvY3VtZW50Lmhhc0ZvY3VzKCkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0ZW5hYmxlZDogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0ZGlzYWJsZWQ6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRjaGVja2VkOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUoIGVsZW0sIFwib3B0aW9uXCIgKSAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0c2VsZWN0ZWQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG5cdFx0XHQvLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gdHJlYXQgdGhlIGRlZmF1bHQgb3B0aW9uIGFzXG5cdFx0XHQvLyBzZWxlY3RlZCB3aGVuIGluIGFuIG9wdGdyb3VwLlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdGVtcHR5OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zLmVtcHR5KCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRoZWFkZXI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRpbnB1dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdGJ1dHRvbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fFxuXHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApO1xuXHRcdH0sXG5cblx0XHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiBlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDEwIG9ubHlcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhclxuXHRcdFx0XHQvLyB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRmaXJzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0bGFzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRlcTogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0ZXZlbjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdG9kZDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGx0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGk7XG5cblx0XHRcdGlmICggYXJndW1lbnQgPCAwICkge1xuXHRcdFx0XHRpID0gYXJndW1lbnQgKyBsZW5ndGg7XG5cdFx0XHR9IGVsc2UgaWYgKCBhcmd1bWVudCA+IGxlbmd0aCApIHtcblx0XHRcdFx0aSA9IGxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkgPSBhcmd1bWVudDtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGd0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zLm50aCA9IEV4cHIucHNldWRvcy5lcTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG5mdW5jdGlvbiB0b2tlbml6ZSggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmxlYWRpbmdDb21iaW5hdG9yLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW1DU1MsIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0aWYgKCBwYXJzZU9ubHkgKSB7XG5cdFx0cmV0dXJuIHNvRmFyLmxlbmd0aDtcblx0fVxuXG5cdHJldHVybiBzb0ZhciA/XG5cdFx0ZmluZC5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIG5vZGVOYW1lKCBlbGVtLCBza2lwICkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0ZmluZCggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSwgbWF0Y2hlck91dCxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fFxuXHRcdFx0XHRtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zO1xuXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlclxuXHRcdFx0Ly8gb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdG1hdGNoZXJPdXQgPSBwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFtdIDpcblxuXHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0cmVzdWx0cztcblxuXHRcdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVySW47XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mLmNhbGwoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudFxuXHRcdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZC5UQUcoIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDkgb25seVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nXG5cdFx0XHQvLyBlbGVtZW50cyBieSBpZC4gKHNlZSB0cmFjLTE0MTQyKVxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHB1c2guY2FsbCggcmVzdWx0cywgZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuZnVuY3Rpb24gY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn1cblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIGpRdWVyeSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggalF1ZXJ5IHNlbGVjdG9yIGNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5mdW5jdGlvbiBzZWxlY3QoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kLklEKFxuXHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0Y29udGV4dFxuXHRcdFx0KSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJlxuXHRcdFx0XHRcdFx0dGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCAtIDQuMStcbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgLSA0LjErXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbmpRdWVyeS5maW5kID0gZmluZDtcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IGpRdWVyeS51bmlxdWVTb3J0O1xuXG4vLyBUaGVzZSBoYXZlIGFsd2F5cyBiZWVuIHByaXZhdGUsIGJ1dCB0aGV5IHVzZWQgdG8gYmUgZG9jdW1lbnRlZFxuLy8gYXMgcGFydCBvZiBTaXp6bGUgc28gbGV0J3MgbWFpbnRhaW4gdGhlbSBpbiB0aGUgMy54IGxpbmVcbi8vIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBwdXJwb3Nlcy5cbmZpbmQuY29tcGlsZSA9IGNvbXBpbGU7XG5maW5kLnNlbGVjdCA9IHNlbGVjdDtcbmZpbmQuc2V0RG9jdW1lbnQgPSBzZXREb2N1bWVudDtcblxuZmluZC5lc2NhcGUgPSBqUXVlcnkuZXNjYXBlU2VsZWN0b3I7XG5maW5kLmdldFRleHQgPSBqUXVlcnkudGV4dDtcbmZpbmQuaXNYTUwgPSBqUXVlcnkuaXNYTUxEb2M7XG5maW5kLnNlbGVjdG9ycyA9IGpRdWVyeS5leHByO1xuZmluZC5zdXBwb3J0ID0galF1ZXJ5LnN1cHBvcnQ7XG5maW5kLnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlU29ydDtcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cbn0gKSgpO1xuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICh0cmFjLTk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICh0cmFjLTExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBqUXVlcnkjZmluZFxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIGVycm9yLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rKCk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgZGVwcmVjYXRlZCBhbGlhcyBvZiB0aGUgYWJvdmUuIFdoaWxlIHRoZSBuYW1lIHN1Z2dlc3RzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmV0dXJuaW5nIHRoZSBzdGFjaywgbm90IGFuIGVycm9yIGluc3RhbmNlLCBqUXVlcnkganVzdCBwYXNzZXNcblx0XHRcdFx0XHRcdFx0XHQvLyBpdCBkaXJlY3RseSB0byBgY29uc29sZS53YXJuYCBzbyBib3RoIHdpbGwgd29yazsgYW4gaW5zdGFuY2Vcblx0XHRcdFx0XHRcdFx0XHQvLyBqdXN0IGJldHRlciBjb29wZXJhdGVzIHdpdGggc291cmNlIG1hcHMuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxuLy8gSWYgYGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2tgIGlzIGRlZmluZWQsIGBhc3luY0Vycm9yYCBpcyBhbiBlcnJvclxuLy8gY2FwdHVyZWQgYmVmb3JlIHRoZSBhc3luYyBiYXJyaWVyIHRvIGdldCB0aGUgb3JpZ2luYWwgZXJyb3IgY2F1c2Vcbi8vIHdoaWNoIG1heSBvdGhlcndpc2UgYmUgaGlkZGVuLlxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIGFzeW5jRXJyb3IgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLFxuXHRcdFx0ZXJyb3Iuc3RhY2ssIGFzeW5jRXJyb3IgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlIHRyYWMtNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICh0cmFjLTk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSB0cmFjLTgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICh0cmFjLTE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICh0cmFjLTExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAodHJhYy0xNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAodHJhYy0xMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKHRyYWMtMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICh0cmFjLTEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAodHJhYy0xMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKHRyYWMtNjkxMSwgdHJhYy04MTY1LCB0cmFjLTExMzgyLCB0cmFjLTExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHRyYWMtMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgaXNTZXR1cCApIHtcblxuXHQvLyBNaXNzaW5nIGBpc1NldHVwYCBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWlzU2V0dXAgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdGlmICggIXNhdmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nXG5cdFx0XHRcdC8vIHRoZSBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQgKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXHRcdFx0XHRcdHNhdmVkWyAwIF0sXG5cdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdCkgKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50IGJ5IGFsbCBqUXVlcnkgaGFuZGxlcnMgd2hpbGUgYWxsb3dpbmdcblx0XHRcdFx0Ly8gbmF0aXZlIGhhbmRsZXJzIG9uIHRoZSBzYW1lIGVsZW1lbnQgdG8gcnVuLiBPbiB0YXJnZXQsIHRoaXMgaXMgYWNoaWV2ZWRcblx0XHRcdFx0Ly8gYnkgc3RvcHBpbmcgaW1tZWRpYXRlIHByb3BhZ2F0aW9uIGp1c3Qgb24gdGhlIGpRdWVyeSBldmVudC4gSG93ZXZlcixcblx0XHRcdFx0Ly8gdGhlIG5hdGl2ZSBldmVudCBpcyByZS13cmFwcGVkIGJ5IGEgalF1ZXJ5IG9uZSBvbiBlYWNoIGxldmVsIG9mIHRoZVxuXHRcdFx0XHQvLyBwcm9wYWdhdGlvbiBzbyB0aGUgb25seSB3YXkgdG8gc3RvcCBpdCBmb3IgalF1ZXJ5IGlzIHRvIHN0b3AgaXQgZm9yXG5cdFx0XHRcdC8vIGV2ZXJ5b25lIHZpYSBuYXRpdmUgYHN0b3BQcm9wYWdhdGlvbigpYC4gVGhpcyBpcyBub3QgYSBwcm9ibGVtIGZvclxuXHRcdFx0XHQvLyBmb2N1cy9ibHVyIHdoaWNoIGRvbid0IGJ1YmJsZSwgYnV0IGl0IGRvZXMgYWxzbyBzdG9wIGNsaWNrIG9uIGNoZWNrYm94ZXNcblx0XHRcdFx0Ly8gYW5kIHJhZGlvcy4gV2UgYWNjZXB0IHRoaXMgbGltaXRhdGlvbi5cblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICh0cmFjLTUwNCwgdHJhYy0xMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblxuXHRmdW5jdGlvbiBmb2N1c01hcHBlZEhhbmRsZXIoIG5hdGl2ZUV2ZW50ICkge1xuXHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBmb2N1c2luL2ZvY3Vzb3V0IGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHNcblx0XHRcdC8vIGZvY3VzL2JsdXIuIFRoaXMgaXMgYmVjYXVzZSB0aGUgZm9ybWVyIGFyZSBzeW5jaHJvbm91cyBpbiBJRSB3aGlsZSB0aGUgbGF0dGVyXG5cdFx0XHQvLyBhcmUgYXN5bmMuIEluIG90aGVyIGJyb3dzZXJzLCBhbGwgdGhvc2UgaGFuZGxlcnMgYXJlIGludm9rZWQgc3luY2hyb25vdXNseS5cblxuXHRcdFx0Ly8gYGhhbmRsZWAgZnJvbSBwcml2YXRlIGRhdGEgd291bGQgYWxyZWFkeSB3cmFwIHRoZSBldmVudCwgYnV0IHdlIG5lZWRcblx0XHRcdC8vIHRvIGNoYW5nZSB0aGUgYHR5cGVgIGhlcmUuXG5cdFx0XHR2YXIgaGFuZGxlID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBcImhhbmRsZVwiICksXG5cdFx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblx0XHRcdGV2ZW50LnR5cGUgPSBuYXRpdmVFdmVudC50eXBlID09PSBcImZvY3VzaW5cIiA/IFwiZm9jdXNcIiA6IFwiYmx1clwiO1xuXHRcdFx0ZXZlbnQuaXNTaW11bGF0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBGaXJzdCwgaGFuZGxlIGZvY3VzaW4vZm9jdXNvdXRcblx0XHRcdGhhbmRsZSggbmF0aXZlRXZlbnQgKTtcblxuXHRcdFx0Ly8gLi4udGhlbiwgaGFuZGxlIGZvY3VzL2JsdXJcblx0XHRcdC8vXG5cdFx0XHQvLyBmb2N1cy9ibHVyIGRvbid0IGJ1YmJsZSB3aGlsZSBmb2N1c2luL2ZvY3Vzb3V0IGRvOyBzaW11bGF0ZSB0aGUgZm9ybWVyIGJ5IG9ubHlcblx0XHRcdC8vIGludm9raW5nIHRoZSBoYW5kbGVyIGF0IHRoZSBsb3dlciBsZXZlbC5cblx0XHRcdGlmICggZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICkge1xuXG5cdFx0XHRcdC8vIFRoZSBzZXR1cCBwYXJ0IGNhbGxzIGBsZXZlcmFnZU5hdGl2ZWAsIHdoaWNoLCBpbiB0dXJuLCBjYWxsc1xuXHRcdFx0XHQvLyBgalF1ZXJ5LmV2ZW50LmFkZGAsIHNvIGV2ZW50IGhhbmRsZSB3aWxsIGFscmVhZHkgaGF2ZSBiZWVuIHNldFxuXHRcdFx0XHQvLyBieSB0aGlzIHBvaW50LlxuXHRcdFx0XHRoYW5kbGUoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIG5vbi1JRSBicm93c2VycywgYXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudFxuXHRcdFx0Ly8gd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0LlxuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBkZWxlZ2F0ZVR5cGUsIG5hdGl2ZUV2ZW50LnRhcmdldCxcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSApO1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBhdHRhY2hlcztcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCB0cnVlICk7XG5cblx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHRcdFx0Ly8gV2UgdXNlIHRoZSBzYW1lIG5hdGl2ZSBoYW5kbGVyIGZvciBmb2N1c2luICYgZm9jdXMgKGFuZCBmb2N1c291dCAmIGJsdXIpXG5cdFx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0XHQvLyBVc2UgYGRlbGVnYXRlVHlwZWAgYXMgdGhlIGtleSBhcyBgdHlwZWAgaXMgYWxyZWFkeSB1c2VkIGJ5IGBsZXZlcmFnZU5hdGl2ZWAuXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGF0dGFjaGVzO1xuXG5cdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSApIC0gMTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggdGhpcywgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHN0YW5kYXJkIHRlYXJkb3duIHNob3VsZCBiZSBhcHBsaWVkXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZVxuXHRcdC8vIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBldmVudC50YXJnZXQsIHR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcblx0Ly8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcblx0Ly8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG5cdC8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdC8vIFRvIHByZXNlcnZlIHJlbGF0aXZlIGZvY3VzaW4vZm9jdXMgJiBmb2N1c291dC9ibHVyIGV2ZW50IG9yZGVyIGd1YXJhbnRlZWQgb24gdGhlIDMueCBicmFuY2gsXG5cdC8vIGF0dGFjaCBhIHNpbmdsZSBoYW5kbGVyIGZvciBib3RoIGV2ZW50cyBpbiBJRS5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGRlbGVnYXRlVHlwZSBdID0ge1xuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0XHQvLyBXZSB1c2UgdGhlIHNhbWUgbmF0aXZlIGhhbmRsZXIgZm9yIGZvY3VzaW4gJiBmb2N1cyAoYW5kIGZvY3Vzb3V0ICYgYmx1cilcblx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0Ly8gVXNlIGBkZWxlZ2F0ZVR5cGVgIGFzIHRoZSBrZXkgYXMgYHR5cGVgIGlzIGFscmVhZHkgdXNlZCBieSBgbGV2ZXJhZ2VOYXRpdmVgLlxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHR9LFxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApIC0gMTtcblxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCBhdHRhY2hlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCFcXFtDREFUQVxcW3xcXF1cXF0+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKHRyYWMtODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVW53cmFwIGEgQ0RBVEEgc2VjdGlvbiBjb250YWluaW5nIHNjcmlwdCBjb250ZW50cy4gVGhpcyBzaG91bGRuJ3QgYmVcblx0XHRcdFx0XHRcdFx0Ly8gbmVlZGVkIGFzIGluIFhNTCBkb2N1bWVudHMgdGhleSdyZSBhbHJlYWR5IG5vdCB2aXNpYmxlIHdoZW5cblx0XHRcdFx0XHRcdFx0Ly8gaW5zcGVjdGluZyBlbGVtZW50IGNvbnRlbnRzIGFuZCBpbiBIVE1MIGRvY3VtZW50cyB0aGV5IGhhdmUgbm9cblx0XHRcdFx0XHRcdFx0Ly8gbWVhbmluZyBidXQgd2UncmUgcHJlc2VydmluZyB0aGF0IGxvZ2ljIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgY29tcGxldGVseSBpbiA0LjAuIFNlZSBnaC00OTA0LlxuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IGpRdWVyeSNmaW5kIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6XG5cdFx0XHQvLyBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciByY3VzdG9tUHJvcCA9IC9eLS0vO1xuXG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICh0cmFjLTE1MDk4LCB0cmFjLTE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAodHJhYy04OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgZGlzcGxheTogYmxvY2tcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCB0cmFjLTEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpIChnaC0zMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0Ly8gSUUgb25seSBzdXBwb3J0cyBgXCJmbG9hdFwiYCBpbiBgZ2V0UHJvcGVydHlWYWx1ZWA7IGluIGNvbXB1dGVkIHN0eWxlc1xuXHRcdC8vIGl0J3Mgb25seSBhdmFpbGFibGUgYXMgYFwiY3NzRmxvYXRcImAuIFdlIG5vIGxvbmdlciBtb2RpZnkgcHJvcGVydGllc1xuXHRcdC8vIHNlbnQgdG8gYC5jc3MoKWAgYXBhcnQgZnJvbSBjYW1lbENhc2luZywgc28gd2UgbmVlZCB0byBjaGVjayBib3RoLlxuXHRcdC8vIE5vcm1hbGx5LCB0aGlzIHdvdWxkIGNyZWF0ZSBkaWZmZXJlbmNlIGluIGJlaGF2aW9yOiBpZlxuXHRcdC8vIGBnZXRQcm9wZXJ0eVZhbHVlYCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZywgdGhlIHZhbHVlIHJldHVybmVkXG5cdFx0Ly8gYnkgYC5jc3MoKWAgd291bGQgYmUgYHVuZGVmaW5lZGAuIFRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBmb3Jcblx0XHQvLyBkaXNjb25uZWN0ZWQgZWxlbWVudHMuIEhvd2V2ZXIsIGluIElFIGV2ZW4gZGlzY29ubmVjdGVkIGVsZW1lbnRzXG5cdFx0Ly8gd2l0aCBubyBzdHlsZXMgcmV0dXJuIGBcIm5vbmVcImAgZm9yIGBnZXRQcm9wZXJ0eVZhbHVlKCBcImZsb2F0XCIgKWBcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggaXNDdXN0b21Qcm9wICYmIHJldCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAxMDUrLCBDaHJvbWUgPD0xMDUrXG5cdFx0XHQvLyBTcGVjIHJlcXVpcmVzIHRyaW1taW5nIHdoaXRlc3BhY2UgZm9yIGN1c3RvbSBwcm9wZXJ0aWVzIChnaC00OTI2KS5cblx0XHRcdC8vIEZpcmVmb3ggb25seSB0cmltcyBsZWFkaW5nIHdoaXRlc3BhY2UuIENocm9tZSBqdXN0IGNvbGxhcHNlc1xuXHRcdFx0Ly8gYm90aCBsZWFkaW5nICYgdHJhaWxpbmcgd2hpdGVzcGFjZSB0byBhIHNpbmdsZSBzcGFjZS5cblx0XHRcdC8vXG5cdFx0XHQvLyBGYWxsIGJhY2sgdG8gYHVuZGVmaW5lZGAgaWYgZW1wdHkgc3RyaW5nIHJldHVybmVkLlxuXHRcdFx0Ly8gVGhpcyBjb2xsYXBzZXMgYSBtaXNzaW5nIGRlZmluaXRpb24gd2l0aCBwcm9wZXJ0eSBkZWZpbmVkXG5cdFx0XHQvLyBhbmQgc2V0IHRvIGFuIGVtcHR5IHN0cmluZyBidXQgdGhlcmUncyBubyBzdGFuZGFyZCBBUElcblx0XHRcdC8vIGFsbG93aW5nIHVzIHRvIGRpZmZlcmVudGlhdGUgdGhlbSB3aXRob3V0IGEgcGVyZm9ybWFuY2UgcGVuYWx0eVxuXHRcdFx0Ly8gYW5kIHJldHVybmluZyBgdW5kZWZpbmVkYCBhbGlnbnMgd2l0aCBvbGRlciBqUXVlcnkuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gcnRyaW1DU1MgdHJlYXRzIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gYW5kIFUrMDAwQyBGT1JNIEZFRURcblx0XHRcdC8vIGFzIHdoaXRlc3BhY2Ugd2hpbGUgQ1NTIGRvZXMgbm90LCBidXQgdGhpcyBpcyBub3QgYSBwcm9ibGVtXG5cdFx0XHQvLyBiZWNhdXNlIENTUyBwcmVwcm9jZXNzaW5nIHJlcGxhY2VzIHRoZW0gd2l0aCBVKzAwMEEgTElORSBGRUVEXG5cdFx0XHQvLyAod2hpY2ggKmlzKiBDU1Mgd2hpdGVzcGFjZSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lucHV0LXByZXByb2Nlc3Npbmdcblx0XHRcdHJldCA9IHJldC5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICkgfHwgdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMCxcblx0XHRtYXJnaW5EZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0Ly8gQ291bnQgbWFyZ2luIGRlbHRhIHNlcGFyYXRlbHkgdG8gb25seSBhZGQgaXQgYWZ0ZXIgc2Nyb2xsIGd1dHRlciBhZGp1c3RtZW50LlxuXHRcdC8vIFRoaXMgaXMgbmVlZGVkIHRvIG1ha2UgbmVnYXRpdmUgbWFyZ2lucyB3b3JrIHdpdGggYG91dGVySGVpZ2h0KCB0cnVlIClgIChnaC0zOTgyKS5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdG1hcmdpbkRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YSArIG1hcmdpbkRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcblx0XHRhc3BlY3RSYXRpbzogdHJ1ZSxcblx0XHRib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuXHRcdGNvbHVtbkNvdW50OiB0cnVlLFxuXHRcdGZsZXhHcm93OiB0cnVlLFxuXHRcdGZsZXhTaHJpbms6IHRydWUsXG5cdFx0Zm9udFdlaWdodDogdHJ1ZSxcblx0XHRncmlkQXJlYTogdHJ1ZSxcblx0XHRncmlkQ29sdW1uOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW5FbmQ6IHRydWUsXG5cdFx0Z3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuXHRcdGdyaWRSb3c6IHRydWUsXG5cdFx0Z3JpZFJvd0VuZDogdHJ1ZSxcblx0XHRncmlkUm93U3RhcnQ6IHRydWUsXG5cdFx0bGluZUhlaWdodDogdHJ1ZSxcblx0XHRvcGFjaXR5OiB0cnVlLFxuXHRcdG9yZGVyOiB0cnVlLFxuXHRcdG9ycGhhbnM6IHRydWUsXG5cdFx0c2NhbGU6IHRydWUsXG5cdFx0d2lkb3dzOiB0cnVlLFxuXHRcdHpJbmRleDogdHJ1ZSxcblx0XHR6b29tOiB0cnVlLFxuXG5cdFx0Ly8gU1ZHLXJlbGF0ZWRcblx0XHRmaWxsT3BhY2l0eTogdHJ1ZSxcblx0XHRmbG9vZE9wYWNpdHk6IHRydWUsXG5cdFx0c3RvcE9wYWNpdHk6IHRydWUsXG5cdFx0c3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcblx0XHRzdHJva2VPcGFjaXR5OiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICh0cmFjLTczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyB0cmFjLTkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAodHJhYy03MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKHRyYWMtMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwgKHRyYWMtMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjdXIsIGN1clZhbHVlLCBjbGFzc05hbWUsIGksIGZpbmFsVmFsdWU7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3NOYW1lcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRjdXIgPSB0aGlzLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjdXIsIGN1clZhbHVlLCBjbGFzc05hbWUsIGksIGZpbmFsVmFsdWU7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSB0aGlzLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjbGFzc05hbWUsIGksIHNlbGYsXG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICh0cmFjLTE0Njg2LCB0cmFjLTE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAodHJhYy0yNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKHRyYWMtOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKHRyYWMtOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApIClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAodHJhYy02MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyB0cmFjLTc2NTMsIHRyYWMtODEyNSwgdHJhYy04MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICh0cmFjLTEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzIHRyYWMtOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKHRyYWMtMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgdHJhYy0xMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKHRyYWMtMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyB0cmFjLTk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKHRyYWMtMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vIHRyYWMtMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlIHRyYWMtODYwNSwgdHJhYy0xNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gdHJhYy0xNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcbi8vIFJlcXVpcmUgdGhhdCB0aGUgXCJ3aGl0ZXNwYWNlIHJ1blwiIHN0YXJ0cyBmcm9tIGEgbm9uLXdoaXRlc3BhY2Vcbi8vIHRvIGF2b2lkIE8oTl4yKSBiZWhhdmlvciB3aGVuIHRoZSBlbmdpbmUgd291bGQgdHJ5IG1hdGNoaW5nIFwiXFxzKyRcIiBhdCBlYWNoIHNwYWNlIHBvc2l0aW9uLlxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8KFteXFxzXFx1RkVGRlxceEEwXSlbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICh0cmFjLTcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICh0cmFjLTEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qIVxuICAqIFBob3RvU3dpcGUgTGlnaHRib3ggNS4zLjggLSBodHRwczovL3Bob3Rvc3dpcGUuY29tXG4gICogKGMpIDIwMjMgRG15dHJvIFNlbWVub3ZcbiAgKi9cbmZ1bmN0aW9uIHQodCxpLHMpe2NvbnN0IGg9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpKTtyZXR1cm4gdCYmKGguY2xhc3NOYW1lPXQpLHMmJnMuYXBwZW5kQ2hpbGQoaCksaH1mdW5jdGlvbiBpKHQsaSxzKXt0LnN0eWxlLndpZHRoPVwibnVtYmVyXCI9PXR5cGVvZiBpP2Ake2l9cHhgOmksdC5zdHlsZS5oZWlnaHQ9XCJudW1iZXJcIj09dHlwZW9mIHM/YCR7c31weGA6c31jb25zdCBzPVwiaWRsZVwiLGg9XCJsb2FkaW5nXCIsZT1cImxvYWRlZFwiLG49XCJlcnJvclwiO2Z1bmN0aW9uIG8odCxpLHM9ZG9jdW1lbnQpe2xldCBoPVtdO2lmKHQgaW5zdGFuY2VvZiBFbGVtZW50KWg9W3RdO2Vsc2UgaWYodCBpbnN0YW5jZW9mIE5vZGVMaXN0fHxBcnJheS5pc0FycmF5KHQpKWg9QXJyYXkuZnJvbSh0KTtlbHNle2NvbnN0IGU9XCJzdHJpbmdcIj09dHlwZW9mIHQ/dDppO2UmJihoPUFycmF5LmZyb20ocy5xdWVyeVNlbGVjdG9yQWxsKGUpKSl9cmV0dXJuIGh9ZnVuY3Rpb24gcigpe3JldHVybiEoIW5hdmlnYXRvci52ZW5kb3J8fCFuYXZpZ2F0b3IudmVuZG9yLm1hdGNoKC9hcHBsZS9pKSl9Y2xhc3MgYXtjb25zdHJ1Y3Rvcih0LGkpe3RoaXMudHlwZT10LHRoaXMuZGVmYXVsdFByZXZlbnRlZD0hMSxpJiZPYmplY3QuYXNzaWduKHRoaXMsaSl9cHJldmVudERlZmF1bHQoKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9fWNsYXNzIGN7Y29uc3RydWN0b3IoaSxzKXtpZih0aGlzLmVsZW1lbnQ9dChcInBzd3BfX2ltZyBwc3dwX19pbWctLXBsYWNlaG9sZGVyXCIsaT9cImltZ1wiOlwiZGl2XCIscyksaSl7Y29uc3QgdD10aGlzLmVsZW1lbnQ7dC5kZWNvZGluZz1cImFzeW5jXCIsdC5hbHQ9XCJcIix0LnNyYz1pLHQuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwicHJlc2VudGF0aW9uXCIpfXRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKX1zZXREaXNwbGF5ZWRTaXplKHQscyl7dGhpcy5lbGVtZW50JiYoXCJJTUdcIj09PXRoaXMuZWxlbWVudC50YWdOYW1lPyhpKHRoaXMuZWxlbWVudCwyNTAsXCJhdXRvXCIpLHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW49XCIwIDBcIix0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtPWZ1bmN0aW9uKHQsaSxzKXtsZXQgaD1gdHJhbnNsYXRlM2QoJHt0fXB4LCR7aXx8MH1weCwwKWA7cmV0dXJuIHZvaWQgMCE9PXMmJihoKz1gIHNjYWxlM2QoJHtzfSwke3N9LDEpYCksaH0oMCwwLHQvMjUwKSk6aSh0aGlzLmVsZW1lbnQsdCxzKSl9ZGVzdHJveSgpe3RoaXMuZWxlbWVudD8ucGFyZW50Tm9kZSYmdGhpcy5lbGVtZW50LnJlbW92ZSgpLHRoaXMuZWxlbWVudD1udWxsfX1jbGFzcyBse2NvbnN0cnVjdG9yKHQsaSxoKXt0aGlzLmluc3RhbmNlPWksdGhpcy5kYXRhPXQsdGhpcy5pbmRleD1oLHRoaXMuZWxlbWVudD12b2lkIDAsdGhpcy5wbGFjZWhvbGRlcj12b2lkIDAsdGhpcy5zbGlkZT12b2lkIDAsdGhpcy5kaXNwbGF5ZWRJbWFnZVdpZHRoPTAsdGhpcy5kaXNwbGF5ZWRJbWFnZUhlaWdodD0wLHRoaXMud2lkdGg9TnVtYmVyKHRoaXMuZGF0YS53KXx8TnVtYmVyKHRoaXMuZGF0YS53aWR0aCl8fDAsdGhpcy5oZWlnaHQ9TnVtYmVyKHRoaXMuZGF0YS5oKXx8TnVtYmVyKHRoaXMuZGF0YS5oZWlnaHQpfHwwLHRoaXMuaXNBdHRhY2hlZD0hMSx0aGlzLmhhc1NsaWRlPSExLHRoaXMuaXNEZWNvZGluZz0hMSx0aGlzLnN0YXRlPXMsdGhpcy5kYXRhLnR5cGU/dGhpcy50eXBlPXRoaXMuZGF0YS50eXBlOnRoaXMuZGF0YS5zcmM/dGhpcy50eXBlPVwiaW1hZ2VcIjp0aGlzLnR5cGU9XCJodG1sXCIsdGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRJbml0XCIse2NvbnRlbnQ6dGhpc30pfXJlbW92ZVBsYWNlaG9sZGVyKCl7dGhpcy5wbGFjZWhvbGRlciYmIXRoaXMua2VlcFBsYWNlaG9sZGVyKCkmJnNldFRpbWVvdXQoKCgpPT57dGhpcy5wbGFjZWhvbGRlciYmKHRoaXMucGxhY2Vob2xkZXIuZGVzdHJveSgpLHRoaXMucGxhY2Vob2xkZXI9dm9pZCAwKX0pLDFlMyl9bG9hZChpLHMpe2lmKHRoaXMuc2xpZGUmJnRoaXMudXNlUGxhY2Vob2xkZXIoKSlpZih0aGlzLnBsYWNlaG9sZGVyKXtjb25zdCB0PXRoaXMucGxhY2Vob2xkZXIuZWxlbWVudDt0JiYhdC5wYXJlbnRFbGVtZW50JiZ0aGlzLnNsaWRlLmNvbnRhaW5lci5wcmVwZW5kKHQpfWVsc2V7Y29uc3QgdD10aGlzLmluc3RhbmNlLmFwcGx5RmlsdGVycyhcInBsYWNlaG9sZGVyU3JjXCIsISghdGhpcy5kYXRhLm1zcmN8fCF0aGlzLnNsaWRlLmlzRmlyc3RTbGlkZSkmJnRoaXMuZGF0YS5tc3JjLHRoaXMpO3RoaXMucGxhY2Vob2xkZXI9bmV3IGModCx0aGlzLnNsaWRlLmNvbnRhaW5lcil9dGhpcy5lbGVtZW50JiYhc3x8dGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRMb2FkXCIse2NvbnRlbnQ6dGhpcyxpc0xhenk6aX0pLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLmlzSW1hZ2VDb250ZW50KCk/KHRoaXMuZWxlbWVudD10KFwicHN3cF9faW1nXCIsXCJpbWdcIiksdGhpcy5kaXNwbGF5ZWRJbWFnZVdpZHRoJiZ0aGlzLmxvYWRJbWFnZShpKSk6KHRoaXMuZWxlbWVudD10KFwicHN3cF9fY29udGVudFwiLFwiZGl2XCIpLHRoaXMuZWxlbWVudC5pbm5lckhUTUw9dGhpcy5kYXRhLmh0bWx8fFwiXCIpLHMmJnRoaXMuc2xpZGUmJnRoaXMuc2xpZGUudXBkYXRlQ29udGVudFNpemUoITApKX1sb2FkSW1hZ2UodCl7aWYoIXRoaXMuaXNJbWFnZUNvbnRlbnQoKXx8IXRoaXMuZWxlbWVudHx8dGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRMb2FkSW1hZ2VcIix7Y29udGVudDp0aGlzLGlzTGF6eTp0fSkuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47Y29uc3QgaT10aGlzLmVsZW1lbnQ7dGhpcy51cGRhdGVTcmNzZXRTaXplcygpLHRoaXMuZGF0YS5zcmNzZXQmJihpLnNyY3NldD10aGlzLmRhdGEuc3Jjc2V0KSxpLnNyYz10aGlzLmRhdGEuc3JjPz9cIlwiLGkuYWx0PXRoaXMuZGF0YS5hbHQ/P1wiXCIsdGhpcy5zdGF0ZT1oLGkuY29tcGxldGU/dGhpcy5vbkxvYWRlZCgpOihpLm9ubG9hZD0oKT0+e3RoaXMub25Mb2FkZWQoKX0saS5vbmVycm9yPSgpPT57dGhpcy5vbkVycm9yKCl9KX1zZXRTbGlkZSh0KXt0aGlzLnNsaWRlPXQsdGhpcy5oYXNTbGlkZT0hMCx0aGlzLmluc3RhbmNlPXQucHN3cH1vbkxvYWRlZCgpe3RoaXMuc3RhdGU9ZSx0aGlzLnNsaWRlJiZ0aGlzLmVsZW1lbnQmJih0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwibG9hZENvbXBsZXRlXCIse3NsaWRlOnRoaXMuc2xpZGUsY29udGVudDp0aGlzfSksdGhpcy5zbGlkZS5pc0FjdGl2ZSYmdGhpcy5zbGlkZS5oZWF2eUFwcGVuZGVkJiYhdGhpcy5lbGVtZW50LnBhcmVudE5vZGUmJih0aGlzLmFwcGVuZCgpLHRoaXMuc2xpZGUudXBkYXRlQ29udGVudFNpemUoITApKSx0aGlzLnN0YXRlIT09ZSYmdGhpcy5zdGF0ZSE9PW58fHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoKSl9b25FcnJvcigpe3RoaXMuc3RhdGU9bix0aGlzLnNsaWRlJiYodGhpcy5kaXNwbGF5RXJyb3IoKSx0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwibG9hZENvbXBsZXRlXCIse3NsaWRlOnRoaXMuc2xpZGUsaXNFcnJvcjohMCxjb250ZW50OnRoaXN9KSx0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwibG9hZEVycm9yXCIse3NsaWRlOnRoaXMuc2xpZGUsY29udGVudDp0aGlzfSkpfWlzTG9hZGluZygpe3JldHVybiB0aGlzLmluc3RhbmNlLmFwcGx5RmlsdGVycyhcImlzQ29udGVudExvYWRpbmdcIix0aGlzLnN0YXRlPT09aCx0aGlzKX1pc0Vycm9yKCl7cmV0dXJuIHRoaXMuc3RhdGU9PT1ufWlzSW1hZ2VDb250ZW50KCl7cmV0dXJuXCJpbWFnZVwiPT09dGhpcy50eXBlfXNldERpc3BsYXllZFNpemUodCxzKXtpZih0aGlzLmVsZW1lbnQmJih0aGlzLnBsYWNlaG9sZGVyJiZ0aGlzLnBsYWNlaG9sZGVyLnNldERpc3BsYXllZFNpemUodCxzKSwhdGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRSZXNpemVcIix7Y29udGVudDp0aGlzLHdpZHRoOnQsaGVpZ2h0OnN9KS5kZWZhdWx0UHJldmVudGVkJiYoaSh0aGlzLmVsZW1lbnQsdCxzKSx0aGlzLmlzSW1hZ2VDb250ZW50KCkmJiF0aGlzLmlzRXJyb3IoKSkpKXtjb25zdCBpPSF0aGlzLmRpc3BsYXllZEltYWdlV2lkdGgmJnQ7dGhpcy5kaXNwbGF5ZWRJbWFnZVdpZHRoPXQsdGhpcy5kaXNwbGF5ZWRJbWFnZUhlaWdodD1zLGk/dGhpcy5sb2FkSW1hZ2UoITEpOnRoaXMudXBkYXRlU3Jjc2V0U2l6ZXMoKSx0aGlzLnNsaWRlJiZ0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiaW1hZ2VTaXplQ2hhbmdlXCIse3NsaWRlOnRoaXMuc2xpZGUsd2lkdGg6dCxoZWlnaHQ6cyxjb250ZW50OnRoaXN9KX19aXNab29tYWJsZSgpe3JldHVybiB0aGlzLmluc3RhbmNlLmFwcGx5RmlsdGVycyhcImlzQ29udGVudFpvb21hYmxlXCIsdGhpcy5pc0ltYWdlQ29udGVudCgpJiZ0aGlzLnN0YXRlIT09bix0aGlzKX11cGRhdGVTcmNzZXRTaXplcygpe2lmKCF0aGlzLmlzSW1hZ2VDb250ZW50KCl8fCF0aGlzLmVsZW1lbnR8fCF0aGlzLmRhdGEuc3Jjc2V0KXJldHVybjtjb25zdCB0PXRoaXMuZWxlbWVudCxpPXRoaXMuaW5zdGFuY2UuYXBwbHlGaWx0ZXJzKFwic3Jjc2V0U2l6ZXNXaWR0aFwiLHRoaXMuZGlzcGxheWVkSW1hZ2VXaWR0aCx0aGlzKTsoIXQuZGF0YXNldC5sYXJnZXN0VXNlZFNpemV8fGk+cGFyc2VJbnQodC5kYXRhc2V0Lmxhcmdlc3RVc2VkU2l6ZSwxMCkpJiYodC5zaXplcz1pK1wicHhcIix0LmRhdGFzZXQubGFyZ2VzdFVzZWRTaXplPVN0cmluZyhpKSl9dXNlUGxhY2Vob2xkZXIoKXtyZXR1cm4gdGhpcy5pbnN0YW5jZS5hcHBseUZpbHRlcnMoXCJ1c2VDb250ZW50UGxhY2Vob2xkZXJcIix0aGlzLmlzSW1hZ2VDb250ZW50KCksdGhpcyl9bGF6eUxvYWQoKXt0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiY29udGVudExhenlMb2FkXCIse2NvbnRlbnQ6dGhpc30pLmRlZmF1bHRQcmV2ZW50ZWR8fHRoaXMubG9hZCghMCl9a2VlcFBsYWNlaG9sZGVyKCl7cmV0dXJuIHRoaXMuaW5zdGFuY2UuYXBwbHlGaWx0ZXJzKFwiaXNLZWVwaW5nUGxhY2Vob2xkZXJcIix0aGlzLmlzTG9hZGluZygpLHRoaXMpfWRlc3Ryb3koKXt0aGlzLmhhc1NsaWRlPSExLHRoaXMuc2xpZGU9dm9pZCAwLHRoaXMuaW5zdGFuY2UuZGlzcGF0Y2goXCJjb250ZW50RGVzdHJveVwiLHtjb250ZW50OnRoaXN9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5yZW1vdmUoKSx0aGlzLnBsYWNlaG9sZGVyJiYodGhpcy5wbGFjZWhvbGRlci5kZXN0cm95KCksdGhpcy5wbGFjZWhvbGRlcj12b2lkIDApLHRoaXMuaXNJbWFnZUNvbnRlbnQoKSYmdGhpcy5lbGVtZW50JiYodGhpcy5lbGVtZW50Lm9ubG9hZD1udWxsLHRoaXMuZWxlbWVudC5vbmVycm9yPW51bGwsdGhpcy5lbGVtZW50PXZvaWQgMCkpfWRpc3BsYXlFcnJvcigpe2lmKHRoaXMuc2xpZGUpe2xldCBpPXQoXCJwc3dwX19lcnJvci1tc2dcIixcImRpdlwiKTtpLmlubmVyVGV4dD10aGlzLmluc3RhbmNlLm9wdGlvbnM/LmVycm9yTXNnPz9cIlwiLGk9dGhpcy5pbnN0YW5jZS5hcHBseUZpbHRlcnMoXCJjb250ZW50RXJyb3JFbGVtZW50XCIsaSx0aGlzKSx0aGlzLmVsZW1lbnQ9dChcInBzd3BfX2NvbnRlbnQgcHN3cF9fZXJyb3ItbXNnLWNvbnRhaW5lclwiLFwiZGl2XCIpLHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChpKSx0aGlzLnNsaWRlLmNvbnRhaW5lci5pbm5lclRleHQ9XCJcIix0aGlzLnNsaWRlLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpLHRoaXMuc2xpZGUudXBkYXRlQ29udGVudFNpemUoITApLHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoKX19YXBwZW5kKCl7aWYodGhpcy5pc0F0dGFjaGVkfHwhdGhpcy5lbGVtZW50KXJldHVybjtpZih0aGlzLmlzQXR0YWNoZWQ9ITAsdGhpcy5zdGF0ZT09PW4pcmV0dXJuIHZvaWQgdGhpcy5kaXNwbGF5RXJyb3IoKTtpZih0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiY29udGVudEFwcGVuZFwiLHtjb250ZW50OnRoaXN9KS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtjb25zdCB0PVwiZGVjb2RlXCJpbiB0aGlzLmVsZW1lbnQ7dGhpcy5pc0ltYWdlQ29udGVudCgpP3QmJnRoaXMuc2xpZGUmJighdGhpcy5zbGlkZS5pc0FjdGl2ZXx8cigpKT8odGhpcy5pc0RlY29kaW5nPSEwLHRoaXMuZWxlbWVudC5kZWNvZGUoKS5jYXRjaCgoKCk9Pnt9KSkuZmluYWxseSgoKCk9Pnt0aGlzLmlzRGVjb2Rpbmc9ITEsdGhpcy5hcHBlbmRJbWFnZSgpfSkpKTp0aGlzLmFwcGVuZEltYWdlKCk6dGhpcy5zbGlkZSYmIXRoaXMuZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLnNsaWRlLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpfWFjdGl2YXRlKCl7IXRoaXMuaW5zdGFuY2UuZGlzcGF0Y2goXCJjb250ZW50QWN0aXZhdGVcIix7Y29udGVudDp0aGlzfSkuZGVmYXVsdFByZXZlbnRlZCYmdGhpcy5zbGlkZSYmKHRoaXMuaXNJbWFnZUNvbnRlbnQoKSYmdGhpcy5pc0RlY29kaW5nJiYhcigpP3RoaXMuYXBwZW5kSW1hZ2UoKTp0aGlzLmlzRXJyb3IoKSYmdGhpcy5sb2FkKCExLCEwKSx0aGlzLnNsaWRlLmhvbGRlckVsZW1lbnQmJnRoaXMuc2xpZGUuaG9sZGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIikpfWRlYWN0aXZhdGUoKXt0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiY29udGVudERlYWN0aXZhdGVcIix7Y29udGVudDp0aGlzfSksdGhpcy5zbGlkZSYmdGhpcy5zbGlkZS5ob2xkZXJFbGVtZW50JiZ0aGlzLnNsaWRlLmhvbGRlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIil9cmVtb3ZlKCl7dGhpcy5pc0F0dGFjaGVkPSExLHRoaXMuaW5zdGFuY2UuZGlzcGF0Y2goXCJjb250ZW50UmVtb3ZlXCIse2NvbnRlbnQ6dGhpc30pLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLmVsZW1lbnQmJnRoaXMuZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLmVsZW1lbnQucmVtb3ZlKCksdGhpcy5wbGFjZWhvbGRlciYmdGhpcy5wbGFjZWhvbGRlci5lbGVtZW50JiZ0aGlzLnBsYWNlaG9sZGVyLmVsZW1lbnQucmVtb3ZlKCkpfWFwcGVuZEltYWdlKCl7dGhpcy5pc0F0dGFjaGVkJiYodGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRBcHBlbmRJbWFnZVwiLHtjb250ZW50OnRoaXN9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5zbGlkZSYmdGhpcy5lbGVtZW50JiYhdGhpcy5lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuc2xpZGUuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCksdGhpcy5zdGF0ZSE9PWUmJnRoaXMuc3RhdGUhPT1ufHx0aGlzLnJlbW92ZVBsYWNlaG9sZGVyKCkpKX19ZnVuY3Rpb24gZCh0LGkscyxoLGUpe2xldCBuPTA7aWYoaS5wYWRkaW5nRm4pbj1pLnBhZGRpbmdGbihzLGgsZSlbdF07ZWxzZSBpZihpLnBhZGRpbmcpbj1pLnBhZGRpbmdbdF07ZWxzZXtjb25zdCBzPVwicGFkZGluZ1wiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2lbc10mJihuPWlbc10pfXJldHVybiBOdW1iZXIobil8fDB9Y2xhc3MgdXtjb25zdHJ1Y3Rvcih0LGkscyxoKXt0aGlzLnBzd3A9aCx0aGlzLm9wdGlvbnM9dCx0aGlzLml0ZW1EYXRhPWksdGhpcy5pbmRleD1zLHRoaXMucGFuQXJlYVNpemU9bnVsbCx0aGlzLmVsZW1lbnRTaXplPW51bGwsdGhpcy5maXQ9MSx0aGlzLmZpbGw9MSx0aGlzLnZGaWxsPTEsdGhpcy5pbml0aWFsPTEsdGhpcy5zZWNvbmRhcnk9MSx0aGlzLm1heD0xLHRoaXMubWluPTF9dXBkYXRlKHQsaSxzKXtjb25zdCBoPXt4OnQseTppfTt0aGlzLmVsZW1lbnRTaXplPWgsdGhpcy5wYW5BcmVhU2l6ZT1zO2NvbnN0IGU9cy54L2gueCxuPXMueS9oLnk7dGhpcy5maXQ9TWF0aC5taW4oMSxlPG4/ZTpuKSx0aGlzLmZpbGw9TWF0aC5taW4oMSxlPm4/ZTpuKSx0aGlzLnZGaWxsPU1hdGgubWluKDEsbiksdGhpcy5pbml0aWFsPXRoaXMudCgpLHRoaXMuc2Vjb25kYXJ5PXRoaXMuaSgpLHRoaXMubWF4PU1hdGgubWF4KHRoaXMuaW5pdGlhbCx0aGlzLnNlY29uZGFyeSx0aGlzLm8oKSksdGhpcy5taW49TWF0aC5taW4odGhpcy5maXQsdGhpcy5pbml0aWFsLHRoaXMuc2Vjb25kYXJ5KSx0aGlzLnBzd3AmJnRoaXMucHN3cC5kaXNwYXRjaChcInpvb21MZXZlbHNVcGRhdGVcIix7em9vbUxldmVsczp0aGlzLHNsaWRlRGF0YTp0aGlzLml0ZW1EYXRhfSl9bCh0KXtjb25zdCBpPXQrXCJab29tTGV2ZWxcIixzPXRoaXMub3B0aW9uc1tpXTtpZihzKXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHM/cyh0aGlzKTpcImZpbGxcIj09PXM/dGhpcy5maWxsOlwiZml0XCI9PT1zP3RoaXMuZml0Ok51bWJlcihzKX1pKCl7bGV0IHQ9dGhpcy5sKFwic2Vjb25kYXJ5XCIpO3JldHVybiB0fHwodD1NYXRoLm1pbigxLDMqdGhpcy5maXQpLHRoaXMuZWxlbWVudFNpemUmJnQqdGhpcy5lbGVtZW50U2l6ZS54PjRlMyYmKHQ9NGUzL3RoaXMuZWxlbWVudFNpemUueCksdCl9dCgpe3JldHVybiB0aGlzLmwoXCJpbml0aWFsXCIpfHx0aGlzLmZpdH1vKCl7cmV0dXJuIHRoaXMubChcIm1heFwiKXx8TWF0aC5tYXgoMSw0KnRoaXMuZml0KX19ZnVuY3Rpb24gcCh0LGkscyl7Y29uc3QgaD1pLmNyZWF0ZUNvbnRlbnRGcm9tRGF0YSh0LHMpO2xldCBlO2NvbnN0e29wdGlvbnM6bn09aTtpZihuKXtsZXQgbztlPW5ldyB1KG4sdCwtMSksbz1pLnBzd3A/aS5wc3dwLnZpZXdwb3J0U2l6ZTpmdW5jdGlvbih0LGkpe2lmKHQuZ2V0Vmlld3BvcnRTaXplRm4pe2NvbnN0IHM9dC5nZXRWaWV3cG9ydFNpemVGbih0LGkpO2lmKHMpcmV0dXJuIHN9cmV0dXJue3g6ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLHk6d2luZG93LmlubmVySGVpZ2h0fX0obixpKTtjb25zdCByPWZ1bmN0aW9uKHQsaSxzLGgpe3JldHVybnt4OmkueC1kKFwibGVmdFwiLHQsaSxzLGgpLWQoXCJyaWdodFwiLHQsaSxzLGgpLHk6aS55LWQoXCJ0b3BcIix0LGkscyxoKS1kKFwiYm90dG9tXCIsdCxpLHMsaCl9fShuLG8sdCxzKTtlLnVwZGF0ZShoLndpZHRoLGguaGVpZ2h0LHIpfXJldHVybiBoLmxhenlMb2FkKCksZSYmaC5zZXREaXNwbGF5ZWRTaXplKE1hdGguY2VpbChoLndpZHRoKmUuaW5pdGlhbCksTWF0aC5jZWlsKGguaGVpZ2h0KmUuaW5pdGlhbCkpLGh9Y2xhc3MgbSBleHRlbmRzIGNsYXNzIGV4dGVuZHMgY2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLnU9e30sdGhpcy5wPXt9LHRoaXMucHN3cD12b2lkIDAsdGhpcy5vcHRpb25zPXZvaWQgMH1hZGRGaWx0ZXIodCxpLHM9MTAwKXt0aGlzLnBbdF18fCh0aGlzLnBbdF09W10pLHRoaXMucFt0XT8ucHVzaCh7Zm46aSxwcmlvcml0eTpzfSksdGhpcy5wW3RdPy5zb3J0KCgodCxpKT0+dC5wcmlvcml0eS1pLnByaW9yaXR5KSksdGhpcy5wc3dwPy5hZGRGaWx0ZXIodCxpLHMpfXJlbW92ZUZpbHRlcih0LGkpe3RoaXMucFt0XSYmKHRoaXMucFt0XT10aGlzLnBbdF0uZmlsdGVyKCh0PT50LmZuIT09aSkpKSx0aGlzLnBzd3AmJnRoaXMucHN3cC5yZW1vdmVGaWx0ZXIodCxpKX1hcHBseUZpbHRlcnModCwuLi5pKXtyZXR1cm4gdGhpcy5wW3RdPy5mb3JFYWNoKCh0PT57aVswXT10LmZuLmFwcGx5KHRoaXMsaSl9KSksaVswXX1vbih0LGkpe3RoaXMudVt0XXx8KHRoaXMudVt0XT1bXSksdGhpcy51W3RdPy5wdXNoKGkpLHRoaXMucHN3cD8ub24odCxpKX1vZmYodCxpKXt0aGlzLnVbdF0mJih0aGlzLnVbdF09dGhpcy51W3RdLmZpbHRlcigodD0+aSE9PXQpKSksdGhpcy5wc3dwPy5vZmYodCxpKX1kaXNwYXRjaCh0LGkpe2lmKHRoaXMucHN3cClyZXR1cm4gdGhpcy5wc3dwLmRpc3BhdGNoKHQsaSk7Y29uc3Qgcz1uZXcgYSh0LGkpO3JldHVybiB0aGlzLnVbdF0/LmZvckVhY2goKHQ9Pnt0LmNhbGwodGhpcyxzKX0pKSxzfX17Z2V0TnVtSXRlbXMoKXtsZXQgdD0wO2NvbnN0IGk9dGhpcy5vcHRpb25zPy5kYXRhU291cmNlO2kmJlwibGVuZ3RoXCJpbiBpP3Q9aS5sZW5ndGg6aSYmXCJnYWxsZXJ5XCJpbiBpJiYoaS5pdGVtc3x8KGkuaXRlbXM9dGhpcy5tKGkuZ2FsbGVyeSkpLGkuaXRlbXMmJih0PWkuaXRlbXMubGVuZ3RoKSk7Y29uc3Qgcz10aGlzLmRpc3BhdGNoKFwibnVtSXRlbXNcIix7ZGF0YVNvdXJjZTppLG51bUl0ZW1zOnR9KTtyZXR1cm4gdGhpcy5hcHBseUZpbHRlcnMoXCJudW1JdGVtc1wiLHMubnVtSXRlbXMsaSl9Y3JlYXRlQ29udGVudEZyb21EYXRhKHQsaSl7cmV0dXJuIG5ldyBsKHQsdGhpcyxpKX1nZXRJdGVtRGF0YSh0KXtjb25zdCBpPXRoaXMub3B0aW9ucz8uZGF0YVNvdXJjZTtsZXQgcz17fTtBcnJheS5pc0FycmF5KGkpP3M9aVt0XTppJiZcImdhbGxlcnlcImluIGkmJihpLml0ZW1zfHwoaS5pdGVtcz10aGlzLm0oaS5nYWxsZXJ5KSkscz1pLml0ZW1zW3RdKTtsZXQgaD1zO2ggaW5zdGFuY2VvZiBFbGVtZW50JiYoaD10aGlzLmcoaCkpO2NvbnN0IGU9dGhpcy5kaXNwYXRjaChcIml0ZW1EYXRhXCIse2l0ZW1EYXRhOmh8fHt9LGluZGV4OnR9KTtyZXR1cm4gdGhpcy5hcHBseUZpbHRlcnMoXCJpdGVtRGF0YVwiLGUuaXRlbURhdGEsdCl9bSh0KXtyZXR1cm4gdGhpcy5vcHRpb25zPy5jaGlsZHJlbnx8dGhpcy5vcHRpb25zPy5jaGlsZFNlbGVjdG9yP28odGhpcy5vcHRpb25zLmNoaWxkcmVuLHRoaXMub3B0aW9ucy5jaGlsZFNlbGVjdG9yLHQpfHxbXTpbdF19Zyh0KXtjb25zdCBpPXtlbGVtZW50OnR9LHM9XCJBXCI9PT10LnRhZ05hbWU/dDp0LnF1ZXJ5U2VsZWN0b3IoXCJhXCIpO2lmKHMpe2kuc3JjPXMuZGF0YXNldC5wc3dwU3JjfHxzLmhyZWYscy5kYXRhc2V0LnBzd3BTcmNzZXQmJihpLnNyY3NldD1zLmRhdGFzZXQucHN3cFNyY3NldCksaS53aWR0aD1zLmRhdGFzZXQucHN3cFdpZHRoP3BhcnNlSW50KHMuZGF0YXNldC5wc3dwV2lkdGgsMTApOjAsaS5oZWlnaHQ9cy5kYXRhc2V0LnBzd3BIZWlnaHQ/cGFyc2VJbnQocy5kYXRhc2V0LnBzd3BIZWlnaHQsMTApOjAsaS53PWkud2lkdGgsaS5oPWkuaGVpZ2h0LHMuZGF0YXNldC5wc3dwVHlwZSYmKGkudHlwZT1zLmRhdGFzZXQucHN3cFR5cGUpO2NvbnN0IGg9dC5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO2gmJihpLm1zcmM9aC5jdXJyZW50U3JjfHxoLnNyYyxpLmFsdD1oLmdldEF0dHJpYnV0ZShcImFsdFwiKT8/XCJcIiksKHMuZGF0YXNldC5wc3dwQ3JvcHBlZHx8cy5kYXRhc2V0LmNyb3BwZWQpJiYoaS50aHVtYkNyb3BwZWQ9ITApfXJldHVybiB0aGlzLmFwcGx5RmlsdGVycyhcImRvbUl0ZW1EYXRhXCIsaSx0LHMpfWxhenlMb2FkRGF0YSh0LGkpe3JldHVybiBwKHQsdGhpcyxpKX19e2NvbnN0cnVjdG9yKHQpe3N1cGVyKCksdGhpcy5vcHRpb25zPXR8fHt9LHRoaXMudj0wLHRoaXMuc2hvdWxkT3Blbj0hMSx0aGlzLl89dm9pZCAwLHRoaXMub25UaHVtYm5haWxzQ2xpY2s9dGhpcy5vblRodW1ibmFpbHNDbGljay5iaW5kKHRoaXMpfWluaXQoKXtvKHRoaXMub3B0aW9ucy5nYWxsZXJ5LHRoaXMub3B0aW9ucy5nYWxsZXJ5U2VsZWN0b3IpLmZvckVhY2goKHQ9Pnt0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25UaHVtYm5haWxzQ2xpY2ssITEpfSkpfW9uVGh1bWJuYWlsc0NsaWNrKHQpe2lmKGZ1bmN0aW9uKHQpe3JldHVyblwiYnV0dG9uXCJpbiB0JiYxPT09dC5idXR0b258fHQuY3RybEtleXx8dC5tZXRhS2V5fHx0LmFsdEtleXx8dC5zaGlmdEtleX0odCl8fHdpbmRvdy5wc3dwKXJldHVybjtsZXQgaT17eDp0LmNsaWVudFgseTp0LmNsaWVudFl9O2kueHx8aS55fHwoaT1udWxsKTtsZXQgcz10aGlzLmdldENsaWNrZWRJbmRleCh0KTtzPXRoaXMuYXBwbHlGaWx0ZXJzKFwiY2xpY2tlZEluZGV4XCIscyx0LHRoaXMpO2NvbnN0IGg9e2dhbGxlcnk6dC5jdXJyZW50VGFyZ2V0fTtzPj0wJiYodC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMubG9hZEFuZE9wZW4ocyxoLGkpKX1nZXRDbGlja2VkSW5kZXgodCl7aWYodGhpcy5vcHRpb25zLmdldENsaWNrZWRJbmRleEZuKXJldHVybiB0aGlzLm9wdGlvbnMuZ2V0Q2xpY2tlZEluZGV4Rm4uY2FsbCh0aGlzLHQpO2NvbnN0IGk9dC50YXJnZXQscz1vKHRoaXMub3B0aW9ucy5jaGlsZHJlbix0aGlzLm9wdGlvbnMuY2hpbGRTZWxlY3Rvcix0LmN1cnJlbnRUYXJnZXQpLmZpbmRJbmRleCgodD0+dD09PWl8fHQuY29udGFpbnMoaSkpKTtyZXR1cm4tMSE9PXM/czp0aGlzLm9wdGlvbnMuY2hpbGRyZW58fHRoaXMub3B0aW9ucy5jaGlsZFNlbGVjdG9yPy0xOjB9bG9hZEFuZE9wZW4odCxpLHMpe3JldHVybiF3aW5kb3cucHN3cCYmKHRoaXMub3B0aW9ucy5pbmRleD10LHRoaXMub3B0aW9ucy5pbml0aWFsUG9pbnRlclBvcz1zLHRoaXMuc2hvdWxkT3Blbj0hMCx0aGlzLnByZWxvYWQodCxpKSwhMCl9cHJlbG9hZCh0LGkpe2NvbnN0e29wdGlvbnM6c309dGhpcztpJiYocy5kYXRhU291cmNlPWkpO2NvbnN0IGg9W10sZT10eXBlb2Ygcy5wc3dwTW9kdWxlO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKG49cy5wc3dwTW9kdWxlKSYmbi5wcm90b3R5cGUmJm4ucHJvdG90eXBlLmdvVG8paC5wdXNoKFByb21pc2UucmVzb2x2ZShzLnBzd3BNb2R1bGUpKTtlbHNle2lmKFwic3RyaW5nXCI9PT1lKXRocm93IG5ldyBFcnJvcihcInBzd3BNb2R1bGUgYXMgc3RyaW5nIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIik7aWYoXCJmdW5jdGlvblwiIT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJwc3dwTW9kdWxlIGlzIG5vdCB2YWxpZFwiKTtoLnB1c2gocy5wc3dwTW9kdWxlKCkpfXZhciBuO1wiZnVuY3Rpb25cIj09dHlwZW9mIHMub3BlblByb21pc2UmJmgucHVzaChzLm9wZW5Qcm9taXNlKCkpLCExIT09cy5wcmVsb2FkRmlyc3RTbGlkZSYmdD49MCYmKHRoaXMuXz1mdW5jdGlvbih0LGkpe2NvbnN0IHM9aS5nZXRJdGVtRGF0YSh0KTtpZighaS5kaXNwYXRjaChcImxhenlMb2FkU2xpZGVcIix7aW5kZXg6dCxpdGVtRGF0YTpzfSkuZGVmYXVsdFByZXZlbnRlZClyZXR1cm4gcChzLGksdCl9KHQsdGhpcykpO2NvbnN0IG89Kyt0aGlzLnY7UHJvbWlzZS5hbGwoaCkudGhlbigodD0+e2lmKHRoaXMuc2hvdWxkT3Blbil7Y29uc3QgaT10WzBdO3RoaXMuSShpLG8pfX0pKX1JKHQsaSl7aWYoaSE9PXRoaXMudiYmdGhpcy5zaG91bGRPcGVuKXJldHVybjtpZih0aGlzLnNob3VsZE9wZW49ITEsd2luZG93LnBzd3ApcmV0dXJuO2NvbnN0IHM9XCJvYmplY3RcIj09dHlwZW9mIHQ/bmV3IHQuZGVmYXVsdCh0aGlzLm9wdGlvbnMpOm5ldyB0KHRoaXMub3B0aW9ucyk7dGhpcy5wc3dwPXMsd2luZG93LnBzd3A9cyxPYmplY3Qua2V5cyh0aGlzLnUpLmZvckVhY2goKHQ9Pnt0aGlzLnVbdF0/LmZvckVhY2goKGk9PntzLm9uKHQsaSl9KSl9KSksT2JqZWN0LmtleXModGhpcy5wKS5mb3JFYWNoKCh0PT57dGhpcy5wW3RdPy5mb3JFYWNoKChpPT57cy5hZGRGaWx0ZXIodCxpLmZuLGkucHJpb3JpdHkpfSkpfSkpLHRoaXMuXyYmKHMuY29udGVudExvYWRlci5hZGRUb0NhY2hlKHRoaXMuXyksdGhpcy5fPXZvaWQgMCkscy5vbihcImRlc3Ryb3lcIiwoKCk9Pnt0aGlzLnBzd3A9dm9pZCAwLGRlbGV0ZSB3aW5kb3cucHN3cH0pKSxzLmluaXQoKX1kZXN0cm95KCl7dGhpcy5wc3dwPy5kZXN0cm95KCksdGhpcy5zaG91bGRPcGVuPSExLHRoaXMudT17fSxvKHRoaXMub3B0aW9ucy5nYWxsZXJ5LHRoaXMub3B0aW9ucy5nYWxsZXJ5U2VsZWN0b3IpLmZvckVhY2goKHQ9Pnt0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25UaHVtYm5haWxzQ2xpY2ssITEpfSkpfX1leHBvcnR7bSBhcyBkZWZhdWx0fTtcbiIsIi8qIVxuICAqIFBob3RvU3dpcGUgNS4zLjggLSBodHRwczovL3Bob3Rvc3dpcGUuY29tXG4gICogKGMpIDIwMjMgRG15dHJvIFNlbWVub3ZcbiAgKi9cbmZ1bmN0aW9uIHQodCxpLHMpe2NvbnN0IGg9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpKTtyZXR1cm4gdCYmKGguY2xhc3NOYW1lPXQpLHMmJnMuYXBwZW5kQ2hpbGQoaCksaH1mdW5jdGlvbiBpKHQsaSl7cmV0dXJuIHQueD1pLngsdC55PWkueSx2b2lkIDAhPT1pLmlkJiYodC5pZD1pLmlkKSx0fWZ1bmN0aW9uIHModCl7dC54PU1hdGgucm91bmQodC54KSx0Lnk9TWF0aC5yb3VuZCh0LnkpfWZ1bmN0aW9uIGgodCxpKXtjb25zdCBzPU1hdGguYWJzKHQueC1pLngpLGg9TWF0aC5hYnModC55LWkueSk7cmV0dXJuIE1hdGguc3FydChzKnMraCpoKX1mdW5jdGlvbiBlKHQsaSl7cmV0dXJuIHQueD09PWkueCYmdC55PT09aS55fWZ1bmN0aW9uIG4odCxpLHMpe3JldHVybiBNYXRoLm1pbihNYXRoLm1heCh0LGkpLHMpfWZ1bmN0aW9uIG8odCxpLHMpe2xldCBoPWB0cmFuc2xhdGUzZCgke3R9cHgsJHtpfHwwfXB4LDApYDtyZXR1cm4gdm9pZCAwIT09cyYmKGgrPWAgc2NhbGUzZCgke3N9LCR7c30sMSlgKSxofWZ1bmN0aW9uIHIodCxpLHMsaCl7dC5zdHlsZS50cmFuc2Zvcm09byhpLHMsaCl9ZnVuY3Rpb24gYSh0LGkscyxoKXt0LnN0eWxlLnRyYW5zaXRpb249aT9gJHtpfSAke3N9bXMgJHtofHxcImN1YmljLWJlemllciguNCwwLC4yMiwxKVwifWA6XCJub25lXCJ9ZnVuY3Rpb24gYyh0LGkscyl7dC5zdHlsZS53aWR0aD1cIm51bWJlclwiPT10eXBlb2YgaT9gJHtpfXB4YDppLHQuc3R5bGUuaGVpZ2h0PVwibnVtYmVyXCI9PXR5cGVvZiBzP2Ake3N9cHhgOnN9Y29uc3QgbD1cImlkbGVcIixwPVwibG9hZGluZ1wiLHU9XCJsb2FkZWRcIixkPVwiZXJyb3JcIjtmdW5jdGlvbiBtKCl7cmV0dXJuISghbmF2aWdhdG9yLnZlbmRvcnx8IW5hdmlnYXRvci52ZW5kb3IubWF0Y2goL2FwcGxlL2kpKX1sZXQgZj0hMTt0cnl7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsbnVsbCxPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJwYXNzaXZlXCIse2dldDooKT0+e2Y9ITB9fSkpfWNhdGNoKHQpe31jbGFzcyB3e2NvbnN0cnVjdG9yKCl7dGhpcy50PVtdfWFkZCh0LGkscyxoKXt0aGlzLmkodCxpLHMsaCl9cmVtb3ZlKHQsaSxzLGgpe3RoaXMuaSh0LGkscyxoLCEwKX1yZW1vdmVBbGwoKXt0aGlzLnQuZm9yRWFjaCgodD0+e3RoaXMuaSh0LnRhcmdldCx0LnR5cGUsdC5saXN0ZW5lcix0LnBhc3NpdmUsITAsITApfSkpLHRoaXMudD1bXX1pKHQsaSxzLGgsZSxuKXtpZighdClyZXR1cm47Y29uc3Qgbz1lP1wicmVtb3ZlRXZlbnRMaXN0ZW5lclwiOlwiYWRkRXZlbnRMaXN0ZW5lclwiO2kuc3BsaXQoXCIgXCIpLmZvckVhY2goKGk9PntpZihpKXtufHwoZT90aGlzLnQ9dGhpcy50LmZpbHRlcigoaD0+aC50eXBlIT09aXx8aC5saXN0ZW5lciE9PXN8fGgudGFyZ2V0IT09dCkpOnRoaXMudC5wdXNoKHt0YXJnZXQ6dCx0eXBlOmksbGlzdGVuZXI6cyxwYXNzaXZlOmh9KSk7Y29uc3Qgcj0hIWYmJntwYXNzaXZlOmh8fCExfTt0W29dKGkscyxyKX19KSl9fWZ1bmN0aW9uIGcodCxpKXtpZih0LmdldFZpZXdwb3J0U2l6ZUZuKXtjb25zdCBzPXQuZ2V0Vmlld3BvcnRTaXplRm4odCxpKTtpZihzKXJldHVybiBzfXJldHVybnt4OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCx5OndpbmRvdy5pbm5lckhlaWdodH19ZnVuY3Rpb24gdih0LGkscyxoLGUpe2xldCBuPTA7aWYoaS5wYWRkaW5nRm4pbj1pLnBhZGRpbmdGbihzLGgsZSlbdF07ZWxzZSBpZihpLnBhZGRpbmcpbj1pLnBhZGRpbmdbdF07ZWxzZXtjb25zdCBzPVwicGFkZGluZ1wiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2lbc10mJihuPWlbc10pfXJldHVybiBOdW1iZXIobil8fDB9ZnVuY3Rpb24geSh0LGkscyxoKXtyZXR1cm57eDppLngtdihcImxlZnRcIix0LGkscyxoKS12KFwicmlnaHRcIix0LGkscyxoKSx5OmkueS12KFwidG9wXCIsdCxpLHMsaCktdihcImJvdHRvbVwiLHQsaSxzLGgpfX1jbGFzcyBfe2NvbnN0cnVjdG9yKHQpe3RoaXMuc2xpZGU9dCx0aGlzLmN1cnJab29tTGV2ZWw9MSx0aGlzLmNlbnRlcj17eDowLHk6MH0sdGhpcy5tYXg9e3g6MCx5OjB9LHRoaXMubWluPXt4OjAseTowfX11cGRhdGUodCl7dGhpcy5jdXJyWm9vbUxldmVsPXQsdGhpcy5zbGlkZS53aWR0aD8odGhpcy5vKFwieFwiKSx0aGlzLm8oXCJ5XCIpLHRoaXMuc2xpZGUucHN3cC5kaXNwYXRjaChcImNhbGNCb3VuZHNcIix7c2xpZGU6dGhpcy5zbGlkZX0pKTp0aGlzLnJlc2V0KCl9byh0KXtjb25zdHtwc3dwOml9PXRoaXMuc2xpZGUscz10aGlzLnNsaWRlW1wieFwiPT09dD9cIndpZHRoXCI6XCJoZWlnaHRcIl0qdGhpcy5jdXJyWm9vbUxldmVsLGg9dihcInhcIj09PXQ/XCJsZWZ0XCI6XCJ0b3BcIixpLm9wdGlvbnMsaS52aWV3cG9ydFNpemUsdGhpcy5zbGlkZS5kYXRhLHRoaXMuc2xpZGUuaW5kZXgpLGU9dGhpcy5zbGlkZS5wYW5BcmVhU2l6ZVt0XTt0aGlzLmNlbnRlclt0XT1NYXRoLnJvdW5kKChlLXMpLzIpK2gsdGhpcy5tYXhbdF09cz5lP01hdGgucm91bmQoZS1zKStoOnRoaXMuY2VudGVyW3RdLHRoaXMubWluW3RdPXM+ZT9oOnRoaXMuY2VudGVyW3RdfXJlc2V0KCl7dGhpcy5jZW50ZXIueD0wLHRoaXMuY2VudGVyLnk9MCx0aGlzLm1heC54PTAsdGhpcy5tYXgueT0wLHRoaXMubWluLng9MCx0aGlzLm1pbi55PTB9Y29ycmVjdFBhbih0LGkpe3JldHVybiBuKGksdGhpcy5tYXhbdF0sdGhpcy5taW5bdF0pfX1jbGFzcyB4e2NvbnN0cnVjdG9yKHQsaSxzLGgpe3RoaXMucHN3cD1oLHRoaXMub3B0aW9ucz10LHRoaXMuaXRlbURhdGE9aSx0aGlzLmluZGV4PXMsdGhpcy5wYW5BcmVhU2l6ZT1udWxsLHRoaXMuZWxlbWVudFNpemU9bnVsbCx0aGlzLmZpdD0xLHRoaXMuZmlsbD0xLHRoaXMudkZpbGw9MSx0aGlzLmluaXRpYWw9MSx0aGlzLnNlY29uZGFyeT0xLHRoaXMubWF4PTEsdGhpcy5taW49MX11cGRhdGUodCxpLHMpe2NvbnN0IGg9e3g6dCx5Oml9O3RoaXMuZWxlbWVudFNpemU9aCx0aGlzLnBhbkFyZWFTaXplPXM7Y29uc3QgZT1zLngvaC54LG49cy55L2gueTt0aGlzLmZpdD1NYXRoLm1pbigxLGU8bj9lOm4pLHRoaXMuZmlsbD1NYXRoLm1pbigxLGU+bj9lOm4pLHRoaXMudkZpbGw9TWF0aC5taW4oMSxuKSx0aGlzLmluaXRpYWw9dGhpcy5sKCksdGhpcy5zZWNvbmRhcnk9dGhpcy5wKCksdGhpcy5tYXg9TWF0aC5tYXgodGhpcy5pbml0aWFsLHRoaXMuc2Vjb25kYXJ5LHRoaXMudSgpKSx0aGlzLm1pbj1NYXRoLm1pbih0aGlzLmZpdCx0aGlzLmluaXRpYWwsdGhpcy5zZWNvbmRhcnkpLHRoaXMucHN3cCYmdGhpcy5wc3dwLmRpc3BhdGNoKFwiem9vbUxldmVsc1VwZGF0ZVwiLHt6b29tTGV2ZWxzOnRoaXMsc2xpZGVEYXRhOnRoaXMuaXRlbURhdGF9KX1tKHQpe2NvbnN0IGk9dCtcIlpvb21MZXZlbFwiLHM9dGhpcy5vcHRpb25zW2ldO2lmKHMpcmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygcz9zKHRoaXMpOlwiZmlsbFwiPT09cz90aGlzLmZpbGw6XCJmaXRcIj09PXM/dGhpcy5maXQ6TnVtYmVyKHMpfXAoKXtsZXQgdD10aGlzLm0oXCJzZWNvbmRhcnlcIik7cmV0dXJuIHR8fCh0PU1hdGgubWluKDEsMyp0aGlzLmZpdCksdGhpcy5lbGVtZW50U2l6ZSYmdCp0aGlzLmVsZW1lbnRTaXplLng+NGUzJiYodD00ZTMvdGhpcy5lbGVtZW50U2l6ZS54KSx0KX1sKCl7cmV0dXJuIHRoaXMubShcImluaXRpYWxcIil8fHRoaXMuZml0fXUoKXtyZXR1cm4gdGhpcy5tKFwibWF4XCIpfHxNYXRoLm1heCgxLDQqdGhpcy5maXQpfX1jbGFzcyBie2NvbnN0cnVjdG9yKGkscyxoKXt0aGlzLmRhdGE9aSx0aGlzLmluZGV4PXMsdGhpcy5wc3dwPWgsdGhpcy5pc0FjdGl2ZT1zPT09aC5jdXJySW5kZXgsdGhpcy5jdXJyZW50UmVzb2x1dGlvbj0wLHRoaXMucGFuQXJlYVNpemU9e3g6MCx5OjB9LHRoaXMucGFuPXt4OjAseTowfSx0aGlzLmlzRmlyc3RTbGlkZT10aGlzLmlzQWN0aXZlJiYhaC5vcGVuZXIuaXNPcGVuLHRoaXMuem9vbUxldmVscz1uZXcgeChoLm9wdGlvbnMsaSxzLGgpLHRoaXMucHN3cC5kaXNwYXRjaChcImdldHRpbmdEYXRhXCIse3NsaWRlOnRoaXMsZGF0YTp0aGlzLmRhdGEsaW5kZXg6c30pLHRoaXMuY29udGVudD10aGlzLnBzd3AuY29udGVudExvYWRlci5nZXRDb250ZW50QnlTbGlkZSh0aGlzKSx0aGlzLmNvbnRhaW5lcj10KFwicHN3cF9fem9vbS13cmFwXCIsXCJkaXZcIiksdGhpcy5ob2xkZXJFbGVtZW50PW51bGwsdGhpcy5jdXJyWm9vbUxldmVsPTEsdGhpcy53aWR0aD10aGlzLmNvbnRlbnQud2lkdGgsdGhpcy5oZWlnaHQ9dGhpcy5jb250ZW50LmhlaWdodCx0aGlzLmhlYXZ5QXBwZW5kZWQ9ITEsdGhpcy5ib3VuZHM9bmV3IF8odGhpcyksdGhpcy5wcmV2RGlzcGxheWVkV2lkdGg9LTEsdGhpcy5wcmV2RGlzcGxheWVkSGVpZ2h0PS0xLHRoaXMucHN3cC5kaXNwYXRjaChcInNsaWRlSW5pdFwiLHtzbGlkZTp0aGlzfSl9c2V0SXNBY3RpdmUodCl7dCYmIXRoaXMuaXNBY3RpdmU/dGhpcy5hY3RpdmF0ZSgpOiF0JiZ0aGlzLmlzQWN0aXZlJiZ0aGlzLmRlYWN0aXZhdGUoKX1hcHBlbmQodCl7dGhpcy5ob2xkZXJFbGVtZW50PXQsdGhpcy5jb250YWluZXIuc3R5bGUudHJhbnNmb3JtT3JpZ2luPVwiMCAwXCIsdGhpcy5kYXRhJiYodGhpcy5jYWxjdWxhdGVTaXplKCksdGhpcy5sb2FkKCksdGhpcy51cGRhdGVDb250ZW50U2l6ZSgpLHRoaXMuYXBwZW5kSGVhdnkoKSx0aGlzLmhvbGRlckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpLHRoaXMuem9vbUFuZFBhblRvSW5pdGlhbCgpLHRoaXMucHN3cC5kaXNwYXRjaChcImZpcnN0Wm9vbVBhblwiLHtzbGlkZTp0aGlzfSksdGhpcy5hcHBseUN1cnJlbnRab29tUGFuKCksdGhpcy5wc3dwLmRpc3BhdGNoKFwiYWZ0ZXJTZXRDb250ZW50XCIse3NsaWRlOnRoaXN9KSx0aGlzLmlzQWN0aXZlJiZ0aGlzLmFjdGl2YXRlKCkpfWxvYWQoKXt0aGlzLmNvbnRlbnQubG9hZCghMSksdGhpcy5wc3dwLmRpc3BhdGNoKFwic2xpZGVMb2FkXCIse3NsaWRlOnRoaXN9KX1hcHBlbmRIZWF2eSgpe2NvbnN0e3Bzd3A6dH09dGhpczshdGhpcy5oZWF2eUFwcGVuZGVkJiZ0Lm9wZW5lci5pc09wZW4mJiF0Lm1haW5TY3JvbGwuaXNTaGlmdGVkKCkmJih0aGlzLmlzQWN0aXZlLDEpJiYodGhpcy5wc3dwLmRpc3BhdGNoKFwiYXBwZW5kSGVhdnlcIix7c2xpZGU6dGhpc30pLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLmhlYXZ5QXBwZW5kZWQ9ITAsdGhpcy5jb250ZW50LmFwcGVuZCgpLHRoaXMucHN3cC5kaXNwYXRjaChcImFwcGVuZEhlYXZ5Q29udGVudFwiLHtzbGlkZTp0aGlzfSkpKX1hY3RpdmF0ZSgpe3RoaXMuaXNBY3RpdmU9ITAsdGhpcy5hcHBlbmRIZWF2eSgpLHRoaXMuY29udGVudC5hY3RpdmF0ZSgpLHRoaXMucHN3cC5kaXNwYXRjaChcInNsaWRlQWN0aXZhdGVcIix7c2xpZGU6dGhpc30pfWRlYWN0aXZhdGUoKXt0aGlzLmlzQWN0aXZlPSExLHRoaXMuY29udGVudC5kZWFjdGl2YXRlKCksdGhpcy5jdXJyWm9vbUxldmVsIT09dGhpcy56b29tTGV2ZWxzLmluaXRpYWwmJnRoaXMuY2FsY3VsYXRlU2l6ZSgpLHRoaXMuY3VycmVudFJlc29sdXRpb249MCx0aGlzLnpvb21BbmRQYW5Ub0luaXRpYWwoKSx0aGlzLmFwcGx5Q3VycmVudFpvb21QYW4oKSx0aGlzLnVwZGF0ZUNvbnRlbnRTaXplKCksdGhpcy5wc3dwLmRpc3BhdGNoKFwic2xpZGVEZWFjdGl2YXRlXCIse3NsaWRlOnRoaXN9KX1kZXN0cm95KCl7dGhpcy5jb250ZW50Lmhhc1NsaWRlPSExLHRoaXMuY29udGVudC5yZW1vdmUoKSx0aGlzLmNvbnRhaW5lci5yZW1vdmUoKSx0aGlzLnBzd3AuZGlzcGF0Y2goXCJzbGlkZURlc3Ryb3lcIix7c2xpZGU6dGhpc30pfXJlc2l6ZSgpe3RoaXMuY3Vyclpvb21MZXZlbCE9PXRoaXMuem9vbUxldmVscy5pbml0aWFsJiZ0aGlzLmlzQWN0aXZlPyh0aGlzLmNhbGN1bGF0ZVNpemUoKSx0aGlzLmJvdW5kcy51cGRhdGUodGhpcy5jdXJyWm9vbUxldmVsKSx0aGlzLnBhblRvKHRoaXMucGFuLngsdGhpcy5wYW4ueSkpOih0aGlzLmNhbGN1bGF0ZVNpemUoKSx0aGlzLmN1cnJlbnRSZXNvbHV0aW9uPTAsdGhpcy56b29tQW5kUGFuVG9Jbml0aWFsKCksdGhpcy5hcHBseUN1cnJlbnRab29tUGFuKCksdGhpcy51cGRhdGVDb250ZW50U2l6ZSgpKX11cGRhdGVDb250ZW50U2l6ZSh0KXtjb25zdCBpPXRoaXMuY3VycmVudFJlc29sdXRpb258fHRoaXMuem9vbUxldmVscy5pbml0aWFsO2lmKCFpKXJldHVybjtjb25zdCBzPU1hdGgucm91bmQodGhpcy53aWR0aCppKXx8dGhpcy5wc3dwLnZpZXdwb3J0U2l6ZS54LGg9TWF0aC5yb3VuZCh0aGlzLmhlaWdodCppKXx8dGhpcy5wc3dwLnZpZXdwb3J0U2l6ZS55Oyh0aGlzLnNpemVDaGFuZ2VkKHMsaCl8fHQpJiZ0aGlzLmNvbnRlbnQuc2V0RGlzcGxheWVkU2l6ZShzLGgpfXNpemVDaGFuZ2VkKHQsaSl7cmV0dXJuKHQhPT10aGlzLnByZXZEaXNwbGF5ZWRXaWR0aHx8aSE9PXRoaXMucHJldkRpc3BsYXllZEhlaWdodCkmJih0aGlzLnByZXZEaXNwbGF5ZWRXaWR0aD10LHRoaXMucHJldkRpc3BsYXllZEhlaWdodD1pLCEwKX1nZXRQbGFjZWhvbGRlckVsZW1lbnQoKXtyZXR1cm4gdGhpcy5jb250ZW50LnBsYWNlaG9sZGVyPy5lbGVtZW50fXpvb21Ubyh0LGksaCxlKXtjb25zdHtwc3dwOm99PXRoaXM7aWYoIXRoaXMuaXNab29tYWJsZSgpfHxvLm1haW5TY3JvbGwuaXNTaGlmdGVkKCkpcmV0dXJuO28uZGlzcGF0Y2goXCJiZWZvcmVab29tVG9cIix7ZGVzdFpvb21MZXZlbDp0LGNlbnRlclBvaW50OmksdHJhbnNpdGlvbkR1cmF0aW9uOmh9KSxvLmFuaW1hdGlvbnMuc3RvcEFsbFBhbigpO2NvbnN0IHI9dGhpcy5jdXJyWm9vbUxldmVsO2V8fCh0PW4odCx0aGlzLnpvb21MZXZlbHMubWluLHRoaXMuem9vbUxldmVscy5tYXgpKSx0aGlzLnNldFpvb21MZXZlbCh0KSx0aGlzLnBhbi54PXRoaXMuY2FsY3VsYXRlWm9vbVRvUGFuT2Zmc2V0KFwieFwiLGksciksdGhpcy5wYW4ueT10aGlzLmNhbGN1bGF0ZVpvb21Ub1Bhbk9mZnNldChcInlcIixpLHIpLHModGhpcy5wYW4pO2NvbnN0IGE9KCk9Pnt0aGlzLmcodCksdGhpcy5hcHBseUN1cnJlbnRab29tUGFuKCl9O2g/by5hbmltYXRpb25zLnN0YXJ0VHJhbnNpdGlvbih7aXNQYW46ITAsbmFtZTpcInpvb21Ub1wiLHRhcmdldDp0aGlzLmNvbnRhaW5lcix0cmFuc2Zvcm06dGhpcy5nZXRDdXJyZW50VHJhbnNmb3JtKCksb25Db21wbGV0ZTphLGR1cmF0aW9uOmgsZWFzaW5nOm8ub3B0aW9ucy5lYXNpbmd9KTphKCl9dG9nZ2xlWm9vbSh0KXt0aGlzLnpvb21Ubyh0aGlzLmN1cnJab29tTGV2ZWw9PT10aGlzLnpvb21MZXZlbHMuaW5pdGlhbD90aGlzLnpvb21MZXZlbHMuc2Vjb25kYXJ5OnRoaXMuem9vbUxldmVscy5pbml0aWFsLHQsdGhpcy5wc3dwLm9wdGlvbnMuem9vbUFuaW1hdGlvbkR1cmF0aW9uKX1zZXRab29tTGV2ZWwodCl7dGhpcy5jdXJyWm9vbUxldmVsPXQsdGhpcy5ib3VuZHMudXBkYXRlKHRoaXMuY3Vyclpvb21MZXZlbCl9Y2FsY3VsYXRlWm9vbVRvUGFuT2Zmc2V0KHQsaSxzKXtpZigwPT09dGhpcy5ib3VuZHMubWF4W3RdLXRoaXMuYm91bmRzLm1pblt0XSlyZXR1cm4gdGhpcy5ib3VuZHMuY2VudGVyW3RdO2l8fChpPXRoaXMucHN3cC5nZXRWaWV3cG9ydENlbnRlclBvaW50KCkpLHN8fChzPXRoaXMuem9vbUxldmVscy5pbml0aWFsKTtjb25zdCBoPXRoaXMuY3Vyclpvb21MZXZlbC9zO3JldHVybiB0aGlzLmJvdW5kcy5jb3JyZWN0UGFuKHQsKHRoaXMucGFuW3RdLWlbdF0pKmgraVt0XSl9cGFuVG8odCxpKXt0aGlzLnBhbi54PXRoaXMuYm91bmRzLmNvcnJlY3RQYW4oXCJ4XCIsdCksdGhpcy5wYW4ueT10aGlzLmJvdW5kcy5jb3JyZWN0UGFuKFwieVwiLGkpLHRoaXMuYXBwbHlDdXJyZW50Wm9vbVBhbigpfWlzUGFubmFibGUoKXtyZXR1cm4gQm9vbGVhbih0aGlzLndpZHRoKSYmdGhpcy5jdXJyWm9vbUxldmVsPnRoaXMuem9vbUxldmVscy5maXR9aXNab29tYWJsZSgpe3JldHVybiBCb29sZWFuKHRoaXMud2lkdGgpJiZ0aGlzLmNvbnRlbnQuaXNab29tYWJsZSgpfWFwcGx5Q3VycmVudFpvb21QYW4oKXt0aGlzLnYodGhpcy5wYW4ueCx0aGlzLnBhbi55LHRoaXMuY3Vyclpvb21MZXZlbCksdGhpcz09PXRoaXMucHN3cC5jdXJyU2xpZGUmJnRoaXMucHN3cC5kaXNwYXRjaChcInpvb21QYW5VcGRhdGVcIix7c2xpZGU6dGhpc30pfXpvb21BbmRQYW5Ub0luaXRpYWwoKXt0aGlzLmN1cnJab29tTGV2ZWw9dGhpcy56b29tTGV2ZWxzLmluaXRpYWwsdGhpcy5ib3VuZHMudXBkYXRlKHRoaXMuY3Vyclpvb21MZXZlbCksaSh0aGlzLnBhbix0aGlzLmJvdW5kcy5jZW50ZXIpLHRoaXMucHN3cC5kaXNwYXRjaChcImluaXRpYWxab29tUGFuXCIse3NsaWRlOnRoaXN9KX12KHQsaSxzKXtzLz10aGlzLmN1cnJlbnRSZXNvbHV0aW9ufHx0aGlzLnpvb21MZXZlbHMuaW5pdGlhbCxyKHRoaXMuY29udGFpbmVyLHQsaSxzKX1jYWxjdWxhdGVTaXplKCl7Y29uc3R7cHN3cDp0fT10aGlzO2kodGhpcy5wYW5BcmVhU2l6ZSx5KHQub3B0aW9ucyx0LnZpZXdwb3J0U2l6ZSx0aGlzLmRhdGEsdGhpcy5pbmRleCkpLHRoaXMuem9vbUxldmVscy51cGRhdGUodGhpcy53aWR0aCx0aGlzLmhlaWdodCx0aGlzLnBhbkFyZWFTaXplKSx0LmRpc3BhdGNoKFwiY2FsY1NsaWRlU2l6ZVwiLHtzbGlkZTp0aGlzfSl9Z2V0Q3VycmVudFRyYW5zZm9ybSgpe2NvbnN0IHQ9dGhpcy5jdXJyWm9vbUxldmVsLyh0aGlzLmN1cnJlbnRSZXNvbHV0aW9ufHx0aGlzLnpvb21MZXZlbHMuaW5pdGlhbCk7cmV0dXJuIG8odGhpcy5wYW4ueCx0aGlzLnBhbi55LHQpfWcodCl7dCE9PXRoaXMuY3VycmVudFJlc29sdXRpb24mJih0aGlzLmN1cnJlbnRSZXNvbHV0aW9uPXQsdGhpcy51cGRhdGVDb250ZW50U2l6ZSgpLHRoaXMucHN3cC5kaXNwYXRjaChcInJlc29sdXRpb25DaGFuZ2VkXCIpKX19Y2xhc3MgU3tjb25zdHJ1Y3Rvcih0KXt0aGlzLmdlc3R1cmVzPXQsdGhpcy5wc3dwPXQucHN3cCx0aGlzLnN0YXJ0UGFuPXt4OjAseTowfX1zdGFydCgpe3RoaXMucHN3cC5jdXJyU2xpZGUmJmkodGhpcy5zdGFydFBhbix0aGlzLnBzd3AuY3VyclNsaWRlLnBhbiksdGhpcy5wc3dwLmFuaW1hdGlvbnMuc3RvcEFsbCgpfWNoYW5nZSgpe2NvbnN0e3AxOnQscHJldlAxOmksZHJhZ0F4aXM6aH09dGhpcy5nZXN0dXJlcyx7Y3VyclNsaWRlOmV9PXRoaXMucHN3cDtpZihcInlcIj09PWgmJnRoaXMucHN3cC5vcHRpb25zLmNsb3NlT25WZXJ0aWNhbERyYWcmJmUmJmUuY3Vyclpvb21MZXZlbDw9ZS56b29tTGV2ZWxzLmZpdCYmIXRoaXMuZ2VzdHVyZXMuaXNNdWx0aXRvdWNoKXtjb25zdCBzPWUucGFuLnkrKHQueS1pLnkpO2lmKCF0aGlzLnBzd3AuZGlzcGF0Y2goXCJ2ZXJ0aWNhbERyYWdcIix7cGFuWTpzfSkuZGVmYXVsdFByZXZlbnRlZCl7dGhpcy5fKFwieVwiLHMsLjYpO2NvbnN0IHQ9MS1NYXRoLmFicyh0aGlzLlMoZS5wYW4ueSkpO3RoaXMucHN3cC5hcHBseUJnT3BhY2l0eSh0KSxlLmFwcGx5Q3VycmVudFpvb21QYW4oKX19ZWxzZXt0aGlzLk0oXCJ4XCIpfHwodGhpcy5NKFwieVwiKSxlJiYocyhlLnBhbiksZS5hcHBseUN1cnJlbnRab29tUGFuKCkpKX19ZW5kKCl7Y29uc3R7dmVsb2NpdHk6dH09dGhpcy5nZXN0dXJlcyx7bWFpblNjcm9sbDppLGN1cnJTbGlkZTpzfT10aGlzLnBzd3A7bGV0IGg9MDtpZih0aGlzLnBzd3AuYW5pbWF0aW9ucy5zdG9wQWxsKCksaS5pc1NoaWZ0ZWQoKSl7Y29uc3Qgcz0oaS54LWkuZ2V0Q3VyclNsaWRlWCgpKS90aGlzLnBzd3Audmlld3BvcnRTaXplLng7dC54PC0uNSYmczwwfHx0Lng8LjEmJnM8LS41PyhoPTEsdC54PU1hdGgubWluKHQueCwwKSk6KHQueD4uNSYmcz4wfHx0Lng+LS4xJiZzPi41KSYmKGg9LTEsdC54PU1hdGgubWF4KHQueCwwKSksaS5tb3ZlSW5kZXhCeShoLCEwLHQueCl9cyYmcy5jdXJyWm9vbUxldmVsPnMuem9vbUxldmVscy5tYXh8fHRoaXMuZ2VzdHVyZXMuaXNNdWx0aXRvdWNoP3RoaXMuZ2VzdHVyZXMuem9vbUxldmVscy5jb3JyZWN0Wm9vbVBhbighMCk6KHRoaXMuUChcInhcIiksdGhpcy5QKFwieVwiKSl9UCh0KXtjb25zdHt2ZWxvY2l0eTppfT10aGlzLmdlc3R1cmVzLHtjdXJyU2xpZGU6c309dGhpcy5wc3dwO2lmKCFzKXJldHVybjtjb25zdHtwYW46aCxib3VuZHM6ZX09cyxvPWhbdF0scj10aGlzLnBzd3AuYmdPcGFjaXR5PDEmJlwieVwiPT09dCxhPW8rZnVuY3Rpb24odCxpKXtyZXR1cm4gdCppLygxLWkpfShpW3RdLC45OTUpO2lmKHIpe2NvbnN0IHQ9dGhpcy5TKG8pLGk9dGhpcy5TKGEpO2lmKHQ8MCYmaTwtLjR8fHQ+MCYmaT4uNClyZXR1cm4gdm9pZCB0aGlzLnBzd3AuY2xvc2UoKX1jb25zdCBjPWUuY29ycmVjdFBhbih0LGEpO2lmKG89PT1jKXJldHVybjtjb25zdCBsPWM9PT1hPzE6LjgyLHA9dGhpcy5wc3dwLmJnT3BhY2l0eSx1PWMtbzt0aGlzLnBzd3AuYW5pbWF0aW9ucy5zdGFydFNwcmluZyh7bmFtZTpcInBhbkdlc3R1cmVcIit0LGlzUGFuOiEwLHN0YXJ0Om8sZW5kOmMsdmVsb2NpdHk6aVt0XSxkYW1waW5nUmF0aW86bCxvblVwZGF0ZTppPT57aWYociYmdGhpcy5wc3dwLmJnT3BhY2l0eTwxKXtjb25zdCB0PTEtKGMtaSkvdTt0aGlzLnBzd3AuYXBwbHlCZ09wYWNpdHkobihwKygxLXApKnQsMCwxKSl9aFt0XT1NYXRoLmZsb29yKGkpLHMuYXBwbHlDdXJyZW50Wm9vbVBhbigpfX0pfU0odCl7Y29uc3R7cDE6aSxkcmFnQXhpczpzLHByZXZQMTpoLGlzTXVsdGl0b3VjaDplfT10aGlzLmdlc3R1cmVzLHtjdXJyU2xpZGU6bixtYWluU2Nyb2xsOm99PXRoaXMucHN3cCxyPWlbdF0taFt0XSxhPW8ueCtyO2lmKCFyfHwhbilyZXR1cm4hMTtpZihcInhcIj09PXQmJiFuLmlzUGFubmFibGUoKSYmIWUpcmV0dXJuIG8ubW92ZVRvKGEsITApLCEwO2NvbnN0e2JvdW5kczpjfT1uLGw9bi5wYW5bdF0rcjtpZih0aGlzLnBzd3Aub3B0aW9ucy5hbGxvd1BhblRvTmV4dCYmXCJ4XCI9PT1zJiZcInhcIj09PXQmJiFlKXtjb25zdCBpPW8uZ2V0Q3VyclNsaWRlWCgpLHM9by54LWksaD1yPjAsZT0haDtpZihsPmMubWluW3RdJiZoKXtpZihjLm1pblt0XTw9dGhpcy5zdGFydFBhblt0XSlyZXR1cm4gby5tb3ZlVG8oYSwhMCksITA7dGhpcy5fKHQsbCl9ZWxzZSBpZihsPGMubWF4W3RdJiZlKXtpZih0aGlzLnN0YXJ0UGFuW3RdPD1jLm1heFt0XSlyZXR1cm4gby5tb3ZlVG8oYSwhMCksITA7dGhpcy5fKHQsbCl9ZWxzZSBpZigwIT09cyl7aWYocz4wKXJldHVybiBvLm1vdmVUbyhNYXRoLm1heChhLGkpLCEwKSwhMDtpZihzPDApcmV0dXJuIG8ubW92ZVRvKE1hdGgubWluKGEsaSksITApLCEwfWVsc2UgdGhpcy5fKHQsbCl9ZWxzZVwieVwiPT09dCYmKG8uaXNTaGlmdGVkKCl8fGMubWluLnk9PT1jLm1heC55KXx8dGhpcy5fKHQsbCk7cmV0dXJuITF9Uyh0KXtyZXR1cm4odC0odGhpcy5wc3dwLmN1cnJTbGlkZT8uYm91bmRzLmNlbnRlci55Pz8wKSkvKHRoaXMucHN3cC52aWV3cG9ydFNpemUueS8zKX1fKHQsaSxzKXtjb25zdHtjdXJyU2xpZGU6aH09dGhpcy5wc3dwO2lmKCFoKXJldHVybjtjb25zdHtwYW46ZSxib3VuZHM6bn09aDtpZihuLmNvcnJlY3RQYW4odCxpKSE9PWl8fHMpe2NvbnN0IGg9TWF0aC5yb3VuZChpLWVbdF0pO2VbdF0rPWgqKHN8fC4zNSl9ZWxzZSBlW3RdPWl9fWZ1bmN0aW9uIHoodCxpLHMpe3JldHVybiB0Lng9KGkueCtzLngpLzIsdC55PShpLnkrcy55KS8yLHR9Y2xhc3MgTXtjb25zdHJ1Y3Rvcih0KXt0aGlzLmdlc3R1cmVzPXQsdGhpcy5DPXt4OjAseTowfSx0aGlzLlQ9e3g6MCx5OjB9LHRoaXMuQT17eDowLHk6MH0sdGhpcy5EPSExLHRoaXMuST0xfXN0YXJ0KCl7Y29uc3R7Y3VyclNsaWRlOnR9PXRoaXMuZ2VzdHVyZXMucHN3cDt0JiYodGhpcy5JPXQuY3Vyclpvb21MZXZlbCxpKHRoaXMuQyx0LnBhbikpLHRoaXMuZ2VzdHVyZXMucHN3cC5hbmltYXRpb25zLnN0b3BBbGxQYW4oKSx0aGlzLkQ9ITF9Y2hhbmdlKCl7Y29uc3R7cDE6dCxzdGFydFAxOmkscDI6cyxzdGFydFAyOmUscHN3cDpufT10aGlzLmdlc3R1cmVzLHtjdXJyU2xpZGU6b309bjtpZighbylyZXR1cm47Y29uc3Qgcj1vLnpvb21MZXZlbHMubWluLGE9by56b29tTGV2ZWxzLm1heDtpZighby5pc1pvb21hYmxlKCl8fG4ubWFpblNjcm9sbC5pc1NoaWZ0ZWQoKSlyZXR1cm47eih0aGlzLlQsaSxlKSx6KHRoaXMuQSx0LHMpO2xldCBjPTEvaChpLGUpKmgodCxzKSp0aGlzLkk7aWYoYz5vLnpvb21MZXZlbHMuaW5pdGlhbCtvLnpvb21MZXZlbHMuaW5pdGlhbC8xNSYmKHRoaXMuRD0hMCksYzxyKWlmKG4ub3B0aW9ucy5waW5jaFRvQ2xvc2UmJiF0aGlzLkQmJnRoaXMuSTw9by56b29tTGV2ZWxzLmluaXRpYWwpe2NvbnN0IHQ9MS0oci1jKS8oci8xLjIpO24uZGlzcGF0Y2goXCJwaW5jaENsb3NlXCIse2JnT3BhY2l0eTp0fSkuZGVmYXVsdFByZXZlbnRlZHx8bi5hcHBseUJnT3BhY2l0eSh0KX1lbHNlIGM9ci0uMTUqKHItYyk7ZWxzZSBjPmEmJihjPWErLjA1KihjLWEpKTtvLnBhbi54PXRoaXMuTChcInhcIixjKSxvLnBhbi55PXRoaXMuTChcInlcIixjKSxvLnNldFpvb21MZXZlbChjKSxvLmFwcGx5Q3VycmVudFpvb21QYW4oKX1lbmQoKXtjb25zdHtwc3dwOnR9PXRoaXMuZ2VzdHVyZXMse2N1cnJTbGlkZTppfT10OyghaXx8aS5jdXJyWm9vbUxldmVsPGkuem9vbUxldmVscy5pbml0aWFsKSYmIXRoaXMuRCYmdC5vcHRpb25zLnBpbmNoVG9DbG9zZT90LmNsb3NlKCk6dGhpcy5jb3JyZWN0Wm9vbVBhbigpfUwodCxpKXtjb25zdCBzPWkvdGhpcy5JO3JldHVybiB0aGlzLkFbdF0tKHRoaXMuVFt0XS10aGlzLkNbdF0pKnN9Y29ycmVjdFpvb21QYW4odCl7Y29uc3R7cHN3cDpzfT10aGlzLmdlc3R1cmVzLHtjdXJyU2xpZGU6aH09cztpZighaD8uaXNab29tYWJsZSgpKXJldHVybjswPT09dGhpcy5BLngmJih0PSEwKTtjb25zdCBvPWguY3Vyclpvb21MZXZlbDtsZXQgcixhPSEwO288aC56b29tTGV2ZWxzLmluaXRpYWw/cj1oLnpvb21MZXZlbHMuaW5pdGlhbDpvPmguem9vbUxldmVscy5tYXg/cj1oLnpvb21MZXZlbHMubWF4OihhPSExLHI9byk7Y29uc3QgYz1zLmJnT3BhY2l0eSxsPXMuYmdPcGFjaXR5PDEscD1pKHt4OjAseTowfSxoLnBhbik7bGV0IHU9aSh7eDowLHk6MH0scCk7dCYmKHRoaXMuQS54PTAsdGhpcy5BLnk9MCx0aGlzLlQueD0wLHRoaXMuVC55PTAsdGhpcy5JPW8saSh0aGlzLkMscCkpLGEmJih1PXt4OnRoaXMuTChcInhcIixyKSx5OnRoaXMuTChcInlcIixyKX0pLGguc2V0Wm9vbUxldmVsKHIpLHU9e3g6aC5ib3VuZHMuY29ycmVjdFBhbihcInhcIix1LngpLHk6aC5ib3VuZHMuY29ycmVjdFBhbihcInlcIix1LnkpfSxoLnNldFpvb21MZXZlbChvKTtjb25zdCBkPSFlKHUscCk7aWYoIWQmJiFhJiYhbClyZXR1cm4gaC5nKHIpLHZvaWQgaC5hcHBseUN1cnJlbnRab29tUGFuKCk7cy5hbmltYXRpb25zLnN0b3BBbGxQYW4oKSxzLmFuaW1hdGlvbnMuc3RhcnRTcHJpbmcoe2lzUGFuOiEwLHN0YXJ0OjAsZW5kOjFlMyx2ZWxvY2l0eTowLGRhbXBpbmdSYXRpbzoxLG5hdHVyYWxGcmVxdWVuY3k6NDAsb25VcGRhdGU6dD0+e2lmKHQvPTFlMyxkfHxhKXtpZihkJiYoaC5wYW4ueD1wLngrKHUueC1wLngpKnQsaC5wYW4ueT1wLnkrKHUueS1wLnkpKnQpLGEpe2NvbnN0IGk9bysoci1vKSp0O2guc2V0Wm9vbUxldmVsKGkpfWguYXBwbHlDdXJyZW50Wm9vbVBhbigpfWwmJnMuYmdPcGFjaXR5PDEmJnMuYXBwbHlCZ09wYWNpdHkobihjKygxLWMpKnQsMCwxKSl9LG9uQ29tcGxldGU6KCk9PntoLmcociksaC5hcHBseUN1cnJlbnRab29tUGFuKCl9fSl9fWZ1bmN0aW9uIFAodCl7cmV0dXJuISF0LnRhcmdldC5jbG9zZXN0KFwiLnBzd3BfX2NvbnRhaW5lclwiKX1jbGFzcyBDe2NvbnN0cnVjdG9yKHQpe3RoaXMuZ2VzdHVyZXM9dH1jbGljayh0LGkpe2NvbnN0IHM9aS50YXJnZXQuY2xhc3NMaXN0LGg9cy5jb250YWlucyhcInBzd3BfX2ltZ1wiKSxlPXMuY29udGFpbnMoXCJwc3dwX19pdGVtXCIpfHxzLmNvbnRhaW5zKFwicHN3cF9fem9vbS13cmFwXCIpO2g/dGhpcy5rKFwiaW1hZ2VDbGlja1wiLHQsaSk6ZSYmdGhpcy5rKFwiYmdDbGlja1wiLHQsaSl9dGFwKHQsaSl7UChpKSYmdGhpcy5rKFwidGFwXCIsdCxpKX1kb3VibGVUYXAodCxpKXtQKGkpJiZ0aGlzLmsoXCJkb3VibGVUYXBcIix0LGkpfWsodCxpLHMpe2NvbnN0e3Bzd3A6aH09dGhpcy5nZXN0dXJlcyx7Y3VyclNsaWRlOmV9PWgsbj10K1wiQWN0aW9uXCIsbz1oLm9wdGlvbnNbbl07aWYoIWguZGlzcGF0Y2gobix7cG9pbnQ6aSxvcmlnaW5hbEV2ZW50OnN9KS5kZWZhdWx0UHJldmVudGVkKWlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG8pc3dpdGNoKG8pe2Nhc2VcImNsb3NlXCI6Y2FzZVwibmV4dFwiOmhbb10oKTticmVhaztjYXNlXCJ6b29tXCI6ZT8udG9nZ2xlWm9vbShpKTticmVhaztjYXNlXCJ6b29tLW9yLWNsb3NlXCI6ZT8uaXNab29tYWJsZSgpJiZlLnpvb21MZXZlbHMuc2Vjb25kYXJ5IT09ZS56b29tTGV2ZWxzLmluaXRpYWw/ZS50b2dnbGVab29tKGkpOmgub3B0aW9ucy5jbGlja1RvQ2xvc2VOb25ab29tYWJsZSYmaC5jbG9zZSgpO2JyZWFrO2Nhc2VcInRvZ2dsZS1jb250cm9sc1wiOnRoaXMuZ2VzdHVyZXMucHN3cC5lbGVtZW50Py5jbGFzc0xpc3QudG9nZ2xlKFwicHN3cC0tdWktdmlzaWJsZVwiKX1lbHNlIG8uY2FsbChoLGkscyl9fWNsYXNzIFR7Y29uc3RydWN0b3IodCl7dGhpcy5wc3dwPXQsdGhpcy5kcmFnQXhpcz1udWxsLHRoaXMucDE9e3g6MCx5OjB9LHRoaXMucDI9e3g6MCx5OjB9LHRoaXMucHJldlAxPXt4OjAseTowfSx0aGlzLnByZXZQMj17eDowLHk6MH0sdGhpcy5zdGFydFAxPXt4OjAseTowfSx0aGlzLnN0YXJ0UDI9e3g6MCx5OjB9LHRoaXMudmVsb2NpdHk9e3g6MCx5OjB9LHRoaXMuWj17eDowLHk6MH0sdGhpcy5CPXt4OjAseTowfSx0aGlzLkY9MCx0aGlzLk89W10sdGhpcy5SPVwib250b3VjaHN0YXJ0XCJpbiB3aW5kb3csdGhpcy5OPSEhd2luZG93LlBvaW50ZXJFdmVudCx0aGlzLnN1cHBvcnRzVG91Y2g9dGhpcy5SfHx0aGlzLk4mJm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cz4xLHRoaXMuRj0wLHRoaXMuVT0wLHRoaXMuVj0hMSx0aGlzLmlzTXVsdGl0b3VjaD0hMSx0aGlzLmlzRHJhZ2dpbmc9ITEsdGhpcy5pc1pvb21pbmc9ITEsdGhpcy5yYWY9bnVsbCx0aGlzLkc9bnVsbCx0aGlzLnN1cHBvcnRzVG91Y2h8fCh0Lm9wdGlvbnMuYWxsb3dQYW5Ub05leHQ9ITEpLHRoaXMuZHJhZz1uZXcgUyh0aGlzKSx0aGlzLnpvb21MZXZlbHM9bmV3IE0odGhpcyksdGhpcy50YXBIYW5kbGVyPW5ldyBDKHRoaXMpLHQub24oXCJiaW5kRXZlbnRzXCIsKCgpPT57dC5ldmVudHMuYWRkKHQuc2Nyb2xsV3JhcCxcImNsaWNrXCIsdGhpcy4kLmJpbmQodGhpcykpLHRoaXMuTj90aGlzLnEoXCJwb2ludGVyXCIsXCJkb3duXCIsXCJ1cFwiLFwiY2FuY2VsXCIpOnRoaXMuUj8odGhpcy5xKFwidG91Y2hcIixcInN0YXJ0XCIsXCJlbmRcIixcImNhbmNlbFwiKSx0LnNjcm9sbFdyYXAmJih0LnNjcm9sbFdyYXAub250b3VjaG1vdmU9KCk9Pnt9LHQuc2Nyb2xsV3JhcC5vbnRvdWNoZW5kPSgpPT57fSkpOnRoaXMucShcIm1vdXNlXCIsXCJkb3duXCIsXCJ1cFwiKX0pKX1xKHQsaSxzLGgpe2NvbnN0e3Bzd3A6ZX09dGhpcyx7ZXZlbnRzOm59PWUsbz1oP3QraDpcIlwiO24uYWRkKGUuc2Nyb2xsV3JhcCx0K2ksdGhpcy5vblBvaW50ZXJEb3duLmJpbmQodGhpcykpLG4uYWRkKHdpbmRvdyx0K1wibW92ZVwiLHRoaXMub25Qb2ludGVyTW92ZS5iaW5kKHRoaXMpKSxuLmFkZCh3aW5kb3csdCtzLHRoaXMub25Qb2ludGVyVXAuYmluZCh0aGlzKSksbyYmbi5hZGQoZS5zY3JvbGxXcmFwLG8sdGhpcy5vblBvaW50ZXJVcC5iaW5kKHRoaXMpKX1vblBvaW50ZXJEb3duKHQpe2NvbnN0IHM9XCJtb3VzZWRvd25cIj09PXQudHlwZXx8XCJtb3VzZVwiPT09dC5wb2ludGVyVHlwZTtpZihzJiZ0LmJ1dHRvbj4wKXJldHVybjtjb25zdHtwc3dwOmh9PXRoaXM7aC5vcGVuZXIuaXNPcGVuP2guZGlzcGF0Y2goXCJwb2ludGVyRG93blwiLHtvcmlnaW5hbEV2ZW50OnR9KS5kZWZhdWx0UHJldmVudGVkfHwocyYmKGgubW91c2VEZXRlY3RlZCgpLHRoaXMuSCh0KSksaC5hbmltYXRpb25zLnN0b3BBbGwoKSx0aGlzLksodCxcImRvd25cIiksMT09PXRoaXMuRiYmKHRoaXMuZHJhZ0F4aXM9bnVsbCxpKHRoaXMuc3RhcnRQMSx0aGlzLnAxKSksdGhpcy5GPjE/KHRoaXMuVygpLHRoaXMuaXNNdWx0aXRvdWNoPSEwKTp0aGlzLmlzTXVsdGl0b3VjaD0hMSk6dC5wcmV2ZW50RGVmYXVsdCgpfW9uUG9pbnRlck1vdmUodCl7dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuRiYmKHRoaXMuSyh0LFwibW92ZVwiKSx0aGlzLnBzd3AuZGlzcGF0Y2goXCJwb2ludGVyTW92ZVwiLHtvcmlnaW5hbEV2ZW50OnR9KS5kZWZhdWx0UHJldmVudGVkfHwoMSE9PXRoaXMuRnx8dGhpcy5pc0RyYWdnaW5nP3RoaXMuRj4xJiYhdGhpcy5pc1pvb21pbmcmJih0aGlzLmooKSx0aGlzLmlzWm9vbWluZz0hMCx0aGlzLlgoKSx0aGlzLnpvb21MZXZlbHMuc3RhcnQoKSx0aGlzLlkoKSx0aGlzLkooKSk6KHRoaXMuZHJhZ0F4aXN8fHRoaXMudHQoKSx0aGlzLmRyYWdBeGlzJiYhdGhpcy5pc0RyYWdnaW5nJiYodGhpcy5pc1pvb21pbmcmJih0aGlzLmlzWm9vbWluZz0hMSx0aGlzLnpvb21MZXZlbHMuZW5kKCkpLHRoaXMuaXNEcmFnZ2luZz0hMCx0aGlzLlcoKSx0aGlzLlgoKSx0aGlzLlU9RGF0ZS5ub3coKSx0aGlzLlY9ITEsaSh0aGlzLkIsdGhpcy5wMSksdGhpcy52ZWxvY2l0eS54PTAsdGhpcy52ZWxvY2l0eS55PTAsdGhpcy5kcmFnLnN0YXJ0KCksdGhpcy5ZKCksdGhpcy5KKCkpKSkpfWooKXt0aGlzLmlzRHJhZ2dpbmcmJih0aGlzLmlzRHJhZ2dpbmc9ITEsdGhpcy5WfHx0aGlzLml0KCEwKSx0aGlzLmRyYWcuZW5kKCksdGhpcy5kcmFnQXhpcz1udWxsKX1vblBvaW50ZXJVcCh0KXt0aGlzLkYmJih0aGlzLksodCxcInVwXCIpLHRoaXMucHN3cC5kaXNwYXRjaChcInBvaW50ZXJVcFwiLHtvcmlnaW5hbEV2ZW50OnR9KS5kZWZhdWx0UHJldmVudGVkfHwoMD09PXRoaXMuRiYmKHRoaXMuWSgpLHRoaXMuaXNEcmFnZ2luZz90aGlzLmooKTp0aGlzLmlzWm9vbWluZ3x8dGhpcy5pc011bHRpdG91Y2h8fHRoaXMuc3QodCkpLHRoaXMuRjwyJiZ0aGlzLmlzWm9vbWluZyYmKHRoaXMuaXNab29taW5nPSExLHRoaXMuem9vbUxldmVscy5lbmQoKSwxPT09dGhpcy5GJiYodGhpcy5kcmFnQXhpcz1udWxsLHRoaXMuWCgpKSkpKX1KKCl7KHRoaXMuaXNEcmFnZ2luZ3x8dGhpcy5pc1pvb21pbmcpJiYodGhpcy5pdCgpLHRoaXMuaXNEcmFnZ2luZz9lKHRoaXMucDEsdGhpcy5wcmV2UDEpfHx0aGlzLmRyYWcuY2hhbmdlKCk6ZSh0aGlzLnAxLHRoaXMucHJldlAxKSYmZSh0aGlzLnAyLHRoaXMucHJldlAyKXx8dGhpcy56b29tTGV2ZWxzLmNoYW5nZSgpLHRoaXMuaHQoKSx0aGlzLnJhZj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5KLmJpbmQodGhpcykpKX1pdCh0KXtjb25zdCBzPURhdGUubm93KCksaD1zLXRoaXMuVTtoPDUwJiYhdHx8KHRoaXMudmVsb2NpdHkueD10aGlzLmV0KFwieFwiLGgpLHRoaXMudmVsb2NpdHkueT10aGlzLmV0KFwieVwiLGgpLHRoaXMuVT1zLGkodGhpcy5CLHRoaXMucDEpLHRoaXMuVj0hMCl9c3QodCl7Y29uc3R7bWFpblNjcm9sbDpzfT10aGlzLnBzd3A7aWYocy5pc1NoaWZ0ZWQoKSlyZXR1cm4gdm9pZCBzLm1vdmVJbmRleEJ5KDAsITApO2lmKHQudHlwZS5pbmRleE9mKFwiY2FuY2VsXCIpPjApcmV0dXJuO2lmKFwibW91c2V1cFwiPT09dC50eXBlfHxcIm1vdXNlXCI9PT10LnBvaW50ZXJUeXBlKXJldHVybiB2b2lkIHRoaXMudGFwSGFuZGxlci5jbGljayh0aGlzLnN0YXJ0UDEsdCk7Y29uc3QgZT10aGlzLnBzd3Aub3B0aW9ucy5kb3VibGVUYXBBY3Rpb24/MzAwOjA7dGhpcy5HPyh0aGlzLlcoKSxoKHRoaXMuWix0aGlzLnN0YXJ0UDEpPDI1JiZ0aGlzLnRhcEhhbmRsZXIuZG91YmxlVGFwKHRoaXMuc3RhcnRQMSx0KSk6KGkodGhpcy5aLHRoaXMuc3RhcnRQMSksdGhpcy5HPXNldFRpbWVvdXQoKCgpPT57dGhpcy50YXBIYW5kbGVyLnRhcCh0aGlzLnN0YXJ0UDEsdCksdGhpcy5XKCl9KSxlKSl9Vygpe3RoaXMuRyYmKGNsZWFyVGltZW91dCh0aGlzLkcpLHRoaXMuRz1udWxsKX1ldCh0LGkpe2NvbnN0IHM9dGhpcy5wMVt0XS10aGlzLkJbdF07cmV0dXJuIE1hdGguYWJzKHMpPjEmJmk+NT9zL2k6MH1ZKCl7dGhpcy5yYWYmJihjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZiksdGhpcy5yYWY9bnVsbCl9SCh0KXt0LnByZXZlbnREZWZhdWx0KCl9Syh0LHMpe2lmKHRoaXMuTil7Y29uc3QgaD10LGU9dGhpcy5PLmZpbmRJbmRleCgodD0+dC5pZD09PWgucG9pbnRlcklkKSk7XCJ1cFwiPT09cyYmZT4tMT90aGlzLk8uc3BsaWNlKGUsMSk6XCJkb3duXCI9PT1zJiYtMT09PWU/dGhpcy5PLnB1c2godGhpcy5udChoLHt4OjAseTowfSkpOmU+LTEmJnRoaXMubnQoaCx0aGlzLk9bZV0pLHRoaXMuRj10aGlzLk8ubGVuZ3RoLHRoaXMuRj4wJiZpKHRoaXMucDEsdGhpcy5PWzBdKSx0aGlzLkY+MSYmaSh0aGlzLnAyLHRoaXMuT1sxXSl9ZWxzZXtjb25zdCBpPXQ7dGhpcy5GPTAsaS50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKT4tMT9pLnRvdWNoZXMmJmkudG91Y2hlcy5sZW5ndGg+MCYmKHRoaXMubnQoaS50b3VjaGVzWzBdLHRoaXMucDEpLHRoaXMuRisrLGkudG91Y2hlcy5sZW5ndGg+MSYmKHRoaXMubnQoaS50b3VjaGVzWzFdLHRoaXMucDIpLHRoaXMuRisrKSk6KHRoaXMubnQodCx0aGlzLnAxKSxcInVwXCI9PT1zP3RoaXMuRj0wOnRoaXMuRisrKX19aHQoKXtpKHRoaXMucHJldlAxLHRoaXMucDEpLGkodGhpcy5wcmV2UDIsdGhpcy5wMil9WCgpe2kodGhpcy5zdGFydFAxLHRoaXMucDEpLGkodGhpcy5zdGFydFAyLHRoaXMucDIpLHRoaXMuaHQoKX10dCgpe2lmKHRoaXMucHN3cC5tYWluU2Nyb2xsLmlzU2hpZnRlZCgpKXRoaXMuZHJhZ0F4aXM9XCJ4XCI7ZWxzZXtjb25zdCB0PU1hdGguYWJzKHRoaXMucDEueC10aGlzLnN0YXJ0UDEueCktTWF0aC5hYnModGhpcy5wMS55LXRoaXMuc3RhcnRQMS55KTtpZigwIT09dCl7Y29uc3QgaT10PjA/XCJ4XCI6XCJ5XCI7TWF0aC5hYnModGhpcy5wMVtpXS10aGlzLnN0YXJ0UDFbaV0pPj0xMCYmKHRoaXMuZHJhZ0F4aXM9aSl9fX1udCh0LGkpe3JldHVybiBpLng9dC5wYWdlWC10aGlzLnBzd3Aub2Zmc2V0LngsaS55PXQucGFnZVktdGhpcy5wc3dwLm9mZnNldC55LFwicG9pbnRlcklkXCJpbiB0P2kuaWQ9dC5wb2ludGVySWQ6dm9pZCAwIT09dC5pZGVudGlmaWVyJiYoaS5pZD10LmlkZW50aWZpZXIpLGl9JCh0KXt0aGlzLnBzd3AubWFpblNjcm9sbC5pc1NoaWZ0ZWQoKSYmKHQucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpKX19Y2xhc3MgQXtjb25zdHJ1Y3Rvcih0KXt0aGlzLnBzd3A9dCx0aGlzLng9MCx0aGlzLnNsaWRlV2lkdGg9MCx0aGlzLm90PTAsdGhpcy5ydD0wLHRoaXMuY3Q9LTEsdGhpcy5pdGVtSG9sZGVycz1bXX1yZXNpemUodCl7Y29uc3R7cHN3cDppfT10aGlzLHM9TWF0aC5yb3VuZChpLnZpZXdwb3J0U2l6ZS54K2kudmlld3BvcnRTaXplLngqaS5vcHRpb25zLnNwYWNpbmcpLGg9cyE9PXRoaXMuc2xpZGVXaWR0aDtoJiYodGhpcy5zbGlkZVdpZHRoPXMsdGhpcy5tb3ZlVG8odGhpcy5nZXRDdXJyU2xpZGVYKCkpKSx0aGlzLml0ZW1Ib2xkZXJzLmZvckVhY2goKChpLHMpPT57aCYmcihpLmVsLChzK3RoaXMuY3QpKnRoaXMuc2xpZGVXaWR0aCksdCYmaS5zbGlkZSYmaS5zbGlkZS5yZXNpemUoKX0pKX1yZXNldFBvc2l0aW9uKCl7dGhpcy5vdD0wLHRoaXMucnQ9MCx0aGlzLnNsaWRlV2lkdGg9MCx0aGlzLmN0PS0xfWFwcGVuZEhvbGRlcnMoKXt0aGlzLml0ZW1Ib2xkZXJzPVtdO2ZvcihsZXQgaT0wO2k8MztpKyspe2NvbnN0IHM9dChcInBzd3BfX2l0ZW1cIixcImRpdlwiLHRoaXMucHN3cC5jb250YWluZXIpO3Muc2V0QXR0cmlidXRlKFwicm9sZVwiLFwiZ3JvdXBcIikscy5zZXRBdHRyaWJ1dGUoXCJhcmlhLXJvbGVkZXNjcmlwdGlvblwiLFwic2xpZGVcIikscy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSxzLnN0eWxlLmRpc3BsYXk9MT09PWk/XCJibG9ja1wiOlwibm9uZVwiLHRoaXMuaXRlbUhvbGRlcnMucHVzaCh7ZWw6c30pfX1jYW5CZVN3aXBlZCgpe3JldHVybiB0aGlzLnBzd3AuZ2V0TnVtSXRlbXMoKT4xfW1vdmVJbmRleEJ5KHQsaSxzKXtjb25zdHtwc3dwOmh9PXRoaXM7bGV0IGU9aC5wb3RlbnRpYWxJbmRleCt0O2NvbnN0IG49aC5nZXROdW1JdGVtcygpO2lmKGguY2FuTG9vcCgpKXtlPWguZ2V0TG9vcGVkSW5kZXgoZSk7Y29uc3QgaT0odCtuKSVuO3Q9aTw9bi8yP2k6aS1ufWVsc2UgZTwwP2U9MDplPj1uJiYoZT1uLTEpLHQ9ZS1oLnBvdGVudGlhbEluZGV4O2gucG90ZW50aWFsSW5kZXg9ZSx0aGlzLm90LT10LGguYW5pbWF0aW9ucy5zdG9wTWFpblNjcm9sbCgpO2NvbnN0IG89dGhpcy5nZXRDdXJyU2xpZGVYKCk7aWYoaSl7aC5hbmltYXRpb25zLnN0YXJ0U3ByaW5nKHtpc01haW5TY3JvbGw6ITAsc3RhcnQ6dGhpcy54LGVuZDpvLHZlbG9jaXR5OnN8fDAsbmF0dXJhbEZyZXF1ZW5jeTozMCxkYW1waW5nUmF0aW86MSxvblVwZGF0ZTp0PT57dGhpcy5tb3ZlVG8odCl9LG9uQ29tcGxldGU6KCk9Pnt0aGlzLnVwZGF0ZUN1cnJJdGVtKCksaC5hcHBlbmRIZWF2eSgpfX0pO2xldCB0PWgucG90ZW50aWFsSW5kZXgtaC5jdXJySW5kZXg7aWYoaC5jYW5Mb29wKCkpe2NvbnN0IGk9KHQrbiklbjt0PWk8PW4vMj9pOmktbn1NYXRoLmFicyh0KT4xJiZ0aGlzLnVwZGF0ZUN1cnJJdGVtKCl9ZWxzZSB0aGlzLm1vdmVUbyhvKSx0aGlzLnVwZGF0ZUN1cnJJdGVtKCk7cmV0dXJuIEJvb2xlYW4odCl9Z2V0Q3VyclNsaWRlWCgpe3JldHVybiB0aGlzLnNsaWRlV2lkdGgqdGhpcy5vdH1pc1NoaWZ0ZWQoKXtyZXR1cm4gdGhpcy54IT09dGhpcy5nZXRDdXJyU2xpZGVYKCl9dXBkYXRlQ3Vyckl0ZW0oKXtjb25zdHtwc3dwOnR9PXRoaXMsaT10aGlzLnJ0LXRoaXMub3Q7aWYoIWkpcmV0dXJuO3RoaXMucnQ9dGhpcy5vdCx0LmN1cnJJbmRleD10LnBvdGVudGlhbEluZGV4O2xldCBzLGg9TWF0aC5hYnMoaSk7aD49MyYmKHRoaXMuY3QrPWkrKGk+MD8tMzozKSxoPTMpO2ZvcihsZXQgZT0wO2U8aDtlKyspaT4wPyhzPXRoaXMuaXRlbUhvbGRlcnMuc2hpZnQoKSxzJiYodGhpcy5pdGVtSG9sZGVyc1syXT1zLHRoaXMuY3QrKyxyKHMuZWwsKHRoaXMuY3QrMikqdGhpcy5zbGlkZVdpZHRoKSx0LnNldENvbnRlbnQocyx0LmN1cnJJbmRleC1oK2UrMikpKToocz10aGlzLml0ZW1Ib2xkZXJzLnBvcCgpLHMmJih0aGlzLml0ZW1Ib2xkZXJzLnVuc2hpZnQocyksdGhpcy5jdC0tLHIocy5lbCx0aGlzLmN0KnRoaXMuc2xpZGVXaWR0aCksdC5zZXRDb250ZW50KHMsdC5jdXJySW5kZXgraC1lLTIpKSk7TWF0aC5hYnModGhpcy5jdCk+NTAmJiF0aGlzLmlzU2hpZnRlZCgpJiYodGhpcy5yZXNldFBvc2l0aW9uKCksdGhpcy5yZXNpemUoKSksdC5hbmltYXRpb25zLnN0b3BBbGxQYW4oKSx0aGlzLml0ZW1Ib2xkZXJzLmZvckVhY2goKCh0LGkpPT57dC5zbGlkZSYmdC5zbGlkZS5zZXRJc0FjdGl2ZSgxPT09aSl9KSksdC5jdXJyU2xpZGU9dGhpcy5pdGVtSG9sZGVyc1sxXT8uc2xpZGUsdC5jb250ZW50TG9hZGVyLnVwZGF0ZUxhenkoaSksdC5jdXJyU2xpZGUmJnQuY3VyclNsaWRlLmFwcGx5Q3VycmVudFpvb21QYW4oKSx0LmRpc3BhdGNoKFwiY2hhbmdlXCIpfW1vdmVUbyh0LGkpe2lmKCF0aGlzLnBzd3AuY2FuTG9vcCgpJiZpKXtsZXQgaT0odGhpcy5zbGlkZVdpZHRoKnRoaXMub3QtdCkvdGhpcy5zbGlkZVdpZHRoO2krPXRoaXMucHN3cC5jdXJySW5kZXg7Y29uc3Qgcz1NYXRoLnJvdW5kKHQtdGhpcy54KTsoaTwwJiZzPjB8fGk+PXRoaXMucHN3cC5nZXROdW1JdGVtcygpLTEmJnM8MCkmJih0PXRoaXMueCsuMzUqcyl9dGhpcy54PXQsdGhpcy5wc3dwLmNvbnRhaW5lciYmcih0aGlzLnBzd3AuY29udGFpbmVyLHQpLHRoaXMucHN3cC5kaXNwYXRjaChcIm1vdmVNYWluU2Nyb2xsXCIse3g6dCxkcmFnZ2luZzppPz8hMX0pfX1jb25zdCBEPXtFc2NhcGU6Mjcsejo5MCxBcnJvd0xlZnQ6MzcsQXJyb3dVcDozOCxBcnJvd1JpZ2h0OjM5LEFycm93RG93bjo0MCxUYWI6OX0sST0odCxpKT0+aT90OkRbdF07Y2xhc3MgRXtjb25zdHJ1Y3Rvcih0KXt0aGlzLnBzd3A9dCx0aGlzLmx0PSExLHQub24oXCJiaW5kRXZlbnRzXCIsKCgpPT57dC5vcHRpb25zLmluaXRpYWxQb2ludGVyUG9zfHx0aGlzLnV0KCksdC5ldmVudHMuYWRkKGRvY3VtZW50LFwiZm9jdXNpblwiLHRoaXMuZHQuYmluZCh0aGlzKSksdC5ldmVudHMuYWRkKGRvY3VtZW50LFwia2V5ZG93blwiLHRoaXMuZnQuYmluZCh0aGlzKSl9KSk7Y29uc3QgaT1kb2N1bWVudC5hY3RpdmVFbGVtZW50O3Qub24oXCJkZXN0cm95XCIsKCgpPT57dC5vcHRpb25zLnJldHVybkZvY3VzJiZpJiZ0aGlzLmx0JiZpLmZvY3VzKCl9KSl9dXQoKXshdGhpcy5sdCYmdGhpcy5wc3dwLmVsZW1lbnQmJih0aGlzLnBzd3AuZWxlbWVudC5mb2N1cygpLHRoaXMubHQ9ITApfWZ0KHQpe2NvbnN0e3Bzd3A6aX09dGhpcztpZihpLmRpc3BhdGNoKFwia2V5ZG93blwiLHtvcmlnaW5hbEV2ZW50OnR9KS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtpZihmdW5jdGlvbih0KXtyZXR1cm5cImJ1dHRvblwiaW4gdCYmMT09PXQuYnV0dG9ufHx0LmN0cmxLZXl8fHQubWV0YUtleXx8dC5hbHRLZXl8fHQuc2hpZnRLZXl9KHQpKXJldHVybjtsZXQgcyxoLGU9ITE7Y29uc3Qgbj1cImtleVwiaW4gdDtzd2l0Y2gobj90LmtleTp0LmtleUNvZGUpe2Nhc2UgSShcIkVzY2FwZVwiLG4pOmkub3B0aW9ucy5lc2NLZXkmJihzPVwiY2xvc2VcIik7YnJlYWs7Y2FzZSBJKFwielwiLG4pOnM9XCJ0b2dnbGVab29tXCI7YnJlYWs7Y2FzZSBJKFwiQXJyb3dMZWZ0XCIsbik6aD1cInhcIjticmVhaztjYXNlIEkoXCJBcnJvd1VwXCIsbik6aD1cInlcIjticmVhaztjYXNlIEkoXCJBcnJvd1JpZ2h0XCIsbik6aD1cInhcIixlPSEwO2JyZWFrO2Nhc2UgSShcIkFycm93RG93blwiLG4pOmU9ITAsaD1cInlcIjticmVhaztjYXNlIEkoXCJUYWJcIixuKTp0aGlzLnV0KCl9aWYoaCl7dC5wcmV2ZW50RGVmYXVsdCgpO2NvbnN0e2N1cnJTbGlkZTpufT1pO2kub3B0aW9ucy5hcnJvd0tleXMmJlwieFwiPT09aCYmaS5nZXROdW1JdGVtcygpPjE/cz1lP1wibmV4dFwiOlwicHJldlwiOm4mJm4uY3Vyclpvb21MZXZlbD5uLnpvb21MZXZlbHMuZml0JiYobi5wYW5baF0rPWU/LTgwOjgwLG4ucGFuVG8obi5wYW4ueCxuLnBhbi55KSl9cyYmKHQucHJldmVudERlZmF1bHQoKSxpW3NdKCkpfWR0KHQpe2NvbnN0e3RlbXBsYXRlOml9PXRoaXMucHN3cDtpJiZkb2N1bWVudCE9PXQudGFyZ2V0JiZpIT09dC50YXJnZXQmJiFpLmNvbnRhaW5zKHQudGFyZ2V0KSYmaS5mb2N1cygpfX1jb25zdCBMPVwiY3ViaWMtYmV6aWVyKC40LDAsLjIyLDEpXCI7Y2xhc3Mga3tjb25zdHJ1Y3Rvcih0KXt0aGlzLnByb3BzPXQ7Y29uc3R7dGFyZ2V0Omksb25Db21wbGV0ZTpzLHRyYW5zZm9ybTpoLG9uRmluaXNoOmU9KCgpPT57fSksZHVyYXRpb246bj0zMzMsZWFzaW5nOm89TH09dDt0aGlzLm9uRmluaXNoPWU7Y29uc3Qgcj1oP1widHJhbnNmb3JtXCI6XCJvcGFjaXR5XCIsYz10W3JdPz9cIlwiO3RoaXMud3Q9aSx0aGlzLmd0PXMsdGhpcy52dD0hMSx0aGlzLnl0PXRoaXMueXQuYmluZCh0aGlzKSx0aGlzLl90PXNldFRpbWVvdXQoKCgpPT57YShpLHIsbixvKSx0aGlzLl90PXNldFRpbWVvdXQoKCgpPT57aS5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLHRoaXMueXQsITEpLGkuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25jYW5jZWxcIix0aGlzLnl0LCExKSx0aGlzLl90PXNldFRpbWVvdXQoKCgpPT57dGhpcy54dCgpfSksbis1MDApLGkuc3R5bGVbcl09Y30pLDMwKX0pLDApfXl0KHQpe3QudGFyZ2V0PT09dGhpcy53dCYmdGhpcy54dCgpfXh0KCl7dGhpcy52dHx8KHRoaXMudnQ9ITAsdGhpcy5vbkZpbmlzaCgpLHRoaXMuZ3QmJnRoaXMuZ3QoKSl9ZGVzdHJveSgpe3RoaXMuX3QmJmNsZWFyVGltZW91dCh0aGlzLl90KSxhKHRoaXMud3QpLHRoaXMud3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIix0aGlzLnl0LCExKSx0aGlzLnd0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uY2FuY2VsXCIsdGhpcy55dCwhMSksdGhpcy52dHx8dGhpcy54dCgpfX1jbGFzcyBae2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLnZlbG9jaXR5PTFlMyp0LHRoaXMuYnQ9aXx8Ljc1LHRoaXMuU3Q9c3x8MTIsdGhpcy56dD10aGlzLlN0LHRoaXMuYnQ8MSYmKHRoaXMuenQqPU1hdGguc3FydCgxLXRoaXMuYnQqdGhpcy5idCkpfWVhc2VGcmFtZSh0LGkpe2xldCBzLGg9MDtpLz0xZTM7Y29uc3QgZT1NYXRoLkUqKigtdGhpcy5idCp0aGlzLlN0KmkpO2lmKDE9PT10aGlzLmJ0KXM9dGhpcy52ZWxvY2l0eSt0aGlzLlN0KnQsaD0odCtzKmkpKmUsdGhpcy52ZWxvY2l0eT1oKi10aGlzLlN0K3MqZTtlbHNlIGlmKHRoaXMuYnQ8MSl7cz0xL3RoaXMuenQqKHRoaXMuYnQqdGhpcy5TdCp0K3RoaXMudmVsb2NpdHkpO2NvbnN0IG49TWF0aC5jb3ModGhpcy56dCppKSxvPU1hdGguc2luKHRoaXMuenQqaSk7aD1lKih0Km4rcypvKSx0aGlzLnZlbG9jaXR5PWgqLXRoaXMuU3QqdGhpcy5idCtlKigtdGhpcy56dCp0Km8rdGhpcy56dCpzKm4pfXJldHVybiBofX1jbGFzcyBCe2NvbnN0cnVjdG9yKHQpe3RoaXMucHJvcHM9dCx0aGlzLk10PTA7Y29uc3R7c3RhcnQ6aSxlbmQ6cyx2ZWxvY2l0eTpoLG9uVXBkYXRlOmUsb25Db21wbGV0ZTpuLG9uRmluaXNoOm89KCgpPT57fSksZGFtcGluZ1JhdGlvOnIsbmF0dXJhbEZyZXF1ZW5jeTphfT10O3RoaXMub25GaW5pc2g9bztjb25zdCBjPW5ldyBaKGgscixhKTtsZXQgbD1EYXRlLm5vdygpLHA9aS1zO2NvbnN0IHU9KCk9Pnt0aGlzLk10JiYocD1jLmVhc2VGcmFtZShwLERhdGUubm93KCktbCksTWF0aC5hYnMocCk8MSYmTWF0aC5hYnMoYy52ZWxvY2l0eSk8NTA/KGUocyksbiYmbigpLHRoaXMub25GaW5pc2goKSk6KGw9RGF0ZS5ub3coKSxlKHArcyksdGhpcy5NdD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSkpKX07dGhpcy5NdD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSl9ZGVzdHJveSgpe3RoaXMuTXQ+PTAmJmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuTXQpLHRoaXMuTXQ9MH19Y2xhc3MgRntjb25zdHJ1Y3Rvcigpe3RoaXMuYWN0aXZlQW5pbWF0aW9ucz1bXX1zdGFydFNwcmluZyh0KXt0aGlzLlB0KHQsITApfXN0YXJ0VHJhbnNpdGlvbih0KXt0aGlzLlB0KHQpfVB0KHQsaSl7Y29uc3Qgcz1pP25ldyBCKHQpOm5ldyBrKHQpO3JldHVybiB0aGlzLmFjdGl2ZUFuaW1hdGlvbnMucHVzaChzKSxzLm9uRmluaXNoPSgpPT50aGlzLnN0b3Aocyksc31zdG9wKHQpe3QuZGVzdHJveSgpO2NvbnN0IGk9dGhpcy5hY3RpdmVBbmltYXRpb25zLmluZGV4T2YodCk7aT4tMSYmdGhpcy5hY3RpdmVBbmltYXRpb25zLnNwbGljZShpLDEpfXN0b3BBbGwoKXt0aGlzLmFjdGl2ZUFuaW1hdGlvbnMuZm9yRWFjaCgodD0+e3QuZGVzdHJveSgpfSkpLHRoaXMuYWN0aXZlQW5pbWF0aW9ucz1bXX1zdG9wQWxsUGFuKCl7dGhpcy5hY3RpdmVBbmltYXRpb25zPXRoaXMuYWN0aXZlQW5pbWF0aW9ucy5maWx0ZXIoKHQ9PiF0LnByb3BzLmlzUGFufHwodC5kZXN0cm95KCksITEpKSl9c3RvcE1haW5TY3JvbGwoKXt0aGlzLmFjdGl2ZUFuaW1hdGlvbnM9dGhpcy5hY3RpdmVBbmltYXRpb25zLmZpbHRlcigodD0+IXQucHJvcHMuaXNNYWluU2Nyb2xsfHwodC5kZXN0cm95KCksITEpKSl9aXNQYW5SdW5uaW5nKCl7cmV0dXJuIHRoaXMuYWN0aXZlQW5pbWF0aW9ucy5zb21lKCh0PT50LnByb3BzLmlzUGFuKSl9fWNsYXNzIE97Y29uc3RydWN0b3IodCl7dGhpcy5wc3dwPXQsdC5ldmVudHMuYWRkKHQuZWxlbWVudCxcIndoZWVsXCIsdGhpcy5DdC5iaW5kKHRoaXMpKX1DdCh0KXt0LnByZXZlbnREZWZhdWx0KCk7Y29uc3R7Y3VyclNsaWRlOml9PXRoaXMucHN3cDtsZXR7ZGVsdGFYOnMsZGVsdGFZOmh9PXQ7aWYoaSYmIXRoaXMucHN3cC5kaXNwYXRjaChcIndoZWVsXCIse29yaWdpbmFsRXZlbnQ6dH0pLmRlZmF1bHRQcmV2ZW50ZWQpaWYodC5jdHJsS2V5fHx0aGlzLnBzd3Aub3B0aW9ucy53aGVlbFRvWm9vbSl7aWYoaS5pc1pvb21hYmxlKCkpe2xldCBzPS1oOzE9PT10LmRlbHRhTW9kZT9zKj0uMDU6cyo9dC5kZWx0YU1vZGU/MTouMDAyLHM9Mioqcztjb25zdCBlPWkuY3Vyclpvb21MZXZlbCpzO2kuem9vbVRvKGUse3g6dC5jbGllbnRYLHk6dC5jbGllbnRZfSl9fWVsc2UgaS5pc1Bhbm5hYmxlKCkmJigxPT09dC5kZWx0YU1vZGUmJihzKj0xOCxoKj0xOCksaS5wYW5UbyhpLnBhbi54LXMsaS5wYW4ueS1oKSl9fWNsYXNzIFJ7Y29uc3RydWN0b3IoaSxzKXtjb25zdCBoPXMubmFtZXx8cy5jbGFzc05hbWU7bGV0IGU9cy5odG1sO2lmKCExPT09aS5vcHRpb25zW2hdKXJldHVybjtcInN0cmluZ1wiPT10eXBlb2YgaS5vcHRpb25zW2grXCJTVkdcIl0mJihlPWkub3B0aW9uc1toK1wiU1ZHXCJdKSxpLmRpc3BhdGNoKFwidWlFbGVtZW50Q3JlYXRlXCIse2RhdGE6c30pO2xldCBuPVwiXCI7cy5pc0J1dHRvbj8obis9XCJwc3dwX19idXR0b24gXCIsbis9cy5jbGFzc05hbWV8fGBwc3dwX19idXR0b24tLSR7cy5uYW1lfWApOm4rPXMuY2xhc3NOYW1lfHxgcHN3cF9fJHtzLm5hbWV9YDtsZXQgbz1zLmlzQnV0dG9uP3MudGFnTmFtZXx8XCJidXR0b25cIjpzLnRhZ05hbWV8fFwiZGl2XCI7bz1vLnRvTG93ZXJDYXNlKCk7Y29uc3Qgcj10KG4sbyk7aWYocy5pc0J1dHRvbil7XCJidXR0b25cIj09PW8mJihyLnR5cGU9XCJidXR0b25cIik7bGV0e3RpdGxlOnR9PXM7Y29uc3R7YXJpYUxhYmVsOmV9PXM7XCJzdHJpbmdcIj09dHlwZW9mIGkub3B0aW9uc1toK1wiVGl0bGVcIl0mJih0PWkub3B0aW9uc1toK1wiVGl0bGVcIl0pLHQmJihyLnRpdGxlPXQpO2NvbnN0IG49ZXx8dDtuJiZyLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIixuKX1yLmlubmVySFRNTD1mdW5jdGlvbih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gdDtpZighdHx8IXQuaXNDdXN0b21TVkcpcmV0dXJuXCJcIjtjb25zdCBpPXQ7bGV0IHM9JzxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJwc3dwX19pY25cIiB2aWV3Qm94PVwiMCAwICVkICVkXCIgd2lkdGg9XCIlZFwiIGhlaWdodD1cIiVkXCI+JztyZXR1cm4gcz1zLnNwbGl0KFwiJWRcIikuam9pbihpLnNpemV8fDMyKSxpLm91dGxpbmVJRCYmKHMrPSc8dXNlIGNsYXNzPVwicHN3cF9faWNuLXNoYWRvd1wiIHhsaW5rOmhyZWY9XCIjJytpLm91dGxpbmVJRCsnXCIvPicpLHMrPWkuaW5uZXIscys9XCI8L3N2Zz5cIixzfShlKSxzLm9uSW5pdCYmcy5vbkluaXQocixpKSxzLm9uQ2xpY2smJihyLm9uY2xpY2s9dD0+e1wic3RyaW5nXCI9PXR5cGVvZiBzLm9uQ2xpY2s/aVtzLm9uQ2xpY2tdKCk6XCJmdW5jdGlvblwiPT10eXBlb2Ygcy5vbkNsaWNrJiZzLm9uQ2xpY2sodCxyLGkpfSk7Y29uc3QgYT1zLmFwcGVuZFRvfHxcImJhclwiO2xldCBjPWkuZWxlbWVudDtcImJhclwiPT09YT8oaS50b3BCYXJ8fChpLnRvcEJhcj10KFwicHN3cF9fdG9wLWJhciBwc3dwX19oaWRlLW9uLWNsb3NlXCIsXCJkaXZcIixpLnNjcm9sbFdyYXApKSxjPWkudG9wQmFyKTooci5jbGFzc0xpc3QuYWRkKFwicHN3cF9faGlkZS1vbi1jbG9zZVwiKSxcIndyYXBwZXJcIj09PWEmJihjPWkuc2Nyb2xsV3JhcCkpLGM/LmFwcGVuZENoaWxkKGkuYXBwbHlGaWx0ZXJzKFwidWlFbGVtZW50XCIscixzKSl9fWZ1bmN0aW9uIE4odCxpLHMpe3QuY2xhc3NMaXN0LmFkZChcInBzd3BfX2J1dHRvbi0tYXJyb3dcIiksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNvbnRyb2xzXCIsXCJwc3dwX19pdGVtc1wiKSxpLm9uKFwiY2hhbmdlXCIsKCgpPT57aS5vcHRpb25zLmxvb3B8fCh0LmRpc2FibGVkPXM/IShpLmN1cnJJbmRleDxpLmdldE51bUl0ZW1zKCktMSk6IShpLmN1cnJJbmRleD4wKSl9KSl9Y29uc3QgVT17bmFtZTpcImFycm93UHJldlwiLGNsYXNzTmFtZTpcInBzd3BfX2J1dHRvbi0tYXJyb3ctLXByZXZcIix0aXRsZTpcIlByZXZpb3VzXCIsb3JkZXI6MTAsaXNCdXR0b246ITAsYXBwZW5kVG86XCJ3cmFwcGVyXCIsaHRtbDp7aXNDdXN0b21TVkc6ITAsc2l6ZTo2MCxpbm5lcjonPHBhdGggZD1cIk0yOSA0M2wtMyAzLTE2LTE2IDE2LTE2IDMgMy0xMyAxMyAxMyAxM3pcIiBpZD1cInBzd3BfX2ljbi1hcnJvd1wiLz4nLG91dGxpbmVJRDpcInBzd3BfX2ljbi1hcnJvd1wifSxvbkNsaWNrOlwicHJldlwiLG9uSW5pdDpOfSxWPXtuYW1lOlwiYXJyb3dOZXh0XCIsY2xhc3NOYW1lOlwicHN3cF9fYnV0dG9uLS1hcnJvdy0tbmV4dFwiLHRpdGxlOlwiTmV4dFwiLG9yZGVyOjExLGlzQnV0dG9uOiEwLGFwcGVuZFRvOlwid3JhcHBlclwiLGh0bWw6e2lzQ3VzdG9tU1ZHOiEwLHNpemU6NjAsaW5uZXI6Jzx1c2UgeGxpbms6aHJlZj1cIiNwc3dwX19pY24tYXJyb3dcIi8+JyxvdXRsaW5lSUQ6XCJwc3dwX19pY24tYXJyb3dcIn0sb25DbGljazpcIm5leHRcIixvbkluaXQ6KHQsaSk9PntOKHQsaSwhMCl9fSxHPXtuYW1lOlwiY2xvc2VcIix0aXRsZTpcIkNsb3NlXCIsb3JkZXI6MjAsaXNCdXR0b246ITAsaHRtbDp7aXNDdXN0b21TVkc6ITAsaW5uZXI6JzxwYXRoIGQ9XCJNMjQgMTBsLTItMi02IDYtNi02LTIgMiA2IDYtNiA2IDIgMiA2LTYgNiA2IDItMi02LTZ6XCIgaWQ9XCJwc3dwX19pY24tY2xvc2VcIi8+JyxvdXRsaW5lSUQ6XCJwc3dwX19pY24tY2xvc2VcIn0sb25DbGljazpcImNsb3NlXCJ9LCQ9e25hbWU6XCJ6b29tXCIsdGl0bGU6XCJab29tXCIsb3JkZXI6MTAsaXNCdXR0b246ITAsaHRtbDp7aXNDdXN0b21TVkc6ITAsaW5uZXI6JzxwYXRoIGQ9XCJNMTcuNDI2IDE5LjkyNmE2IDYgMCAxIDEgMS41LTEuNUwyMyAyMi41IDIxLjUgMjRsLTQuMDc0LTQuMDc0elwiIGlkPVwicHN3cF9faWNuLXpvb21cIi8+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGNsYXNzPVwicHN3cF9fem9vbS1pY24tYmFyLWhcIiBkPVwiTTExIDE2di0yaDZ2MnpcIi8+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGNsYXNzPVwicHN3cF9fem9vbS1pY24tYmFyLXZcIiBkPVwiTTEzIDEyaDJ2NmgtMnpcIi8+JyxvdXRsaW5lSUQ6XCJwc3dwX19pY24tem9vbVwifSxvbkNsaWNrOlwidG9nZ2xlWm9vbVwifSxxPXtuYW1lOlwicHJlbG9hZGVyXCIsYXBwZW5kVG86XCJiYXJcIixvcmRlcjo3LGh0bWw6e2lzQ3VzdG9tU1ZHOiEwLGlubmVyOic8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMjEuMiAxNmE1LjIgNS4yIDAgMSAxLTUuMi01LjJWOGE4IDggMCAxIDAgOCA4aC0yLjhaXCIgaWQ9XCJwc3dwX19pY24tbG9hZGluZ1wiLz4nLG91dGxpbmVJRDpcInBzd3BfX2ljbi1sb2FkaW5nXCJ9LG9uSW5pdDoodCxpKT0+e2xldCBzLGg9bnVsbDtjb25zdCBlPWk9Pnt2YXIgaCxlO3MhPT1pJiYocz1pLGg9XCJhY3RpdmVcIixlPWksdC5jbGFzc0xpc3QudG9nZ2xlKFwicHN3cF9fcHJlbG9hZGVyLS1cIitoLGUpKX0sbj0oKT0+e2lmKCFpLmN1cnJTbGlkZT8uY29udGVudC5pc0xvYWRpbmcoKSlyZXR1cm4gZSghMSksdm9pZChoJiYoY2xlYXJUaW1lb3V0KGgpLGg9bnVsbCkpO2h8fChoPXNldFRpbWVvdXQoKCgpPT57ZShCb29sZWFuKGkuY3VyclNsaWRlPy5jb250ZW50LmlzTG9hZGluZygpKSksaD1udWxsfSksaS5vcHRpb25zLnByZWxvYWRlckRlbGF5KSl9O2kub24oXCJjaGFuZ2VcIixuKSxpLm9uKFwibG9hZENvbXBsZXRlXCIsKHQ9PntpLmN1cnJTbGlkZT09PXQuc2xpZGUmJm4oKX0pKSxpLnVpJiYoaS51aS51cGRhdGVQcmVsb2FkZXJWaXNpYmlsaXR5PW4pfX0sSD17bmFtZTpcImNvdW50ZXJcIixvcmRlcjo1LG9uSW5pdDoodCxpKT0+e2kub24oXCJjaGFuZ2VcIiwoKCk9Pnt0LmlubmVyVGV4dD1pLmN1cnJJbmRleCsxK2kub3B0aW9ucy5pbmRleEluZGljYXRvclNlcCtpLmdldE51bUl0ZW1zKCl9KSl9fTtmdW5jdGlvbiBLKHQsaSl7dC5jbGFzc0xpc3QudG9nZ2xlKFwicHN3cC0tem9vbWVkLWluXCIsaSl9Y2xhc3MgV3tjb25zdHJ1Y3Rvcih0KXt0aGlzLnBzd3A9dCx0aGlzLmlzUmVnaXN0ZXJlZD0hMSx0aGlzLnVpRWxlbWVudHNEYXRhPVtdLHRoaXMuaXRlbXM9W10sdGhpcy51cGRhdGVQcmVsb2FkZXJWaXNpYmlsaXR5PSgpPT57fSx0aGlzLlR0PXZvaWQgMH1pbml0KCl7Y29uc3R7cHN3cDp0fT10aGlzO3RoaXMuaXNSZWdpc3RlcmVkPSExLHRoaXMudWlFbGVtZW50c0RhdGE9W0csVSxWLCQscSxIXSx0LmRpc3BhdGNoKFwidWlSZWdpc3RlclwiKSx0aGlzLnVpRWxlbWVudHNEYXRhLnNvcnQoKCh0LGkpPT4odC5vcmRlcnx8MCktKGkub3JkZXJ8fDApKSksdGhpcy5pdGVtcz1bXSx0aGlzLmlzUmVnaXN0ZXJlZD0hMCx0aGlzLnVpRWxlbWVudHNEYXRhLmZvckVhY2goKHQ9Pnt0aGlzLnJlZ2lzdGVyRWxlbWVudCh0KX0pKSx0Lm9uKFwiY2hhbmdlXCIsKCgpPT57dC5lbGVtZW50Py5jbGFzc0xpc3QudG9nZ2xlKFwicHN3cC0tb25lLXNsaWRlXCIsMT09PXQuZ2V0TnVtSXRlbXMoKSl9KSksdC5vbihcInpvb21QYW5VcGRhdGVcIiwoKCk9PnRoaXMuQXQoKSkpfXJlZ2lzdGVyRWxlbWVudCh0KXt0aGlzLmlzUmVnaXN0ZXJlZD90aGlzLml0ZW1zLnB1c2gobmV3IFIodGhpcy5wc3dwLHQpKTp0aGlzLnVpRWxlbWVudHNEYXRhLnB1c2godCl9QXQoKXtjb25zdHt0ZW1wbGF0ZTp0LGN1cnJTbGlkZTppLG9wdGlvbnM6c309dGhpcy5wc3dwO2lmKHRoaXMucHN3cC5vcGVuZXIuaXNDbG9zaW5nfHwhdHx8IWkpcmV0dXJuO2xldHtjdXJyWm9vbUxldmVsOmh9PWk7aWYodGhpcy5wc3dwLm9wZW5lci5pc09wZW58fChoPWkuem9vbUxldmVscy5pbml0aWFsKSxoPT09dGhpcy5UdClyZXR1cm47dGhpcy5UdD1oO2NvbnN0IGU9aS56b29tTGV2ZWxzLmluaXRpYWwtaS56b29tTGV2ZWxzLnNlY29uZGFyeTtpZihNYXRoLmFicyhlKTwuMDF8fCFpLmlzWm9vbWFibGUoKSlyZXR1cm4gSyh0LCExKSx2b2lkIHQuY2xhc3NMaXN0LnJlbW92ZShcInBzd3AtLXpvb20tYWxsb3dlZFwiKTt0LmNsYXNzTGlzdC5hZGQoXCJwc3dwLS16b29tLWFsbG93ZWRcIik7Syh0LChoPT09aS56b29tTGV2ZWxzLmluaXRpYWw/aS56b29tTGV2ZWxzLnNlY29uZGFyeTppLnpvb21MZXZlbHMuaW5pdGlhbCk8PWgpLFwiem9vbVwiIT09cy5pbWFnZUNsaWNrQWN0aW9uJiZcInpvb20tb3ItY2xvc2VcIiE9PXMuaW1hZ2VDbGlja0FjdGlvbnx8dC5jbGFzc0xpc3QuYWRkKFwicHN3cC0tY2xpY2stdG8tem9vbVwiKX19Y2xhc3Mgantjb25zdHJ1Y3Rvcih0LGkpe3RoaXMudHlwZT10LHRoaXMuZGVmYXVsdFByZXZlbnRlZD0hMSxpJiZPYmplY3QuYXNzaWduKHRoaXMsaSl9cHJldmVudERlZmF1bHQoKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9fWNsYXNzIFh7Y29uc3RydWN0b3IoaSxzKXtpZih0aGlzLmVsZW1lbnQ9dChcInBzd3BfX2ltZyBwc3dwX19pbWctLXBsYWNlaG9sZGVyXCIsaT9cImltZ1wiOlwiZGl2XCIscyksaSl7Y29uc3QgdD10aGlzLmVsZW1lbnQ7dC5kZWNvZGluZz1cImFzeW5jXCIsdC5hbHQ9XCJcIix0LnNyYz1pLHQuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwicHJlc2VudGF0aW9uXCIpfXRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKX1zZXREaXNwbGF5ZWRTaXplKHQsaSl7dGhpcy5lbGVtZW50JiYoXCJJTUdcIj09PXRoaXMuZWxlbWVudC50YWdOYW1lPyhjKHRoaXMuZWxlbWVudCwyNTAsXCJhdXRvXCIpLHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW49XCIwIDBcIix0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtPW8oMCwwLHQvMjUwKSk6Yyh0aGlzLmVsZW1lbnQsdCxpKSl9ZGVzdHJveSgpe3RoaXMuZWxlbWVudD8ucGFyZW50Tm9kZSYmdGhpcy5lbGVtZW50LnJlbW92ZSgpLHRoaXMuZWxlbWVudD1udWxsfX1jbGFzcyBZe2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLmluc3RhbmNlPWksdGhpcy5kYXRhPXQsdGhpcy5pbmRleD1zLHRoaXMuZWxlbWVudD12b2lkIDAsdGhpcy5wbGFjZWhvbGRlcj12b2lkIDAsdGhpcy5zbGlkZT12b2lkIDAsdGhpcy5kaXNwbGF5ZWRJbWFnZVdpZHRoPTAsdGhpcy5kaXNwbGF5ZWRJbWFnZUhlaWdodD0wLHRoaXMud2lkdGg9TnVtYmVyKHRoaXMuZGF0YS53KXx8TnVtYmVyKHRoaXMuZGF0YS53aWR0aCl8fDAsdGhpcy5oZWlnaHQ9TnVtYmVyKHRoaXMuZGF0YS5oKXx8TnVtYmVyKHRoaXMuZGF0YS5oZWlnaHQpfHwwLHRoaXMuaXNBdHRhY2hlZD0hMSx0aGlzLmhhc1NsaWRlPSExLHRoaXMuaXNEZWNvZGluZz0hMSx0aGlzLnN0YXRlPWwsdGhpcy5kYXRhLnR5cGU/dGhpcy50eXBlPXRoaXMuZGF0YS50eXBlOnRoaXMuZGF0YS5zcmM/dGhpcy50eXBlPVwiaW1hZ2VcIjp0aGlzLnR5cGU9XCJodG1sXCIsdGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRJbml0XCIse2NvbnRlbnQ6dGhpc30pfXJlbW92ZVBsYWNlaG9sZGVyKCl7dGhpcy5wbGFjZWhvbGRlciYmIXRoaXMua2VlcFBsYWNlaG9sZGVyKCkmJnNldFRpbWVvdXQoKCgpPT57dGhpcy5wbGFjZWhvbGRlciYmKHRoaXMucGxhY2Vob2xkZXIuZGVzdHJveSgpLHRoaXMucGxhY2Vob2xkZXI9dm9pZCAwKX0pLDFlMyl9bG9hZChpLHMpe2lmKHRoaXMuc2xpZGUmJnRoaXMudXNlUGxhY2Vob2xkZXIoKSlpZih0aGlzLnBsYWNlaG9sZGVyKXtjb25zdCB0PXRoaXMucGxhY2Vob2xkZXIuZWxlbWVudDt0JiYhdC5wYXJlbnRFbGVtZW50JiZ0aGlzLnNsaWRlLmNvbnRhaW5lci5wcmVwZW5kKHQpfWVsc2V7Y29uc3QgdD10aGlzLmluc3RhbmNlLmFwcGx5RmlsdGVycyhcInBsYWNlaG9sZGVyU3JjXCIsISghdGhpcy5kYXRhLm1zcmN8fCF0aGlzLnNsaWRlLmlzRmlyc3RTbGlkZSkmJnRoaXMuZGF0YS5tc3JjLHRoaXMpO3RoaXMucGxhY2Vob2xkZXI9bmV3IFgodCx0aGlzLnNsaWRlLmNvbnRhaW5lcil9dGhpcy5lbGVtZW50JiYhc3x8dGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRMb2FkXCIse2NvbnRlbnQ6dGhpcyxpc0xhenk6aX0pLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLmlzSW1hZ2VDb250ZW50KCk/KHRoaXMuZWxlbWVudD10KFwicHN3cF9faW1nXCIsXCJpbWdcIiksdGhpcy5kaXNwbGF5ZWRJbWFnZVdpZHRoJiZ0aGlzLmxvYWRJbWFnZShpKSk6KHRoaXMuZWxlbWVudD10KFwicHN3cF9fY29udGVudFwiLFwiZGl2XCIpLHRoaXMuZWxlbWVudC5pbm5lckhUTUw9dGhpcy5kYXRhLmh0bWx8fFwiXCIpLHMmJnRoaXMuc2xpZGUmJnRoaXMuc2xpZGUudXBkYXRlQ29udGVudFNpemUoITApKX1sb2FkSW1hZ2UodCl7aWYoIXRoaXMuaXNJbWFnZUNvbnRlbnQoKXx8IXRoaXMuZWxlbWVudHx8dGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRMb2FkSW1hZ2VcIix7Y29udGVudDp0aGlzLGlzTGF6eTp0fSkuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47Y29uc3QgaT10aGlzLmVsZW1lbnQ7dGhpcy51cGRhdGVTcmNzZXRTaXplcygpLHRoaXMuZGF0YS5zcmNzZXQmJihpLnNyY3NldD10aGlzLmRhdGEuc3Jjc2V0KSxpLnNyYz10aGlzLmRhdGEuc3JjPz9cIlwiLGkuYWx0PXRoaXMuZGF0YS5hbHQ/P1wiXCIsdGhpcy5zdGF0ZT1wLGkuY29tcGxldGU/dGhpcy5vbkxvYWRlZCgpOihpLm9ubG9hZD0oKT0+e3RoaXMub25Mb2FkZWQoKX0saS5vbmVycm9yPSgpPT57dGhpcy5vbkVycm9yKCl9KX1zZXRTbGlkZSh0KXt0aGlzLnNsaWRlPXQsdGhpcy5oYXNTbGlkZT0hMCx0aGlzLmluc3RhbmNlPXQucHN3cH1vbkxvYWRlZCgpe3RoaXMuc3RhdGU9dSx0aGlzLnNsaWRlJiZ0aGlzLmVsZW1lbnQmJih0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwibG9hZENvbXBsZXRlXCIse3NsaWRlOnRoaXMuc2xpZGUsY29udGVudDp0aGlzfSksdGhpcy5zbGlkZS5pc0FjdGl2ZSYmdGhpcy5zbGlkZS5oZWF2eUFwcGVuZGVkJiYhdGhpcy5lbGVtZW50LnBhcmVudE5vZGUmJih0aGlzLmFwcGVuZCgpLHRoaXMuc2xpZGUudXBkYXRlQ29udGVudFNpemUoITApKSx0aGlzLnN0YXRlIT09dSYmdGhpcy5zdGF0ZSE9PWR8fHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoKSl9b25FcnJvcigpe3RoaXMuc3RhdGU9ZCx0aGlzLnNsaWRlJiYodGhpcy5kaXNwbGF5RXJyb3IoKSx0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwibG9hZENvbXBsZXRlXCIse3NsaWRlOnRoaXMuc2xpZGUsaXNFcnJvcjohMCxjb250ZW50OnRoaXN9KSx0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwibG9hZEVycm9yXCIse3NsaWRlOnRoaXMuc2xpZGUsY29udGVudDp0aGlzfSkpfWlzTG9hZGluZygpe3JldHVybiB0aGlzLmluc3RhbmNlLmFwcGx5RmlsdGVycyhcImlzQ29udGVudExvYWRpbmdcIix0aGlzLnN0YXRlPT09cCx0aGlzKX1pc0Vycm9yKCl7cmV0dXJuIHRoaXMuc3RhdGU9PT1kfWlzSW1hZ2VDb250ZW50KCl7cmV0dXJuXCJpbWFnZVwiPT09dGhpcy50eXBlfXNldERpc3BsYXllZFNpemUodCxpKXtpZih0aGlzLmVsZW1lbnQmJih0aGlzLnBsYWNlaG9sZGVyJiZ0aGlzLnBsYWNlaG9sZGVyLnNldERpc3BsYXllZFNpemUodCxpKSwhdGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRSZXNpemVcIix7Y29udGVudDp0aGlzLHdpZHRoOnQsaGVpZ2h0Oml9KS5kZWZhdWx0UHJldmVudGVkJiYoYyh0aGlzLmVsZW1lbnQsdCxpKSx0aGlzLmlzSW1hZ2VDb250ZW50KCkmJiF0aGlzLmlzRXJyb3IoKSkpKXtjb25zdCBzPSF0aGlzLmRpc3BsYXllZEltYWdlV2lkdGgmJnQ7dGhpcy5kaXNwbGF5ZWRJbWFnZVdpZHRoPXQsdGhpcy5kaXNwbGF5ZWRJbWFnZUhlaWdodD1pLHM/dGhpcy5sb2FkSW1hZ2UoITEpOnRoaXMudXBkYXRlU3Jjc2V0U2l6ZXMoKSx0aGlzLnNsaWRlJiZ0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiaW1hZ2VTaXplQ2hhbmdlXCIse3NsaWRlOnRoaXMuc2xpZGUsd2lkdGg6dCxoZWlnaHQ6aSxjb250ZW50OnRoaXN9KX19aXNab29tYWJsZSgpe3JldHVybiB0aGlzLmluc3RhbmNlLmFwcGx5RmlsdGVycyhcImlzQ29udGVudFpvb21hYmxlXCIsdGhpcy5pc0ltYWdlQ29udGVudCgpJiZ0aGlzLnN0YXRlIT09ZCx0aGlzKX11cGRhdGVTcmNzZXRTaXplcygpe2lmKCF0aGlzLmlzSW1hZ2VDb250ZW50KCl8fCF0aGlzLmVsZW1lbnR8fCF0aGlzLmRhdGEuc3Jjc2V0KXJldHVybjtjb25zdCB0PXRoaXMuZWxlbWVudCxpPXRoaXMuaW5zdGFuY2UuYXBwbHlGaWx0ZXJzKFwic3Jjc2V0U2l6ZXNXaWR0aFwiLHRoaXMuZGlzcGxheWVkSW1hZ2VXaWR0aCx0aGlzKTsoIXQuZGF0YXNldC5sYXJnZXN0VXNlZFNpemV8fGk+cGFyc2VJbnQodC5kYXRhc2V0Lmxhcmdlc3RVc2VkU2l6ZSwxMCkpJiYodC5zaXplcz1pK1wicHhcIix0LmRhdGFzZXQubGFyZ2VzdFVzZWRTaXplPVN0cmluZyhpKSl9dXNlUGxhY2Vob2xkZXIoKXtyZXR1cm4gdGhpcy5pbnN0YW5jZS5hcHBseUZpbHRlcnMoXCJ1c2VDb250ZW50UGxhY2Vob2xkZXJcIix0aGlzLmlzSW1hZ2VDb250ZW50KCksdGhpcyl9bGF6eUxvYWQoKXt0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiY29udGVudExhenlMb2FkXCIse2NvbnRlbnQ6dGhpc30pLmRlZmF1bHRQcmV2ZW50ZWR8fHRoaXMubG9hZCghMCl9a2VlcFBsYWNlaG9sZGVyKCl7cmV0dXJuIHRoaXMuaW5zdGFuY2UuYXBwbHlGaWx0ZXJzKFwiaXNLZWVwaW5nUGxhY2Vob2xkZXJcIix0aGlzLmlzTG9hZGluZygpLHRoaXMpfWRlc3Ryb3koKXt0aGlzLmhhc1NsaWRlPSExLHRoaXMuc2xpZGU9dm9pZCAwLHRoaXMuaW5zdGFuY2UuZGlzcGF0Y2goXCJjb250ZW50RGVzdHJveVwiLHtjb250ZW50OnRoaXN9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5yZW1vdmUoKSx0aGlzLnBsYWNlaG9sZGVyJiYodGhpcy5wbGFjZWhvbGRlci5kZXN0cm95KCksdGhpcy5wbGFjZWhvbGRlcj12b2lkIDApLHRoaXMuaXNJbWFnZUNvbnRlbnQoKSYmdGhpcy5lbGVtZW50JiYodGhpcy5lbGVtZW50Lm9ubG9hZD1udWxsLHRoaXMuZWxlbWVudC5vbmVycm9yPW51bGwsdGhpcy5lbGVtZW50PXZvaWQgMCkpfWRpc3BsYXlFcnJvcigpe2lmKHRoaXMuc2xpZGUpe2xldCBpPXQoXCJwc3dwX19lcnJvci1tc2dcIixcImRpdlwiKTtpLmlubmVyVGV4dD10aGlzLmluc3RhbmNlLm9wdGlvbnM/LmVycm9yTXNnPz9cIlwiLGk9dGhpcy5pbnN0YW5jZS5hcHBseUZpbHRlcnMoXCJjb250ZW50RXJyb3JFbGVtZW50XCIsaSx0aGlzKSx0aGlzLmVsZW1lbnQ9dChcInBzd3BfX2NvbnRlbnQgcHN3cF9fZXJyb3ItbXNnLWNvbnRhaW5lclwiLFwiZGl2XCIpLHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChpKSx0aGlzLnNsaWRlLmNvbnRhaW5lci5pbm5lclRleHQ9XCJcIix0aGlzLnNsaWRlLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpLHRoaXMuc2xpZGUudXBkYXRlQ29udGVudFNpemUoITApLHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoKX19YXBwZW5kKCl7aWYodGhpcy5pc0F0dGFjaGVkfHwhdGhpcy5lbGVtZW50KXJldHVybjtpZih0aGlzLmlzQXR0YWNoZWQ9ITAsdGhpcy5zdGF0ZT09PWQpcmV0dXJuIHZvaWQgdGhpcy5kaXNwbGF5RXJyb3IoKTtpZih0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiY29udGVudEFwcGVuZFwiLHtjb250ZW50OnRoaXN9KS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtjb25zdCB0PVwiZGVjb2RlXCJpbiB0aGlzLmVsZW1lbnQ7dGhpcy5pc0ltYWdlQ29udGVudCgpP3QmJnRoaXMuc2xpZGUmJighdGhpcy5zbGlkZS5pc0FjdGl2ZXx8bSgpKT8odGhpcy5pc0RlY29kaW5nPSEwLHRoaXMuZWxlbWVudC5kZWNvZGUoKS5jYXRjaCgoKCk9Pnt9KSkuZmluYWxseSgoKCk9Pnt0aGlzLmlzRGVjb2Rpbmc9ITEsdGhpcy5hcHBlbmRJbWFnZSgpfSkpKTp0aGlzLmFwcGVuZEltYWdlKCk6dGhpcy5zbGlkZSYmIXRoaXMuZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLnNsaWRlLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpfWFjdGl2YXRlKCl7IXRoaXMuaW5zdGFuY2UuZGlzcGF0Y2goXCJjb250ZW50QWN0aXZhdGVcIix7Y29udGVudDp0aGlzfSkuZGVmYXVsdFByZXZlbnRlZCYmdGhpcy5zbGlkZSYmKHRoaXMuaXNJbWFnZUNvbnRlbnQoKSYmdGhpcy5pc0RlY29kaW5nJiYhbSgpP3RoaXMuYXBwZW5kSW1hZ2UoKTp0aGlzLmlzRXJyb3IoKSYmdGhpcy5sb2FkKCExLCEwKSx0aGlzLnNsaWRlLmhvbGRlckVsZW1lbnQmJnRoaXMuc2xpZGUuaG9sZGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIikpfWRlYWN0aXZhdGUoKXt0aGlzLmluc3RhbmNlLmRpc3BhdGNoKFwiY29udGVudERlYWN0aXZhdGVcIix7Y29udGVudDp0aGlzfSksdGhpcy5zbGlkZSYmdGhpcy5zbGlkZS5ob2xkZXJFbGVtZW50JiZ0aGlzLnNsaWRlLmhvbGRlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIil9cmVtb3ZlKCl7dGhpcy5pc0F0dGFjaGVkPSExLHRoaXMuaW5zdGFuY2UuZGlzcGF0Y2goXCJjb250ZW50UmVtb3ZlXCIse2NvbnRlbnQ6dGhpc30pLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLmVsZW1lbnQmJnRoaXMuZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLmVsZW1lbnQucmVtb3ZlKCksdGhpcy5wbGFjZWhvbGRlciYmdGhpcy5wbGFjZWhvbGRlci5lbGVtZW50JiZ0aGlzLnBsYWNlaG9sZGVyLmVsZW1lbnQucmVtb3ZlKCkpfWFwcGVuZEltYWdlKCl7dGhpcy5pc0F0dGFjaGVkJiYodGhpcy5pbnN0YW5jZS5kaXNwYXRjaChcImNvbnRlbnRBcHBlbmRJbWFnZVwiLHtjb250ZW50OnRoaXN9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5zbGlkZSYmdGhpcy5lbGVtZW50JiYhdGhpcy5lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuc2xpZGUuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCksdGhpcy5zdGF0ZSE9PXUmJnRoaXMuc3RhdGUhPT1kfHx0aGlzLnJlbW92ZVBsYWNlaG9sZGVyKCkpKX19ZnVuY3Rpb24gSih0LGkscyl7Y29uc3QgaD1pLmNyZWF0ZUNvbnRlbnRGcm9tRGF0YSh0LHMpO2xldCBlO2NvbnN0e29wdGlvbnM6bn09aTtpZihuKXtsZXQgbztlPW5ldyB4KG4sdCwtMSksbz1pLnBzd3A/aS5wc3dwLnZpZXdwb3J0U2l6ZTpnKG4saSk7Y29uc3Qgcj15KG4sbyx0LHMpO2UudXBkYXRlKGgud2lkdGgsaC5oZWlnaHQscil9cmV0dXJuIGgubGF6eUxvYWQoKSxlJiZoLnNldERpc3BsYXllZFNpemUoTWF0aC5jZWlsKGgud2lkdGgqZS5pbml0aWFsKSxNYXRoLmNlaWwoaC5oZWlnaHQqZS5pbml0aWFsKSksaH1jbGFzcyBRe2NvbnN0cnVjdG9yKHQpe3RoaXMucHN3cD10LHRoaXMubGltaXQ9TWF0aC5tYXgodC5vcHRpb25zLnByZWxvYWRbMF0rdC5vcHRpb25zLnByZWxvYWRbMV0rMSw1KSx0aGlzLkR0PVtdfXVwZGF0ZUxhenkodCl7Y29uc3R7cHN3cDppfT10aGlzO2lmKGkuZGlzcGF0Y2goXCJsYXp5TG9hZFwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtjb25zdHtwcmVsb2FkOnN9PWkub3B0aW9ucyxoPXZvaWQgMD09PXR8fHQ+PTA7bGV0IGU7Zm9yKGU9MDtlPD1zWzFdO2UrKyl0aGlzLmxvYWRTbGlkZUJ5SW5kZXgoaS5jdXJySW5kZXgrKGg/ZTotZSkpO2ZvcihlPTE7ZTw9c1swXTtlKyspdGhpcy5sb2FkU2xpZGVCeUluZGV4KGkuY3VyckluZGV4KyhoPy1lOmUpKX1sb2FkU2xpZGVCeUluZGV4KHQpe2NvbnN0IGk9dGhpcy5wc3dwLmdldExvb3BlZEluZGV4KHQpO2xldCBzPXRoaXMuZ2V0Q29udGVudEJ5SW5kZXgoaSk7c3x8KHM9ZnVuY3Rpb24odCxpKXtjb25zdCBzPWkuZ2V0SXRlbURhdGEodCk7aWYoIWkuZGlzcGF0Y2goXCJsYXp5TG9hZFNsaWRlXCIse2luZGV4OnQsaXRlbURhdGE6c30pLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuIEoocyxpLHQpfShpLHRoaXMucHN3cCkscyYmdGhpcy5hZGRUb0NhY2hlKHMpKX1nZXRDb250ZW50QnlTbGlkZSh0KXtsZXQgaT10aGlzLmdldENvbnRlbnRCeUluZGV4KHQuaW5kZXgpO3JldHVybiBpfHwoaT10aGlzLnBzd3AuY3JlYXRlQ29udGVudEZyb21EYXRhKHQuZGF0YSx0LmluZGV4KSx0aGlzLmFkZFRvQ2FjaGUoaSkpLGkuc2V0U2xpZGUodCksaX1hZGRUb0NhY2hlKHQpe2lmKHRoaXMucmVtb3ZlQnlJbmRleCh0LmluZGV4KSx0aGlzLkR0LnB1c2godCksdGhpcy5EdC5sZW5ndGg+dGhpcy5saW1pdCl7Y29uc3QgdD10aGlzLkR0LmZpbmRJbmRleCgodD0+IXQuaXNBdHRhY2hlZCYmIXQuaGFzU2xpZGUpKTtpZigtMSE9PXQpe3RoaXMuRHQuc3BsaWNlKHQsMSlbMF0uZGVzdHJveSgpfX19cmVtb3ZlQnlJbmRleCh0KXtjb25zdCBpPXRoaXMuRHQuZmluZEluZGV4KChpPT5pLmluZGV4PT09dCkpOy0xIT09aSYmdGhpcy5EdC5zcGxpY2UoaSwxKX1nZXRDb250ZW50QnlJbmRleCh0KXtyZXR1cm4gdGhpcy5EdC5maW5kKChpPT5pLmluZGV4PT09dCkpfWRlc3Ryb3koKXt0aGlzLkR0LmZvckVhY2goKHQ9PnQuZGVzdHJveSgpKSksdGhpcy5EdD1bXX19Y2xhc3MgdHR7Y29uc3RydWN0b3IodCl7dGhpcy5wc3dwPXQsdGhpcy5pc0Nsb3NlZD0hMCx0aGlzLmlzT3Blbj0hMSx0aGlzLmlzQ2xvc2luZz0hMSx0aGlzLmlzT3BlbmluZz0hMSx0aGlzLkl0PXZvaWQgMCx0aGlzLkV0PSExLHRoaXMuTHQ9ITEsdGhpcy5rdD0hMSx0aGlzLlp0PSExLHRoaXMuQnQ9dm9pZCAwLHRoaXMuRnQ9dm9pZCAwLHRoaXMuT3Q9dm9pZCAwLHRoaXMuUnQ9dm9pZCAwLHRoaXMuTnQ9dm9pZCAwLHRoaXMuVXQ9dGhpcy5VdC5iaW5kKHRoaXMpLHQub24oXCJmaXJzdFpvb21QYW5cIix0aGlzLlV0KX1vcGVuKCl7dGhpcy5VdCgpLHRoaXMuUHQoKX1jbG9zZSgpe2lmKHRoaXMuaXNDbG9zZWR8fHRoaXMuaXNDbG9zaW5nfHx0aGlzLmlzT3BlbmluZylyZXR1cm47Y29uc3QgdD10aGlzLnBzd3AuY3VyclNsaWRlO3RoaXMuaXNPcGVuPSExLHRoaXMuaXNPcGVuaW5nPSExLHRoaXMuaXNDbG9zaW5nPSEwLHRoaXMuSXQ9dGhpcy5wc3dwLm9wdGlvbnMuaGlkZUFuaW1hdGlvbkR1cmF0aW9uLHQmJnQuY3Vyclpvb21MZXZlbCp0LndpZHRoPj10aGlzLnBzd3Aub3B0aW9ucy5tYXhXaWR0aFRvQW5pbWF0ZSYmKHRoaXMuSXQ9MCksdGhpcy5WdCgpLHNldFRpbWVvdXQoKCgpPT57dGhpcy5QdCgpfSksdGhpcy5MdD8zMDowKX1VdCgpe2lmKHRoaXMucHN3cC5vZmYoXCJmaXJzdFpvb21QYW5cIix0aGlzLlV0KSwhdGhpcy5pc09wZW5pbmcpe2NvbnN0IHQ9dGhpcy5wc3dwLmN1cnJTbGlkZTt0aGlzLmlzT3BlbmluZz0hMCx0aGlzLmlzQ2xvc2luZz0hMSx0aGlzLkl0PXRoaXMucHN3cC5vcHRpb25zLnNob3dBbmltYXRpb25EdXJhdGlvbix0JiZ0Lnpvb21MZXZlbHMuaW5pdGlhbCp0LndpZHRoPj10aGlzLnBzd3Aub3B0aW9ucy5tYXhXaWR0aFRvQW5pbWF0ZSYmKHRoaXMuSXQ9MCksdGhpcy5WdCgpfX1WdCgpe2NvbnN0e3Bzd3A6dH09dGhpcyxpPXRoaXMucHN3cC5jdXJyU2xpZGUse29wdGlvbnM6c309dDtpZihcImZhZGVcIj09PXMuc2hvd0hpZGVBbmltYXRpb25UeXBlPyhzLnNob3dIaWRlT3BhY2l0eT0hMCx0aGlzLk50PXZvaWQgMCk6XCJub25lXCI9PT1zLnNob3dIaWRlQW5pbWF0aW9uVHlwZT8ocy5zaG93SGlkZU9wYWNpdHk9ITEsdGhpcy5JdD0wLHRoaXMuTnQ9dm9pZCAwKTp0aGlzLmlzT3BlbmluZyYmdC5HdD90aGlzLk50PXQuR3Q6dGhpcy5OdD10aGlzLnBzd3AuZ2V0VGh1bWJCb3VuZHMoKSx0aGlzLkJ0PWk/LmdldFBsYWNlaG9sZGVyRWxlbWVudCgpLHQuYW5pbWF0aW9ucy5zdG9wQWxsKCksdGhpcy5FdD1Cb29sZWFuKHRoaXMuSXQmJnRoaXMuSXQ+NTApLHRoaXMuJHQ9Qm9vbGVhbih0aGlzLk50KSYmaT8uY29udGVudC51c2VQbGFjZWhvbGRlcigpJiYoIXRoaXMuaXNDbG9zaW5nfHwhdC5tYWluU2Nyb2xsLmlzU2hpZnRlZCgpKSx0aGlzLiR0P3RoaXMua3Q9cy5zaG93SGlkZU9wYWNpdHk/PyExOih0aGlzLmt0PSEwLHRoaXMuaXNPcGVuaW5nJiZpJiYoaS56b29tQW5kUGFuVG9Jbml0aWFsKCksaS5hcHBseUN1cnJlbnRab29tUGFuKCkpKSx0aGlzLlp0PSF0aGlzLmt0JiZ0aGlzLnBzd3Aub3B0aW9ucy5iZ09wYWNpdHk+LjAwMyx0aGlzLkZ0PXRoaXMua3Q/dC5lbGVtZW50OnQuYmcsIXRoaXMuRXQpcmV0dXJuIHRoaXMuSXQ9MCx0aGlzLiR0PSExLHRoaXMuWnQ9ITEsdGhpcy5rdD0hMCx2b2lkKHRoaXMuaXNPcGVuaW5nJiYodC5lbGVtZW50JiYodC5lbGVtZW50LnN0eWxlLm9wYWNpdHk9U3RyaW5nKC4wMDMpKSx0LmFwcGx5QmdPcGFjaXR5KDEpKSk7dGhpcy4kdCYmdGhpcy5OdCYmdGhpcy5OdC5pbm5lclJlY3Q/KHRoaXMuTHQ9ITAsdGhpcy5PdD10aGlzLnBzd3AuY29udGFpbmVyLHRoaXMuUnQ9dGhpcy5wc3dwLmN1cnJTbGlkZT8uaG9sZGVyRWxlbWVudCx0LmNvbnRhaW5lciYmKHQuY29udGFpbmVyLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsdC5jb250YWluZXIuc3R5bGUud2lkdGg9dC52aWV3cG9ydFNpemUueCtcInB4XCIpKTp0aGlzLkx0PSExLHRoaXMuaXNPcGVuaW5nPyh0aGlzLmt0Pyh0LmVsZW1lbnQmJih0LmVsZW1lbnQuc3R5bGUub3BhY2l0eT1TdHJpbmcoLjAwMykpLHQuYXBwbHlCZ09wYWNpdHkoMSkpOih0aGlzLlp0JiZ0LmJnJiYodC5iZy5zdHlsZS5vcGFjaXR5PVN0cmluZyguMDAzKSksdC5lbGVtZW50JiYodC5lbGVtZW50LnN0eWxlLm9wYWNpdHk9XCIxXCIpKSx0aGlzLiR0JiYodGhpcy5xdCgpLHRoaXMuQnQmJih0aGlzLkJ0LnN0eWxlLndpbGxDaGFuZ2U9XCJ0cmFuc2Zvcm1cIix0aGlzLkJ0LnN0eWxlLm9wYWNpdHk9U3RyaW5nKC4wMDMpKSkpOnRoaXMuaXNDbG9zaW5nJiYodC5tYWluU2Nyb2xsLml0ZW1Ib2xkZXJzWzBdJiYodC5tYWluU2Nyb2xsLml0ZW1Ib2xkZXJzWzBdLmVsLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpLHQubWFpblNjcm9sbC5pdGVtSG9sZGVyc1syXSYmKHQubWFpblNjcm9sbC5pdGVtSG9sZGVyc1syXS5lbC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiKSx0aGlzLkx0JiYwIT09dC5tYWluU2Nyb2xsLngmJih0Lm1haW5TY3JvbGwucmVzZXRQb3NpdGlvbigpLHQubWFpblNjcm9sbC5yZXNpemUoKSkpfVB0KCl7dGhpcy5pc09wZW5pbmcmJnRoaXMuRXQmJnRoaXMuQnQmJlwiSU1HXCI9PT10aGlzLkJ0LnRhZ05hbWU/bmV3IFByb21pc2UoKHQ9PntsZXQgaT0hMSxzPSEwO3ZhciBoOyhoPXRoaXMuQnQsXCJkZWNvZGVcImluIGg/aC5kZWNvZGUoKS5jYXRjaCgoKCk9Pnt9KSk6aC5jb21wbGV0ZT9Qcm9taXNlLnJlc29sdmUoaCk6bmV3IFByb21pc2UoKCh0LGkpPT57aC5vbmxvYWQ9KCk9PnQoaCksaC5vbmVycm9yPWl9KSkpLmZpbmFsbHkoKCgpPT57aT0hMCxzfHx0KCEwKX0pKSxzZXRUaW1lb3V0KCgoKT0+e3M9ITEsaSYmdCghMCl9KSw1MCksc2V0VGltZW91dCh0LDI1MCl9KSkuZmluYWxseSgoKCk9PnRoaXMuSHQoKSkpOnRoaXMuSHQoKX1IdCgpe3RoaXMucHN3cC5lbGVtZW50Py5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tcHN3cC10cmFuc2l0aW9uLWR1cmF0aW9uXCIsdGhpcy5JdCtcIm1zXCIpLHRoaXMucHN3cC5kaXNwYXRjaCh0aGlzLmlzT3BlbmluZz9cIm9wZW5pbmdBbmltYXRpb25TdGFydFwiOlwiY2xvc2luZ0FuaW1hdGlvblN0YXJ0XCIpLHRoaXMucHN3cC5kaXNwYXRjaChcImluaXRpYWxab29tXCIrKHRoaXMuaXNPcGVuaW5nP1wiSW5cIjpcIk91dFwiKSksdGhpcy5wc3dwLmVsZW1lbnQ/LmNsYXNzTGlzdC50b2dnbGUoXCJwc3dwLS11aS12aXNpYmxlXCIsdGhpcy5pc09wZW5pbmcpLHRoaXMuaXNPcGVuaW5nPyh0aGlzLkJ0JiYodGhpcy5CdC5zdHlsZS5vcGFjaXR5PVwiMVwiKSx0aGlzLkt0KCkpOnRoaXMuaXNDbG9zaW5nJiZ0aGlzLld0KCksdGhpcy5FdHx8dGhpcy5qdCgpfWp0KCl7Y29uc3R7cHN3cDp0fT10aGlzO3RoaXMuaXNPcGVuPXRoaXMuaXNPcGVuaW5nLHRoaXMuaXNDbG9zZWQ9dGhpcy5pc0Nsb3NpbmcsdGhpcy5pc09wZW5pbmc9ITEsdGhpcy5pc0Nsb3Npbmc9ITEsdC5kaXNwYXRjaCh0aGlzLmlzT3Blbj9cIm9wZW5pbmdBbmltYXRpb25FbmRcIjpcImNsb3NpbmdBbmltYXRpb25FbmRcIiksdC5kaXNwYXRjaChcImluaXRpYWxab29tXCIrKHRoaXMuaXNPcGVuP1wiSW5FbmRcIjpcIk91dEVuZFwiKSksdGhpcy5pc0Nsb3NlZD90LmRlc3Ryb3koKTp0aGlzLmlzT3BlbiYmKHRoaXMuJHQmJnQuY29udGFpbmVyJiYodC5jb250YWluZXIuc3R5bGUub3ZlcmZsb3c9XCJ2aXNpYmxlXCIsdC5jb250YWluZXIuc3R5bGUud2lkdGg9XCIxMDAlXCIpLHQuY3VyclNsaWRlPy5hcHBseUN1cnJlbnRab29tUGFuKCkpfUt0KCl7Y29uc3R7cHN3cDp0fT10aGlzO3RoaXMuJHQmJih0aGlzLkx0JiZ0aGlzLk90JiZ0aGlzLlJ0JiYodGhpcy5YdCh0aGlzLk90LFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUzZCgwLDAsMClcIiksdGhpcy5YdCh0aGlzLlJ0LFwidHJhbnNmb3JtXCIsXCJub25lXCIpKSx0LmN1cnJTbGlkZSYmKHQuY3VyclNsaWRlLnpvb21BbmRQYW5Ub0luaXRpYWwoKSx0aGlzLlh0KHQuY3VyclNsaWRlLmNvbnRhaW5lcixcInRyYW5zZm9ybVwiLHQuY3VyclNsaWRlLmdldEN1cnJlbnRUcmFuc2Zvcm0oKSkpKSx0aGlzLlp0JiZ0LmJnJiZ0aGlzLlh0KHQuYmcsXCJvcGFjaXR5XCIsU3RyaW5nKHQub3B0aW9ucy5iZ09wYWNpdHkpKSx0aGlzLmt0JiZ0LmVsZW1lbnQmJnRoaXMuWHQodC5lbGVtZW50LFwib3BhY2l0eVwiLFwiMVwiKX1XdCgpe2NvbnN0e3Bzd3A6dH09dGhpczt0aGlzLiR0JiZ0aGlzLnF0KCEwKSx0aGlzLlp0JiZ0LmJnT3BhY2l0eT4uMDEmJnQuYmcmJnRoaXMuWHQodC5iZyxcIm9wYWNpdHlcIixcIjBcIiksdGhpcy5rdCYmdC5lbGVtZW50JiZ0aGlzLlh0KHQuZWxlbWVudCxcIm9wYWNpdHlcIixcIjBcIil9cXQodCl7aWYoIXRoaXMuTnQpcmV0dXJuO2NvbnN0e3Bzd3A6c309dGhpcyx7aW5uZXJSZWN0Omh9PXRoaXMuTnQse2N1cnJTbGlkZTplLHZpZXdwb3J0U2l6ZTpufT1zO2lmKHRoaXMuTHQmJmgmJnRoaXMuT3QmJnRoaXMuUnQpe2NvbnN0IGk9LW4ueCsodGhpcy5OdC54LWgueCkraC53LHM9LW4ueSsodGhpcy5OdC55LWgueSkraC5oLGU9bi54LWgudyxhPW4ueS1oLmg7dD8odGhpcy5YdCh0aGlzLk90LFwidHJhbnNmb3JtXCIsbyhpLHMpKSx0aGlzLlh0KHRoaXMuUnQsXCJ0cmFuc2Zvcm1cIixvKGUsYSkpKToocih0aGlzLk90LGkscykscih0aGlzLlJ0LGUsYSkpfWUmJihpKGUucGFuLGh8fHRoaXMuTnQpLGUuY3Vyclpvb21MZXZlbD10aGlzLk50LncvZS53aWR0aCx0P3RoaXMuWHQoZS5jb250YWluZXIsXCJ0cmFuc2Zvcm1cIixlLmdldEN1cnJlbnRUcmFuc2Zvcm0oKSk6ZS5hcHBseUN1cnJlbnRab29tUGFuKCkpfVh0KHQsaSxzKXtpZighdGhpcy5JdClyZXR1cm4gdm9pZCh0LnN0eWxlW2ldPXMpO2NvbnN0e2FuaW1hdGlvbnM6aH09dGhpcy5wc3dwLGU9e2R1cmF0aW9uOnRoaXMuSXQsZWFzaW5nOnRoaXMucHN3cC5vcHRpb25zLmVhc2luZyxvbkNvbXBsZXRlOigpPT57aC5hY3RpdmVBbmltYXRpb25zLmxlbmd0aHx8dGhpcy5qdCgpfSx0YXJnZXQ6dH07ZVtpXT1zLGguc3RhcnRUcmFuc2l0aW9uKGUpfX1jb25zdCBpdD17YWxsb3dQYW5Ub05leHQ6ITAsc3BhY2luZzouMSxsb29wOiEwLHBpbmNoVG9DbG9zZTohMCxjbG9zZU9uVmVydGljYWxEcmFnOiEwLGhpZGVBbmltYXRpb25EdXJhdGlvbjozMzMsc2hvd0FuaW1hdGlvbkR1cmF0aW9uOjMzMyx6b29tQW5pbWF0aW9uRHVyYXRpb246MzMzLGVzY0tleTohMCxhcnJvd0tleXM6ITAscmV0dXJuRm9jdXM6ITAsbWF4V2lkdGhUb0FuaW1hdGU6NGUzLGNsaWNrVG9DbG9zZU5vblpvb21hYmxlOiEwLGltYWdlQ2xpY2tBY3Rpb246XCJ6b29tLW9yLWNsb3NlXCIsYmdDbGlja0FjdGlvbjpcImNsb3NlXCIsdGFwQWN0aW9uOlwidG9nZ2xlLWNvbnRyb2xzXCIsZG91YmxlVGFwQWN0aW9uOlwiem9vbVwiLGluZGV4SW5kaWNhdG9yU2VwOlwiIC8gXCIscHJlbG9hZGVyRGVsYXk6MmUzLGJnT3BhY2l0eTouOCxpbmRleDowLGVycm9yTXNnOlwiVGhlIGltYWdlIGNhbm5vdCBiZSBsb2FkZWRcIixwcmVsb2FkOlsxLDJdLGVhc2luZzpcImN1YmljLWJlemllciguNCwwLC4yMiwxKVwifTtjbGFzcyBzdCBleHRlbmRzIGNsYXNzIGV4dGVuZHMgY2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLll0PXt9LHRoaXMuSnQ9e30sdGhpcy5wc3dwPXZvaWQgMCx0aGlzLm9wdGlvbnM9dm9pZCAwfWFkZEZpbHRlcih0LGkscz0xMDApe3RoaXMuSnRbdF18fCh0aGlzLkp0W3RdPVtdKSx0aGlzLkp0W3RdPy5wdXNoKHtmbjppLHByaW9yaXR5OnN9KSx0aGlzLkp0W3RdPy5zb3J0KCgodCxpKT0+dC5wcmlvcml0eS1pLnByaW9yaXR5KSksdGhpcy5wc3dwPy5hZGRGaWx0ZXIodCxpLHMpfXJlbW92ZUZpbHRlcih0LGkpe3RoaXMuSnRbdF0mJih0aGlzLkp0W3RdPXRoaXMuSnRbdF0uZmlsdGVyKCh0PT50LmZuIT09aSkpKSx0aGlzLnBzd3AmJnRoaXMucHN3cC5yZW1vdmVGaWx0ZXIodCxpKX1hcHBseUZpbHRlcnModCwuLi5pKXtyZXR1cm4gdGhpcy5KdFt0XT8uZm9yRWFjaCgodD0+e2lbMF09dC5mbi5hcHBseSh0aGlzLGkpfSkpLGlbMF19b24odCxpKXt0aGlzLll0W3RdfHwodGhpcy5ZdFt0XT1bXSksdGhpcy5ZdFt0XT8ucHVzaChpKSx0aGlzLnBzd3A/Lm9uKHQsaSl9b2ZmKHQsaSl7dGhpcy5ZdFt0XSYmKHRoaXMuWXRbdF09dGhpcy5ZdFt0XS5maWx0ZXIoKHQ9PmkhPT10KSkpLHRoaXMucHN3cD8ub2ZmKHQsaSl9ZGlzcGF0Y2godCxpKXtpZih0aGlzLnBzd3ApcmV0dXJuIHRoaXMucHN3cC5kaXNwYXRjaCh0LGkpO2NvbnN0IHM9bmV3IGoodCxpKTtyZXR1cm4gdGhpcy5ZdFt0XT8uZm9yRWFjaCgodD0+e3QuY2FsbCh0aGlzLHMpfSkpLHN9fXtnZXROdW1JdGVtcygpe2xldCB0PTA7Y29uc3QgaT10aGlzLm9wdGlvbnM/LmRhdGFTb3VyY2U7aSYmXCJsZW5ndGhcImluIGk/dD1pLmxlbmd0aDppJiZcImdhbGxlcnlcImluIGkmJihpLml0ZW1zfHwoaS5pdGVtcz10aGlzLlF0KGkuZ2FsbGVyeSkpLGkuaXRlbXMmJih0PWkuaXRlbXMubGVuZ3RoKSk7Y29uc3Qgcz10aGlzLmRpc3BhdGNoKFwibnVtSXRlbXNcIix7ZGF0YVNvdXJjZTppLG51bUl0ZW1zOnR9KTtyZXR1cm4gdGhpcy5hcHBseUZpbHRlcnMoXCJudW1JdGVtc1wiLHMubnVtSXRlbXMsaSl9Y3JlYXRlQ29udGVudEZyb21EYXRhKHQsaSl7cmV0dXJuIG5ldyBZKHQsdGhpcyxpKX1nZXRJdGVtRGF0YSh0KXtjb25zdCBpPXRoaXMub3B0aW9ucz8uZGF0YVNvdXJjZTtsZXQgcz17fTtBcnJheS5pc0FycmF5KGkpP3M9aVt0XTppJiZcImdhbGxlcnlcImluIGkmJihpLml0ZW1zfHwoaS5pdGVtcz10aGlzLlF0KGkuZ2FsbGVyeSkpLHM9aS5pdGVtc1t0XSk7bGV0IGg9cztoIGluc3RhbmNlb2YgRWxlbWVudCYmKGg9dGhpcy50aShoKSk7Y29uc3QgZT10aGlzLmRpc3BhdGNoKFwiaXRlbURhdGFcIix7aXRlbURhdGE6aHx8e30saW5kZXg6dH0pO3JldHVybiB0aGlzLmFwcGx5RmlsdGVycyhcIml0ZW1EYXRhXCIsZS5pdGVtRGF0YSx0KX1RdCh0KXtyZXR1cm4gdGhpcy5vcHRpb25zPy5jaGlsZHJlbnx8dGhpcy5vcHRpb25zPy5jaGlsZFNlbGVjdG9yP2Z1bmN0aW9uKHQsaSxzPWRvY3VtZW50KXtsZXQgaD1bXTtpZih0IGluc3RhbmNlb2YgRWxlbWVudCloPVt0XTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBOb2RlTGlzdHx8QXJyYXkuaXNBcnJheSh0KSloPUFycmF5LmZyb20odCk7ZWxzZXtjb25zdCBlPVwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6aTtlJiYoaD1BcnJheS5mcm9tKHMucXVlcnlTZWxlY3RvckFsbChlKSkpfXJldHVybiBofSh0aGlzLm9wdGlvbnMuY2hpbGRyZW4sdGhpcy5vcHRpb25zLmNoaWxkU2VsZWN0b3IsdCl8fFtdOlt0XX10aSh0KXtjb25zdCBpPXtlbGVtZW50OnR9LHM9XCJBXCI9PT10LnRhZ05hbWU/dDp0LnF1ZXJ5U2VsZWN0b3IoXCJhXCIpO2lmKHMpe2kuc3JjPXMuZGF0YXNldC5wc3dwU3JjfHxzLmhyZWYscy5kYXRhc2V0LnBzd3BTcmNzZXQmJihpLnNyY3NldD1zLmRhdGFzZXQucHN3cFNyY3NldCksaS53aWR0aD1zLmRhdGFzZXQucHN3cFdpZHRoP3BhcnNlSW50KHMuZGF0YXNldC5wc3dwV2lkdGgsMTApOjAsaS5oZWlnaHQ9cy5kYXRhc2V0LnBzd3BIZWlnaHQ/cGFyc2VJbnQocy5kYXRhc2V0LnBzd3BIZWlnaHQsMTApOjAsaS53PWkud2lkdGgsaS5oPWkuaGVpZ2h0LHMuZGF0YXNldC5wc3dwVHlwZSYmKGkudHlwZT1zLmRhdGFzZXQucHN3cFR5cGUpO2NvbnN0IGg9dC5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO2gmJihpLm1zcmM9aC5jdXJyZW50U3JjfHxoLnNyYyxpLmFsdD1oLmdldEF0dHJpYnV0ZShcImFsdFwiKT8/XCJcIiksKHMuZGF0YXNldC5wc3dwQ3JvcHBlZHx8cy5kYXRhc2V0LmNyb3BwZWQpJiYoaS50aHVtYkNyb3BwZWQ9ITApfXJldHVybiB0aGlzLmFwcGx5RmlsdGVycyhcImRvbUl0ZW1EYXRhXCIsaSx0LHMpfWxhenlMb2FkRGF0YSh0LGkpe3JldHVybiBKKHQsdGhpcyxpKX19e2NvbnN0cnVjdG9yKHQpe3N1cGVyKCksdGhpcy5vcHRpb25zPXRoaXMuaWkodHx8e30pLHRoaXMub2Zmc2V0PXt4OjAseTowfSx0aGlzLnNpPXt4OjAseTowfSx0aGlzLnZpZXdwb3J0U2l6ZT17eDowLHk6MH0sdGhpcy5iZ09wYWNpdHk9MSx0aGlzLmN1cnJJbmRleD0wLHRoaXMucG90ZW50aWFsSW5kZXg9MCx0aGlzLmlzT3Blbj0hMSx0aGlzLmlzRGVzdHJveWluZz0hMSx0aGlzLmhhc01vdXNlPSExLHRoaXMuaGk9e30sdGhpcy5HdD12b2lkIDAsdGhpcy50b3BCYXI9dm9pZCAwLHRoaXMuZWxlbWVudD12b2lkIDAsdGhpcy50ZW1wbGF0ZT12b2lkIDAsdGhpcy5jb250YWluZXI9dm9pZCAwLHRoaXMuc2Nyb2xsV3JhcD12b2lkIDAsdGhpcy5jdXJyU2xpZGU9dm9pZCAwLHRoaXMuZXZlbnRzPW5ldyB3LHRoaXMuYW5pbWF0aW9ucz1uZXcgRix0aGlzLm1haW5TY3JvbGw9bmV3IEEodGhpcyksdGhpcy5nZXN0dXJlcz1uZXcgVCh0aGlzKSx0aGlzLm9wZW5lcj1uZXcgdHQodGhpcyksdGhpcy5rZXlib2FyZD1uZXcgRSh0aGlzKSx0aGlzLmNvbnRlbnRMb2FkZXI9bmV3IFEodGhpcyl9aW5pdCgpe2lmKHRoaXMuaXNPcGVufHx0aGlzLmlzRGVzdHJveWluZylyZXR1cm4hMTt0aGlzLmlzT3Blbj0hMCx0aGlzLmRpc3BhdGNoKFwiaW5pdFwiKSx0aGlzLmRpc3BhdGNoKFwiYmVmb3JlT3BlblwiKSx0aGlzLmVpKCk7bGV0IHQ9XCJwc3dwLS1vcGVuXCI7cmV0dXJuIHRoaXMuZ2VzdHVyZXMuc3VwcG9ydHNUb3VjaCYmKHQrPVwiIHBzd3AtLXRvdWNoXCIpLHRoaXMub3B0aW9ucy5tYWluQ2xhc3MmJih0Kz1cIiBcIit0aGlzLm9wdGlvbnMubWFpbkNsYXNzKSx0aGlzLmVsZW1lbnQmJih0aGlzLmVsZW1lbnQuY2xhc3NOYW1lKz1cIiBcIit0KSx0aGlzLmN1cnJJbmRleD10aGlzLm9wdGlvbnMuaW5kZXh8fDAsdGhpcy5wb3RlbnRpYWxJbmRleD10aGlzLmN1cnJJbmRleCx0aGlzLmRpc3BhdGNoKFwiZmlyc3RVcGRhdGVcIiksdGhpcy5zY3JvbGxXaGVlbD1uZXcgTyh0aGlzKSwoTnVtYmVyLmlzTmFOKHRoaXMuY3VyckluZGV4KXx8dGhpcy5jdXJySW5kZXg8MHx8dGhpcy5jdXJySW5kZXg+PXRoaXMuZ2V0TnVtSXRlbXMoKSkmJih0aGlzLmN1cnJJbmRleD0wKSx0aGlzLmdlc3R1cmVzLnN1cHBvcnRzVG91Y2h8fHRoaXMubW91c2VEZXRlY3RlZCgpLHRoaXMudXBkYXRlU2l6ZSgpLHRoaXMub2Zmc2V0Lnk9d2luZG93LnBhZ2VZT2Zmc2V0LHRoaXMuaGk9dGhpcy5nZXRJdGVtRGF0YSh0aGlzLmN1cnJJbmRleCksdGhpcy5kaXNwYXRjaChcImdldHRpbmdEYXRhXCIse2luZGV4OnRoaXMuY3VyckluZGV4LGRhdGE6dGhpcy5oaSxzbGlkZTp2b2lkIDB9KSx0aGlzLkd0PXRoaXMuZ2V0VGh1bWJCb3VuZHMoKSx0aGlzLmRpc3BhdGNoKFwiaW5pdGlhbExheW91dFwiKSx0aGlzLm9uKFwib3BlbmluZ0FuaW1hdGlvbkVuZFwiLCgoKT0+e2NvbnN0e2l0ZW1Ib2xkZXJzOnR9PXRoaXMubWFpblNjcm9sbDt0WzBdJiYodFswXS5lbC5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLnNldENvbnRlbnQodFswXSx0aGlzLmN1cnJJbmRleC0xKSksdFsyXSYmKHRbMl0uZWwuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdGhpcy5zZXRDb250ZW50KHRbMl0sdGhpcy5jdXJySW5kZXgrMSkpLHRoaXMuYXBwZW5kSGVhdnkoKSx0aGlzLmNvbnRlbnRMb2FkZXIudXBkYXRlTGF6eSgpLHRoaXMuZXZlbnRzLmFkZCh3aW5kb3csXCJyZXNpemVcIix0aGlzLm5pLmJpbmQodGhpcykpLHRoaXMuZXZlbnRzLmFkZCh3aW5kb3csXCJzY3JvbGxcIix0aGlzLm9pLmJpbmQodGhpcykpLHRoaXMuZGlzcGF0Y2goXCJiaW5kRXZlbnRzXCIpfSkpLHRoaXMubWFpblNjcm9sbC5pdGVtSG9sZGVyc1sxXSYmdGhpcy5zZXRDb250ZW50KHRoaXMubWFpblNjcm9sbC5pdGVtSG9sZGVyc1sxXSx0aGlzLmN1cnJJbmRleCksdGhpcy5kaXNwYXRjaChcImNoYW5nZVwiKSx0aGlzLm9wZW5lci5vcGVuKCksdGhpcy5kaXNwYXRjaChcImFmdGVySW5pdFwiKSwhMH1nZXRMb29wZWRJbmRleCh0KXtjb25zdCBpPXRoaXMuZ2V0TnVtSXRlbXMoKTtyZXR1cm4gdGhpcy5vcHRpb25zLmxvb3AmJih0PmktMSYmKHQtPWkpLHQ8MCYmKHQrPWkpKSxuKHQsMCxpLTEpfWFwcGVuZEhlYXZ5KCl7dGhpcy5tYWluU2Nyb2xsLml0ZW1Ib2xkZXJzLmZvckVhY2goKHQ9Pnt0LnNsaWRlPy5hcHBlbmRIZWF2eSgpfSkpfWdvVG8odCl7dGhpcy5tYWluU2Nyb2xsLm1vdmVJbmRleEJ5KHRoaXMuZ2V0TG9vcGVkSW5kZXgodCktdGhpcy5wb3RlbnRpYWxJbmRleCl9bmV4dCgpe3RoaXMuZ29Ubyh0aGlzLnBvdGVudGlhbEluZGV4KzEpfXByZXYoKXt0aGlzLmdvVG8odGhpcy5wb3RlbnRpYWxJbmRleC0xKX16b29tVG8oLi4udCl7dGhpcy5jdXJyU2xpZGU/Lnpvb21UbyguLi50KX10b2dnbGVab29tKCl7dGhpcy5jdXJyU2xpZGU/LnRvZ2dsZVpvb20oKX1jbG9zZSgpe3RoaXMub3BlbmVyLmlzT3BlbiYmIXRoaXMuaXNEZXN0cm95aW5nJiYodGhpcy5pc0Rlc3Ryb3lpbmc9ITAsdGhpcy5kaXNwYXRjaChcImNsb3NlXCIpLHRoaXMuZXZlbnRzLnJlbW92ZUFsbCgpLHRoaXMub3BlbmVyLmNsb3NlKCkpfWRlc3Ryb3koKXtpZighdGhpcy5pc0Rlc3Ryb3lpbmcpcmV0dXJuIHRoaXMub3B0aW9ucy5zaG93SGlkZUFuaW1hdGlvblR5cGU9XCJub25lXCIsdm9pZCB0aGlzLmNsb3NlKCk7dGhpcy5kaXNwYXRjaChcImRlc3Ryb3lcIiksdGhpcy5ZdD17fSx0aGlzLnNjcm9sbFdyYXAmJih0aGlzLnNjcm9sbFdyYXAub250b3VjaG1vdmU9bnVsbCx0aGlzLnNjcm9sbFdyYXAub250b3VjaGVuZD1udWxsKSx0aGlzLmVsZW1lbnQ/LnJlbW92ZSgpLHRoaXMubWFpblNjcm9sbC5pdGVtSG9sZGVycy5mb3JFYWNoKCh0PT57dC5zbGlkZT8uZGVzdHJveSgpfSkpLHRoaXMuY29udGVudExvYWRlci5kZXN0cm95KCksdGhpcy5ldmVudHMucmVtb3ZlQWxsKCl9cmVmcmVzaFNsaWRlQ29udGVudCh0KXt0aGlzLmNvbnRlbnRMb2FkZXIucmVtb3ZlQnlJbmRleCh0KSx0aGlzLm1haW5TY3JvbGwuaXRlbUhvbGRlcnMuZm9yRWFjaCgoKGkscyk9PntsZXQgaD0odGhpcy5jdXJyU2xpZGU/LmluZGV4Pz8wKS0xK3M7dGhpcy5jYW5Mb29wKCkmJihoPXRoaXMuZ2V0TG9vcGVkSW5kZXgoaCkpLGg9PT10JiYodGhpcy5zZXRDb250ZW50KGksdCwhMCksMT09PXMmJih0aGlzLmN1cnJTbGlkZT1pLnNsaWRlLGkuc2xpZGU/LnNldElzQWN0aXZlKCEwKSkpfSkpLHRoaXMuZGlzcGF0Y2goXCJjaGFuZ2VcIil9c2V0Q29udGVudCh0LGkscyl7aWYodGhpcy5jYW5Mb29wKCkmJihpPXRoaXMuZ2V0TG9vcGVkSW5kZXgoaSkpLHQuc2xpZGUpe2lmKHQuc2xpZGUuaW5kZXg9PT1pJiYhcylyZXR1cm47dC5zbGlkZS5kZXN0cm95KCksdC5zbGlkZT12b2lkIDB9aWYoIXRoaXMuY2FuTG9vcCgpJiYoaTwwfHxpPj10aGlzLmdldE51bUl0ZW1zKCkpKXJldHVybjtjb25zdCBoPXRoaXMuZ2V0SXRlbURhdGEoaSk7dC5zbGlkZT1uZXcgYihoLGksdGhpcyksaT09PXRoaXMuY3VyckluZGV4JiYodGhpcy5jdXJyU2xpZGU9dC5zbGlkZSksdC5zbGlkZS5hcHBlbmQodC5lbCl9Z2V0Vmlld3BvcnRDZW50ZXJQb2ludCgpe3JldHVybnt4OnRoaXMudmlld3BvcnRTaXplLngvMix5OnRoaXMudmlld3BvcnRTaXplLnkvMn19dXBkYXRlU2l6ZSh0KXtpZih0aGlzLmlzRGVzdHJveWluZylyZXR1cm47Y29uc3Qgcz1nKHRoaXMub3B0aW9ucyx0aGlzKTshdCYmZShzLHRoaXMuc2kpfHwoaSh0aGlzLnNpLHMpLHRoaXMuZGlzcGF0Y2goXCJiZWZvcmVSZXNpemVcIiksaSh0aGlzLnZpZXdwb3J0U2l6ZSx0aGlzLnNpKSx0aGlzLm9pKCksdGhpcy5kaXNwYXRjaChcInZpZXdwb3J0U2l6ZVwiKSx0aGlzLm1haW5TY3JvbGwucmVzaXplKHRoaXMub3BlbmVyLmlzT3BlbiksIXRoaXMuaGFzTW91c2UmJndpbmRvdy5tYXRjaE1lZGlhKFwiKGFueS1ob3ZlcjogaG92ZXIpXCIpLm1hdGNoZXMmJnRoaXMubW91c2VEZXRlY3RlZCgpLHRoaXMuZGlzcGF0Y2goXCJyZXNpemVcIikpfWFwcGx5QmdPcGFjaXR5KHQpe3RoaXMuYmdPcGFjaXR5PU1hdGgubWF4KHQsMCksdGhpcy5iZyYmKHRoaXMuYmcuc3R5bGUub3BhY2l0eT1TdHJpbmcodGhpcy5iZ09wYWNpdHkqdGhpcy5vcHRpb25zLmJnT3BhY2l0eSkpfW1vdXNlRGV0ZWN0ZWQoKXt0aGlzLmhhc01vdXNlfHwodGhpcy5oYXNNb3VzZT0hMCx0aGlzLmVsZW1lbnQ/LmNsYXNzTGlzdC5hZGQoXCJwc3dwLS1oYXNfbW91c2VcIikpfW5pKCl7dGhpcy51cGRhdGVTaXplKCksL2lQaG9uZXxpUGFkfGlQb2QvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSYmc2V0VGltZW91dCgoKCk9Pnt0aGlzLnVwZGF0ZVNpemUoKX0pLDUwMCl9b2koKXt0aGlzLnNldFNjcm9sbE9mZnNldCgwLHdpbmRvdy5wYWdlWU9mZnNldCl9c2V0U2Nyb2xsT2Zmc2V0KHQsaSl7dGhpcy5vZmZzZXQueD10LHRoaXMub2Zmc2V0Lnk9aSx0aGlzLmRpc3BhdGNoKFwidXBkYXRlU2Nyb2xsT2Zmc2V0XCIpfWVpKCl7dGhpcy5lbGVtZW50PXQoXCJwc3dwXCIsXCJkaXZcIiksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCItMVwiKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwiZGlhbG9nXCIpLHRoaXMudGVtcGxhdGU9dGhpcy5lbGVtZW50LHRoaXMuYmc9dChcInBzd3BfX2JnXCIsXCJkaXZcIix0aGlzLmVsZW1lbnQpLHRoaXMuc2Nyb2xsV3JhcD10KFwicHN3cF9fc2Nyb2xsLXdyYXBcIixcInNlY3Rpb25cIix0aGlzLmVsZW1lbnQpLHRoaXMuY29udGFpbmVyPXQoXCJwc3dwX19jb250YWluZXJcIixcImRpdlwiLHRoaXMuc2Nyb2xsV3JhcCksdGhpcy5zY3JvbGxXcmFwLnNldEF0dHJpYnV0ZShcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCIsXCJjYXJvdXNlbFwiKSx0aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIixcIm9mZlwiKSx0aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJpZFwiLFwicHN3cF9faXRlbXNcIiksdGhpcy5tYWluU2Nyb2xsLmFwcGVuZEhvbGRlcnMoKSx0aGlzLnVpPW5ldyBXKHRoaXMpLHRoaXMudWkuaW5pdCgpLCh0aGlzLm9wdGlvbnMuYXBwZW5kVG9FbHx8ZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KX1nZXRUaHVtYkJvdW5kcygpe3JldHVybiBmdW5jdGlvbih0LGkscyl7Y29uc3QgaD1zLmRpc3BhdGNoKFwidGh1bWJCb3VuZHNcIix7aW5kZXg6dCxpdGVtRGF0YTppLGluc3RhbmNlOnN9KTtpZihoLnRodW1iQm91bmRzKXJldHVybiBoLnRodW1iQm91bmRzO2NvbnN0e2VsZW1lbnQ6ZX09aTtsZXQgbixvO2lmKGUmJiExIT09cy5vcHRpb25zLnRodW1iU2VsZWN0b3Ipe2NvbnN0IHQ9cy5vcHRpb25zLnRodW1iU2VsZWN0b3J8fFwiaW1nXCI7bz1lLm1hdGNoZXModCk/ZTplLnF1ZXJ5U2VsZWN0b3IodCl9cmV0dXJuIG89cy5hcHBseUZpbHRlcnMoXCJ0aHVtYkVsXCIsbyxpLHQpLG8mJihuPWkudGh1bWJDcm9wcGVkP2Z1bmN0aW9uKHQsaSxzKXtjb25zdCBoPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksZT1oLndpZHRoL2ksbj1oLmhlaWdodC9zLG89ZT5uP2U6bixyPShoLndpZHRoLWkqbykvMixhPShoLmhlaWdodC1zKm8pLzIsYz17eDpoLmxlZnQrcix5OmgudG9wK2EsdzppKm99O3JldHVybiBjLmlubmVyUmVjdD17dzpoLndpZHRoLGg6aC5oZWlnaHQseDpyLHk6YX0sY30obyxpLndpZHRofHxpLnd8fDAsaS5oZWlnaHR8fGkuaHx8MCk6ZnVuY3Rpb24odCl7Y29uc3QgaT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3JldHVybnt4OmkubGVmdCx5OmkudG9wLHc6aS53aWR0aH19KG8pKSxzLmFwcGx5RmlsdGVycyhcInRodW1iQm91bmRzXCIsbixpLHQpfSh0aGlzLmN1cnJJbmRleCx0aGlzLmN1cnJTbGlkZT90aGlzLmN1cnJTbGlkZS5kYXRhOnRoaXMuaGksdGhpcyl9Y2FuTG9vcCgpe3JldHVybiB0aGlzLm9wdGlvbnMubG9vcCYmdGhpcy5nZXROdW1JdGVtcygpPjJ9aWkodCl7cmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pLCAodXBkYXRlOiBzbG93KVwiKS5tYXRjaGVzJiYodC5zaG93SGlkZUFuaW1hdGlvblR5cGU9XCJub25lXCIsdC56b29tQW5pbWF0aW9uRHVyYXRpb249MCksey4uLml0LC4uLnR9fX1leHBvcnR7c3QgYXMgZGVmYXVsdH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEExMXk7XG52YXIgX2NsYXNzZXNUb1NlbGVjdG9yTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gQTExeShlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiBhLFxuICAgIGV4dGVuZFBhcmFtczogdCxcbiAgICBvbjogaVxuICB9ID0gZTtcbiAgdCh7XG4gICAgYTExeToge1xuICAgICAgZW5hYmxlZDogITAsXG4gICAgICBub3RpZmljYXRpb25DbGFzczogXCJzd2lwZXItbm90aWZpY2F0aW9uXCIsXG4gICAgICBwcmV2U2xpZGVNZXNzYWdlOiBcIlByZXZpb3VzIHNsaWRlXCIsXG4gICAgICBuZXh0U2xpZGVNZXNzYWdlOiBcIk5leHQgc2xpZGVcIixcbiAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiBcIlRoaXMgaXMgdGhlIGZpcnN0IHNsaWRlXCIsXG4gICAgICBsYXN0U2xpZGVNZXNzYWdlOiBcIlRoaXMgaXMgdGhlIGxhc3Qgc2xpZGVcIixcbiAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiBcIkdvIHRvIHNsaWRlIHt7aW5kZXh9fVwiLFxuICAgICAgc2xpZGVMYWJlbE1lc3NhZ2U6IFwie3tpbmRleH19IC8ge3tzbGlkZXNMZW5ndGh9fVwiLFxuICAgICAgY29udGFpbmVyTWVzc2FnZTogbnVsbCxcbiAgICAgIGNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBpdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbCxcbiAgICAgIHNsaWRlUm9sZTogXCJncm91cFwiLFxuICAgICAgaWQ6IG51bGxcbiAgICB9XG4gIH0pLCBhLmExMXkgPSB7XG4gICAgY2xpY2tlZDogITFcbiAgfTtcbiAgbGV0IG4gPSBudWxsO1xuICBmdW5jdGlvbiBzKGUpIHtcbiAgICBjb25zdCBhID0gbjtcbiAgICAwICE9PSBhLmxlbmd0aCAmJiAoYS5pbm5lckhUTUwgPSBcIlwiLCBhLmlubmVySFRNTCA9IGUpO1xuICB9XG4gIGNvbnN0IHIgPSBlID0+IChBcnJheS5pc0FycmF5KGUpID8gZSA6IFtlXSkuZmlsdGVyKGUgPT4gISFlKTtcbiAgZnVuY3Rpb24gbyhlKSB7XG4gICAgKGUgPSByKGUpKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiLCBcIjBcIik7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gbChlKSB7XG4gICAgKGUgPSByKGUpKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiLCBcIi0xXCIpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGMoZSwgYSkge1xuICAgIChlID0gcihlKSkuZm9yRWFjaChlID0+IHtcbiAgICAgIGUuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBhKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkKGUsIGEpIHtcbiAgICAoZSA9IHIoZSkpLmZvckVhY2goZSA9PiB7XG4gICAgICBlLnNldEF0dHJpYnV0ZShcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCIsIGEpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHAoZSwgYSkge1xuICAgIChlID0gcihlKSkuZm9yRWFjaChlID0+IHtcbiAgICAgIGUuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBhKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnKGUpIHtcbiAgICAoZSA9IHIoZSkpLmZvckVhY2goZSA9PiB7XG4gICAgICBlLnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIiwgITApO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHUoZSkge1xuICAgIChlID0gcihlKSkuZm9yRWFjaChlID0+IHtcbiAgICAgIGUuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLCAhMSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZihlKSB7XG4gICAgaWYgKDEzICE9PSBlLmtleUNvZGUgJiYgMzIgIT09IGUua2V5Q29kZSkgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBhLnBhcmFtcy5hMTF5LFxuICAgICAgaSA9IGUudGFyZ2V0O1xuICAgIGEucGFnaW5hdGlvbiAmJiBhLnBhZ2luYXRpb24uZWwgJiYgKGkgPT09IGEucGFnaW5hdGlvbi5lbCB8fCBhLnBhZ2luYXRpb24uZWwuY29udGFpbnMoZS50YXJnZXQpKSAmJiAhZS50YXJnZXQubWF0Y2hlcygoMCwgX2NsYXNzZXNUb1NlbGVjdG9yTWluLmMpKGEucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB8fCAoYS5uYXZpZ2F0aW9uICYmIGEubmF2aWdhdGlvbi5uZXh0RWwgJiYgaSA9PT0gYS5uYXZpZ2F0aW9uLm5leHRFbCAmJiAoYS5pc0VuZCAmJiAhYS5wYXJhbXMubG9vcCB8fCBhLnNsaWRlTmV4dCgpLCBhLmlzRW5kID8gcyh0Lmxhc3RTbGlkZU1lc3NhZ2UpIDogcyh0Lm5leHRTbGlkZU1lc3NhZ2UpKSwgYS5uYXZpZ2F0aW9uICYmIGEubmF2aWdhdGlvbi5wcmV2RWwgJiYgaSA9PT0gYS5uYXZpZ2F0aW9uLnByZXZFbCAmJiAoYS5pc0JlZ2lubmluZyAmJiAhYS5wYXJhbXMubG9vcCB8fCBhLnNsaWRlUHJldigpLCBhLmlzQmVnaW5uaW5nID8gcyh0LmZpcnN0U2xpZGVNZXNzYWdlKSA6IHModC5wcmV2U2xpZGVNZXNzYWdlKSksIGEucGFnaW5hdGlvbiAmJiBpLm1hdGNoZXMoKDAsIF9jbGFzc2VzVG9TZWxlY3Rvck1pbi5jKShhLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkgJiYgaS5jbGljaygpKTtcbiAgfVxuICBmdW5jdGlvbiBtKCkge1xuICAgIHJldHVybiBhLnBhZ2luYXRpb24gJiYgYS5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgYS5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoO1xuICB9XG4gIGZ1bmN0aW9uIHYoKSB7XG4gICAgcmV0dXJuIG0oKSAmJiBhLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZTtcbiAgfVxuICBjb25zdCBFID0gKGUsIGEsIHQpID0+IHtcbiAgICAgIG8oZSksIFwiQlVUVE9OXCIgIT09IGUudGFnTmFtZSAmJiAoYyhlLCBcImJ1dHRvblwiKSwgZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmKSksIHAoZSwgdCksIGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgIChlID0gcihlKSkuZm9yRWFjaChlID0+IHtcbiAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIiwgYSk7XG4gICAgICAgIH0pO1xuICAgICAgfShlLCBhKTtcbiAgICB9LFxuICAgIGIgPSAoKSA9PiB7XG4gICAgICBhLmExMXkuY2xpY2tlZCA9ICEwO1xuICAgIH0sXG4gICAgaCA9ICgpID0+IHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgYS5kZXN0cm95ZWQgfHwgKGEuYTExeS5jbGlja2VkID0gITEpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgeSA9IGUgPT4ge1xuICAgICAgaWYgKGEuYTExeS5jbGlja2VkKSByZXR1cm47XG4gICAgICBjb25zdCB0ID0gZS50YXJnZXQuY2xvc2VzdChgLiR7YS5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgICAgaWYgKCF0IHx8ICFhLnNsaWRlcy5pbmNsdWRlcyh0KSkgcmV0dXJuO1xuICAgICAgY29uc3QgaSA9IGEuc2xpZGVzLmluZGV4T2YodCkgPT09IGEuYWN0aXZlSW5kZXgsXG4gICAgICAgIG4gPSBhLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzICYmIGEudmlzaWJsZVNsaWRlcyAmJiBhLnZpc2libGVTbGlkZXMuaW5jbHVkZXModCk7XG4gICAgICBpIHx8IG4gfHwgZS5zb3VyY2VDYXBhYmlsaXRpZXMgJiYgZS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cyB8fCAoYS5pc0hvcml6b250YWwoKSA/IGEuZWwuc2Nyb2xsTGVmdCA9IDAgOiBhLmVsLnNjcm9sbFRvcCA9IDAsIGEuc2xpZGVUbyhhLnNsaWRlcy5pbmRleE9mKHQpLCAwKSk7XG4gICAgfSxcbiAgICBNID0gKCkgPT4ge1xuICAgICAgY29uc3QgZSA9IGEucGFyYW1zLmExMXk7XG4gICAgICBlLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlICYmIGQoYS5zbGlkZXMsIGUuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpLCBlLnNsaWRlUm9sZSAmJiBjKGEuc2xpZGVzLCBlLnNsaWRlUm9sZSk7XG4gICAgICBjb25zdCB0ID0gYS5zbGlkZXMubGVuZ3RoO1xuICAgICAgZS5zbGlkZUxhYmVsTWVzc2FnZSAmJiBhLnNsaWRlcy5mb3JFYWNoKChpLCBuKSA9PiB7XG4gICAgICAgIGNvbnN0IHMgPSBhLnBhcmFtcy5sb29wID8gcGFyc2VJbnQoaS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSwgMTApIDogbjtcbiAgICAgICAgcChpLCBlLnNsaWRlTGFiZWxNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgcyArIDEpLnJlcGxhY2UoL1xce1xce3NsaWRlc0xlbmd0aFxcfVxcfS8sIHQpKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgQSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGUgPSBhLnBhcmFtcy5hMTF5O1xuICAgICAgYS5lbC5hcHBlbmQobik7XG4gICAgICBjb25zdCB0ID0gYS5lbDtcbiAgICAgIGUuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSAmJiBkKHQsIGUuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSksIGUuY29udGFpbmVyTWVzc2FnZSAmJiBwKHQsIGUuY29udGFpbmVyTWVzc2FnZSk7XG4gICAgICBjb25zdCBpID0gYS53cmFwcGVyRWwsXG4gICAgICAgIHMgPSBlLmlkIHx8IGkuZ2V0QXR0cmlidXRlKFwiaWRcIikgfHwgYHN3aXBlci13cmFwcGVyLSR7KG8gPSAxNiwgdm9pZCAwID09PSBvICYmIChvID0gMTYpLCBcInhcIi5yZXBlYXQobykucmVwbGFjZSgveC9nLCAoKSA9PiBNYXRoLnJvdW5kKDE2ICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMTYpKSl9YDtcbiAgICAgIHZhciBvO1xuICAgICAgY29uc3QgbCA9IGEucGFyYW1zLmF1dG9wbGF5ICYmIGEucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQgPyBcIm9mZlwiIDogXCJwb2xpdGVcIjtcbiAgICAgIHZhciBjO1xuICAgICAgYyA9IHMsIHIoaSkuZm9yRWFjaChlID0+IHtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjKTtcbiAgICAgIH0pLCBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAoZSA9IHIoZSkpLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIiwgYSk7XG4gICAgICAgIH0pO1xuICAgICAgfShpLCBsKSwgTSgpO1xuICAgICAgbGV0IHtcbiAgICAgICAgbmV4dEVsOiBnLFxuICAgICAgICBwcmV2RWw6IHVcbiAgICAgIH0gPSBhLm5hdmlnYXRpb24gPyBhLm5hdmlnYXRpb24gOiB7fTtcbiAgICAgIGlmIChnID0gcihnKSwgdSA9IHIodSksIGcgJiYgZy5mb3JFYWNoKGEgPT4gRShhLCBzLCBlLm5leHRTbGlkZU1lc3NhZ2UpKSwgdSAmJiB1LmZvckVhY2goYSA9PiBFKGEsIHMsIGUucHJldlNsaWRlTWVzc2FnZSkpLCB2KCkpIHtcbiAgICAgICAgKEFycmF5LmlzQXJyYXkoYS5wYWdpbmF0aW9uLmVsKSA/IGEucGFnaW5hdGlvbi5lbCA6IFthLnBhZ2luYXRpb24uZWxdKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYS5lbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgeSwgITApLCBhLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBiLCAhMCksIGEuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBoLCAhMCk7XG4gICAgfTtcbiAgaShcImJlZm9yZUluaXRcIiwgKCkgPT4ge1xuICAgIG4gPSAoMCwgX3V0aWxzTWluLmMpKFwic3BhblwiLCBhLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzKSwgbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIiwgXCJhc3NlcnRpdmVcIiksIG4uc2V0QXR0cmlidXRlKFwiYXJpYS1hdG9taWNcIiwgXCJ0cnVlXCIpO1xuICB9KSwgaShcImFmdGVySW5pdFwiLCAoKSA9PiB7XG4gICAgYS5wYXJhbXMuYTExeS5lbmFibGVkICYmIEEoKTtcbiAgfSksIGkoXCJzbGlkZXNMZW5ndGhDaGFuZ2Ugc25hcEdyaWRMZW5ndGhDaGFuZ2Ugc2xpZGVzR3JpZExlbmd0aENoYW5nZVwiLCAoKSA9PiB7XG4gICAgYS5wYXJhbXMuYTExeS5lbmFibGVkICYmIE0oKTtcbiAgfSksIGkoXCJmcm9tRWRnZSB0b0VkZ2UgYWZ0ZXJJbml0IGxvY2sgdW5sb2NrXCIsICgpID0+IHtcbiAgICBhLnBhcmFtcy5hMTF5LmVuYWJsZWQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGEucGFyYW1zLmxvb3AgfHwgYS5wYXJhbXMucmV3aW5kIHx8ICFhLm5hdmlnYXRpb24pIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmV4dEVsOiBlLFxuICAgICAgICBwcmV2RWw6IHRcbiAgICAgIH0gPSBhLm5hdmlnYXRpb247XG4gICAgICB0ICYmIChhLmlzQmVnaW5uaW5nID8gKGcodCksIGwodCkpIDogKHUodCksIG8odCkpKSwgZSAmJiAoYS5pc0VuZCA/IChnKGUpLCBsKGUpKSA6ICh1KGUpLCBvKGUpKSk7XG4gICAgfSgpO1xuICB9KSwgaShcInBhZ2luYXRpb25VcGRhdGVcIiwgKCkgPT4ge1xuICAgIGEucGFyYW1zLmExMXkuZW5hYmxlZCAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBlID0gYS5wYXJhbXMuYTExeTtcbiAgICAgIG0oKSAmJiBhLnBhZ2luYXRpb24uYnVsbGV0cy5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBhLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAobyh0KSwgYS5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQgfHwgKGModCwgXCJidXR0b25cIiksIHAodCwgZS5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sICgwLCBfdXRpbHNNaW4uZykodCkgKyAxKSkpKSwgdC5tYXRjaGVzKCgwLCBfY2xhc3Nlc1RvU2VsZWN0b3JNaW4uYykoYS5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRBY3RpdmVDbGFzcykpID8gdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIiwgXCJ0cnVlXCIpIDogdC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIik7XG4gICAgICB9KTtcbiAgICB9KCk7XG4gIH0pLCBpKFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgYS5wYXJhbXMuYTExeS5lbmFibGVkICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgIG4gJiYgbi5yZW1vdmUoKTtcbiAgICAgIGxldCB7XG4gICAgICAgIG5leHRFbDogZSxcbiAgICAgICAgcHJldkVsOiB0XG4gICAgICB9ID0gYS5uYXZpZ2F0aW9uID8gYS5uYXZpZ2F0aW9uIDoge307XG4gICAgICBlID0gcihlKSwgdCA9IHIodCksIGUgJiYgZS5mb3JFYWNoKGUgPT4gZS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmKSksIHQgJiYgdC5mb3JFYWNoKGUgPT4gZS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmKSksIHYoKSAmJiAoQXJyYXkuaXNBcnJheShhLnBhZ2luYXRpb24uZWwpID8gYS5wYWdpbmF0aW9uLmVsIDogW2EucGFnaW5hdGlvbi5lbF0pLmZvckVhY2goZSA9PiB7XG4gICAgICAgIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZik7XG4gICAgICB9KTtcbiAgICAgIGEuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHksICEwKSwgYS5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgYiwgITApLCBhLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgaCwgITApO1xuICAgIH0oKTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZkWFJwYkhOTmFXNGlMQ0p5WlhGMWFYSmxJaXdpUVRFeGVTSXNJbVVpTENKemQybHdaWElpTENKaElpd2laWGgwWlc1a1VHRnlZVzF6SWl3aWRDSXNJbTl1SWl3aWFTSXNJbUV4TVhraUxDSmxibUZpYkdWa0lpd2libTkwYVdacFkyRjBhVzl1UTJ4aGMzTWlMQ0p3Y21WMlUyeHBaR1ZOWlhOellXZGxJaXdpYm1WNGRGTnNhV1JsVFdWemMyRm5aU0lzSW1acGNuTjBVMnhwWkdWTlpYTnpZV2RsSWl3aWJHRnpkRk5zYVdSbFRXVnpjMkZuWlNJc0luQmhaMmx1WVhScGIyNUNkV3hzWlhSTlpYTnpZV2RsSWl3aWMyeHBaR1ZNWVdKbGJFMWxjM05oWjJVaUxDSmpiMjUwWVdsdVpYSk5aWE56WVdkbElpd2lZMjl1ZEdGcGJtVnlVbTlzWlVSbGMyTnlhWEIwYVc5dVRXVnpjMkZuWlNJc0ltbDBaVzFTYjJ4bFJHVnpZM0pwY0hScGIyNU5aWE56WVdkbElpd2ljMnhwWkdWU2IyeGxJaXdpYVdRaUxDSmpiR2xqYTJWa0lpd2liaUlzSW5NaUxDSnNaVzVuZEdnaUxDSnBibTVsY2toVVRVd2lMQ0p5SWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWl3aVptbHNkR1Z5SWl3aWJ5SXNJbVp2Y2tWaFkyZ2lMQ0p6WlhSQmRIUnlhV0oxZEdVaUxDSnNJaXdpWXlJc0ltUWlMQ0p3SWl3aVp5SXNJblVpTENKbUlpd2lhMlY1UTI5a1pTSXNJbkJoY21GdGN5SXNJblJoY21kbGRDSXNJbkJoWjJsdVlYUnBiMjRpTENKbGJDSXNJbU52Ym5SaGFXNXpJaXdpYldGMFkyaGxjeUlzSW1Oc1lYTnpaWE5VYjFObGJHVmpkRzl5SWl3aVluVnNiR1YwUTJ4aGMzTWlMQ0p1WVhacFoyRjBhVzl1SWl3aWJtVjRkRVZzSWl3aWFYTkZibVFpTENKc2IyOXdJaXdpYzJ4cFpHVk9aWGgwSWl3aWNISmxka1ZzSWl3aWFYTkNaV2RwYm01cGJtY2lMQ0p6Ykdsa1pWQnlaWFlpTENKamJHbGpheUlzSW0waUxDSmlkV3hzWlhSeklpd2lkaUlzSW1Oc2FXTnJZV0pzWlNJc0lrVWlMQ0pwYm1sMFRtRjJSV3dpTENKMFlXZE9ZVzFsSWl3aVlXUmtSWFpsYm5STWFYTjBaVzVsY2lJc0ltSWlMQ0pvWVc1a2JHVlFiMmx1ZEdWeVJHOTNiaUlzSW1naUxDSm9ZVzVrYkdWUWIybHVkR1Z5VlhBaUxDSnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VpTENKa1pYTjBjbTk1WldRaUxDSjVJaXdpWTJ4dmMyVnpkQ0lzSW5Oc2FXUmxRMnhoYzNNaUxDSnpiR2xrWlhNaUxDSnBibU5zZFdSbGN5SXNJbWx1WkdWNFQyWWlMQ0poWTNScGRtVkpibVJsZUNJc0luZGhkR05vVTJ4cFpHVnpVSEp2WjNKbGMzTWlMQ0oyYVhOcFlteGxVMnhwWkdWeklpd2ljMjkxY21ObFEyRndZV0pwYkdsMGFXVnpJaXdpWm1seVpYTlViM1ZqYUVWMlpXNTBjeUlzSW1selNHOXlhWHB2Ym5SaGJDSXNJbk5qY205c2JFeGxablFpTENKelkzSnZiR3hVYjNBaUxDSnpiR2xrWlZSdklpd2lUU0lzSW1sdWFYUlRiR2xrWlhNaUxDSndZWEp6WlVsdWRDSXNJbWRsZEVGMGRISnBZblYwWlNJc0luSmxjR3hoWTJVaUxDSkJJaXdpYVc1cGRDSXNJbUZ3Y0dWdVpDSXNJbmR5WVhCd1pYSkZiQ0lzSW5KbGNHVmhkQ0lzSWsxaGRHZ2lMQ0p5YjNWdVpDSXNJbkpoYm1SdmJTSXNJblJ2VTNSeWFXNW5JaXdpWVhWMGIzQnNZWGtpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpY21WM2FXNWtJaXdpY21WdVpHVnlRblZzYkdWMElpd2laV3hsYldWdWRFbHVaR1Y0SWl3aVluVnNiR1YwUVdOMGFYWmxRMnhoYzNNaUxDSnlaVzF2ZG1WQmRIUnlhV0oxZEdVaUxDSnlaVzF2ZG1VaUxDSnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJbDBzSW5OdmRYSmpaWE1pT2xzaU1DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXMjUxYkd4ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVUYxUXl4SlFVRkJRU3hUUVVGQkxFZEJRVUZETEU5QlFVRTdRVUZIZGtNc1UwRkJVME1zUzBGQlMwTXNRMEZCUVR0RlFVTmFPMGxCUVVsRExFMUJRVUVzUlVGRFJrTXNRMEZCUVR0SlFVRk5ReXhaUVVGQkxFVkJRMDVETEVOQlFVRTdTVUZCV1VNc1JVRkJRU3hGUVVOYVF6dEZRVUZCTEVsQlEwVk9MRU5CUVVFN1JVRkRTa2tzUTBGQlFTeERRVUZoTzBsQlExaEhMRWxCUVVFc1JVRkJUVHROUVVOS1F5eFBRVUZCTEVkQlFWTTdUVUZEVkVNc2FVSkJRVUVzUlVGQmJVSTdUVUZEYmtKRExHZENRVUZCTEVWQlFXdENPMDFCUTJ4Q1F5eG5Ra0ZCUVN4RlFVRnJRanROUVVOc1FrTXNhVUpCUVVFc1JVRkJiVUk3VFVGRGJrSkRMR2RDUVVGQkxFVkJRV3RDTzAxQlEyeENReXgxUWtGQlFTeEZRVUY1UWp0TlFVTjZRa01zYVVKQlFVRXNSVUZCYlVJN1RVRkRia0pETEdkQ1FVRkJMRVZCUVd0Q08wMUJRMnhDUXl3clFrRkJRU3hGUVVGcFF6dE5RVU5xUTBNc01FSkJRVUVzUlVGQk5FSTdUVUZETlVKRExGTkJRVUVzUlVGQlZ6dE5RVU5ZUXl4RlFVRkJMRVZCUVVrN1NVRkJRVHRGUVVGQkxFbEJSMUpzUWl4RFFVRkJMRU5CUVU5TExFbEJRVUVzUjBGQlR6dEpRVU5hWXl4UFFVRkJMRWRCUVZNN1JVRkJRVHRGUVVWWUxFbEJRVWxETEVOQlFVRXNSMEZCWVR0RlFVTnFRaXhUUVVGVFF5eEZRVUZQZGtJc1EwRkJRVHRKUVVOa0xFMUJRVTFGTEVOQlFVRXNSMEZCWlc5Q0xFTkJRVUU3U1VGRFR5eE5RVUY0UW5CQ0xFTkJRVUVzUTBGQllYTkNMRTFCUVVFc1MwRkRha0owUWl4RFFVRkJMRU5CUVdGMVFpeFRRVUZCTEVkQlFWa3NTVUZEZWtKMlFpeERRVUZCTEVOQlFXRjFRaXhUUVVGQkxFZEJRVmw2UWl4RFFVRkJMRU5CUXpOQ08wVkJRVUU3UlVGRFFTeE5RVUZOTUVJc1EwRkJRU3hIUVVGdlFqRkNMRU5CUVVFc1MwRkJUekpDTEV0QlFVRXNRMEZCVFVNc1QwRkJRU3hEUVVGUk5VSXNRMEZCUVN4SlFVRk5RU3hEUVVGQkxFZEJRVXNzUTBGQlEwRXNRMEZCUVN4SFFVRkxOa0lzVFVGQlFTeERRVUZQTjBJc1EwRkJRU3hOUVVGUFFTeERRVUZCTzBWQlVUbEZMRk5CUVZNNFFpeEZRVUZuUWpsQ0xFTkJRVUU3U1VGQlFTeERRVU4yUWtFc1EwRkJRU3hIUVVGTE1FSXNRMEZCUVN4RFFVRnJRakZDTEVOQlFVRXNSMEZEY0VJclFpeFBRVUZCTEVOQlFWRXZRaXhEUVVGQk8wMUJRMVJCTEVOQlFVRXNRMEZCVFdkRExGbEJRVUVzUTBGQllTeFpRVUZaTEVsQlFVazdTVUZCUVN4RlFVVjJRenRGUVVGQk8wVkJRMEVzVTBGQlUwTXNSVUZCYlVKcVF5eERRVUZCTzBsQlFVRXNRMEZETVVKQkxFTkJRVUVzUjBGQlN6QkNMRU5CUVVFc1EwRkJhMEl4UWl4RFFVRkJMRWRCUTNCQ0swSXNUMEZCUVN4RFFVRlJMMElzUTBGQlFUdE5RVU5VUVN4RFFVRkJMRU5CUVUxblF5eFpRVUZCTEVOQlFXRXNXVUZCV1N4TFFVRkxPMGxCUVVFc1JVRkZlRU03UlVGQlFUdEZRVU5CTEZOQlFWTkZMRVZCUVZWc1F5eERRVUZCTEVWQlFVbEZMRU5CUVVFN1NVRkJRU3hEUVVOeVFrWXNRMEZCUVN4SFFVRkxNRUlzUTBGQlFTeERRVUZyUWpGQ0xFTkJRVUVzUjBGRGNFSXJRaXhQUVVGQkxFTkJRVkV2UWl4RFFVRkJPMDFCUTFSQkxFTkJRVUVzUTBGQlRXZERMRmxCUVVFc1EwRkJZU3hSUVVGUk9VSXNRMEZCUVN4RFFVRkxPMGxCUVVFc1JVRkZjRU03UlVGQlFUdEZRVU5CTEZOQlFWTnBReXhGUVVGeFFtNURMRU5CUVVFc1JVRkJTVVVzUTBGQlFUdEpRVUZCTEVOQlEyaERSaXhEUVVGQkxFZEJRVXN3UWl4RFFVRkJMRU5CUVd0Q01VSXNRMEZCUVN4SFFVTndRaXRDTEU5QlFVRXNRMEZCVVM5Q0xFTkJRVUU3VFVGRFZFRXNRMEZCUVN4RFFVRk5aME1zV1VGQlFTeERRVUZoTEhkQ1FVRjNRamxDTEVOQlFVRXNRMEZCV1R0SlFVRkJMRVZCUlRORU8wVkJRVUU3UlVGUFFTeFRRVUZUYTBNc1JVRkJWM0JETEVOQlFVRXNSVUZCU1VVc1EwRkJRVHRKUVVGQkxFTkJRM1JDUml4RFFVRkJMRWRCUVVzd1FpeERRVUZCTEVOQlFXdENNVUlzUTBGQlFTeEhRVU53UWl0Q0xFOUJRVUVzUTBGQlVTOUNMRU5CUVVFN1RVRkRWRUVzUTBGQlFTeERRVUZOWjBNc1dVRkJRU3hEUVVGaExHTkJRV001UWl4RFFVRkJMRU5CUVUwN1NVRkJRU3hGUVVVelF6dEZRVUZCTzBWQllVRXNVMEZCVTIxRExFVkJRVlZ5UXl4RFFVRkJPMGxCUVVFc1EwRkRha0pCTEVOQlFVRXNSMEZCU3pCQ0xFTkJRVUVzUTBGQmEwSXhRaXhEUVVGQkxFZEJRM0JDSzBJc1QwRkJRU3hEUVVGUkwwSXNRMEZCUVR0TlFVTlVRU3hEUVVGQkxFTkJRVTFuUXl4WlFVRkJMRU5CUVdFc2EwSkJRV2xDTEVWQlFVczdTVUZCUVN4RlFVVTNRenRGUVVGQk8wVkJRMEVzVTBGQlUwMHNSVUZCVTNSRExFTkJRVUU3U1VGQlFTeERRVU5vUWtFc1EwRkJRU3hIUVVGTE1FSXNRMEZCUVN4RFFVRnJRakZDTEVOQlFVRXNSMEZEY0VJclFpeFBRVUZCTEVOQlFWRXZRaXhEUVVGQk8wMUJRMVJCTEVOQlFVRXNRMEZCVFdkRExGbEJRVUVzUTBGQllTeHJRa0ZCYVVJc1JVRkJUVHRKUVVGQkxFVkJSVGxETzBWQlFVRTdSVUZEUVN4VFFVRlRUeXhGUVVGclFuWkRMRU5CUVVFN1NVRkRla0lzU1VGQmEwSXNUMEZCWkVFc1EwRkJRU3hEUVVGRmQwTXNUMEZCUVN4SlFVRm5ReXhQUVVGa2VFTXNRMEZCUVN4RFFVRkZkME1zVDBGQlFTeEZRVUZuUWp0SlFVTXhReXhOUVVGTmNFTXNRMEZCUVN4SFFVRlRSaXhEUVVGQkxFTkJRVTkxUXl4TlFVRkJMRU5CUVU5c1F5eEpRVUZCTzAxQlEzWkNSQ3hEUVVGQkxFZEJRVmRPTEVOQlFVRXNRMEZCUlRCRExFMUJRVUU3U1VGRFpuaERMRU5CUVVFc1EwRkJUM2xETEZWQlFVRXNTVUZCWTNwRExFTkJRVUVzUTBGQlQzbERMRlZCUVVFc1EwRkJWME1zUlVGQlFTeExRVUZQZEVNc1EwRkJRU3hMUVVGaFNpeERRVUZCTEVOQlFVOTVReXhWUVVGQkxFTkJRVmRETEVWQlFVRXNTVUZCVFRGRExFTkJRVUVzUTBGQlQzbERMRlZCUVVFc1EwRkJWME1zUlVGQlFTeERRVUZIUXl4UlFVRkJMRU5CUVZNM1F5eERRVUZCTEVOQlFVVXdReXhOUVVGQkxFOUJRMmhJTVVNc1EwRkJRU3hEUVVGRk1FTXNUVUZCUVN4RFFVRlBTU3hQUVVGQkxFTkJRVkVzU1VGQlFVTXNkVUpCUVVFc1JVRkJhMEkzUXl4RFFVRkJMRU5CUVU5MVF5eE5RVUZCTEVOQlFVOUZMRlZCUVVFc1EwRkJWMHNzVjBGQlFTeFBRVVV2UkRsRExFTkJRVUVzUTBGQlR5dERMRlZCUVVFc1NVRkJZeTlETEVOQlFVRXNRMEZCVHl0RExGVkJRVUVzUTBGQlYwTXNUVUZCUVN4SlFVRlZOVU1zUTBGQlFTeExRVUZoU2l4RFFVRkJMRU5CUVU4clF5eFZRVUZCTEVOQlFWZERMRTFCUVVFc1MwRkROVVZvUkN4RFFVRkJMRU5CUVU5cFJDeExRVUZCTEV0QlFWVnFSQ3hEUVVGQkxFTkJRVTkxUXl4TlFVRkJMRU5CUVU5WExFbEJRVUVzU1VGRGJrTnNSQ3hEUVVGQkxFTkJRVTl0UkN4VFFVRkJMRWxCUlV4dVJDeERRVUZCTEVOQlFVOXBSQ3hMUVVGQkxFZEJRMVExUWl4RFFVRkJMRU5CUVU5dVFpeERRVUZCTEVOQlFVOVRMR2RDUVVGQkxFbEJSV1JWTEVOQlFVRXNRMEZCVDI1Q0xFTkJRVUVzUTBGQlQwOHNaMEpCUVVFc1NVRkhaRlFzUTBGQlFTeERRVUZQSzBNc1ZVRkJRU3hKUVVGakwwTXNRMEZCUVN4RFFVRlBLME1zVlVGQlFTeERRVUZYU3l4TlFVRkJMRWxCUVZWb1JDeERRVUZCTEV0QlFXRktMRU5CUVVFc1EwRkJUeXRETEZWQlFVRXNRMEZCVjBzc1RVRkJRU3hMUVVNMVJYQkVMRU5CUVVFc1EwRkJUM0ZFTEZkQlFVRXNTMEZCWjBKeVJDeERRVUZCTEVOQlFVOTFReXhOUVVGQkxFTkJRVTlYTEVsQlFVRXNTVUZEZWtOc1JDeERRVUZCTEVOQlFVOXpSQ3hUUVVGQkxFbEJSVXgwUkN4RFFVRkJMRU5CUVU5eFJDeFhRVUZCTEVkQlExUm9ReXhEUVVGQkxFTkJRVTl1UWl4RFFVRkJMRU5CUVU5UkxHbENRVUZCTEVsQlJXUlhMRU5CUVVFc1EwRkJUMjVDTEVOQlFVRXNRMEZCVDAwc1owSkJRVUVzU1VGSFpGSXNRMEZCUVN4RFFVRlBlVU1zVlVGQlFTeEpRVUZqY2tNc1EwRkJRU3hEUVVGVGQwTXNUMEZCUVN4RFFVRlJMRWxCUVVGRExIVkNRVUZCTEVWQlFXdENOME1zUTBGQlFTeERRVUZQZFVNc1RVRkJRU3hEUVVGUFJTeFZRVUZCTEVOQlFWZExMRmRCUVVFc1RVRkRia1l4UXl4RFFVRkJMRU5CUVZOdFJDeExRVUZCTEVkQlJXSTdSVUZCUVR0RlFUQkNRU3hUUVVGVFF5eEZRVUZCTzBsQlExQXNUMEZCVDNoRUxFTkJRVUVzUTBGQlQzbERMRlZCUVVFc1NVRkJZM3BETEVOQlFVRXNRMEZCVDNsRExGVkJRVUVzUTBGQlYyZENMRTlCUVVFc1NVRkJWM3BFTEVOQlFVRXNRMEZCVDNsRExGVkJRVUVzUTBGQlYyZENMRTlCUVVFc1EwRkJVVzVETEUxQlEzSkdPMFZCUVVFN1JVRkRRU3hUUVVGVGIwTXNSVUZCUVR0SlFVTlFMRTlCUVU5R0xFTkJRVUVzVFVGQmJVSjRSQ3hEUVVGQkxFTkJRVTkxUXl4TlFVRkJMRU5CUVU5RkxGVkJRVUVzUTBGQlYydENMRk5CUTNKRU8wVkJRVUU3UlVGdFFrRXNUVUZCVFVNc1EwRkJRU3hIUVVGWlF5eERRVUZETDBRc1EwRkJRU3hGUVVGSlJTeERRVUZCTEVWQlFWZEZMRU5CUVVFN1RVRkRhRU13UWl4RFFVRkJMRU5CUVdkQ09VSXNRMEZCUVN4SFFVTkhMR0ZCUVdaQkxFTkJRVUVzUTBGQlIyZEZMRTlCUVVFc1MwRkRURGxDTEVOQlFVRXNRMEZCVld4RExFTkJRVUVzUlVGQlNTeFhRVU5rUVN4RFFVRkJMRU5CUVVkcFJTeG5Ra0ZCUVN4RFFVRnBRaXhYUVVGWE1VSXNRMEZCUVN4SlFVVnFRMGdzUTBGQlFTeERRVUZYY0VNc1EwRkJRU3hGUVVGSlNTeERRVUZCTEVkQk1VaHFRaXhWUVVGMVFrb3NRMEZCUVN4RlFVRkpSU3hEUVVGQk8xRkJRVUVzUTBGRGVrSkdMRU5CUVVFc1IwRkJTekJDTEVOQlFVRXNRMEZCYTBJeFFpeERRVUZCTEVkQlEzQkNLMElzVDBGQlFTeERRVUZSTDBJc1EwRkJRVHRWUVVOVVFTeERRVUZCTEVOQlFVMW5ReXhaUVVGQkxFTkJRV0VzYVVKQlFXbENPVUlzUTBGQlFTeERRVUZUTzFGQlFVRXNSVUZGYWtRN1RVRkJRU3hEUVhOSVJTeERRVUZqUml4RFFVRkJMRVZCUVVsRkxFTkJRVUVzUTBGQlZUdEpRVUZCTzBsQlJYaENaMFVzUTBGQlFTeEhRVUZ2UWtNc1EwRkJRVHROUVVONFFtcEZMRU5CUVVFc1EwRkJUMHNzU1VGQlFTeERRVUZMWXl4UFFVRkJMRWxCUVZVc1EwRkJTVHRKUVVGQk8wbEJSWFJDSzBNc1EwRkJRU3hIUVVGclFrTXNRMEZCUVR0TlFVTjBRa01zY1VKQlFVRXNRMEZCYzBJN1VVRkRjRUpCTEhGQ1FVRkJMRU5CUVhOQ08xVkJRMlp3UlN4RFFVRkJMRU5CUVU5eFJTeFRRVUZCTEV0QlExWnlSU3hEUVVGQkxFTkJRVTlMTEVsQlFVRXNRMEZCUzJNc1QwRkJRU3hKUVVGVkxFVkJRM2hDTzFGQlFVRXNSVUZEUVR0TlFVRkJMRVZCUTBZN1NVRkJRVHRKUVVWRmJVUXNRMEZCUVN4SFFVRmplRVVzUTBGQlFUdE5RVU5zUWl4SlFVRkpSU3hEUVVGQkxFTkJRVTlMTEVsQlFVRXNRMEZCUzJNc1QwRkJRU3hGUVVGVE8wMUJRM3BDTEUxQlFVMXFRaXhEUVVGQkxFZEJRVlZLTEVOQlFVRXNRMEZCUlRCRExFMUJRVUVzUTBGQlR5dENMRTlCUVVFc1EwRkJVU3hKUVVGSmRrVXNRMEZCUVN4RFFVRlBkVU1zVFVGQlFTeERRVUZQYVVNc1ZVRkJRVHROUVVOdVJDeExRVUZMZEVVc1EwRkJRU3hMUVVGWlJpeERRVUZCTEVOQlFVOTVSU3hOUVVGQkxFTkJRVTlETEZGQlFVRXNRMEZCVTNoRkxFTkJRVUVzUjBGQlZUdE5RVU5zUkN4TlFVRk5SU3hEUVVGQkxFZEJRVmRLTEVOQlFVRXNRMEZCVDNsRkxFMUJRVUVzUTBGQlQwVXNUMEZCUVN4RFFVRlJla1VzUTBGQlFTeE5RVUZoUml4RFFVRkJMRU5CUVU4MFJTeFhRVUZCTzFGQlEzSkVlRVFzUTBGQlFTeEhRVUZaY0VJc1EwRkJRU3hEUVVGUGRVTXNUVUZCUVN4RFFVRlBjME1zYlVKQlFVRXNTVUZCZFVJM1JTeERRVUZCTEVOQlFVODRSU3hoUVVGQkxFbEJRV2xDT1VVc1EwRkJRU3hEUVVGUE9FVXNZVUZCUVN4RFFVRmpTaXhSUVVGQkxFTkJRVk40UlN4RFFVRkJPMDFCUTNwSFJTeERRVUZCTEVsQlFWbG5RaXhEUVVGQkxFbEJRMXAwUWl4RFFVRkJMRU5CUVVWcFJpeHJRa0ZCUVN4SlFVRnpRbXBHTEVOQlFVRXNRMEZCUldsR0xHdENRVUZCTEVOQlFXMUNReXhuUWtGQlFTeExRVU0zUTJoR0xFTkJRVUVzUTBGQlQybEdMRmxCUVVFc1MwRkRWR3BHTEVOQlFVRXNRMEZCVHpCRExFVkJRVUVzUTBGQlIzZERMRlZCUVVFc1IwRkJZU3hKUVVWMlFteEdMRU5CUVVFc1EwRkJUekJETEVWQlFVRXNRMEZCUjNsRExGTkJRVUVzUjBGQldTeEhRVVY0UW01R0xFTkJRVUVzUTBGQlQyOUdMRTlCUVVFc1EwRkJVWEJHTEVOQlFVRXNRMEZCVDNsRkxFMUJRVUVzUTBGQlQwVXNUMEZCUVN4RFFVRlJla1VzUTBGQlFTeEhRVUZWTEVkQlFVVTdTVUZCUVR0SlFVVTNRMjFHTEVOQlFVRXNSMEZCWVVNc1EwRkJRVHROUVVOcVFpeE5RVUZOZUVZc1EwRkJRU3hIUVVGVFJTeERRVUZCTEVOQlFVOTFReXhOUVVGQkxFTkJRVTlzUXl4SlFVRkJPMDFCUTNwQ1VDeERRVUZCTEVOQlFVOXJRaXd3UWtGQlFTeEpRVU5VYVVJc1EwRkJRU3hEUVVGeFFtcERMRU5CUVVFc1EwRkJUM2xGTEUxQlFVRXNSVUZCVVRORkxFTkJRVUVzUTBGQlQydENMREJDUVVGQkxFZEJSWHBEYkVJc1EwRkJRU3hEUVVGUGJVSXNVMEZCUVN4SlFVTlVaU3hEUVVGQkxFTkJRVlZvUXl4RFFVRkJMRU5CUVU5NVJTeE5RVUZCTEVWQlFWRXpSU3hEUVVGQkxFTkJRVTl0UWl4VFFVRkJPMDFCUld4RExFMUJRVTFtTEVOQlFVRXNSMEZCWlVZc1EwRkJRU3hEUVVGUGVVVXNUVUZCUVN4RFFVRlBia1FzVFVGQlFUdE5RVU12UW5oQ0xFTkJRVUVzUTBGQlQyVXNhVUpCUVVFc1NVRkRWR0lzUTBGQlFTeERRVUZQZVVVc1RVRkJRU3hEUVVGUE5VTXNUMEZCUVN4RFFVRlJMRU5CUVVONlFpeERRVUZCTEVWQlFWTm5RaXhEUVVGQk8xRkJRemxDTEUxQlFVMURMRU5CUVVFc1IwRkJZWEpDTEVOQlFVRXNRMEZCVDNWRExFMUJRVUVzUTBGQlQxY3NTVUZCUVN4SFFVRlBjVU1zVVVGQlFTeERRVUZUYmtZc1EwRkJRU3hEUVVGUmIwWXNXVUZCUVN4RFFVRmhMRFJDUVVFMFFpeE5RVUZOY0VVc1EwRkJRVHRSUVVWNFIyTXNRMEZCUVN4RFFVRlhPVUlzUTBGQlFTeEZRVVJqVGl4RFFVRkJMRU5CUVU5bExHbENRVUZCTEVOQlFXdENORVVzVDBGQlFTeERRVUZSTEdsQ1FVRnBRbkJGTEVOQlFVRXNSMEZCWVN4SFFVRkhiMFVzVDBGQlFTeERRVUZSTEhkQ1FVRjNRblpHTEVOQlFVRXNSVUZEZEVZN1RVRkJRU3hGUVVWNlF6dEpRVUZCTzBsQlJVbDNSaXhEUVVGQkxFZEJRVTlETEVOQlFVRTdUVUZEV0N4TlFVRk5OMFlzUTBGQlFTeEhRVUZUUlN4RFFVRkJMRU5CUVU5MVF5eE5RVUZCTEVOQlFVOXNReXhKUVVGQk8wMUJRemRDVEN4RFFVRkJMRU5CUVU4d1F5eEZRVUZCTEVOQlFVZHJSQ3hOUVVGQkxFTkJRVTk0UlN4RFFVRkJPMDFCUjJwQ0xFMUJRVTFzUWl4RFFVRkJMRWRCUVdOR0xFTkJRVUVzUTBGQlR6QkRMRVZCUVVFN1RVRkRka0kxUXl4RFFVRkJMRU5CUVU5cFFpd3JRa0ZCUVN4SlFVTlVhMElzUTBGQlFTeERRVUZ4UWk5Q0xFTkJRVUVzUlVGQllVb3NRMEZCUVN4RFFVRlBhVUlzSzBKQlFVRXNSMEZGZGtOcVFpeERRVUZCTEVOQlFVOW5RaXhuUWtGQlFTeEpRVU5VYjBJc1EwRkJRU3hEUVVGWGFFTXNRMEZCUVN4RlFVRmhTaXhEUVVGQkxFTkJRVTluUWl4blFrRkJRVHROUVVscVF5eE5RVUZOVml4RFFVRkJMRWRCUVZsS0xFTkJRVUVzUTBGQlR6WkdMRk5CUVVFN1VVRkRia0o0UlN4RFFVRkJMRWRCUVZsMlFpeERRVUZCTEVOQlFVOXZRaXhGUVVGQkxFbEJRVTFrTEVOQlFVRXNRMEZCVlc5R0xGbEJRVUVzUTBGQllTeFRRVUZUTEcxQ1FYWk9lRU0xUkN4RFFVRkJMRWRCZFU0d1JTeFRRWFJPY0VZc1RVRkJWRUVzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWRCUVU4c1MwRkhSaXhKUVVGSmEwVXNUVUZCUVN4RFFVRlBiRVVzUTBGQlFTeEZRVUZOTmtRc1QwRkJRU3hEUVVGUkxFMUJSR0lzVFVGQlRVMHNTVUZCUVN4RFFVRkxReXhMUVVGQkxFTkJRVTBzUzBGQlMwUXNTVUZCUVN4RFFVRkxSU3hOUVVGQkxFbEJRVlZETEZGQlFVRXNRMEZCVXp0TlFVcHVSU3hKUVVGNVFuUkZMRU5CUVVFN1RVRjNUblpDTEUxQlFVMUhMRU5CUVVFc1IwRkJUeTlDTEVOQlFVRXNRMEZCVDNWRExFMUJRVUVzUTBGQlR6UkVMRkZCUVVFc1NVRkJXVzVITEVOQlFVRXNRMEZCVDNWRExFMUJRVUVzUTBGQlR6UkVMRkZCUVVFc1EwRkJVemRHTEU5QlFVRXNSMEZCVlN4UlFVRlJPMDFCTjB0c1JpeEpRVUZ4UWpCQ0xFTkJRVUU3VFVGQlFVRXNRMEZCUVN4SFFUaExRVmdzUTBGQlFTeEZRVGRMWkVjc1EwRkJRU3hEUVRaTFIzQkNMRU5CUVVFc1JVRTFTMHg1UWl4UFFVRkJMRU5CUVZFdlFpeERRVUZCTzFGQlExUkJMRU5CUVVFc1EwRkJUV2RETEZsQlFVRXNRMEZCWVN4TlFVRk5SU3hEUVVGQkxFTkJRVWM3VFVGQlFTeEpRVWRvUXl4VlFVRnRRbXhETEVOQlFVRXNSVUZCU1VVc1EwRkJRVHRSUVVGQkxFTkJRM0pDUml4RFFVRkJMRWRCUVVzd1FpeERRVUZCTEVOQlFXdENNVUlzUTBGQlFTeEhRVU53UWl0Q0xFOUJRVUVzUTBGQlVTOUNMRU5CUVVFN1ZVRkRWRUVzUTBGQlFTeERRVUZOWjBNc1dVRkJRU3hEUVVGaExHRkJRV0U1UWl4RFFVRkJMRU5CUVVzN1VVRkJRU3hGUVVWNlF6dE5RVUZCTEVOQmIwdEZMRU5CUVZWSkxFTkJRVUVzUlVGQlZ6SkNMRU5CUVVFc1IwRkhja0p6UkN4RFFVRkJPMDFCUjBFN1VVRkJTWEpETEUxQlFVRXNSVUZEUm1Jc1EwRkJRVHRSUVVGTmFVSXNUVUZCUVN4RlFVTk9hRUk3VFVGQlFTeEpRVU5GY0VNc1EwRkJRU3hEUVVGUEswTXNWVUZCUVN4SFFVRmhMME1zUTBGQlFTeERRVUZQSzBNc1ZVRkJRU3hIUVVGaExFTkJRVU03VFVGWE4wTXNTVUZXUVZvc1EwRkJRU3hIUVVGVFdDeERRVUZCTEVOQlFXdENWeXhEUVVGQkxFZEJRek5DUXl4RFFVRkJMRWRCUVZOYUxFTkJRVUVzUTBGQmEwSlpMRU5CUVVFc1IwRkRka0pFTEVOQlFVRXNTVUZEUmtFc1EwRkJRU3hEUVVGUFRpeFBRVUZCTEVOQlFWRTNRaXhEUVVGQkxFbEJRVTAwUkN4RFFVRkJMRU5CUVZVMVJDeERRVUZCTEVWQlFVbHhRaXhEUVVGQkxFVkJRVmQyUWl4RFFVRkJMRU5CUVU5WExHZENRVUZCTEVsQlJXNUVNa0lzUTBGQlFTeEpRVU5HUVN4RFFVRkJMRU5CUVU5UUxFOUJRVUVzUTBGQlVUZENMRU5CUVVFc1NVRkJUVFJFTEVOQlFVRXNRMEZCVlRWRUxFTkJRVUVzUlVGQlNYRkNMRU5CUVVFc1JVRkJWM1pDTEVOQlFVRXNRMEZCVDFVc1owSkJRVUVzU1VGSmJrUnJSQ3hEUVVGQkxFbEJRVEJDTzFGQlFVRXNRMEZEVUdwRExFdEJRVUVzUTBGQlRVTXNUMEZCUVN4RFFVRlJNVUlzUTBGQlFTeERRVUZQZVVNc1ZVRkJRU3hEUVVGWFF5eEZRVUZCTEVsQlFVMHhReXhEUVVGQkxFTkJRVTk1UXl4VlFVRkJMRU5CUVZkRExFVkJRVUVzUjBGQlN5eERRVUZETVVNc1EwRkJRU3hEUVVGUGVVTXNWVUZCUVN4RFFVRlhReXhGUVVGQkxFZEJRM2hHWWl4UFFVRkJMRU5CUVZFdlFpeERRVUZCTzFWQlEyNUNRU3hEUVVGQkxFTkJRVWRwUlN4blFrRkJRU3hEUVVGcFFpeFhRVUZYTVVJc1EwRkJRU3hEUVVGclFqdFJRVUZCTEVWQlJYSkVPMDFCUVVFN1RVRkhRWEpETEVOQlFVRXNRMEZCVHpCRExFVkJRVUVzUTBGQlIzRkNMR2RDUVVGQkxFTkJRV2xDTEZOQlFWTlBMRU5CUVVFc1IwRkJZU3hKUVVOcVJIUkZMRU5CUVVFc1EwRkJUekJETEVWQlFVRXNRMEZCUjNGQ0xHZENRVUZCTEVOQlFXbENMR1ZCUVdWRExFTkJRVUVzUjBGQmJVSXNTVUZETjBSb1JTeERRVUZCTEVOQlFVOHdReXhGUVVGQkxFTkJRVWR4UWl4blFrRkJRU3hEUVVGcFFpeGhRVUZoUnl4RFFVRkJMRWRCUVdsQ0xFVkJRVXM3U1VGQlFUdEZRVGhDYUVVNVJDeERRVUZCTEVOQlFVY3NZMEZCWXp0SlFVTm1aMElzUTBGQlFTeEhRVUZoTEVsQlFVRm5SaXhYUVVGQkxFVkJRV01zVVVGQlVYQkhMRU5CUVVFc1EwRkJUM1ZETEUxQlFVRXNRMEZCVDJ4RExFbEJRVUVzUTBGQlMwVXNhVUpCUVVFc1IwRkRkRVJoTEVOQlFVRXNRMEZCVjFVc1dVRkJRU3hEUVVGaExHRkJRV0VzWTBGRGNrTldMRU5CUVVFc1EwRkJWMVVzV1VGQlFTeERRVUZoTEdWQlFXVXNUMEZCVHp0RlFVRkJMRWxCUldoRU1VSXNRMEZCUVN4RFFVRkhMR0ZCUVdFN1NVRkRWRW9zUTBGQlFTeERRVUZQZFVNc1RVRkJRU3hEUVVGUGJFTXNTVUZCUVN4RFFVRkxReXhQUVVGQkxFbEJRM2hDYjBZc1EwRkJRU3hGUVVGTk8wVkJRVUVzU1VGRlVuUkdMRU5CUVVFc1EwRkJSeXhyUlVGQmEwVTdTVUZET1VSS0xFTkJRVUVzUTBGQlQzVkRMRTFCUVVFc1EwRkJUMnhETEVsQlFVRXNRMEZCUzBNc1QwRkJRU3hKUVVONFFpdEZMRU5CUVVFc1JVRkJXVHRGUVVGQkxFbEJSV1JxUml4RFFVRkJMRU5CUVVjc2VVTkJRWGxETzBsQlEzSkRTaXhEUVVGQkxFTkJRVTkxUXl4TlFVRkJMRU5CUVU5c1F5eEpRVUZCTEVOQlFVdERMRTlCUVVFc1NVRnNUVEZDTzAxQlEwVXNTVUZCU1U0c1EwRkJRU3hEUVVGUGRVTXNUVUZCUVN4RFFVRlBWeXhKUVVGQkxFbEJRVkZzUkN4RFFVRkJMRU5CUVU5MVF5eE5RVUZCTEVOQlFVODRSQ3hOUVVGQkxFdEJRVmR5Unl4RFFVRkJMRU5CUVU4clF5eFZRVUZCTEVWQlFWazdUVUZEZEVVN1VVRkJUVU1zVFVGQlFTeEZRVU5LYkVRc1EwRkJRVHRSUVVGTmMwUXNUVUZCUVN4RlFVTk9iRVE3VFVGQlFTeEpRVU5GUml4RFFVRkJMRU5CUVU4clF5eFZRVUZCTzAxQlExQTNReXhEUVVGQkxFdEJRMFZHTEVOQlFVRXNRMEZCVDNGRUxGZEJRVUVzU1VGRFZHeENMRU5CUVVFc1EwRkJWV3BETEVOQlFVRXNSMEZEVmpaQ0xFTkJRVUVzUTBGQmJVSTNRaXhEUVVGQkxFMUJSVzVDYTBNc1EwRkJRU3hEUVVGVGJFTXNRMEZCUVN4SFFVTlVNRUlzUTBGQlFTeERRVUZuUWpGQ0xFTkJRVUVzUzBGSGFFSktMRU5CUVVFc1MwRkRSVVVzUTBGQlFTeERRVUZQYVVRc1MwRkJRU3hKUVVOVVpDeERRVUZCTEVOQlFWVnlReXhEUVVGQkxFZEJRMVpwUXl4RFFVRkJMRU5CUVcxQ2FrTXNRMEZCUVN4TlFVVnVRbk5ETEVOQlFVRXNRMEZCVTNSRExFTkJRVUVzUjBGRFZEaENMRU5CUVVFc1EwRkJaMEk1UWl4RFFVRkJMRWRCUjNSQ08wbEJRVUVzUTBFeVMwVXNSVUZCYTBJN1JVRkJRU3hKUVVWd1FrMHNRMEZCUVN4RFFVRkhMRzlDUVVGdlFqdEpRVU5vUWtvc1EwRkJRU3hEUVVGUGRVTXNUVUZCUVN4RFFVRlBiRU1zU1VGQlFTeERRVUZMUXl4UFFVRkJMRWxCZGtzeFFqdE5RVU5GTEUxQlFVMVNMRU5CUVVFc1IwRkJVMFVzUTBGQlFTeERRVUZQZFVNc1RVRkJRU3hEUVVGUGJFTXNTVUZCUVR0TlFVTjRRbTFFTEVOQlFVRXNUVUZEVEhoRUxFTkJRVUVzUTBGQlQzbERMRlZCUVVFc1EwRkJWMmRDTEU5QlFVRXNRMEZCVVRWQ0xFOUJRVUVzUTBGQlVUTkNMRU5CUVVFN1VVRkROVUpHTEVOQlFVRXNRMEZCVDNWRExFMUJRVUVzUTBGQlQwVXNWVUZCUVN4RFFVRlhhMElzVTBGQlFTeExRVU16UWk5Q0xFTkJRVUVzUTBGQlowSXhRaXhEUVVGQkxFZEJRMWhHTEVOQlFVRXNRMEZCVDNWRExFMUJRVUVzUTBGQlQwVXNWVUZCUVN4RFFVRlhOa1FzV1VGQlFTeExRVU0xUW5SRkxFTkJRVUVzUTBGQlZUbENMRU5CUVVFc1JVRkJWU3hYUVVOd1FtZERMRU5CUVVFc1EwRkJWMmhETEVOQlFVRXNSVUZCVlVvc1EwRkJRU3hEUVVGUFl5eDFRa0ZCUVN4RFFVRjNRalpGTEU5QlFVRXNRMEZCVVN4cFFrRkJhVUlzU1VGQlFXTXNWMEZCUVN4RlFVRmhja2NzUTBGQlFTeEpRVUZaTEU5QlIzUkhRU3hEUVVGQkxFTkJRVk13UXl4UFFVRkJMRU5CUVZFc1NVRkJRVU1zZFVKQlFVRXNSVUZCYTBJM1F5eERRVUZCTEVOQlFVOTFReXhOUVVGQkxFTkJRVTlGTEZWQlFVRXNRMEZCVnl0RUxHbENRVUZCTEV0QlF6bEVkRWNzUTBGQlFTeERRVUZUTkVJc1dVRkJRU3hEUVVGaExHZENRVUZuUWl4VlFVVjBRelZDTEVOQlFVRXNRMEZCVTNWSExHVkJRVUVzUTBGQlowSXNaVUZETTBJN1RVRkJRU3hGUVVWS08wbEJRVUVzUTBGMVNrVXNSVUZCYTBJN1JVRkJRU3hKUVVWd1FuSkhMRU5CUVVFc1EwRkJSeXhYUVVGWE8wbEJRMUJLTEVOQlFVRXNRMEZCVDNWRExFMUJRVUVzUTBGQlQyeERMRWxCUVVFc1EwRkJTME1zVDBGQlFTeEpRV3hFTVVJN1RVRkRUV01zUTBGQlFTeEpRVUZaUVN4RFFVRkJMRU5CUVZkelJpeE5RVUZCTzAxQlF6TkNPMUZCUVVreFJDeE5RVUZCTEVWQlEwWnNSQ3hEUVVGQk8xRkJRVTF6UkN4TlFVRkJMRVZCUTA1c1JEdE5RVUZCTEVsQlEwVkdMRU5CUVVFc1EwRkJUeXRETEZWQlFVRXNSMEZCWVM5RExFTkJRVUVzUTBGQlR5dERMRlZCUVVFc1IwRkJZU3hEUVVGRE8wMUJRemREYWtRc1EwRkJRU3hIUVVGVE1FSXNRMEZCUVN4RFFVRnJRakZDTEVOQlFVRXNSMEZETTBKSkxFTkJRVUVzUjBGQlUzTkNMRU5CUVVFc1EwRkJhMEowUWl4RFFVRkJMRWRCUTNaQ1NpeERRVUZCTEVsQlEwWkJMRU5CUVVFc1EwRkJUeXRDTEU5QlFVRXNRMEZCVVM5Q0xFTkJRVUVzU1VGQlRVRXNRMEZCUVN4RFFVRkhOa2NzYlVKQlFVRXNRMEZCYjBJc1YwRkJWM1JGTEVOQlFVRXNTVUZGY2tSdVF5eERRVUZCTEVsQlEwWkJMRU5CUVVFc1EwRkJUekpDTEU5QlFVRXNRMEZCVVM5Q0xFTkJRVUVzU1VGQlRVRXNRMEZCUVN4RFFVRkhOa2NzYlVKQlFVRXNRMEZCYjBJc1YwRkJWM1JGTEVOQlFVRXNTVUZKY2tSeFFpeERRVUZCTEU5QlEyMUNha01zUzBGQlFTeERRVUZOUXl4UFFVRkJMRU5CUVZFeFFpeERRVUZCTEVOQlFVOTVReXhWUVVGQkxFTkJRVmRETEVWQlFVRXNTVUZCVFRGRExFTkJRVUVzUTBGQlQzbERMRlZCUVVFc1EwRkJWME1zUlVGQlFTeEhRVUZMTEVOQlFVTXhReXhEUVVGQkxFTkJRVTk1UXl4VlFVRkJMRU5CUVZkRExFVkJRVUVzUjBGRGVFWmlMRTlCUVVFc1EwRkJVUzlDTEVOQlFVRTdVVUZEYmtKQkxFTkJRVUVzUTBGQlJ6WkhMRzFDUVVGQkxFTkJRVzlDTEZkQlFWZDBSU3hEUVVGQkxFTkJRV3RDTzAxQlFVRTdUVUZMZUVSeVF5eERRVUZCTEVOQlFVOHdReXhGUVVGQkxFTkJRVWRwUlN4dFFrRkJRU3hEUVVGdlFpeFRRVUZUY2tNc1EwRkJRU3hIUVVGaExFbEJRM0JFZEVVc1EwRkJRU3hEUVVGUE1FTXNSVUZCUVN4RFFVRkhhVVVzYlVKQlFVRXNRMEZCYjBJc1pVRkJaVE5ETEVOQlFVRXNSMEZCYlVJc1NVRkRhRVZvUlN4RFFVRkJMRU5CUVU4d1F5eEZRVUZCTEVOQlFVZHBSU3h0UWtGQlFTeERRVUZ2UWl4aFFVRmhla01zUTBGQlFTeEhRVUZwUWl4RlFVTTVSRHRKUVVGQkxFTkJkMEpGTEVWQlFWTTdSVUZCUVN4RlFVVmlPMEZCUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEF1dG9wbGF5O1xudmFyIF9zc3JXaW5kb3dFc21NaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1pbi5tanNcIik7XG5mdW5jdGlvbiBBdXRvcGxheShlKSB7XG4gIGxldCBhLFxuICAgIHQsXG4gICAge1xuICAgICAgc3dpcGVyOiBuLFxuICAgICAgZXh0ZW5kUGFyYW1zOiByLFxuICAgICAgb246IGksXG4gICAgICBlbWl0OiBvLFxuICAgICAgcGFyYW1zOiBzXG4gICAgfSA9IGU7XG4gIG4uYXV0b3BsYXkgPSB7XG4gICAgcnVubmluZzogITEsXG4gICAgcGF1c2VkOiAhMSxcbiAgICB0aW1lTGVmdDogMFxuICB9LCByKHtcbiAgICBhdXRvcGxheToge1xuICAgICAgZW5hYmxlZDogITEsXG4gICAgICBkZWxheTogM2UzLFxuICAgICAgd2FpdEZvclRyYW5zaXRpb246ICEwLFxuICAgICAgZGlzYWJsZU9uSW50ZXJhY3Rpb246ICEwLFxuICAgICAgc3RvcE9uTGFzdFNsaWRlOiAhMSxcbiAgICAgIHJldmVyc2VEaXJlY3Rpb246ICExLFxuICAgICAgcGF1c2VPbk1vdXNlRW50ZXI6ICExXG4gICAgfVxuICB9KTtcbiAgbGV0IHAsXG4gICAgbCxcbiAgICB1LFxuICAgIGQsXG4gICAgeSxcbiAgICBtLFxuICAgIGMsXG4gICAgZyA9IHMgJiYgcy5hdXRvcGxheSA/IHMuYXV0b3BsYXkuZGVsYXkgOiAzZTMsXG4gICAgdiA9IHMgJiYgcy5hdXRvcGxheSA/IHMuYXV0b3BsYXkuZGVsYXkgOiAzZTMsXG4gICAgVCA9IG5ldyBEYXRlKCkuZ2V0VGltZTtcbiAgZnVuY3Rpb24gdyhlKSB7XG4gICAgbiAmJiAhbi5kZXN0cm95ZWQgJiYgbi53cmFwcGVyRWwgJiYgZS50YXJnZXQgPT09IG4ud3JhcHBlckVsICYmIChuLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCB3KSwgTygpKTtcbiAgfVxuICBjb25zdCBFID0gKCkgPT4ge1xuICAgICAgaWYgKG4uZGVzdHJveWVkIHx8ICFuLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICAgIG4uYXV0b3BsYXkucGF1c2VkID8gbCA9ICEwIDogbCAmJiAodiA9IHAsIGwgPSAhMSk7XG4gICAgICBjb25zdCBlID0gbi5hdXRvcGxheS5wYXVzZWQgPyBwIDogVCArIHYgLSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIG4uYXV0b3BsYXkudGltZUxlZnQgPSBlLCBvKFwiYXV0b3BsYXlUaW1lTGVmdFwiLCBlLCBlIC8gZyksIHQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBFKCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGYgPSBlID0+IHtcbiAgICAgIGlmIChuLmRlc3Ryb3llZCB8fCAhbi5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0KSwgRSgpO1xuICAgICAgbGV0IHIgPSB2b2lkIDAgPT09IGUgPyBuLnBhcmFtcy5hdXRvcGxheS5kZWxheSA6IGU7XG4gICAgICBnID0gbi5wYXJhbXMuYXV0b3BsYXkuZGVsYXksIHYgPSBuLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICAgIGNvbnN0IGkgPSAoKCkgPT4ge1xuICAgICAgICBsZXQgZTtcbiAgICAgICAgaWYgKGUgPSBuLnZpcnR1YWwgJiYgbi5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gbi5zbGlkZXMuZmlsdGVyKGUgPT4gZS5jbGFzc0xpc3QuY29udGFpbnMoXCJzd2lwZXItc2xpZGUtYWN0aXZlXCIpKVswXSA6IG4uc2xpZGVzW24uYWN0aXZlSW5kZXhdLCAhZSkgcmV0dXJuO1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1hdXRvcGxheVwiKSwgMTApO1xuICAgICAgfSkoKTtcbiAgICAgICFOdW1iZXIuaXNOYU4oaSkgJiYgaSA+IDAgJiYgdm9pZCAwID09PSBlICYmIChyID0gaSwgZyA9IGksIHYgPSBpKSwgcCA9IHI7XG4gICAgICBjb25zdCBzID0gbi5wYXJhbXMuc3BlZWQsXG4gICAgICAgIGwgPSAoKSA9PiB7XG4gICAgICAgICAgbiAmJiAhbi5kZXN0cm95ZWQgJiYgKG4ucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24gPyAhbi5pc0JlZ2lubmluZyB8fCBuLnBhcmFtcy5sb29wIHx8IG4ucGFyYW1zLnJld2luZCA/IChuLnNsaWRlUHJldihzLCAhMCwgITApLCBvKFwiYXV0b3BsYXlcIikpIDogbi5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlIHx8IChuLnNsaWRlVG8obi5zbGlkZXMubGVuZ3RoIC0gMSwgcywgITAsICEwKSwgbyhcImF1dG9wbGF5XCIpKSA6ICFuLmlzRW5kIHx8IG4ucGFyYW1zLmxvb3AgfHwgbi5wYXJhbXMucmV3aW5kID8gKG4uc2xpZGVOZXh0KHMsICEwLCAhMCksIG8oXCJhdXRvcGxheVwiKSkgOiBuLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUgfHwgKG4uc2xpZGVUbygwLCBzLCAhMCwgITApLCBvKFwiYXV0b3BsYXlcIikpLCBuLnBhcmFtcy5jc3NNb2RlICYmIChUID0gbmV3IERhdGUoKS5nZXRUaW1lKCksIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBmKCk7XG4gICAgICAgICAgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgIHJldHVybiByID4gMCA/IChjbGVhclRpbWVvdXQoYSksIGEgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbCgpO1xuICAgICAgfSwgcikpIDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgbCgpO1xuICAgICAgfSksIHI7XG4gICAgfSxcbiAgICBiID0gKCkgPT4ge1xuICAgICAgbi5hdXRvcGxheS5ydW5uaW5nID0gITAsIGYoKSwgbyhcImF1dG9wbGF5U3RhcnRcIik7XG4gICAgfSxcbiAgICBMID0gKCkgPT4ge1xuICAgICAgbi5hdXRvcGxheS5ydW5uaW5nID0gITEsIGNsZWFyVGltZW91dChhKSwgY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksIG8oXCJhdXRvcGxheVN0b3BcIik7XG4gICAgfSxcbiAgICBEID0gKGUsIHQpID0+IHtcbiAgICAgIGlmIChuLmRlc3Ryb3llZCB8fCAhbi5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgICBjbGVhclRpbWVvdXQoYSksIGUgfHwgKGMgPSAhMCk7XG4gICAgICBjb25zdCByID0gKCkgPT4ge1xuICAgICAgICBvKFwiYXV0b3BsYXlQYXVzZVwiKSwgbi5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24gPyBuLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCB3KSA6IE8oKTtcbiAgICAgIH07XG4gICAgICBpZiAobi5hdXRvcGxheS5wYXVzZWQgPSAhMCwgdCkgcmV0dXJuIG0gJiYgKHAgPSBuLnBhcmFtcy5hdXRvcGxheS5kZWxheSksIG0gPSAhMSwgdm9pZCByKCk7XG4gICAgICBjb25zdCBpID0gcCB8fCBuLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICAgIHAgPSBpIC0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gVCksIG4uaXNFbmQgJiYgcCA8IDAgJiYgIW4ucGFyYW1zLmxvb3AgfHwgKHAgPCAwICYmIChwID0gMCksIHIoKSk7XG4gICAgfSxcbiAgICBPID0gKCkgPT4ge1xuICAgICAgbi5pc0VuZCAmJiBwIDwgMCAmJiAhbi5wYXJhbXMubG9vcCB8fCBuLmRlc3Ryb3llZCB8fCAhbi5hdXRvcGxheS5ydW5uaW5nIHx8IChUID0gbmV3IERhdGUoKS5nZXRUaW1lKCksIGMgPyAoYyA9ICExLCBmKHApKSA6IGYoKSwgbi5hdXRvcGxheS5wYXVzZWQgPSAhMSwgbyhcImF1dG9wbGF5UmVzdW1lXCIpKTtcbiAgICB9LFxuICAgIEEgPSAoKSA9PiB7XG4gICAgICBpZiAobi5kZXN0cm95ZWQgfHwgIW4uYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgICAgY29uc3QgZSA9ICgwLCBfc3NyV2luZG93RXNtTWluLmcpKCk7XG4gICAgICBcImhpZGRlblwiID09PSBlLnZpc2liaWxpdHlTdGF0ZSAmJiAoYyA9ICEwLCBEKCEwKSksIFwidmlzaWJsZVwiID09PSBlLnZpc2liaWxpdHlTdGF0ZSAmJiBPKCk7XG4gICAgfSxcbiAgICBGID0gZSA9PiB7XG4gICAgICBcIm1vdXNlXCIgPT09IGUucG9pbnRlclR5cGUgJiYgKGMgPSAhMCwgRCghMCkpO1xuICAgIH0sXG4gICAgUyA9IGUgPT4ge1xuICAgICAgXCJtb3VzZVwiID09PSBlLnBvaW50ZXJUeXBlICYmIG4uYXV0b3BsYXkucGF1c2VkICYmIE8oKTtcbiAgICB9O1xuICBpKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgbi5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCAmJiAobi5wYXJhbXMuYXV0b3BsYXkucGF1c2VPbk1vdXNlRW50ZXIgJiYgKG4uZWwuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJlbnRlclwiLCBGKSwgbi5lbC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmxlYXZlXCIsIFMpKSwgKDAsIF9zc3JXaW5kb3dFc21NaW4uZykoKS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBBKSwgVCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBiKCkpO1xuICB9KSwgaShcImRlc3Ryb3lcIiwgKCkgPT4ge1xuICAgIG4uZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJlbnRlclwiLCBGKSwgbi5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmxlYXZlXCIsIFMpLCAoMCwgX3NzcldpbmRvd0VzbU1pbi5nKSgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIEEpLCBuLmF1dG9wbGF5LnJ1bm5pbmcgJiYgTCgpO1xuICB9KSwgaShcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLCAoZSwgYSwgdCkgPT4ge1xuICAgICFuLmRlc3Ryb3llZCAmJiBuLmF1dG9wbGF5LnJ1bm5pbmcgJiYgKHQgfHwgIW4ucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uID8gRCghMCwgITApIDogTCgpKTtcbiAgfSksIGkoXCJzbGlkZXJGaXJzdE1vdmVcIiwgKCkgPT4ge1xuICAgICFuLmRlc3Ryb3llZCAmJiBuLmF1dG9wbGF5LnJ1bm5pbmcgJiYgKG4ucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uID8gTCgpIDogKHUgPSAhMCwgZCA9ICExLCBjID0gITEsIHkgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGMgPSAhMCwgZCA9ICEwLCBEKCEwKTtcbiAgICB9LCAyMDApKSk7XG4gIH0pLCBpKFwidG91Y2hFbmRcIiwgKCkgPT4ge1xuICAgIGlmICghbi5kZXN0cm95ZWQgJiYgbi5hdXRvcGxheS5ydW5uaW5nICYmIHUpIHtcbiAgICAgIGlmIChjbGVhclRpbWVvdXQoeSksIGNsZWFyVGltZW91dChhKSwgbi5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHJldHVybiBkID0gITEsIHZvaWQgKHUgPSAhMSk7XG4gICAgICBkICYmIG4ucGFyYW1zLmNzc01vZGUgJiYgTygpLCBkID0gITEsIHUgPSAhMTtcbiAgICB9XG4gIH0pLCBpKFwic2xpZGVDaGFuZ2VcIiwgKCkgPT4ge1xuICAgICFuLmRlc3Ryb3llZCAmJiBuLmF1dG9wbGF5LnJ1bm5pbmcgJiYgKG0gPSAhMCk7XG4gIH0pLCBPYmplY3QuYXNzaWduKG4uYXV0b3BsYXksIHtcbiAgICBzdGFydDogYixcbiAgICBzdG9wOiBMLFxuICAgIHBhdXNlOiBELFxuICAgIHJlc3VtZTogT1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKQmRYUnZjR3hoZVNJc0ltVWlMQ0poSWl3aWRDSXNJbk4zYVhCbGNpSXNJbTRpTENKbGVIUmxibVJRWVhKaGJYTWlMQ0p5SWl3aWIyNGlMQ0pwSWl3aVpXMXBkQ0lzSW04aUxDSndZWEpoYlhNaUxDSnpJaXdpWVhWMGIzQnNZWGtpTENKeWRXNXVhVzVuSWl3aWNHRjFjMlZrSWl3aWRHbHRaVXhsWm5RaUxDSmxibUZpYkdWa0lpd2laR1ZzWVhraUxDSjNZV2wwUm05eVZISmhibk5wZEdsdmJpSXNJbVJwYzJGaWJHVlBia2x1ZEdWeVlXTjBhVzl1SWl3aWMzUnZjRTl1VEdGemRGTnNhV1JsSWl3aWNtVjJaWEp6WlVScGNtVmpkR2x2YmlJc0luQmhkWE5sVDI1TmIzVnpaVVZ1ZEdWeUlpd2ljQ0lzSW13aUxDSjFJaXdpWkNJc0lua2lMQ0p0SWl3aVl5SXNJbWNpTENKMklpd2lWQ0lzSWtSaGRHVWlMQ0puWlhSVWFXMWxJaXdpZHlJc0ltUmxjM1J5YjNsbFpDSXNJbmR5WVhCd1pYSkZiQ0lzSW5SaGNtZGxkQ0lzSW5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJaUxDSlBJaXdpUlNJc0ltTmhiR05VYVcxbFRHVm1kQ0lzSW5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTSXNJbVlpTENKallXNWpaV3hCYm1sdFlYUnBiMjVHY21GdFpTSXNJblpwY25SMVlXd2lMQ0p6Ykdsa1pYTWlMQ0ptYVd4MFpYSWlMQ0pqYkdGemMweHBjM1FpTENKamIyNTBZV2x1Y3lJc0ltRmpkR2wyWlVsdVpHVjRJaXdpY0dGeWMyVkpiblFpTENKblpYUkJkSFJ5YVdKMWRHVWlMQ0pPZFcxaVpYSWlMQ0pwYzA1aFRpSXNJbk53WldWa0lpd2ljSEp2WTJWbFpDSXNJbWx6UW1WbmFXNXVhVzVuSWl3aWJHOXZjQ0lzSW5KbGQybHVaQ0lzSW5Oc2FXUmxVSEpsZGlJc0luTnNhV1JsVkc4aUxDSnNaVzVuZEdnaUxDSnBjMFZ1WkNJc0luTnNhV1JsVG1WNGRDSXNJbU56YzAxdlpHVWlMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSnpaWFJVYVcxbGIzVjBJaXdpWWlJc0luTjBZWEowSWl3aVRDSXNJbk4wYjNBaUxDSkVJaXdpY0dGMWMyVWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpY21WemRXMWxJaXdpUVNJc0ltOXVWbWx6YVdKcGJHbDBlVU5vWVc1blpTSXNJbWRsZEVSdlkzVnRaVzUwSWl3aWRtbHphV0pwYkdsMGVWTjBZWFJsSWl3aVJpSXNJbkJ2YVc1MFpYSlVlWEJsSWl3aVV5SXNJbVZzSWl3aVQySnFaV04wSWl3aVlYTnphV2R1SWwwc0luTnZkWEpqWlhNaU9sc2lNQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzI1MWJHeGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVsQkxGTkJRVk5CTEZOQlFWTkRMRU5CUVVFN1JVRkRhRUlzU1VGMVFrbERMRU5CUVVFN1NVRkRRVU1zUTBGQlFUdEpRVUZCTzAxQmVFSkJReXhOUVVGQkxFVkJRMFpETEVOQlFVRTdUVUZCVFVNc1dVRkJRU3hGUVVOT1F5eERRVUZCTzAxQlFWbERMRVZCUVVFc1JVRkRXa01zUTBGQlFUdE5RVUZGUXl4SlFVRkJMRVZCUTBaRExFTkJRVUU3VFVGQlNVTXNUVUZCUVN4RlFVTktRenRKUVVGQkxFbEJRMFZhTEVOQlFVRTdSVUZEU2trc1EwRkJRU3hEUVVGUFV5eFJRVUZCTEVkQlFWYzdTVUZEYUVKRExFOUJRVUVzUjBGQlV6dEpRVU5VUXl4TlFVRkJMRWRCUVZFN1NVRkRVa01zVVVGQlFTeEZRVUZWTzBWQlFVRXNSMEZGV2xZc1EwRkJRU3hEUVVGaE8wbEJRMWhQTEZGQlFVRXNSVUZCVlR0TlFVTlNTU3hQUVVGQkxFZEJRVk03VFVGRFZFTXNTMEZCUVN4RlFVRlBPMDFCUTFCRExHbENRVUZCTEVkQlFXMUNPMDFCUTI1Q1F5eHZRa0ZCUVN4SFFVRnpRanROUVVOMFFrTXNaVUZCUVN4SFFVRnBRanROUVVOcVFrTXNaMEpCUVVFc1IwRkJhMEk3VFVGRGJFSkRMR2xDUVVGQkxFZEJRVzFDTzBsQlFVRTdSVUZCUVR0RlFVdDJRaXhKUVVWSlF5eERRVUZCTzBsQlJVRkRMRU5CUVVFN1NVRkRRVU1zUTBGQlFUdEpRVU5CUXl4RFFVRkJPMGxCUTBGRExFTkJRVUU3U1VGRFFVTXNRMEZCUVR0SlFVTkJReXhEUVVGQk8wbEJWRUZETEVOQlFVRXNSMEZCY1VKdVFpeERRVUZCTEVsQlFWVkJMRU5CUVVFc1EwRkJUME1zVVVGQlFTeEhRVUZYUkN4RFFVRkJMRU5CUVU5RExGRkJRVUVzUTBGQlUwc3NTMEZCUVN4SFFVRlJPMGxCUTNwRll5eERRVUZCTEVkQlFYVkNjRUlzUTBGQlFTeEpRVUZWUVN4RFFVRkJMRU5CUVU5RExGRkJRVUVzUjBGQlYwUXNRMEZCUVN4RFFVRlBReXhSUVVGQkxFTkJRVk5MTEV0QlFVRXNSMEZCVVR0SlFVVXpSV1VzUTBGQlFTeEhRVUZ2UWl4SlFVRkpReXhKUVVGQkxFZEJRVTlETEU5QlFVRTdSVUZQYmtNc1UwRkJVME1zUlVGQlowSndReXhEUVVGQk8wbEJRMnhDU1N4RFFVRkJMRXRCUVZWQkxFTkJRVUVzUTBGQlQybERMRk5CUVVFc1NVRkJZMnBETEVOQlFVRXNRMEZCVDJ0RExGTkJRVUVzU1VGRGRrTjBReXhEUVVGQkxFTkJRVVYxUXl4TlFVRkJMRXRCUVZkdVF5eERRVUZCTEVOQlFVOXJReXhUUVVGQkxFdEJRM2hDYkVNc1EwRkJRU3hEUVVGUGEwTXNVMEZCUVN4RFFVRlZSU3h0UWtGQlFTeERRVUZ2UWl4cFFrRkJhVUpLTEVOQlFVRXNSMEZEZEVSTExFTkJRVUVzUjBGRFJqdEZRVUZCTzBWQlEwRXNUVUZCVFVNc1EwRkJRU3hIUVVGbFF5eERRVUZCTzAxQlEyNUNMRWxCUVVsMlF5eERRVUZCTEVOQlFVOXBReXhUUVVGQkxFdEJRV05xUXl4RFFVRkJMRU5CUVU5VExGRkJRVUVzUTBGQlUwTXNUMEZCUVN4RlFVRlRPMDFCUXpsRFZpeERRVUZCTEVOQlFVOVRMRkZCUVVFc1EwRkJVMFVzVFVGQlFTeEhRVU5zUWxVc1EwRkJRU3hKUVVGWkxFbEJRMGhCTEVOQlFVRXNTMEZEVkU4c1EwRkJRU3hIUVVGMVFsSXNRMEZCUVN4RlFVTjJRa01zUTBGQlFTeEpRVUZaTzAxQlJXUXNUVUZCVFhwQ0xFTkJRVUVzUjBGQlYwa3NRMEZCUVN4RFFVRlBVeXhSUVVGQkxFTkJRVk5GTEUxQlFVRXNSMEZCVTFNc1EwRkJRU3hIUVVGdFFsTXNRMEZCUVN4SFFVRnZRa1FzUTBGQlFTeEhRVUYxUWl4SlFVRkpSU3hKUVVGQkxFZEJRVTlETEU5QlFVRTdUVUZEYmtndlFpeERRVUZCTEVOQlFVOVRMRkZCUVVFc1EwRkJVMGNzVVVGQlFTeEhRVUZYYUVJc1EwRkJRU3hGUVVNelFsVXNRMEZCUVN4RFFVRkxMRzlDUVVGdlFsWXNRMEZCUVN4RlFVRlZRU3hEUVVGQkxFZEJRVmNyUWl4RFFVRkJMRWRCUXpsRE4wSXNRMEZCUVN4SFFVRk5NRU1zY1VKQlFVRXNRMEZCYzBJN1VVRkRNVUpHTEVOQlFVRXNSVUZCWXp0TlFVRkJMRVZCUTJRN1NVRkJRVHRKUVdGRlJ5eERRVUZCTEVkQlFVMDNReXhEUVVGQk8wMUJRMVlzU1VGQlNVa3NRMEZCUVN4RFFVRlBhVU1zVTBGQlFTeExRVUZqYWtNc1EwRkJRU3hEUVVGUFV5eFJRVUZCTEVOQlFWTkRMRTlCUVVFc1JVRkJVenROUVVOc1JHZERMRzlDUVVGQkxFTkJRWEZDTlVNc1EwRkJRU3hIUVVOeVFuZERMRU5CUVVFN1RVRkRRU3hKUVVGSmNFTXNRMEZCUVN4UlFVRTRRaXhOUVVGbVRpeERRVUZCTEVkQlFUWkNTU3hEUVVGQkxFTkJRVTlQTEUxQlFVRXNRMEZCVDBVc1VVRkJRU3hEUVVGVFN5eExRVUZCTEVkQlFWRnNRaXhEUVVGQk8wMUJReTlGSzBJc1EwRkJRU3hIUVVGeFFqTkNMRU5CUVVFc1EwRkJUMDhzVFVGQlFTeERRVUZQUlN4UlFVRkJMRU5CUVZOTExFdEJRVUVzUlVGRE5VTmpMRU5CUVVFc1IwRkJkVUkxUWl4RFFVRkJMRU5CUVU5UExFMUJRVUVzUTBGQlQwVXNVVUZCUVN4RFFVRlRTeXhMUVVGQk8wMUJRemxETEUxQlFVMVdMRU5CUVVFc1IwRnNRbU03VVVGRGNFSXNTVUZCU1ZJc1EwRkJRVHRSUVUxS0xFbEJTa1ZCTEVOQlFVRXNSMEZFUlVrc1EwRkJRU3hEUVVGUE1rTXNUMEZCUVN4SlFVRlhNME1zUTBGQlFTeERRVUZQVHl4TlFVRkJMRU5CUVU5dlF5eFBRVUZCTEVOQlFWRTVRaXhQUVVGQkxFZEJRekZDWWl4RFFVRkJMRU5CUVU4MFF5eE5RVUZCTEVOQlFVOURMRTFCUVVFc1EwRkJUMnBFTEVOQlFVRXNTVUZCVjBFc1EwRkJRU3hEUVVGUmEwUXNVMEZCUVN4RFFVRlZReXhSUVVGQkxFTkJRVk1zZDBKQlFYZENMRXRCUlc1R0wwTXNRMEZCUVN4RFFVRlBORU1zVFVGQlFTeERRVUZQTlVNc1EwRkJRU3hEUVVGUFowUXNWMEZCUVN4SlFVVnNRM0JFTEVOQlFVRXNSVUZCWlR0UlFVVndRaXhQUVVRd1FuRkVMRkZCUVVFc1EwRkJVM0pFTEVOQlFVRXNRMEZCWTNORUxGbEJRVUVzUTBGQllTeDVRa0ZCZVVJc1IwRkRMMFE3VFVGQlFTeEhRVk5GTzAxQlFVRXNRMEZEY2tKRExFMUJRVUVzUTBGQlQwTXNTMEZCUVN4RFFVRk5hRVFzUTBGQlFTeExRVUZ6UWtFc1EwRkJRU3hIUVVGdlFpeFZRVUV5UWl4TlFVRm1VaXhEUVVGQkxFdEJRM1JGVFN4RFFVRkJMRWRCUVZGRkxFTkJRVUVzUlVGRFVuVkNMRU5CUVVFc1IwRkJjVUoyUWl4RFFVRkJMRVZCUTNKQ2QwSXNRMEZCUVN4SFFVRjFRbmhDTEVOQlFVRXNSMEZGZWtKblFpeERRVUZCTEVkQlFXMUNiRUlzUTBGQlFUdE5RVU51UWl4TlFVRk5UU3hEUVVGQkxFZEJRVkZTTEVOQlFVRXNRMEZCVDA4c1RVRkJRU3hEUVVGUE9FTXNTMEZCUVR0UlFVTjBRbWhETEVOQlFVRXNSMEZCVldsRExFTkJRVUU3VlVGRFZIUkVMRU5CUVVFc1MwRkJWVUVzUTBGQlFTeERRVUZQYVVNc1UwRkJRU3hMUVVOc1FtcERMRU5CUVVFc1EwRkJUMDhzVFVGQlFTeERRVUZQUlN4UlFVRkJMRU5CUVZOVExHZENRVUZCTEVsQlEzQkNiRUlzUTBGQlFTeERRVUZQZFVRc1YwRkJRU3hKUVVGbGRrUXNRMEZCUVN4RFFVRlBUeXhOUVVGQkxFTkJRVTlwUkN4SlFVRkJMRWxCUVZGNFJDeERRVUZCTEVOQlFVOVBMRTFCUVVFc1EwRkJUMnRFTEUxQlFVRXNTVUZETjBSNlJDeERRVUZCTEVOQlFVOHdSQ3hUUVVGQkxFTkJRVlZzUkN4RFFVRkJMRWRCUVU4c1NVRkJUU3hKUVVNNVFrWXNRMEZCUVN4RFFVRkxMR1ZCUTB0T0xFTkJRVUVzUTBGQlQwOHNUVUZCUVN4RFFVRlBSU3hSUVVGQkxFTkJRVk5STEdWQlFVRXNTMEZEYWtOcVFpeERRVUZCTEVOQlFVOHlSQ3hQUVVGQkxFTkJRVkV6UkN4RFFVRkJMRU5CUVU4MFF5eE5RVUZCTEVOQlFVOW5RaXhOUVVGQkxFZEJRVk1zUjBGQlIzQkVMRU5CUVVFc1IwRkJUeXhKUVVGTkxFbEJRM1JFUml4RFFVRkJMRU5CUVVzc1owSkJSMFpPTEVOQlFVRXNRMEZCVHpaRUxFdEJRVUVzU1VGQlV6ZEVMRU5CUVVFc1EwRkJUMDhzVFVGQlFTeERRVUZQYVVRc1NVRkJRU3hKUVVGUmVFUXNRMEZCUVN4RFFVRlBUeXhOUVVGQkxFTkJRVTlyUkN4TlFVRkJMRWxCUTNaRWVrUXNRMEZCUVN4RFFVRlBPRVFzVTBGQlFTeERRVUZWZEVRc1EwRkJRU3hIUVVGUExFbEJRVTBzU1VGRE9VSkdMRU5CUVVFc1EwRkJTeXhsUVVOTFRpeERRVUZCTEVOQlFVOVBMRTFCUVVFc1EwRkJUMFVzVVVGQlFTeERRVUZUVVN4bFFVRkJMRXRCUTJwRGFrSXNRMEZCUVN4RFFVRlBNa1FzVDBGQlFTeERRVUZSTEVkQlFVZHVSQ3hEUVVGQkxFZEJRVThzU1VGQlRTeEpRVU12UWtZc1EwRkJRU3hEUVVGTExHTkJSMHhPTEVOQlFVRXNRMEZCVDA4c1RVRkJRU3hEUVVGUGQwUXNUMEZCUVN4TFFVTm9RbXhETEVOQlFVRXNSMEZCYjBJc1NVRkJTVU1zU1VGQlFTeEhRVUZQUXl4UFFVRkJMRWxCUXk5Q1V5eHhRa0ZCUVN4RFFVRnpRanRaUVVOd1FrTXNRMEZCUVN4RlFVRkxPMVZCUVVFc1NVRkZWRHRSUVVGQk8wMUJZMFlzVDBGYVNYWkRMRU5CUVVFc1IwRkJVU3hMUVVOV09FUXNXVUZCUVN4RFFVRmhia1VzUTBGQlFTeEhRVU5pUVN4RFFVRkJMRWRCUVZWdlJTeFZRVUZCTEVOQlFWYzdVVUZEYmtJMVF5eERRVUZCTEVWQlFWTTdUVUZCUVN4SFFVTlNia0lzUTBGQlFTeExRVVZJYzBNc2NVSkJRVUVzUTBGQmMwSTdVVUZEY0VKdVFpeERRVUZCTEVWQlFWTTdUVUZCUVN4SlFVdE9ia0lzUTBGQlN6dEpRVUZCTzBsQlJWSm5SU3hEUVVGQkxFZEJRVkZETEVOQlFVRTdUVUZEV201RkxFTkJRVUVzUTBGQlQxTXNVVUZCUVN4RFFVRlRReXhQUVVGQkxFbEJRVlVzUjBGRE1VSXJRaXhEUVVGQkxFbEJRMEZ1UXl4RFFVRkJMRU5CUVVzc1owSkJRV2RDTzBsQlFVRTdTVUZGYWtJNFJDeERRVUZCTEVkQlFVOURMRU5CUVVFN1RVRkRXSEpGTEVOQlFVRXNRMEZCVDFNc1VVRkJRU3hEUVVGVFF5eFBRVUZCTEVsQlFWVXNSMEZETVVKelJDeFpRVUZCTEVOQlFXRnVSU3hEUVVGQkxFZEJRMkkyUXl4dlFrRkJRU3hEUVVGeFFqVkRMRU5CUVVFc1IwRkRja0pSTEVOQlFVRXNRMEZCU3l4bFFVRmxPMGxCUVVFN1NVRkZhRUpuUlN4RFFVRkJMRWRCUVZGRExFTkJRVU16UlN4RFFVRkJMRVZCUVZWRkxFTkJRVUU3VFVGRGRrSXNTVUZCU1VVc1EwRkJRU3hEUVVGUGFVTXNVMEZCUVN4TFFVRmpha01zUTBGQlFTeERRVUZQVXl4UlFVRkJMRU5CUVZORExFOUJRVUVzUlVGQlV6dE5RVU5zUkhORUxGbEJRVUVzUTBGQllXNUZMRU5CUVVFc1IwRkRVa1FzUTBGQlFTeExRVU5JT0VJc1EwRkJRU3hKUVVGelFqdE5RVVY0UWl4TlFVRk5lRUlzUTBGQlFTeEhRVUZWYjBRc1EwRkJRVHRSUVVOa2FFUXNRMEZCUVN4RFFVRkxMR3RDUVVORVRpeERRVUZCTEVOQlFVOVBMRTFCUVVFc1EwRkJUMFVzVVVGQlFTeERRVUZUVFN4cFFrRkJRU3hIUVVONlFtWXNRMEZCUVN4RFFVRlBhME1zVTBGQlFTeERRVUZWYzBNc1owSkJRVUVzUTBGQmFVSXNhVUpCUVdsQ2VFTXNRMEZCUVN4SlFVVnVSRXNzUTBGQlFTeEZRVU5HTzAxQlFVRTdUVUZIUml4SlFVUkJja01zUTBGQlFTeERRVUZQVXl4UlFVRkJMRU5CUVZORkxFMUJRVUVzU1VGQlV5eEhRVU55UW1Jc1EwRkJRU3hGUVUxR0xFOUJURWt5UWl4RFFVRkJMRXRCUTBaTUxFTkJRVUVzUjBGQmJVSndRaXhEUVVGQkxFTkJRVTlQTEUxQlFVRXNRMEZCVDBVc1VVRkJRU3hEUVVGVFN5eExRVUZCTEVkQlJUVkRWeXhEUVVGQkxFbEJRV1VzVVVGRFpuWkNMRU5CUVVFN1RVRkhSaXhOUVVGTlJTeERRVUZCTEVkQlFWRm5RaXhEUVVGQkxFbEJRVzlDY0VJc1EwRkJRU3hEUVVGUFR5eE5RVUZCTEVOQlFVOUZMRkZCUVVFc1EwRkJVMHNzUzBGQlFUdE5RVU42UkUwc1EwRkJRU3hIUVVGdFFtaENMRU5CUVVFc1NVRkJVeXhKUVVGSk1FSXNTVUZCUVN4SFFVRlBReXhQUVVGQkxFdEJRVmxHTEVOQlFVRXNSMEZETDBNM1FpeERRVUZCTEVOQlFVODJSQ3hMUVVGQkxFbEJRVk42UXl4RFFVRkJMRWRCUVcxQ0xFMUJRVTF3UWl4RFFVRkJMRU5CUVU5UExFMUJRVUVzUTBGQlQybEVMRWxCUVVFc1MwRkRka1J3UXl4RFFVRkJMRWRCUVcxQ0xFMUJRVWRCTEVOQlFVRXNSMEZCYlVJc1NVRkROME5zUWl4RFFVRkJMRWRCUVZNN1NVRkJRVHRKUVVWTWJVTXNRMEZCUVN4SFFVRlRiME1zUTBGQlFUdE5RVU5VZWtVc1EwRkJRU3hEUVVGUE5rUXNTMEZCUVN4SlFVRlRla01zUTBGQlFTeEhRVUZ0UWl4TlFVRk5jRUlzUTBGQlFTeERRVUZQVHl4TlFVRkJMRU5CUVU5cFJDeEpRVUZCTEVsQlFWRjRSQ3hEUVVGQkxFTkJRVTlwUXl4VFFVRkJMRXRCUVdOcVF5eERRVUZCTEVOQlFVOVRMRkZCUVVFc1EwRkJVME1zVDBGQlFTeExRVU40UjIxQ0xFTkJRVUVzUjBGQmIwSXNTVUZCU1VNc1NVRkJRU3hIUVVGUFF5eFBRVUZCTEVsQlF6TkNUQ3hEUVVGQkxFbEJRMFpCTEVOQlFVRXNTVUZCYzBJc1IwRkRkRUpsTEVOQlFVRXNRMEZCU1hKQ0xFTkJRVUVzUzBGRlNuRkNMRU5CUVVFc1NVRkZSbnBETEVOQlFVRXNRMEZCVDFNc1VVRkJRU3hEUVVGVFJTeE5RVUZCTEVsQlFWTXNSMEZEZWtKTUxFTkJRVUVzUTBGQlN5eHJRa0ZCYVVJN1NVRkJRVHRKUVVWc1FtOUZMRU5CUVVFc1IwRkJjVUpETEVOQlFVRTdUVUZEZWtJc1NVRkJTVE5GTEVOQlFVRXNRMEZCVDJsRExGTkJRVUVzUzBGQlkycERMRU5CUVVFc1EwRkJUMU1zVVVGQlFTeERRVUZUUXl4UFFVRkJMRVZCUVZNN1RVRkRiRVFzVFVGQlRXUXNRMEZCUVN4SFFVRlhMRWxCUVVGblJpeHJRa0ZCUVR0TlFVTm5RaXhoUVVFM1FtaEdMRU5CUVVFc1EwRkJVMmxHTEdWQlFVRXNTMEZEV0c1RUxFTkJRVUVzU1VGQmMwSXNSMEZEZEVJMFF5eERRVUZCTEVWQlFVMHNTMEZGZVVJc1kwRkJOMEl4UlN4RFFVRkJMRU5CUVZOcFJpeGxRVUZCTEVsQlExaDRReXhEUVVGQkxFVkJRMFk3U1VGQlFUdEpRVVZKZVVNc1EwRkJRU3hIUVVGcFFteEdMRU5CUVVFN1RVRkRReXhaUVVGc1FrRXNRMEZCUVN4RFFVRkZiVVlzVjBGQlFTeExRVU5PY2tRc1EwRkJRU3hKUVVGelFpeEhRVU4wUWpSRExFTkJRVUVzUlVGQlRTeEhRVUZMTzBsQlFVRTdTVUZGVUZVc1EwRkJRU3hIUVVGcFFuQkdMRU5CUVVFN1RVRkRReXhaUVVGc1FrRXNRMEZCUVN4RFFVRkZiVVlzVjBGQlFTeEpRVU5HTDBVc1EwRkJRU3hEUVVGUFV5eFJRVUZCTEVOQlFWTkZMRTFCUVVFc1NVRkRiRUl3UWl4RFFVRkJMRVZCUTBZN1NVRkJRVHRGUVc5Q1JtcERMRU5CUVVFc1EwRkJSeXhSUVVGUk8wbEJRMHhLTEVOQlFVRXNRMEZCVDA4c1RVRkJRU3hEUVVGUFJTeFJRVUZCTEVOQlFWTkpMRTlCUVVFc1MwRnNRblpDWWl4RFFVRkJMRU5CUVU5UExFMUJRVUVzUTBGQlQwVXNVVUZCUVN4RFFVRlRWU3hwUWtGQlFTeExRVU42UW01Q0xFTkJRVUVzUTBGQlQybEdMRVZCUVVFc1EwRkJSMVFzWjBKQlFVRXNRMEZCYVVJc1owSkJRV2RDVFN4RFFVRkJMRWRCUXpORE9VVXNRMEZCUVN4RFFVRlBhVVlzUlVGQlFTeERRVUZIVkN4blFrRkJRU3hEUVVGcFFpeG5Ra0ZCWjBKUkxFTkJRVUVzU1VGUk5VSXNTVUZCUVVvc2EwSkJRVUVzU1VGRFVrb3NaMEpCUVVFc1EwRkJhVUlzYjBKQlFXOUNSU3hEUVVGQkxFZEJWVFZETjBNc1EwRkJRU3hIUVVGdlFpeEpRVUZKUXl4SlFVRkJMRWRCUVU5RExFOUJRVUVzU1VGREwwSnRReXhEUVVGQkxFZEJRMFk3UlVGQlFTeEpRVVZHT1VRc1EwRkJRU3hEUVVGSExGZEJRVmM3U1VGdVFscEtMRU5CUVVFc1EwRkJUMmxHTEVWQlFVRXNRMEZCUnpkRExHMUNRVUZCTEVOQlFXOUNMR2RDUVVGblFqQkRMRU5CUVVFc1IwRkRPVU01UlN4RFFVRkJMRU5CUVU5cFJpeEZRVUZCTEVOQlFVYzNReXh0UWtGQlFTeERRVUZ2UWl4blFrRkJaMEkwUXl4RFFVRkJMRWRCVHpkQ0xFbEJRVUZLTEd0Q1FVRkJMRWxCUTFKNFF5eHRRa0ZCUVN4RFFVRnZRaXh2UWtGQmIwSnpReXhEUVVGQkxFZEJZVGRETVVVc1EwRkJRU3hEUVVGUFV5eFJRVUZCTEVOQlFWTkRMRTlCUVVFc1NVRkRiRUl3UkN4RFFVRkJMRVZCUTBZN1JVRkJRU3hKUVVWR2FFVXNRMEZCUVN4RFFVRkhMSGxDUVVGNVFpeERRVUZEVWl4RFFVRkJMRVZCUVVsRExFTkJRVUVzUlVGQlQwTXNRMEZCUVR0SlFVRkJMRU5CUTJ4RFJTeERRVUZCTEVOQlFVOXBReXhUUVVGQkxFbEJRV05xUXl4RFFVRkJMRU5CUVU5VExGRkJRVUVzUTBGQlUwTXNUMEZCUVN4TFFVTnlRMW9zUTBGQlFTeExRVUZoUlN4RFFVRkJMRU5CUVU5UExFMUJRVUVzUTBGQlQwVXNVVUZCUVN4RFFVRlRUeXh2UWtGQlFTeEhRVU4wUTNORUxFTkJRVUVzUlVGQlRTeEpRVUZOTEV0QlJWcEdMRU5CUVVFc1IwRkRSanRGUVVGQkxFbEJSVVpvUlN4RFFVRkJMRU5CUVVjc2JVSkJRVzFDTzBsQlFVRXNRMEZEYUVKS0xFTkJRVUVzUTBGQlQybERMRk5CUVVFc1NVRkJZMnBETEVOQlFVRXNRMEZCVDFNc1VVRkJRU3hEUVVGVFF5eFBRVUZCTEV0QlEzSkRWaXhEUVVGQkxFTkJRVTlQTEUxQlFVRXNRMEZCVDBVc1VVRkJRU3hEUVVGVFR5eHZRa0ZCUVN4SFFVTjZRbTlFTEVOQlFVRXNUVUZIUmpsRExFTkJRVUVzU1VGQldTeEhRVU5hUXl4RFFVRkJMRWxCUVdkQ0xFZEJRMmhDUnl4RFFVRkJMRWxCUVhOQ0xFZEJRM1JDUml4RFFVRkJMRWRCUVc5Q2VVTXNWVUZCUVN4RFFVRlhPMDFCUXpkQ2RrTXNRMEZCUVN4SlFVRnpRaXhIUVVOMFFrZ3NRMEZCUVN4SlFVRm5RaXhIUVVOb1FpdERMRU5CUVVFc1JVRkJUU3hGUVVGTE8wbEJRVUVzUjBGRFZpeE5RVUZKTzBWQlFVRXNTVUZGVkd4RkxFTkJRVUVzUTBGQlJ5eFpRVUZaTzBsQlEySXNTMEZCU1Vvc1EwRkJRU3hEUVVGUGFVTXNVMEZCUVN4SlFVRmpha01zUTBGQlFTeERRVUZQVXl4UlFVRkJMRU5CUVZORExFOUJRVUVzU1VGQldWa3NRMEZCUVN4RlFVRnlSRHROUVVkQkxFbEJSa0V3UXl4WlFVRkJMRU5CUVdGNFF5eERRVUZCTEVkQlEySjNReXhaUVVGQkxFTkJRV0Z1UlN4RFFVRkJMRWRCUTFSSExFTkJRVUVzUTBGQlQwOHNUVUZCUVN4RFFVRlBSU3hSUVVGQkxFTkJRVk5QTEc5Q1FVRkJMRVZCUjNwQ0xFOUJSa0ZQTEVOQlFVRXNTVUZCWjBJc1UwRkRhRUpFTEVOQlFVRXNTVUZCV1R0TlFVZFdReXhEUVVGQkxFbEJRV2xDZGtJc1EwRkJRU3hEUVVGUFR5eE5RVUZCTEVOQlFVOTNSQ3hQUVVGQkxFbEJRVk14UWl4RFFVRkJMRWxCUXpWRFpDeERRVUZCTEVsQlFXZENMRWRCUTJoQ1JDeERRVUZCTEVsQlFWa3NRMEZXTUVRN1NVRkJRVHRGUVZWeVJDeEpRVVZ1UW14Q0xFTkJRVUVzUTBGQlJ5eGxRVUZsTzBsQlFVRXNRMEZEV2tvc1EwRkJRU3hEUVVGUGFVTXNVMEZCUVN4SlFVRmpha01zUTBGQlFTeERRVUZQVXl4UlFVRkJMRU5CUVZORExFOUJRVUVzUzBGRGVrTmxMRU5CUVVFc1NVRkJaU3hGUVVGSk8wVkJRVUVzU1VGRmNrSjVSQ3hOUVVGQkxFTkJRVTlETEUxQlFVRXNRMEZCVDI1R0xFTkJRVUVzUTBGQlQxTXNVVUZCUVN4RlFVRlZPMGxCUXpkQ01FUXNTMEZCUVN4RlFVRkJSQ3hEUVVGQk8wbEJRMEZITEVsQlFVRXNSVUZCUVVRc1EwRkJRVHRKUVVOQlJ5eExRVUZCTEVWQlFVRkVMRU5CUVVFN1NVRkRRVWNzVFVGQlFTeEZRVUZCY0VNN1JVRkJRU3hGUVVWS08wRkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ29udHJvbGxlcjtcbnZhciBfdXRpbHNNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL3V0aWxzLm1pbi5tanNcIik7XG5mdW5jdGlvbiBDb250cm9sbGVyKHQpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IGUsXG4gICAgZXh0ZW5kUGFyYW1zOiBuLFxuICAgIG9uOiByXG4gIH0gPSB0O1xuICBmdW5jdGlvbiBvKHQsIGUpIHtcbiAgICBjb25zdCBuID0gZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHQsIGUsIG47XG4gICAgICByZXR1cm4gKHIsIG8pID0+IHtcbiAgICAgICAgZm9yIChlID0gLTEsIHQgPSByLmxlbmd0aDsgdCAtIGUgPiAxOykgbiA9IHQgKyBlID4+IDEsIHJbbl0gPD0gbyA/IGUgPSBuIDogdCA9IG47XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgbGV0IHIsIG87XG4gICAgcmV0dXJuIHRoaXMueCA9IHQsIHRoaXMueSA9IGUsIHRoaXMubGFzdEluZGV4ID0gdC5sZW5ndGggLSAxLCB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0ID8gKG8gPSBuKHRoaXMueCwgdCksIHIgPSBvIC0gMSwgKHQgLSB0aGlzLnhbcl0pICogKHRoaXMueVtvXSAtIHRoaXMueVtyXSkgLyAodGhpcy54W29dIC0gdGhpcy54W3JdKSArIHRoaXMueVtyXSkgOiAwO1xuICAgIH0sIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gbCgpIHtcbiAgICBlLmNvbnRyb2xsZXIuY29udHJvbCAmJiBlLmNvbnRyb2xsZXIuc3BsaW5lICYmIChlLmNvbnRyb2xsZXIuc3BsaW5lID0gdm9pZCAwLCBkZWxldGUgZS5jb250cm9sbGVyLnNwbGluZSk7XG4gIH1cbiAgbih7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdm9pZCAwLFxuICAgICAgaW52ZXJzZTogITEsXG4gICAgICBieTogXCJzbGlkZVwiXG4gICAgfVxuICB9KSwgZS5jb250cm9sbGVyID0ge1xuICAgIGNvbnRyb2w6IHZvaWQgMFxuICB9LCByKFwiYmVmb3JlSW5pdFwiLCAoKSA9PiB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5wYXJhbXMuY29udHJvbGxlci5jb250cm9sIHx8IGUucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgY29uc3QgdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZS5wYXJhbXMuY29udHJvbGxlci5jb250cm9sKTtcbiAgICAgIGlmICh0ICYmIHQuc3dpcGVyKSBlLmNvbnRyb2xsZXIuY29udHJvbCA9IHQuc3dpcGVyO2Vsc2UgaWYgKHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHIgPT4ge1xuICAgICAgICAgIGUuY29udHJvbGxlci5jb250cm9sID0gci5kZXRhaWxbMF0sIGUudXBkYXRlKCksIHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImluaXRcIiwgbik7XG4gICAgICAgIH07XG4gICAgICAgIHQuYWRkRXZlbnRMaXN0ZW5lcihcImluaXRcIiwgbik7XG4gICAgICB9XG4gICAgfSBlbHNlIGUuY29udHJvbGxlci5jb250cm9sID0gZS5wYXJhbXMuY29udHJvbGxlci5jb250cm9sO1xuICB9KSwgcihcInVwZGF0ZVwiLCAoKSA9PiB7XG4gICAgbCgpO1xuICB9KSwgcihcInJlc2l6ZVwiLCAoKSA9PiB7XG4gICAgbCgpO1xuICB9KSwgcihcIm9ic2VydmVyVXBkYXRlXCIsICgpID0+IHtcbiAgICBsKCk7XG4gIH0pLCByKFwic2V0VHJhbnNsYXRlXCIsICh0LCBuLCByKSA9PiB7XG4gICAgZS5jb250cm9sbGVyLmNvbnRyb2wgJiYgIWUuY29udHJvbGxlci5jb250cm9sLmRlc3Ryb3llZCAmJiBlLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKG4sIHIpO1xuICB9KSwgcihcInNldFRyYW5zaXRpb25cIiwgKHQsIG4sIHIpID0+IHtcbiAgICBlLmNvbnRyb2xsZXIuY29udHJvbCAmJiAhZS5jb250cm9sbGVyLmNvbnRyb2wuZGVzdHJveWVkICYmIGUuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKG4sIHIpO1xuICB9KSwgT2JqZWN0LmFzc2lnbihlLmNvbnRyb2xsZXIsIHtcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgICBjb25zdCByID0gZS5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgICBsZXQgbCwgcztcbiAgICAgIGNvbnN0IGkgPSBlLmNvbnN0cnVjdG9yO1xuICAgICAgZnVuY3Rpb24gYSh0KSB7XG4gICAgICAgIGlmICh0LmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBuID0gZS5ydGxUcmFuc2xhdGUgPyAtZS50cmFuc2xhdGUgOiBlLnRyYW5zbGF0ZTtcbiAgICAgICAgXCJzbGlkZVwiID09PSBlLnBhcmFtcy5jb250cm9sbGVyLmJ5ICYmICghZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBlLmNvbnRyb2xsZXIuc3BsaW5lID0gZS5wYXJhbXMubG9vcCA/IG5ldyBvKGUuc2xpZGVzR3JpZCwgdC5zbGlkZXNHcmlkKSA6IG5ldyBvKGUuc25hcEdyaWQsIHQuc25hcEdyaWQpO1xuICAgICAgICB9KHQpLCBzID0gLWUuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLW4pKSwgcyAmJiBcImNvbnRhaW5lclwiICE9PSBlLnBhcmFtcy5jb250cm9sbGVyLmJ5IHx8IChsID0gKHQubWF4VHJhbnNsYXRlKCkgLSB0Lm1pblRyYW5zbGF0ZSgpKSAvIChlLm1heFRyYW5zbGF0ZSgpIC0gZS5taW5UcmFuc2xhdGUoKSksICFOdW1iZXIuaXNOYU4obCkgJiYgTnVtYmVyLmlzRmluaXRlKGwpIHx8IChsID0gMSksIHMgPSAobiAtIGUubWluVHJhbnNsYXRlKCkpICogbCArIHQubWluVHJhbnNsYXRlKCkpLCBlLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UgJiYgKHMgPSB0Lm1heFRyYW5zbGF0ZSgpIC0gcyksIHQudXBkYXRlUHJvZ3Jlc3MocyksIHQuc2V0VHJhbnNsYXRlKHMsIGUpLCB0LnVwZGF0ZUFjdGl2ZUluZGV4KCksIHQudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocikpIGZvciAobGV0IHQgPSAwOyB0IDwgci5sZW5ndGg7IHQgKz0gMSkgclt0XSAhPT0gbiAmJiByW3RdIGluc3RhbmNlb2YgaSAmJiBhKHJbdF0pO2Vsc2UgciBpbnN0YW5jZW9mIGkgJiYgbiAhPT0gciAmJiBhKHIpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgIGNvbnN0IHIgPSBlLmNvbnN0cnVjdG9yLFxuICAgICAgICBvID0gZS5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgICBsZXQgbDtcbiAgICAgIGZ1bmN0aW9uIHMobikge1xuICAgICAgICBuLmRlc3Ryb3llZCB8fCAobi5zZXRUcmFuc2l0aW9uKHQsIGUpLCAwICE9PSB0ICYmIChuLnRyYW5zaXRpb25TdGFydCgpLCBuLnBhcmFtcy5hdXRvSGVpZ2h0ICYmICgwLCBfdXRpbHNNaW4ubikoKCkgPT4ge1xuICAgICAgICAgIG4udXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICB9KSwgKDAsIF91dGlsc01pbi5pKShuLndyYXBwZXJFbCwgKCkgPT4ge1xuICAgICAgICAgIG8gJiYgbi50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgIH0pKSk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvKSkgZm9yIChsID0gMDsgbCA8IG8ubGVuZ3RoOyBsICs9IDEpIG9bbF0gIT09IG4gJiYgb1tsXSBpbnN0YW5jZW9mIHIgJiYgcyhvW2xdKTtlbHNlIG8gaW5zdGFuY2VvZiByICYmIG4gIT09IG8gJiYgcyhvKTtcbiAgICB9XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpEYjI1MGNtOXNiR1Z5SWl3aWRDSXNJbk4zYVhCbGNpSXNJbVVpTENKbGVIUmxibVJRWVhKaGJYTWlMQ0p1SWl3aWIyNGlMQ0p5SWl3aWJ5SXNJbXhsYm1kMGFDSXNJbmdpTENKNUlpd2liR0Z6ZEVsdVpHVjRJaXdpYVc1MFpYSndiMnhoZEdVaUxDSnNJaXdpWTI5dWRISnZiR3hsY2lJc0ltTnZiblJ5YjJ3aUxDSnpjR3hwYm1VaUxDSnBiblpsY25ObElpd2lZbmtpTENKM2FXNWtiM2NpTENKd1lYSmhiWE1pTENKSVZFMU1SV3hsYldWdWRDSXNJbVJ2WTNWdFpXNTBJaXdpY1hWbGNubFRaV3hsWTNSdmNpSXNJbVJsZEdGcGJDSXNJblZ3WkdGMFpTSXNJbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElpTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aVpHVnpkSEp2ZVdWa0lpd2ljMlYwVkhKaGJuTnNZWFJsSWl3aWMyVjBWSEpoYm5OcGRHbHZiaUlzSWs5aWFtVmpkQ0lzSW1GemMybG5iaUlzSW5NaUxDSnBJaXdpWTI5dWMzUnlkV04wYjNJaUxDSmhJaXdpY25Sc1ZISmhibk5zWVhSbElpd2lkSEpoYm5Oc1lYUmxJaXdpYkc5dmNDSXNJbk5zYVdSbGMwZHlhV1FpTENKemJtRndSM0pwWkNJc0ltMWhlRlJ5WVc1emJHRjBaU0lzSW0xcGJsUnlZVzV6YkdGMFpTSXNJazUxYldKbGNpSXNJbWx6VG1GT0lpd2lhWE5HYVc1cGRHVWlMQ0oxY0dSaGRHVlFjbTluY21WemN5SXNJblZ3WkdGMFpVRmpkR2wyWlVsdVpHVjRJaXdpZFhCa1lYUmxVMnhwWkdWelEyeGhjM05sY3lJc0lrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0luUnlZVzV6YVhScGIyNVRkR0Z5ZENJc0ltRjFkRzlJWldsbmFIUWlMQ0p1WlhoMFZHbGpheUlzSW5Wd1pHRjBaVUYxZEc5SVpXbG5hSFFpTENKbGJHVnRaVzUwVkhKaGJuTnBkR2x2YmtWdVpDSXNJbmR5WVhCd1pYSkZiQ0lzSW5SeVlXNXphWFJwYjI1RmJtUWlYU3dpYzI5MWNtTmxjeUk2V3lJd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJiblZzYkYwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJSMEVzVTBGQlUwRXNWMEZCVjBNc1EwRkJRVHRGUVVOc1FqdEpRVUZKUXl4TlFVRkJMRVZCUTBaRExFTkJRVUU3U1VGQlRVTXNXVUZCUVN4RlFVTk9ReXhEUVVGQk8wbEJRVmxETEVWQlFVRXNSVUZEV2tNN1JVRkJRU3hKUVVORlRpeERRVUZCTzBWQldVb3NVMEZCVTA4c1JVRkJZVkFzUTBGQlFTeEZRVUZIUlN4RFFVRkJPMGxCUTNaQ0xFMUJRVTFGTEVOQlFVRXNSMEZCWlR0TlFVTnVRaXhKUVVGSlNpeERRVUZCTEVWQlEwRkZMRU5CUVVFc1JVRkRRVVVzUTBGQlFUdE5RVU5LTEU5QlFVOHNRMEZCUTBVc1EwRkJRU3hGUVVGUFF5eERRVUZCTzFGQlIySXNTMEZHUVV3c1EwRkJRU3hKUVVGWkxFZEJRMXBHTEVOQlFVRXNSMEZCVjAwc1EwRkJRU3hEUVVGTlJTeE5RVUZCTEVWQlExWlNMRU5CUVVFc1IwRkJWMFVzUTBGQlFTeEhRVUZYTEVsQlF6TkNSU3hEUVVGQkxFZEJRVkZLTEVOQlFVRXNSMEZCVjBVc1EwRkJRU3hKUVVGWkxFZEJRek5DU1N4RFFVRkJMRU5CUVUxR0xFTkJRVUVzUzBGQlZVY3NRMEZCUVN4SFFVTnNRa3dzUTBGQlFTeEhRVUZYUlN4RFFVRkJMRWRCUlZoS0xFTkJRVUVzUjBGQlYwa3NRMEZCUVR0UlFVZG1MRTlCUVU5S0xFTkJRVkU3VFVGQlFTeERRVVZ1UWp0SlFVRkJMRU5CYWtKeFFqdEpRWGRDY2tJc1NVRkJTVTBzUTBGQlFTeEZRVU5CUXl4RFFVRkJPMGxCV1Vvc1QwRnVRa0VzUzBGQlMwVXNRMEZCUVN4SFFVRkpWQ3hEUVVGQkxFVkJRMVFzUzBGQlMxVXNRMEZCUVN4SFFVRkpVaXhEUVVGQkxFVkJRMVFzUzBGQlMxTXNVMEZCUVN4SFFVRlpXQ3hEUVVGQkxFTkJRVVZSTEUxQlFVRXNSMEZCVXl4SFFVMDFRaXhMUVVGTFNTeFhRVUZCTEVkQlFXTXNWVUZCY1VKYUxFTkJRVUU3VFVGRGRFTXNUMEZCUzBFc1EwRkJRU3hKUVVkTVR5eERRVUZCTEVkQlFVdElMRU5CUVVFc1EwRkJZU3hMUVVGTFN5eERRVUZCTEVWQlFVZFVMRU5CUVVFc1IwRkRNVUpOTEVOQlFVRXNSMEZCUzBNc1EwRkJRU3hIUVVGTExFbEJTVVpRTEVOQlFVRXNSMEZCU3l4TFFVRkxVeXhEUVVGQkxFTkJRVVZJTEVOQlFVRXNUVUZCVVN4TFFVRkxTU3hEUVVGQkxFTkJRVVZJTEVOQlFVRXNTVUZCVFN4TFFVRkxSeXhEUVVGQkxFTkJRVVZLTEVOQlFVRXNUVUZCVVN4TFFVRkxSeXhEUVVGQkxFTkJRVVZHTEVOQlFVRXNTVUZCVFN4TFFVRkxSU3hEUVVGQkxFTkJRVVZJTEVOQlFVRXNTMEZCVHl4TFFVRkxTU3hEUVVGQkxFTkJRVVZLTEVOQlFVRXNTMEZTTVVVc1EwRlRiRUk3U1VGQlFTeEhRVU5QTEVsQlExUTdSVUZCUVR0RlFUaEZRU3hUUVVGVFR5eEZRVUZCTzBsQlEwWllMRU5CUVVFc1EwRkJUMWtzVlVGQlFTeERRVUZYUXl4UFFVRkJMRWxCUTI1Q1lpeERRVUZCTEVOQlFVOVpMRlZCUVVFc1EwRkJWMFVzVFVGQlFTeExRVU53UW1Rc1EwRkJRU3hEUVVGUFdTeFZRVUZCTEVOQlFWZEZMRTFCUVVFc1VVRkJVeXhWUVVOd1FtUXNRMEZCUVN4RFFVRlBXU3hWUVVGQkxFTkJRVmRGTEUxQlFVRXNRMEZGTjBJN1JVRkJRVHRGUVhSSlFWb3NRMEZCUVN4RFFVRmhPMGxCUTFoVkxGVkJRVUVzUlVGQldUdE5RVU5XUXl4UFFVRkJMRTlCUVZNN1RVRkRWRVVzVDBGQlFTeEhRVUZUTzAxQlExUkRMRVZCUVVFc1JVRkJTVHRKUVVGQk8wVkJRVUVzU1VGSlVtaENMRU5CUVVFc1EwRkJUMWtzVlVGQlFTeEhRVUZoTzBsQlEyeENReXhQUVVGQkxFOUJRVk03UlVGQlFTeEhRVGhJV0ZRc1EwRkJRU3hEUVVGSExHTkJRV003U1VGRFppeEpRVUZ6UWl4elFrRkJXR0VzVFVGQlFTeExRVVZwUXl4dFFrRkJja05xUWl4RFFVRkJMRU5CUVU5clFpeE5RVUZCTEVOQlFVOU9MRlZCUVVFc1EwRkJWME1zVDBGQlFTeEpRVUYzUW1Jc1EwRkJRU3hEUVVGUGEwSXNUVUZCUVN4RFFVRlBUaXhWUVVGQkxFTkJRVmRETEU5QlFVRXNXVUZCYlVKTkxGZEJRVUVzUjBGR2NFYzdUVUZIUlN4TlFVRk5ja0lzUTBGQlFTeEhRVUZwUW5OQ0xGRkJRVUVzUTBGQlUwTXNZVUZCUVN4RFFVRmpja0lzUTBGQlFTeERRVUZQYTBJc1RVRkJRU3hEUVVGUFRpeFZRVUZCTEVOQlFWZERMRTlCUVVFN1RVRkRka1VzU1VGQlNXWXNRMEZCUVN4SlFVRnJRa0VzUTBGQlFTeERRVUZsUXl4TlFVRkJMRVZCUTI1RFF5eERRVUZCTEVOQlFVOVpMRlZCUVVFc1EwRkJWME1zVDBGQlFTeEhRVUZWWml4RFFVRkJMRU5CUVdWRExFMUJRVUVzVFVGRGRFTXNTVUZCU1VRc1EwRkJRU3hGUVVGblFqdFJRVU42UWl4TlFVRk5TU3hEUVVGQkxFZEJRWEZDUlN4RFFVRkJPMVZCUTNwQ1NpeERRVUZCTEVOQlFVOVpMRlZCUVVFc1EwRkJWME1zVDBGQlFTeEhRVUZWVkN4RFFVRkJMRU5CUVVWclFpeE5RVUZCTEVOQlFVOHNTVUZEY2tOMFFpeERRVUZCTEVOQlFVOTFRaXhOUVVGQkxFbEJRMUI2UWl4RFFVRkJMRU5CUVdVd1FpeHRRa0ZCUVN4RFFVRnZRaXhSUVVGUmRFSXNRMEZCUVN4RFFVRnRRanRSUVVGQk8xRkJSV2hGU2l4RFFVRkJMRU5CUVdVeVFpeG5Ra0ZCUVN4RFFVRnBRaXhSUVVGUmRrSXNRMEZCUVN4RFFVTXhRenROUVVGQk8wbEJSVVlzVDBGRFFVWXNRMEZCUVN4RFFVRlBXU3hWUVVGQkxFTkJRVmRETEU5QlFVRXNSMEZCVldJc1EwRkJRU3hEUVVGUGEwSXNUVUZCUVN4RFFVRlBUaXhWUVVGQkxFTkJRVmRETEU5QlFVODdSVUZCUVN4SlFVVTVSRlFzUTBGQlFTeERRVUZITEZWQlFWVTdTVUZEV0U4c1EwRkJRU3hGUVVGak8wVkJRVUVzU1VGRmFFSlFMRU5CUVVFc1EwRkJSeXhWUVVGVk8wbEJRMWhQTEVOQlFVRXNSVUZCWXp0RlFVRkJMRWxCUldoQ1VDeERRVUZCTEVOQlFVY3NhMEpCUVd0Q08wbEJRMjVDVHl4RFFVRkJMRVZCUVdNN1JVRkJRU3hKUVVWb1FsQXNRMEZCUVN4RFFVRkhMR2RDUVVGblFpeERRVUZEVGl4RFFVRkJMRVZCUVVsSkxFTkJRVUVzUlVGQlYwVXNRMEZCUVR0SlFVTTFRa29zUTBGQlFTeERRVUZQV1N4VlFVRkJMRU5CUVZkRExFOUJRVUVzUzBGQlYySXNRMEZCUVN4RFFVRlBXU3hWUVVGQkxFTkJRVmRETEU5QlFVRXNRMEZCVVdFc1UwRkJRU3hKUVVNMVJERkNMRU5CUVVFc1EwRkJUMWtzVlVGQlFTeERRVUZYWlN4WlFVRkJMRU5CUVdGNlFpeERRVUZCTEVWQlFWZEZMRU5CUVVFc1EwRkJZVHRGUVVGQkxFbEJSWHBFUVN4RFFVRkJMRU5CUVVjc2FVSkJRV2xDTEVOQlFVTk9MRU5CUVVFc1JVRkJTVWtzUTBGQlFTeEZRVUZWUlN4RFFVRkJPMGxCUXpWQ1NpeERRVUZCTEVOQlFVOVpMRlZCUVVFc1EwRkJWME1zVDBGQlFTeExRVUZYWWl4RFFVRkJMRU5CUVU5WkxGVkJRVUVzUTBGQlYwTXNUMEZCUVN4RFFVRlJZU3hUUVVGQkxFbEJRelZFTVVJc1EwRkJRU3hEUVVGUFdTeFZRVUZCTEVOQlFWZG5RaXhoUVVGQkxFTkJRV014UWl4RFFVRkJMRVZCUVZWRkxFTkJRVUVzUTBGQllUdEZRVUZCTEVsQlJYcEVlVUlzVFVGQlFTeERRVUZQUXl4TlFVRkJMRU5CUVU4NVFpeERRVUZCTEVOQlFVOVpMRlZCUVVFc1JVRkJXVHRKUVVNdlFtVXNXVUZCUVN4RlFYUklSaXhUUVVGQlFTeERRVUZ6UWpkQ0xFTkJRVUVzUlVGQlNVa3NRMEZCUVR0TlFVTjRRaXhOUVVGTlJTeERRVUZCTEVkQlFXRktMRU5CUVVFc1EwRkJUMWtzVlVGQlFTeERRVUZYUXl4UFFVRkJPMDFCUTNKRExFbEJRVWxHTEVOQlFVRXNSVUZEUVc5Q0xFTkJRVUU3VFVGRFNpeE5RVUZOUXl4RFFVRkJMRWRCUVZOb1F5eERRVUZCTEVOQlFVOXBReXhYUVVGQk8wMUJRM1JDTEZOQlFWTkRMRVZCUVhWQ2NFTXNRMEZCUVR0UlFVTTVRaXhKUVVGSlFTeERRVUZCTEVOQlFVVTBRaXhUUVVGQkxFVkJRVmM3VVVGTmFrSXNUVUZCVFhoQ0xFTkJRVUVzUjBGQldVWXNRMEZCUVN4RFFVRlBiVU1zV1VGQlFTeEpRVUZuUW01RExFTkJRVUVzUTBGQlQyOURMRk5CUVVFc1IwRkJXWEJETEVOQlFVRXNRMEZCVDI5RExGTkJRVUU3VVVGREwwSXNXVUZCYUVOd1F5eERRVUZCTEVOQlFVOXJRaXhOUVVGQkxFTkJRVTlPTEZWQlFVRXNRMEZCVjBrc1JVRkJRU3hOUVdoQ2FrTXNWVUZCWjBOc1FpeERRVUZCTzFWQlF6bENSU3hEUVVGQkxFTkJRVTlaTEZWQlFVRXNRMEZCVjBVc1RVRkJRU3hIUVVGVFpDeERRVUZCTEVOQlFVOXJRaXhOUVVGQkxFTkJRVTl0UWl4SlFVRkJMRWRCUVU4c1NVRkJTV2hETEVOQlFVRXNRMEZCWVV3c1EwRkJRU3hEUVVGUGMwTXNWVUZCUVN4RlFVRlplRU1zUTBGQlFTeERRVUZGZDBNc1ZVRkJRU3hKUVVGakxFbEJRVWxxUXl4RFFVRkJMRU5CUVdGTUxFTkJRVUVzUTBGQlQzVkRMRkZCUVVFc1JVRkJWWHBETEVOQlFVRXNRMEZCUlhsRExGRkJRVUVzUTBGRE1VazdVVUZCUVN4RFFXVk5MRU5CUVhWQ2VrTXNRMEZCUVN4SFFVZDJRbWxETEVOQlFVRXNTVUZCZFVJdlFpeERRVUZCTEVOQlFVOVpMRlZCUVVFc1EwRkJWMFVzVFVGQlFTeERRVUZQU2l4WFFVRkJMRVZCUVdGU0xFTkJRVUVzU1VGRk1VUTJRaXhEUVVGQkxFbEJRWFZFTEdkQ1FVRm9ReTlDTEVOQlFVRXNRMEZCVDJ0Q0xFMUJRVUVzUTBGQlQwNHNWVUZCUVN4RFFVRlhTU3hGUVVGQkxFdEJRMjVFVEN4RFFVRkJMRWxCUVdOaUxFTkJRVUVzUTBGQlJUQkRMRmxCUVVFc1MwRkJhVUl4UXl4RFFVRkJMRU5CUVVVeVF5eFpRVUZCTEU5QlFXMUNla01zUTBGQlFTeERRVUZQZDBNc1dVRkJRU3hMUVVGcFFuaERMRU5CUVVFc1EwRkJUM2xETEZsQlFVRXNUVUZEYWtaRExFMUJRVUVzUTBGQlQwTXNTMEZCUVN4RFFVRk5hRU1zUTBGQlFTeExRVUZuUWl0Q0xFMUJRVUVzUTBGQlQwVXNVVUZCUVN4RFFVRlRha01zUTBGQlFTeE5RVU12UTBFc1EwRkJRU3hIUVVGaExFbEJSV1p2UWl4RFFVRkJMRWxCUVhWQ04wSXNRMEZCUVN4SFFVRlpSaXhEUVVGQkxFTkJRVTk1UXl4WlFVRkJMRTFCUVd0Q09VSXNRMEZCUVN4SFFVRmhZaXhEUVVGQkxFTkJRVVV5UXl4WlFVRkJMRXRCUlhwRmVrTXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQVGl4VlFVRkJMRU5CUVZkSExFOUJRVUVzUzBGRE0wSm5RaXhEUVVGQkxFZEJRWE5DYWtNc1EwRkJRU3hEUVVGRk1FTXNXVUZCUVN4TFFVRnBRbFFzUTBGQlFTeEhRVVV6UTJwRExFTkJRVUVzUTBGQlJTdERMR05CUVVFc1EwRkJaV1FzUTBGQlFTeEhRVU5xUW1wRExFTkJRVUVzUTBGQlJUWkNMRmxCUVVFc1EwRkJZVWtzUTBGQlFTeEZRVUZ4UWk5Q0xFTkJRVUVzUjBGRGNFTkdMRU5CUVVFc1EwRkJSV2RFTEdsQ1FVRkJMRWxCUTBab1JDeERRVUZCTEVOQlFVVnBSQ3h0UWtGQlFTeEZRVU5LTzAxQlFVRTdUVUZEUVN4SlFVRkpReXhMUVVGQkxFTkJRVTFETEU5QlFVRXNRMEZCVVRkRExFTkJRVUVzUjBGRGFFSXNTMEZCU3l4SlFVRkpUaXhEUVVGQkxFZEJRVWtzUjBGQlIwRXNRMEZCUVN4SFFVRkpUU3hEUVVGQkxFTkJRVmRGTEUxQlFVRXNSVUZCVVZJc1EwRkJRU3hKUVVGTExFZEJRM1JEVFN4RFFVRkJMRU5CUVZkT0xFTkJRVUVzVFVGQlQwa3NRMEZCUVN4SlFVRm5Ra1VzUTBGQlFTeERRVUZYVGl4RFFVRkJMR0ZCUVdOclF5eERRVUZCTEVsQlF6ZEVSU3hEUVVGQkxFTkJRWFZDT1VJc1EwRkJRU3hEUVVGWFRpeERRVUZCTEZGQlJ6ZENUU3hEUVVGQkxGbEJRWE5DTkVJc1EwRkJRU3hKUVVGVk9VSXNRMEZCUVN4TFFVRnBRa1VzUTBGQlFTeEpRVU14UkRoQ0xFTkJRVUVzUTBGQmRVSTVRaXhEUVVGQkxFTkJSVE5DTzBsQlFVRTdTVUUwUlVWM1FpeGhRVUZCTEVWQk0wVkdMRk5CUVVGQkxFTkJRWFZDT1VJc1EwRkJRU3hGUVVGVlNTeERRVUZCTzAxQlF5OUNMRTFCUVUxRkxFTkJRVUVzUjBGQlUwb3NRMEZCUVN4RFFVRlBhVU1zVjBGQlFUdFJRVU5vUWpWQ0xFTkJRVUVzUjBGQllVd3NRMEZCUVN4RFFVRlBXU3hWUVVGQkxFTkJRVmRETEU5QlFVRTdUVUZEY2tNc1NVRkJTVVlzUTBGQlFUdE5RVU5LTEZOQlFWTnZRaXhGUVVGM1FqZENMRU5CUVVFN1VVRkRNMEpCTEVOQlFVRXNRMEZCUlhkQ0xGTkJRVUVzUzBGRFRuaENMRU5CUVVFc1EwRkJSVEJDTEdGQlFVRXNRMEZCWXpsQ0xFTkJRVUVzUlVGQlZVVXNRMEZCUVN4SFFVTlVMRTFCUVdKR0xFTkJRVUVzUzBGRFJra3NRMEZCUVN4RFFVRkZaMFFzWlVGQlFTeEpRVU5GYUVRc1EwRkJRU3hEUVVGRlowSXNUVUZCUVN4RFFVRlBhVU1zVlVGQlFTeEpRVU5ZTEVsQlFVRkRMRmRCUVVFc1JVRkJVenRWUVVOUWJFUXNRMEZCUVN4RFFVRkZiVVFzWjBKQlFVRXNSVUZCYTBJN1VVRkJRU3hKUVVkNFFpeEpRVUZCUXl4WFFVRkJMRVZCUVhGQ2NFUXNRMEZCUVN4RFFVRkZjVVFzVTBGQlFTeEZRVUZYTzFWQlF6TkNiRVFzUTBGQlFTeEpRVU5NU0N4RFFVRkJMRU5CUVVWelJDeGhRVUZCTEVWQlFXVTdVVUZCUVN4SlFVZDJRanROUVVGQk8wMUJRMEVzU1VGQlNWSXNTMEZCUVN4RFFVRk5ReXhQUVVGQkxFTkJRVkUxUXl4RFFVRkJMRWRCUTJoQ0xFdEJRVXROTEVOQlFVRXNSMEZCU1N4SFFVRkhRU3hEUVVGQkxFZEJRVWxPTEVOQlFVRXNRMEZCVjBNc1RVRkJRU3hGUVVGUlN5eERRVUZCTEVsQlFVc3NSMEZEYkVOT0xFTkJRVUVzUTBGQlYwMHNRMEZCUVN4TlFVRlBWQ3hEUVVGQkxFbEJRV2RDUnl4RFFVRkJMRU5CUVZkTkxFTkJRVUVzWVVGQlkxQXNRMEZCUVN4SlFVTTNSREpDTEVOQlFVRXNRMEZCZDBJeFFpeERRVUZCTEVOQlFWZE5MRU5CUVVFc1VVRkhPVUpPTEVOQlFVRXNXVUZCYzBKRUxFTkJRVUVzU1VGQlZVWXNRMEZCUVN4TFFVRnBRa2NzUTBGQlFTeEpRVU14UkRCQ0xFTkJRVUVzUTBGQmQwSXhRaXhEUVVGQkxFTkJSVFZDTzBsQlFVRTdSVUZCUVN4RlFXZEVSanRCUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEVmZmVjdENhcmRzO1xudmFyIF9jcmVhdGVTaGFkb3dNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cubWluLm1qc1wiKTtcbnZhciBfZWZmZWN0SW5pdE1pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvZWZmZWN0LWluaXQubWluLm1qc1wiKTtcbnZhciBfZWZmZWN0VGFyZ2V0TWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0Lm1pbi5tanNcIik7XG52YXIgX2VmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5taW4ubWpzXCIpO1xudmFyIF91dGlsc01pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvdXRpbHMubWluLm1qc1wiKTtcbmZ1bmN0aW9uIEVmZmVjdENhcmRzKGUpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IHQsXG4gICAgZXh0ZW5kUGFyYW1zOiBhLFxuICAgIG9uOiBzXG4gIH0gPSBlO1xuICBhKHtcbiAgICBjYXJkc0VmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiAhMCxcbiAgICAgIHJvdGF0ZTogITAsXG4gICAgICBwZXJTbGlkZVJvdGF0ZTogMixcbiAgICAgIHBlclNsaWRlT2Zmc2V0OiA4XG4gICAgfVxuICB9KTtcbiAgKDAsIF9lZmZlY3RJbml0TWluLmUpKHtcbiAgICBlZmZlY3Q6IFwiY2FyZHNcIixcbiAgICBzd2lwZXI6IHQsXG4gICAgb246IHMsXG4gICAgc2V0VHJhbnNsYXRlOiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgc2xpZGVzOiBlLFxuICAgICAgICAgIGFjdGl2ZUluZGV4OiBhLFxuICAgICAgICAgIHJ0bFRyYW5zbGF0ZTogc1xuICAgICAgICB9ID0gdCxcbiAgICAgICAgciA9IHQucGFyYW1zLmNhcmRzRWZmZWN0LFxuICAgICAgICB7XG4gICAgICAgICAgc3RhcnRUcmFuc2xhdGU6IGksXG4gICAgICAgICAgaXNUb3VjaGVkOiBuXG4gICAgICAgIH0gPSB0LnRvdWNoRXZlbnRzRGF0YSxcbiAgICAgICAgbyA9IHMgPyAtdC50cmFuc2xhdGUgOiB0LnRyYW5zbGF0ZTtcbiAgICAgIGZvciAobGV0IGwgPSAwOyBsIDwgZS5sZW5ndGg7IGwgKz0gMSkge1xuICAgICAgICBjb25zdCBkID0gZVtsXSxcbiAgICAgICAgICBmID0gZC5wcm9ncmVzcyxcbiAgICAgICAgICBjID0gTWF0aC5taW4oTWF0aC5tYXgoZiwgLTQpLCA0KTtcbiAgICAgICAgbGV0IG0gPSBkLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICB0LnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiAhdC5wYXJhbXMuY3NzTW9kZSAmJiAodC53cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0Lm1pblRyYW5zbGF0ZSgpfXB4KWApLCB0LnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiB0LnBhcmFtcy5jc3NNb2RlICYmIChtIC09IGVbMF0uc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgICBsZXQgcCA9IHQucGFyYW1zLmNzc01vZGUgPyAtbSAtIHQudHJhbnNsYXRlIDogLW0sXG4gICAgICAgICAgaCA9IDA7XG4gICAgICAgIGNvbnN0IE0gPSAtMTAwICogTWF0aC5hYnMoYyk7XG4gICAgICAgIGxldCB1ID0gMSxcbiAgICAgICAgICB3ID0gLXIucGVyU2xpZGVSb3RhdGUgKiBjLFxuICAgICAgICAgIFMgPSByLnBlclNsaWRlT2Zmc2V0IC0gLjc1ICogTWF0aC5hYnMoYyk7XG4gICAgICAgIGNvbnN0ICQgPSB0LnZpcnR1YWwgJiYgdC5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gdC52aXJ0dWFsLmZyb20gKyBsIDogbCxcbiAgICAgICAgICBFID0gKCQgPT09IGEgfHwgJCA9PT0gYSAtIDEpICYmIGMgPiAwICYmIGMgPCAxICYmIChuIHx8IHQucGFyYW1zLmNzc01vZGUpICYmIG8gPCBpLFxuICAgICAgICAgIFQgPSAoJCA9PT0gYSB8fCAkID09PSBhICsgMSkgJiYgYyA8IDAgJiYgYyA+IC0xICYmIChuIHx8IHQucGFyYW1zLmNzc01vZGUpICYmIG8gPiBpO1xuICAgICAgICBpZiAoRSB8fCBUKSB7XG4gICAgICAgICAgY29uc3QgZSA9ICgxIC0gTWF0aC5hYnMoKE1hdGguYWJzKGMpIC0gLjUpIC8gLjUpKSAqKiAuNTtcbiAgICAgICAgICB3ICs9IC0yOCAqIGMgKiBlLCB1ICs9IC0uNSAqIGUsIFMgKz0gOTYgKiBlLCBoID0gLTI1ICogZSAqIE1hdGguYWJzKGMpICsgXCIlXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHAgPSBjIDwgMCA/IGBjYWxjKCR7cH1weCAke3MgPyBcIi1cIiA6IFwiK1wifSAoJHtTICogTWF0aC5hYnMoYyl9JSkpYCA6IGMgPiAwID8gYGNhbGMoJHtwfXB4ICR7cyA/IFwiLVwiIDogXCIrXCJ9ICgtJHtTICogTWF0aC5hYnMoYyl9JSkpYCA6IGAke3B9cHhgLCAhdC5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIGNvbnN0IGUgPSBoO1xuICAgICAgICAgIGggPSBwLCBwID0gZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gYyA8IDAgPyBcIlwiICsgKDEgKyAoMSAtIHUpICogYykgOiBcIlwiICsgKDEgLSAoMSAtIHUpICogYyksXG4gICAgICAgICAgYiA9IGBcXG4gICAgICAgIHRyYW5zbGF0ZTNkKCR7cH0sICR7aH0sICR7TX1weClcXG4gICAgICAgIHJvdGF0ZVooJHtyLnJvdGF0ZSA/IHMgPyAtdyA6IHcgOiAwfWRlZylcXG4gICAgICAgIHNjYWxlKCR7eH0pXFxuICAgICAgYDtcbiAgICAgICAgaWYgKHIuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgbGV0IGUgPSBkLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvd1wiKTtcbiAgICAgICAgICBlIHx8IChlID0gKDAsIF9jcmVhdGVTaGFkb3dNaW4uYykoXCJjYXJkc1wiLCBkKSksIGUgJiYgKGUuc3R5bGUub3BhY2l0eSA9IE1hdGgubWluKE1hdGgubWF4KChNYXRoLmFicyhjKSAtIC41KSAvIC41LCAwKSwgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGQuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQoZikpICsgZS5sZW5ndGg7XG4gICAgICAgICgwLCBfZWZmZWN0VGFyZ2V0TWluLmUpKHIsIGQpLnN0eWxlLnRyYW5zZm9ybSA9IGI7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBlID0+IHtcbiAgICAgIGNvbnN0IGEgPSB0LnNsaWRlcy5tYXAoZSA9PiAoMCwgX3V0aWxzTWluLmspKGUpKTtcbiAgICAgIGEuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYCwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN3aXBlci1zbGlkZS1zaGFkb3dcIikuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgICB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgO1xuICAgICAgICB9KTtcbiAgICAgIH0pLCAoMCwgX2VmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kTWluLmUpKHtcbiAgICAgICAgc3dpcGVyOiB0LFxuICAgICAgICBkdXJhdGlvbjogZSxcbiAgICAgICAgdHJhbnNmb3JtRWxlbWVudHM6IGFcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+ICEwLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ICEwLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXQucGFyYW1zLmNzc01vZGVcbiAgICB9KVxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKZlpXWm1aV04wU1c1cGRFMXBiaUlzSW5KbGNYVnBjbVVpTENKZlpXWm1aV04wVkdGeVoyVjBUV2x1SWl3aVgyVm1abVZqZEZacGNuUjFZV3hVY21GdWMybDBhVzl1Ulc1a1RXbHVJaXdpWDNWMGFXeHpUV2x1SWl3aVJXWm1aV04wUTJGeVpITWlMQ0psSWl3aWMzZHBjR1Z5SWl3aWRDSXNJbVY0ZEdWdVpGQmhjbUZ0Y3lJc0ltRWlMQ0p2YmlJc0luTWlMQ0pqWVhKa2MwVm1abVZqZENJc0luTnNhV1JsVTJoaFpHOTNjeUlzSW5KdmRHRjBaU0lzSW5CbGNsTnNhV1JsVW05MFlYUmxJaXdpY0dWeVUyeHBaR1ZQWm1aelpYUWlMQ0psWm1abFkzUkpibWwwSWl3aVpXWm1aV04wSWl3aWMyVjBWSEpoYm5Oc1lYUmxJaXdpYzJ4cFpHVnpJaXdpWVdOMGFYWmxTVzVrWlhnaUxDSnlkR3hVY21GdWMyeGhkR1VpTENKeUlpd2ljR0Z5WVcxeklpd2ljM1JoY25SVWNtRnVjMnhoZEdVaUxDSnBJaXdpYVhOVWIzVmphR1ZrSWl3aWJpSXNJblJ2ZFdOb1JYWmxiblJ6UkdGMFlTSXNJbThpTENKMGNtRnVjMnhoZEdVaUxDSnNJaXdpYkdWdVozUm9JaXdpWkNJc0ltWWlMQ0p3Y205bmNtVnpjeUlzSW1NaUxDSk5ZWFJvSWl3aWJXbHVJaXdpYldGNElpd2liU0lzSW5OM2FYQmxjbE5zYVdSbFQyWm1jMlYwSWl3aVkyVnVkR1Z5WldSVGJHbGtaWE1pTENKamMzTk5iMlJsSWl3aWQzSmhjSEJsY2tWc0lpd2ljM1I1YkdVaUxDSjBjbUZ1YzJadmNtMGlMQ0p0YVc1VWNtRnVjMnhoZEdVaUxDSndJaXdpYUNJc0lrMGlMQ0poWW5NaUxDSjFJaXdpZHlJc0lsTWlMQ0lrSWl3aWRtbHlkSFZoYkNJc0ltVnVZV0pzWldRaUxDSm1jbTl0SWl3aVJTSXNJbFFpTENKcGMwaHZjbWw2YjI1MFlXd2lMQ0o0SWl3aVlpSXNJbkYxWlhKNVUyVnNaV04wYjNJaUxDSmpjbVZoZEdWVGFHRmtiM2NpTENKdmNHRmphWFI1SWl3aWVrbHVaR1Y0SWl3aWNtOTFibVFpTENKbFptWmxZM1JVWVhKblpYUWlMQ0p6WlhSVWNtRnVjMmwwYVc5dUlpd2liV0Z3SWl3aVoyVjBVMnhwWkdWVWNtRnVjMlp2Y20xRmJDSXNJbVp2Y2tWaFkyZ2lMQ0owY21GdWMybDBhVzl1UkhWeVlYUnBiMjRpTENKeGRXVnllVk5sYkdWamRHOXlRV3hzSWl3aVpXWm1aV04wVm1seWRIVmhiRlJ5WVc1emFYUnBiMjVGYm1RaUxDSmtkWEpoZEdsdmJpSXNJblJ5WVc1elptOXliVVZzWlcxbGJuUnpJaXdpY0dWeWMzQmxZM1JwZG1VaUxDSnZkbVZ5ZDNKcGRHVlFZWEpoYlhNaUxDSjNZWFJqYUZOc2FXUmxjMUJ5YjJkeVpYTnpJaXdpZG1seWRIVmhiRlJ5WVc1emJHRjBaU0pkTENKemIzVnlZMlZ6SWpwYklqQWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdRVUZCYTBNc1NVRkJRVUVzWTBGQlFTeEhRVUZCUXl4UFFVRkJPMEZCUTBZc1NVRkJRVU1zWjBKQlFVRXNSMEZCUVVRc1QwRkJRVHRCUVVORkxFbEJRVUZGTERoQ1FVRkJMRWRCUVVGR0xFOUJRVUU3UVVGRFl5eEpRVUZCUnl4VFFVRkJMRWRCUVVGSUxFOUJRVUU3UVVGSGFFUXNVMEZCVTBrc1dVRkJXVU1zUTBGQlFUdEZRVU51UWp0SlFVRkpReXhOUVVGQkxFVkJRMFpETEVOQlFVRTdTVUZCVFVNc1dVRkJRU3hGUVVOT1F5eERRVUZCTzBsQlFWbERMRVZCUVVFc1JVRkRXa003UlVGQlFTeEpRVU5GVGl4RFFVRkJPMFZCUTBwSkxFTkJRVUVzUTBGQllUdEpRVU5ZUnl4WFFVRkJMRVZCUVdFN1RVRkRXRU1zV1VGQlFTeEhRVUZqTzAxQlEyUkRMRTFCUVVFc1IwRkJVVHROUVVOU1F5eGpRVUZCTEVWQlFXZENPMDFCUTJoQ1F5eGpRVUZCTEVWQlFXZENPMGxCUVVFN1JVRkJRVHRGUVRaR2NFSXNTVUZCUVVNc1owSkJRVUVzUlVGQlZ6dEpRVU5VUXl4TlFVRkJMRVZCUVZFN1NVRkRVbG9zVFVGQlFTeEZRVUZCUXl4RFFVRkJPMGxCUTBGSExFVkJRVUVzUlVGQlFVTXNRMEZCUVR0SlFVTkJVU3haUVVGQkxFVkJPVVp0UWtFc1EwRkJRVHROUVVOdVFqdFZRVUZOUXl4TlFVRkJMRVZCUTBwbUxFTkJRVUU3VlVGQlRXZENMRmRCUVVFc1JVRkRUbG9zUTBGQlFUdFZRVU5CWVN4WlFVRkJMRVZCUVdOWU8xRkJRVUVzU1VGRFdrb3NRMEZCUVR0UlFVTkZaMElzUTBGQlFTeEhRVUZUYUVJc1EwRkJRU3hEUVVGUGFVSXNUVUZCUVN4RFFVRlBXaXhYUVVGQk8xRkJRVUU3VlVGRGRrSmhMR05CUVVFc1JVRkRTa01zUTBGQlFUdFZRVUZqUXl4VFFVRkJMRVZCUTJSRE8xRkJRVUVzU1VGRFJYSkNMRU5CUVVFc1EwRkJUM05DTEdWQlFVRTdVVUZEVEVNc1EwRkJRU3hIUVVGdFFtNUNMRU5CUVVFc1NVRkJUMG9zUTBGQlFTeERRVUZQZDBJc1UwRkJRU3hIUVVGWmVFSXNRMEZCUVN4RFFVRlBkMElzVTBGQlFUdE5RVU14UkN4TFFVRkxMRWxCUVVsRExFTkJRVUVzUjBGQlNTeEhRVUZIUVN4RFFVRkJMRWRCUVVrelFpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFVkJRVkZFTEVOQlFVRXNTVUZCU3l4SFFVRkhPMUZCUTNwRExFMUJRVTFGTEVOQlFVRXNSMEZCVlRkQ0xFTkJRVUVzUTBGQlR6SkNMRU5CUVVFN1ZVRkRha0pITEVOQlFVRXNSMEZCWjBKRUxFTkJRVUVzUTBGQlVVVXNVVUZCUVR0VlFVTjRRa01zUTBGQlFTeEhRVUZYUXl4SlFVRkJMRU5CUVV0RExFZEJRVUVzUTBGQlNVUXNTVUZCUVN4RFFVRkxSU3hIUVVGQkxFTkJRVWxNTEVOQlFVRXNSMEZCWjBJc1NVRkJTVHRSUVVOMlJDeEpRVUZKVFN4RFFVRkJMRWRCUVZOUUxFTkJRVUVzUTBGQlVWRXNhVUpCUVVFN1VVRkRha0p1UXl4RFFVRkJMRU5CUVU5cFFpeE5RVUZCTEVOQlFVOXRRaXhqUVVGQkxFdEJRVzFDY0VNc1EwRkJRU3hEUVVGUGFVSXNUVUZCUVN4RFFVRlBiMElzVDBGQlFTeExRVU5xUkhKRExFTkJRVUVzUTBGQlQzTkRMRk5CUVVFc1EwRkJWVU1zUzBGQlFTeERRVUZOUXl4VFFVRkJMRWRCUVZrc1kwRkJZM2hETEVOQlFVRXNRMEZCVDNsRExGbEJRVUVzVlVGRmRFUjZReXhEUVVGQkxFTkJRVTlwUWl4TlFVRkJMRU5CUVU5dFFpeGpRVUZCTEVsQlFXdENjRU1zUTBGQlFTeERRVUZQYVVJc1RVRkJRU3hEUVVGUGIwSXNUMEZCUVN4TFFVTm9SRWdzUTBGQlFTeEpRVUZWY0VNc1EwRkJRU3hEUVVGUExFZEJRVWR4UXl4cFFrRkJRVHRSUVVWMFFpeEpRVUZKVHl4RFFVRkJMRWRCUVVzeFF5eERRVUZCTEVOQlFVOXBRaXhOUVVGQkxFTkJRVTl2UWl4UFFVRkJMRWxCUVZkSUxFTkJRVUVzUjBGQlUyeERMRU5CUVVFc1EwRkJUM2RDTEZOQlFVRXNTVUZCWVZVc1EwRkJRVHRWUVVNelJGTXNRMEZCUVN4SFFVRkxPMUZCUTFRc1RVRkJUVU1zUTBGQlFTeEpRVUZOTEUxQlFVMWlMRWxCUVVFc1EwRkJTMk1zUjBGQlFTeERRVUZKWml4RFFVRkJPMUZCUXpOQ0xFbEJRVWxuUWl4RFFVRkJMRWRCUVZFN1ZVRkRVa01zUTBGQlFTeEpRVUZWTDBJc1EwRkJRU3hEUVVGUFVpeGpRVUZCTEVkQlFXbENjMElzUTBGQlFUdFZRVU5zUTJ0Q0xFTkJRVUVzUjBGQlVXaERMRU5CUVVFc1EwRkJUMUFzWTBGQlFTeEhRVUZ6UXl4TlFVRnlRbk5DTEVsQlFVRXNRMEZCUzJNc1IwRkJRU3hEUVVGSlppeERRVUZCTzFGQlF6ZERMRTFCUVUxdFFpeERRVUZCTEVkQlFXRnFSQ3hEUVVGQkxFTkJRVTlyUkN4UFFVRkJMRWxCUVZkc1JDeERRVUZCTEVOQlFVOXBRaXhOUVVGQkxFTkJRVTlwUXl4UFFVRkJMRU5CUVZGRExFOUJRVUVzUjBGQlZXNUVMRU5CUVVFc1EwRkJUMnRFTEU5QlFVRXNRMEZCVVVVc1NVRkJRU3hIUVVGUE0wSXNRMEZCUVN4SFFVRkpRU3hEUVVGQk8xVkJRM3BHTkVJc1EwRkJRU3hKUVVGcFFrb3NRMEZCUVN4TFFVRmxMME1zUTBGQlFTeEpRVUZsSzBNc1EwRkJRU3hMUVVGbEwwTXNRMEZCUVN4SFFVRmpMRTFCUVUwMFFpeERRVUZCTEVkQlFWY3NTMEZCUzBFc1EwRkJRU3hIUVVGWExFMUJRVTFVTEVOQlFVRXNTVUZCWVhKQ0xFTkJRVUVzUTBGQlQybENMRTFCUVVFc1EwRkJUMjlDTEU5QlFVRXNTMEZCV1dRc1EwRkJRU3hIUVVGdFFrb3NRMEZCUVR0VlFVTTNTMjFETEVOQlFVRXNTVUZCYVVKTUxFTkJRVUVzUzBGQlpTOURMRU5CUVVFc1NVRkJaU3RETEVOQlFVRXNTMEZCWlM5RExFTkJRVUVzUjBGQll5eE5RVUZOTkVJc1EwRkJRU3hIUVVGWExFdEJRVXRCTEVOQlFVRXNTVUZCV1N4TlFVRk5WQ3hEUVVGQkxFbEJRV0Z5UWl4RFFVRkJMRU5CUVU5cFFpeE5RVUZCTEVOQlFVOXZRaXhQUVVGQkxFdEJRVmxrTEVOQlFVRXNSMEZCYlVKS0xFTkJRVUU3VVVGRGNFd3NTVUZCU1d0RExFTkJRVUVzU1VGQmFVSkRMRU5CUVVFc1JVRkJaVHRWUVVOc1F5eE5RVUZOZUVRc1EwRkJRU3hKUVVGbExFbEJRVWxwUXl4SlFVRkJMRU5CUVV0akxFZEJRVUVzUlVGQlMyUXNTVUZCUVN4RFFVRkxZeXhIUVVGQkxFTkJRVWxtTEVOQlFVRXNTVUZCV1N4TlFVRlBMRkZCUVZNN1ZVRkRlRVZwUWl4RFFVRkJMRXRCUVZjc1MwRkJTMnBDTEVOQlFVRXNSMEZCVjJoRExFTkJRVUVzUlVGRE0wSm5SQ3hEUVVGQkxFdEJRVlVzUzBGQlRXaEVMRU5CUVVFc1JVRkRhRUpyUkN4RFFVRkJMRWxCUVZNc1MwRkJTMnhFTEVOQlFVRXNSVUZEWkRaRExFTkJRVUVzU1VGQlV5eExRVUZMTjBNc1EwRkJRU3hIUVVGamFVTXNTVUZCUVN4RFFVRkxZeXhIUVVGQkxFTkJRVWxtTEVOQlFVRXNTVUZCYUVNc1IwRkRVRHRSUVVGQk8xRkJWVUVzU1VGUVJWa3NRMEZCUVN4SFFVWkZXaXhEUVVGQkxFZEJRVmNzU1VGRlVpeFJRVUZSV1N4RFFVRkJMRTFCUVZGMFF5eERRVUZCTEVkQlFVMHNUVUZCVFN4UlFVRlJORU1zUTBGQlFTeEhRVUZSYWtJc1NVRkJRU3hEUVVGTFl5eEhRVUZCTEVOQlFVbG1MRU5CUVVFc1UwRkRha1JCTEVOQlFVRXNSMEZCVnl4SlFVVm1MRkZCUVZGWkxFTkJRVUVzVFVGQlVYUkRMRU5CUVVFc1IwRkJUU3hOUVVGTkxGTkJRVk0wUXl4RFFVRkJMRWRCUVZGcVFpeEpRVUZCTEVOQlFVdGpMRWRCUVVFc1EwRkJTV1lzUTBGQlFTeFRRVVYwUkN4SFFVRkhXU3hEUVVGQkxFOUJSVXd4UXl4RFFVRkJMRU5CUVU5MVJDeFpRVUZCTEVsQlFXZENPMVZCUXpGQ0xFMUJRVTE2UkN4RFFVRkJMRWRCUVZFMlF5eERRVUZCTzFWQlEyUkJMRU5CUVVFc1IwRkJTMFFzUTBGQlFTeEZRVU5NUVN4RFFVRkJMRWRCUVVzMVF5eERRVU5RTzFGQlFVRTdVVUZEUVN4TlFVRk5NRVFzUTBGQlFTeEhRVUZqTVVJc1EwRkJRU3hIUVVGWExFbEJRVWtzVFVGQlJ5eExRVUZMTEVsQlFVbG5RaXhEUVVGQkxFbEJRVk5vUWl4RFFVRkJMRWxCUVdFc1RVRkJSeXhMUVVGTExFbEJRVWxuUWl4RFFVRkJMRWxCUVZOb1FpeERRVUZCTzFWQlIzQkdNa0lzUTBGQlFTeEhRVUZaTEhsQ1FVTkdaaXhEUVVGQkxFdEJRVTlETEVOQlFVRXNTMEZCVDBNc1EwRkJRU3gzUWtGRGJFSTFRaXhEUVVGQkxFTkJRVTlVTEUxQlFVRXNSMEZCVTBnc1EwRkJRU3hKUVVGUE1rTXNRMEZCUVN4SFFVRlRRU3hEUVVGQkxFZEJRVk1zZDBKQlF6TkRVeXhEUVVGQk8xRkJTVllzU1VGQlNYaERMRU5CUVVFc1EwRkJUMVlzV1VGQlFTeEZRVUZqTzFWQlJYWkNMRWxCUVVsU0xFTkJRVUVzUjBGQlZ6WkNMRU5CUVVFc1EwRkJVU3RDTEdGQlFVRXNRMEZCWXp0VlFVTm9RelZFTEVOQlFVRXNTMEZEU0VFc1EwRkJRU3hIUVVGWExFbEJRVUUyUkN4clFrRkJRU3hGUVVGaExGTkJRVk5vUXl4RFFVRkJMRWxCUlM5Q04wSXNRMEZCUVN4TFFVRlZRU3hEUVVGQkxFTkJRVk41UXl4TFFVRkJMRU5CUVUxeFFpeFBRVUZCTEVkQlFWVTNRaXhKUVVGQkxFTkJRVXRETEVkQlFVRXNRMEZCU1VRc1NVRkJRU3hEUVVGTFJTeEhRVUZCTEVWQlFVdEdMRWxCUVVFc1EwRkJTMk1zUjBGQlFTeERRVUZKWml4RFFVRkJMRWxCUVZrc1RVRkJUeXhKUVVGTExFbEJRVWtzUjBGRGFrYzdVVUZCUVR0UlFVTkJTQ3hEUVVGQkxFTkJRVkZaTEV0QlFVRXNRMEZCVFhOQ0xFMUJRVUVzU1VGQlZUbENMRWxCUVVFc1EwRkJTMk1zUjBGQlFTeERRVUZKWkN4SlFVRkJMRU5CUVVzclFpeExRVUZCTEVOQlFVMXNReXhEUVVGQkxFdEJRV3RDT1VJc1EwRkJRU3hEUVVGUE5FSXNUVUZCUVR0UlFVTndSQ3hKUVVGQmNVTXNhMEpCUVVFc1JVRkJZUzlETEVOQlFVRXNSVUZCVVZjc1EwRkJRU3hGUVVNM1Fsa3NTMEZCUVN4RFFVRk5ReXhUUVVGQkxFZEJRVmxwUWl4RFFVTTNRanROUVVGQk8wbEJRVUU3U1VGeFFrRlBMR0ZCUVVFc1JVRnVRbTlDYkVVc1EwRkJRVHROUVVOd1FpeE5RVUZOU1N4RFFVRkJMRWRCUVc5Q1JpeERRVUZCTEVOQlFVOWhMRTFCUVVFc1EwRkJUMjlFTEVkQlFVRXNRMEZCU1c1RkxFTkJRVUVzU1VGQlZ5eEpRVUZCYjBVc1YwRkJRU3hGUVVGdlFuQkZMRU5CUVVFN1RVRkRNMFZKTEVOQlFVRXNRMEZCYTBKcFJTeFBRVUZCTEVOQlFWRnVSU3hEUVVGQk8xRkJRM2hDUVN4RFFVRkJMRU5CUVVkMVF5eExRVUZCTEVOQlFVMDJRaXhyUWtGQlFTeEhRVUZ4UWl4SFFVRkhkRVVzUTBGQlFTeE5RVU5xUTBVc1EwRkJRU3hEUVVGSGNVVXNaMEpCUVVFc1EwRkJhVUlzZDBKQlFYZENSaXhQUVVGQkxFTkJRVkZ1UlN4RFFVRkJPMVZCUTJ4RVFTeERRVUZCTEVOQlFWTjFReXhMUVVGQkxFTkJRVTAyUWl4clFrRkJRU3hIUVVGeFFpeEhRVUZIZEVVc1EwRkJRU3hKUVVGWk8xRkJRVUVzUlVGRGJrUTdUVUZCUVN4SlFVVktMRWxCUVVGM1JTeG5RMEZCUVN4RlFVRXlRanRSUVVONlFuWkZMRTFCUVVFc1JVRkJRVU1zUTBGQlFUdFJRVU5CZFVVc1VVRkJRU3hGUVVGQmVrVXNRMEZCUVR0UlFVTkJNRVVzYVVKQlFVRXNSVUZCUVhSRk8wMUJRVUVzUlVGRFFUdEpRVUZCTzBsQlVVWjFSU3hYUVVGQkxFVkJRV0ZCTEVOQlFVRXNUVUZCVFR0SlFVTnVRa01zWlVGQlFTeEZRVUZwUWtFc1EwRkJRU3hOUVVGTk8wMUJRM0pDUXl4dFFrRkJRU3hIUVVGeFFqdE5RVU55UWtNc1owSkJRVUVzUjBGQmJVSTFSU3hEUVVGQkxFTkJRVTlwUWl4TlFVRkJMRU5CUVU5dlFqdEpRVUZCTzBWQlFVRXNSVUZIZGtNN1FVRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFZmZlY3RDb3ZlcmZsb3c7XG52YXIgX2NyZWF0ZVNoYWRvd01pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvY3JlYXRlLXNoYWRvdy5taW4ubWpzXCIpO1xudmFyIF9lZmZlY3RJbml0TWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9lZmZlY3QtaW5pdC5taW4ubWpzXCIpO1xudmFyIF9lZmZlY3RUYXJnZXRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWluLm1qc1wiKTtcbnZhciBfdXRpbHNNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL3V0aWxzLm1pbi5tanNcIik7XG5mdW5jdGlvbiBFZmZlY3RDb3ZlcmZsb3coZSkge1xuICBsZXQge1xuICAgIHN3aXBlcjogdCxcbiAgICBleHRlbmRQYXJhbXM6IHMsXG4gICAgb246IHJcbiAgfSA9IGU7XG4gIHMoe1xuICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgcm90YXRlOiA1MCxcbiAgICAgIHN0cmV0Y2g6IDAsXG4gICAgICBkZXB0aDogMTAwLFxuICAgICAgc2NhbGU6IDEsXG4gICAgICBtb2RpZmllcjogMSxcbiAgICAgIHNsaWRlU2hhZG93czogITBcbiAgICB9XG4gIH0pO1xuICAoMCwgX2VmZmVjdEluaXRNaW4uZSkoe1xuICAgIGVmZmVjdDogXCJjb3ZlcmZsb3dcIixcbiAgICBzd2lwZXI6IHQsXG4gICAgb246IHIsXG4gICAgc2V0VHJhbnNsYXRlOiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGg6IGUsXG4gICAgICAgICAgaGVpZ2h0OiBzLFxuICAgICAgICAgIHNsaWRlczogcixcbiAgICAgICAgICBzbGlkZXNTaXplc0dyaWQ6IG9cbiAgICAgICAgfSA9IHQsXG4gICAgICAgIGEgPSB0LnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3QsXG4gICAgICAgIGkgPSB0LmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICBsID0gdC50cmFuc2xhdGUsXG4gICAgICAgIGYgPSBpID8gZSAvIDIgLSBsIDogcyAvIDIgLSBsLFxuICAgICAgICBkID0gaSA/IGEucm90YXRlIDogLWEucm90YXRlLFxuICAgICAgICBjID0gYS5kZXB0aDtcbiAgICAgIGZvciAobGV0IGUgPSAwLCB0ID0gci5sZW5ndGg7IGUgPCB0OyBlICs9IDEpIHtcbiAgICAgICAgY29uc3QgdCA9IHJbZV0sXG4gICAgICAgICAgcyA9IG9bZV0sXG4gICAgICAgICAgbCA9IChmIC0gdC5zd2lwZXJTbGlkZU9mZnNldCAtIHMgLyAyKSAvIHMsXG4gICAgICAgICAgaCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYS5tb2RpZmllciA/IGEubW9kaWZpZXIobCkgOiBsICogYS5tb2RpZmllcjtcbiAgICAgICAgbGV0IG4gPSBpID8gZCAqIGggOiAwLFxuICAgICAgICAgIHcgPSBpID8gMCA6IGQgKiBoLFxuICAgICAgICAgIHAgPSAtYyAqIE1hdGguYWJzKGgpLFxuICAgICAgICAgIG0gPSBhLnN0cmV0Y2g7XG4gICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIG0gJiYgLTEgIT09IG0uaW5kZXhPZihcIiVcIikgJiYgKG0gPSBwYXJzZUZsb2F0KGEuc3RyZXRjaCkgLyAxMDAgKiBzKTtcbiAgICAgICAgbGV0IHkgPSBpID8gMCA6IG0gKiBoLFxuICAgICAgICAgIFMgPSBpID8gbSAqIGggOiAwLFxuICAgICAgICAgIGcgPSAxIC0gKDEgLSBhLnNjYWxlKSAqIE1hdGguYWJzKGgpO1xuICAgICAgICBNYXRoLmFicyhTKSA8IC4wMDEgJiYgKFMgPSAwKSwgTWF0aC5hYnMoeSkgPCAuMDAxICYmICh5ID0gMCksIE1hdGguYWJzKHApIDwgLjAwMSAmJiAocCA9IDApLCBNYXRoLmFicyhuKSA8IC4wMDEgJiYgKG4gPSAwKSwgTWF0aC5hYnModykgPCAuMDAxICYmICh3ID0gMCksIE1hdGguYWJzKGcpIDwgLjAwMSAmJiAoZyA9IDApO1xuICAgICAgICBjb25zdCBiID0gYHRyYW5zbGF0ZTNkKCR7U31weCwke3l9cHgsJHtwfXB4KSAgcm90YXRlWCgke3d9ZGVnKSByb3RhdGVZKCR7bn1kZWcpIHNjYWxlKCR7Z30pYDtcbiAgICAgICAgaWYgKCgwLCBfZWZmZWN0VGFyZ2V0TWluLmUpKGEsIHQpLnN0eWxlLnRyYW5zZm9ybSA9IGIsIHQuc3R5bGUuekluZGV4ID0gMSAtIE1hdGguYWJzKE1hdGgucm91bmQoaCkpLCBhLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgIGxldCBlID0gaSA/IHQucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIikgOiB0LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3BcIiksXG4gICAgICAgICAgICBzID0gaSA/IHQucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XCIpIDogdC5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tXCIpO1xuICAgICAgICAgIGUgfHwgKGUgPSAoMCwgX2NyZWF0ZVNoYWRvd01pbi5jKShcImNvdmVyZmxvd1wiLCB0LCBpID8gXCJsZWZ0XCIgOiBcInRvcFwiKSksIHMgfHwgKHMgPSAoMCwgX2NyZWF0ZVNoYWRvd01pbi5jKShcImNvdmVyZmxvd1wiLCB0LCBpID8gXCJyaWdodFwiIDogXCJib3R0b21cIikpLCBlICYmIChlLnN0eWxlLm9wYWNpdHkgPSBoID4gMCA/IGggOiAwKSwgcyAmJiAocy5zdHlsZS5vcGFjaXR5ID0gLWggPiAwID8gLWggOiAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZSA9PiB7XG4gICAgICB0LnNsaWRlcy5tYXAoZSA9PiAoMCwgX3V0aWxzTWluLmspKGUpKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgICB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgLCB0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIikuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgICB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+ICEwLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ICEwXG4gICAgfSlcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZaV1ptWldOMFNXNXBkRTFwYmlJc0luSmxjWFZwY21VaUxDSmZaV1ptWldOMFZHRnlaMlYwVFdsdUlpd2lYM1YwYVd4elRXbHVJaXdpUldabVpXTjBRMjkyWlhKbWJHOTNJaXdpWlNJc0luTjNhWEJsY2lJc0luUWlMQ0psZUhSbGJtUlFZWEpoYlhNaUxDSnpJaXdpYjI0aUxDSnlJaXdpWTI5MlpYSm1iRzkzUldabVpXTjBJaXdpY205MFlYUmxJaXdpYzNSeVpYUmphQ0lzSW1SbGNIUm9JaXdpYzJOaGJHVWlMQ0p0YjJScFptbGxjaUlzSW5Oc2FXUmxVMmhoWkc5M2N5SXNJbVZtWm1WamRFbHVhWFFpTENKbFptWmxZM1FpTENKelpYUlVjbUZ1YzJ4aGRHVWlMQ0ozYVdSMGFDSXNJbWhsYVdkb2RDSXNJbk5zYVdSbGN5SXNJbk5zYVdSbGMxTnBlbVZ6UjNKcFpDSXNJbThpTENKaElpd2ljR0Z5WVcxeklpd2lhU0lzSW1selNHOXlhWHB2Ym5SaGJDSXNJbXdpTENKMGNtRnVjMnhoZEdVaUxDSm1JaXdpWkNJc0ltTWlMQ0pzWlc1bmRHZ2lMQ0p6ZDJsd1pYSlRiR2xrWlU5bVpuTmxkQ0lzSW1naUxDSnVJaXdpZHlJc0luQWlMQ0pOWVhSb0lpd2lZV0p6SWl3aWJTSXNJbWx1WkdWNFQyWWlMQ0p3WVhKelpVWnNiMkYwSWl3aWVTSXNJbE1pTENKbklpd2lZaUlzSW1WbVptVmpkRlJoY21kbGRDSXNJbk4wZVd4bElpd2lkSEpoYm5ObWIzSnRJaXdpZWtsdVpHVjRJaXdpY205MWJtUWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eUlpd2lZM0psWVhSbFUyaGhaRzkzSWl3aWIzQmhZMmwwZVNJc0luTmxkRlJ5WVc1emFYUnBiMjRpTENKdFlYQWlMQ0puWlhSVGJHbGtaVlJ5WVc1elptOXliVVZzSWl3aVptOXlSV0ZqYUNJc0luUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpSXNJbkYxWlhKNVUyVnNaV04wYjNKQmJHd2lMQ0p3WlhKemNHVmpkR2wyWlNJc0ltOTJaWEozY21sMFpWQmhjbUZ0Y3lJc0luZGhkR05vVTJ4cFpHVnpVSEp2WjNKbGMzTWlYU3dpYzI5MWNtTmxjeUk2V3lJd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJiblZzYkYwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJRV3RETEVsQlFVRkJMR05CUVVFc1IwRkJRVU1zVDBGQlFUdEJRVU5HTEVsQlFVRkRMR2RDUVVGQkxFZEJRVUZFTEU5QlFVRTdRVUZEUlN4SlFVRkJSU3hUUVVGQkxFZEJRVUZHTEU5QlFVRTdRVUZIYkVNc1UwRkJVMGNzWjBKQlFXZENReXhEUVVGQk8wVkJRM1pDTzBsQlFVbERMRTFCUVVFc1JVRkRSa01zUTBGQlFUdEpRVUZOUXl4WlFVRkJMRVZCUTA1RExFTkJRVUU3U1VGQldVTXNSVUZCUVN4RlFVTmFRenRGUVVGQkxFbEJRMFZPTEVOQlFVRTdSVUZEU2trc1EwRkJRU3hEUVVGaE8wbEJRMWhITEdWQlFVRXNSVUZCYVVJN1RVRkRaa01zVFVGQlFTeEZRVUZSTzAxQlExSkRMRTlCUVVFc1JVRkJVenROUVVOVVF5eExRVUZCTEVWQlFVODdUVUZEVUVNc1MwRkJRU3hGUVVGUE8wMUJRMUJETEZGQlFVRXNSVUZCVlR0TlFVTldReXhaUVVGQkxFZEJRV003U1VGQlFUdEZRVUZCTzBWQmRVVnNRaXhKUVVGQlF5eG5Ra0ZCUVN4RlFVRlhPMGxCUTFSRExFMUJRVUVzUlVGQlVUdEpRVU5TWkN4TlFVRkJMRVZCUVVGRExFTkJRVUU3U1VGRFFVY3NSVUZCUVN4RlFVRkJReXhEUVVGQk8wbEJRMEZWTEZsQlFVRXNSVUY0UlcxQ1FTeERRVUZCTzAxQlEyNUNPMVZCUTBWRExFdEJRVUVzUlVGQlQycENMRU5CUVVFN1ZVRkRVR3RDTEUxQlFVRXNSVUZCVVdRc1EwRkJRVHRWUVVGWlpTeE5RVUZCTEVWQlEzQkNZaXhEUVVGQk8xVkJRVTFqTEdWQlFVRXNSVUZEVGtNN1VVRkJRU3hKUVVORmJrSXNRMEZCUVR0UlFVTkZiMElzUTBGQlFTeEhRVUZUY0VJc1EwRkJRU3hEUVVGUGNVSXNUVUZCUVN4RFFVRlBhRUlzWlVGQlFUdFJRVU4yUW1sQ0xFTkJRVUVzUjBGQlpYUkNMRU5CUVVFc1EwRkJUM1ZDTEZsQlFVRTdVVUZEZEVKRExFTkJRVUVzUjBGQldYaENMRU5CUVVFc1EwRkJUM2xDTEZOQlFVRTdVVUZEYmtKRExFTkJRVUVzUjBGQlUwb3NRMEZCUVN4SFFVRTBRbmhDTEVOQlFVRXNSMEZCWXl4SlFVRXhRakJDTEVOQlFVRXNSMEZCTWtOMFFpeERRVUZCTEVkQlFXVXNTVUZCTTBKelFpeERRVUZCTzFGQlEzaEVSeXhEUVVGQkxFZEJRVk5NTEVOQlFVRXNSMEZCWlVZc1EwRkJRU3hEUVVGUFpDeE5RVUZCTEVsQlFWVmpMRU5CUVVFc1EwRkJUMlFzVFVGQlFUdFJRVU5vUkhOQ0xFTkJRVUVzUjBGQldWSXNRMEZCUVN4RFFVRlBXaXhMUVVGQk8wMUJSWHBDTEV0QlFVc3NTVUZCU1ZZc1EwRkJRU3hIUVVGSkxFZEJRVWRGTEVOQlFVRXNSMEZCVTBrc1EwRkJRU3hEUVVGUGVVSXNUVUZCUVN4RlFVRlJMMElzUTBGQlFTeEhRVUZKUlN4RFFVRkJMRVZCUVZGR0xFTkJRVUVzU1VGQlN5eEhRVUZITzFGQlF6RkVMRTFCUVUxRkxFTkJRVUVzUjBGQlZVa3NRMEZCUVN4RFFVRlBUaXhEUVVGQk8xVkJRMnBDU1N4RFFVRkJMRWRCUVZscFFpeERRVUZCTEVOQlFXZENja0lzUTBGQlFUdFZRVVUxUWpCQ0xFTkJRVUVzU1VGQlowSkZMRU5CUVVFc1IwRkVSakZDTEVOQlFVRXNRMEZCVVRoQ0xHbENRVUZCTEVkQlEybENOVUlzUTBGQlFTeEhRVUZaTEV0QlFVdEJMRU5CUVVFN1ZVRkRlRVEyUWl4RFFVRkJMRWRCUVRoRExIRkNRVUZ3UWxnc1EwRkJRU3hEUVVGUFZpeFJRVUZCTEVkQlFUQkNWU3hEUVVGQkxFTkJRVTlXTEZGQlFVRXNRMEZCVTJNc1EwRkJRU3hKUVVGblFrRXNRMEZCUVN4SFFVRmxTaXhEUVVGQkxFTkJRVTlXTEZGQlFVRTdVVUZEZGtnc1NVRkJTWE5DTEVOQlFVRXNSMEZCVlZZc1EwRkJRU3hIUVVGbFN5eERRVUZCTEVkQlFWTkpMRU5CUVVFc1IwRkJiVUk3VlVGRGNrUkZMRU5CUVVFc1IwRkJWVmdzUTBGQlFTeEhRVUZsTEVsQlFVbExMRU5CUVVFc1IwRkJVMGtzUTBGQlFUdFZRVVYwUTBjc1EwRkJRU3hKUVVGalRpeERRVUZCTEVkQlFWbFBMRWxCUVVFc1EwRkJTME1zUjBGQlFTeERRVUZKVEN4RFFVRkJPMVZCUTI1RFRTeERRVUZCTEVkQlFWVnFRaXhEUVVGQkxFTkJRVTlpTEU5QlFVRTdVVUZGUlN4dFFrRkJXamhDTEVOQlFVRXNTMEZCYTBRc1RVRkJNVUpCTEVOQlFVRXNRMEZCVVVNc1QwRkJRU3hEUVVGUkxGTkJRMnBFUkN4RFFVRkJMRWRCUVZWRkxGVkJRVUVzUTBGQlYyNUNMRU5CUVVFc1EwRkJUMklzVDBGQlFTeEpRVUZYTEUxQlFVMU1MRU5CUVVFN1VVRkZMME1zU1VGQlNYTkRMRU5CUVVFc1IwRkJZV3hDTEVOQlFVRXNSMEZCWlN4SlFVRkpaU3hEUVVGQkxFZEJRVlZPTEVOQlFVRTdWVUZETVVOVkxFTkJRVUVzUjBGQllXNUNMRU5CUVVFc1IwRkJaV1VzUTBGQlFTeEhRVUZWVGl4RFFVRkJMRWRCUVcxQ08xVkJRM3BFVnl4RFFVRkJMRWRCUVZFc1MwRkJTeXhKUVVGSmRFSXNRMEZCUVN4RFFVRlBXQ3hMUVVGQkxFbEJRVk13UWl4SlFVRkJMRU5CUVV0RExFZEJRVUVzUTBGQlNVd3NRMEZCUVR0UlFVY3hRMGtzU1VGQlFTeERRVUZMUXl4SFFVRkJMRU5CUVVsTExFTkJRVUVzU1VGQll5eFRRVUZQUVN4RFFVRkJMRWRCUVdFc1NVRkRNME5PTEVsQlFVRXNRMEZCUzBNc1IwRkJRU3hEUVVGSlNTeERRVUZCTEVsQlFXTXNVMEZCVDBFc1EwRkJRU3hIUVVGaExFbEJRek5EVEN4SlFVRkJMRU5CUVV0RExFZEJRVUVzUTBGQlNVWXNRMEZCUVN4SlFVRmpMRk5CUVU5QkxFTkJRVUVzUjBGQllTeEpRVU16UTBNc1NVRkJRU3hEUVVGTFF5eEhRVUZCTEVOQlFVbEtMRU5CUVVFc1NVRkJWeXhUUVVGUFFTeERRVUZCTEVkQlFWVXNTVUZEY2tOSExFbEJRVUVzUTBGQlMwTXNSMEZCUVN4RFFVRkpTQ3hEUVVGQkxFbEJRVmNzVTBGQlQwRXNRMEZCUVN4SFFVRlZMRWxCUTNKRFJTeEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTVTBzUTBGQlFTeEpRVUZUTEZOQlFVOUJMRU5CUVVFc1IwRkJVVHRSUVVOeVF5eE5RVUZOUXl4RFFVRkJMRWRCUVdsQ0xHVkJRV1ZHTEVOQlFVRXNUVUZCWjBKRUxFTkJRVUVzVFVGQlowSk9MRU5CUVVFc1owSkJRVEJDUkN4RFFVRkJMR2RDUVVGMVFrUXNRMEZCUVN4alFVRnhRbFVzUTBGQlFUdFJRVWsxU1N4SlFVaHBRaXhKUVVGQlJTeHJRa0ZCUVN4RlFVRmhlRUlzUTBGQlFTeEZRVUZSY0VJc1EwRkJRU3hGUVVNM1FqWkRMRXRCUVVFc1EwRkJUVU1zVTBGQlFTeEhRVUZaU0N4RFFVRkJMRVZCUXpOQ00wTXNRMEZCUVN4RFFVRlJOa01zUzBGQlFTeERRVUZOUlN4TlFVRkJMRWRCUVcxRUxFbEJRWHBEV2l4SlFVRkJMRU5CUVV0RExFZEJRVUVzUTBGQlNVUXNTVUZCUVN4RFFVRkxZU3hMUVVGQkxFTkJRVTFxUWl4RFFVRkJMRWxCUTNoRFdDeERRVUZCTEVOQlFVOVVMRmxCUVVFc1JVRkJZenRWUVVWMlFpeEpRVUZKWWl4RFFVRkJMRWRCUVdsQ2QwSXNRMEZCUVN4SFFVRmxkRUlzUTBGQlFTeERRVUZSYVVRc1lVRkJRU3hEUVVGakxDdENRVUVyUW1wRUxFTkJRVUVzUTBGQlVXbEVMR0ZCUVVFc1EwRkJZenRaUVVNelJ5OURMRU5CUVVFc1IwRkJaMEp2UWl4RFFVRkJMRWRCUVdWMFFpeERRVUZCTEVOQlFWRnBSQ3hoUVVGQkxFTkJRV01zWjBOQlFXZERha1FzUTBGQlFTeERRVUZSYVVRc1lVRkJRU3hEUVVGak8xVkJRekZIYmtRc1EwRkJRU3hMUVVOSVFTeERRVUZCTEVkQlFXbENMRWxCUVVGdlJDeHJRa0ZCUVN4RlFVRmhMR0ZCUVdGc1JDeERRVUZCTEVWQlFWTnpRaXhEUVVGQkxFZEJRV1VzVTBGQlV5eFRRVVY2UlhCQ0xFTkJRVUVzUzBGRFNFRXNRMEZCUVN4SFFVRm5RaXhKUVVGQlowUXNhMEpCUVVFc1JVRkJZU3hoUVVGaGJFUXNRMEZCUVN4RlFVRlRjMElzUTBGQlFTeEhRVUZsTEZWQlFWVXNXVUZGTVVWNFFpeERRVUZCTEV0QlFXZENRU3hEUVVGQkxFTkJRV1VyUXl4TFFVRkJMRU5CUVUxTkxFOUJRVUVzUjBGQlZYQkNMRU5CUVVFc1IwRkJiVUlzU1VGQlNVRXNRMEZCUVN4SFFVRnRRaXhKUVVONlJqZENMRU5CUVVFc1MwRkJaVUVzUTBGQlFTeERRVUZqTWtNc1MwRkJRU3hEUVVGTlRTeFBRVUZCTEVsQlFWZHdRaXhEUVVGQkxFZEJRVzFDTEV0QlFVdEJMRU5CUVVFc1IwRkJiVUlzUlVGREwwWTdVVUZCUVR0TlFVTkdPMGxCUVVFN1NVRm5Ra0Z4UWl4aFFVRkJMRVZCWkc5Q2RFUXNRMEZCUVR0TlFVTk5SU3hEUVVGQkxFTkJRVTlwUWl4TlFVRkJMRU5CUVU5dlF5eEhRVUZCTEVOQlFVbDJSQ3hEUVVGQkxFbEJRVmNzU1VGQlFYZEVMRmRCUVVFc1JVRkJiMEo0UkN4RFFVRkJMRWRCUTNwRWVVUXNUMEZCUVN4RFFVRlJka1FzUTBGQlFUdFJRVU40UWtFc1EwRkJRU3hEUVVGSE5rTXNTMEZCUVN4RFFVRk5WeXhyUWtGQlFTeEhRVUZ4UWl4SFFVRkhNVVFzUTBGQlFTeE5RVU5xUTBVc1EwRkJRU3hEUVVGSGVVUXNaMEpCUVVFc1EwRkJhVUlzWjBoQlFXZElSaXhQUVVGQkxFTkJRVkYyUkN4RFFVRkJPMVZCUXpGSlFTeERRVUZCTEVOQlFWTTJReXhMUVVGQkxFTkJRVTFYTEd0Q1FVRkJMRWRCUVhGQ0xFZEJRVWN4UkN4RFFVRkJMRWxCUVZrN1VVRkJRU3hGUVVOdVJEdE5RVUZCTEVWQlEwWTdTVUZCUVR0SlFWRkdORVFzVjBGQlFTeEZRVUZoUVN4RFFVRkJMRTFCUVUwN1NVRkRia0pETEdWQlFVRXNSVUZCYVVKQkxFTkJRVUVzVFVGQlRUdE5RVU55UWtNc2JVSkJRVUVzUjBGQmNVSTdTVUZCUVR0RlFVRkJMRVZCUnpOQ08wRkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gRWZmZWN0Q3JlYXRpdmU7XG52YXIgX2NyZWF0ZVNoYWRvd01pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvY3JlYXRlLXNoYWRvdy5taW4ubWpzXCIpO1xudmFyIF9lZmZlY3RJbml0TWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9lZmZlY3QtaW5pdC5taW4ubWpzXCIpO1xudmFyIF9lZmZlY3RUYXJnZXRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWluLm1qc1wiKTtcbnZhciBfZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gRWZmZWN0Q3JlYXRpdmUoZSkge1xuICBsZXQge1xuICAgIHN3aXBlcjogdCxcbiAgICBleHRlbmRQYXJhbXM6IHMsXG4gICAgb246IHJcbiAgfSA9IGU7XG4gIHMoe1xuICAgIGNyZWF0aXZlRWZmZWN0OiB7XG4gICAgICBsaW1pdFByb2dyZXNzOiAxLFxuICAgICAgc2hhZG93UGVyUHJvZ3Jlc3M6ICExLFxuICAgICAgcHJvZ3Jlc3NNdWx0aXBsaWVyOiAxLFxuICAgICAgcGVyc3BlY3RpdmU6ICEwLFxuICAgICAgcHJldjoge1xuICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgcm90YXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHNjYWxlOiAxXG4gICAgICB9LFxuICAgICAgbmV4dDoge1xuICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgcm90YXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHNjYWxlOiAxXG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgYSA9IGUgPT4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IGUgOiBgJHtlfXB4YDtcbiAgKDAsIF9lZmZlY3RJbml0TWluLmUpKHtcbiAgICBlZmZlY3Q6IFwiY3JlYXRpdmVcIixcbiAgICBzd2lwZXI6IHQsXG4gICAgb246IHIsXG4gICAgc2V0VHJhbnNsYXRlOiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgc2xpZGVzOiBlLFxuICAgICAgICAgIHdyYXBwZXJFbDogcyxcbiAgICAgICAgICBzbGlkZXNTaXplc0dyaWQ6IHJcbiAgICAgICAgfSA9IHQsXG4gICAgICAgIGkgPSB0LnBhcmFtcy5jcmVhdGl2ZUVmZmVjdCxcbiAgICAgICAge1xuICAgICAgICAgIHByb2dyZXNzTXVsdGlwbGllcjogb1xuICAgICAgICB9ID0gaSxcbiAgICAgICAgbCA9IHQucGFyYW1zLmNlbnRlcmVkU2xpZGVzO1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgY29uc3QgZSA9IHJbMF0gLyAyIC0gdC5wYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlIHx8IDA7XG4gICAgICAgIHMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoY2FsYyg1MCUgLSAke2V9cHgpKWA7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBzID0gMDsgcyA8IGUubGVuZ3RoOyBzICs9IDEpIHtcbiAgICAgICAgY29uc3QgciA9IGVbc10sXG4gICAgICAgICAgbiA9IHIucHJvZ3Jlc3MsXG4gICAgICAgICAgYyA9IE1hdGgubWluKE1hdGgubWF4KHIucHJvZ3Jlc3MsIC1pLmxpbWl0UHJvZ3Jlc3MpLCBpLmxpbWl0UHJvZ3Jlc3MpO1xuICAgICAgICBsZXQgZiA9IGM7XG4gICAgICAgIGwgfHwgKGYgPSBNYXRoLm1pbihNYXRoLm1heChyLm9yaWdpbmFsUHJvZ3Jlc3MsIC1pLmxpbWl0UHJvZ3Jlc3MpLCBpLmxpbWl0UHJvZ3Jlc3MpKTtcbiAgICAgICAgY29uc3QgbSA9IHIuc3dpcGVyU2xpZGVPZmZzZXQsXG4gICAgICAgICAgcCA9IFt0LnBhcmFtcy5jc3NNb2RlID8gLW0gLSB0LnRyYW5zbGF0ZSA6IC1tLCAwLCAwXSxcbiAgICAgICAgICBkID0gWzAsIDAsIDBdO1xuICAgICAgICBsZXQgaCA9ICExO1xuICAgICAgICB0LmlzSG9yaXpvbnRhbCgpIHx8IChwWzFdID0gcFswXSwgcFswXSA9IDApO1xuICAgICAgICBsZXQgZyA9IHtcbiAgICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH07XG4gICAgICAgIGMgPCAwID8gKGcgPSBpLm5leHQsIGggPSAhMCkgOiBjID4gMCAmJiAoZyA9IGkucHJldiwgaCA9ICEwKSwgcC5mb3JFYWNoKChlLCB0KSA9PiB7XG4gICAgICAgICAgcFt0XSA9IGBjYWxjKCR7ZX1weCArICgke2EoZy50cmFuc2xhdGVbdF0pfSAqICR7TWF0aC5hYnMoYyAqIG8pfSkpYDtcbiAgICAgICAgfSksIGQuZm9yRWFjaCgoZSwgdCkgPT4ge1xuICAgICAgICAgIGRbdF0gPSBnLnJvdGF0ZVt0XSAqIE1hdGguYWJzKGMgKiBvKTtcbiAgICAgICAgfSksIHIuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQobikpICsgZS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHcgPSBwLmpvaW4oXCIsIFwiKSxcbiAgICAgICAgICB5ID0gYHJvdGF0ZVgoJHtkWzBdfWRlZykgcm90YXRlWSgke2RbMV19ZGVnKSByb3RhdGVaKCR7ZFsyXX1kZWcpYCxcbiAgICAgICAgICB1ID0gZiA8IDAgPyBgc2NhbGUoJHsxICsgKDEgLSBnLnNjYWxlKSAqIGYgKiBvfSlgIDogYHNjYWxlKCR7MSAtICgxIC0gZy5zY2FsZSkgKiBmICogb30pYCxcbiAgICAgICAgICB2ID0gZiA8IDAgPyAxICsgKDEgLSBnLm9wYWNpdHkpICogZiAqIG8gOiAxIC0gKDEgLSBnLm9wYWNpdHkpICogZiAqIG8sXG4gICAgICAgICAgRSA9IGB0cmFuc2xhdGUzZCgke3d9KSAke3l9ICR7dX1gO1xuICAgICAgICBpZiAoaCAmJiBnLnNoYWRvdyB8fCAhaCkge1xuICAgICAgICAgIGxldCBlID0gci5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3dcIik7XG4gICAgICAgICAgaWYgKCFlICYmIGcuc2hhZG93ICYmIChlID0gKDAsIF9jcmVhdGVTaGFkb3dNaW4uYykoXCJjcmVhdGl2ZVwiLCByKSksIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBpLnNoYWRvd1BlclByb2dyZXNzID8gYyAqICgxIC8gaS5saW1pdFByb2dyZXNzKSA6IGM7XG4gICAgICAgICAgICBlLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyh0KSwgMCksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBNID0gKDAsIF9lZmZlY3RUYXJnZXRNaW4uZSkoaSwgcik7XG4gICAgICAgIE0uc3R5bGUudHJhbnNmb3JtID0gRSwgTS5zdHlsZS5vcGFjaXR5ID0gdiwgZy5vcmlnaW4gJiYgKE0uc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gZy5vcmlnaW4pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZSA9PiB7XG4gICAgICBjb25zdCBzID0gdC5zbGlkZXMubWFwKGUgPT4gKDAsIF91dGlsc01pbi5rKShlKSk7XG4gICAgICBzLmZvckVhY2godCA9PiB7XG4gICAgICAgIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2AsIHQucXVlcnlTZWxlY3RvckFsbChcIi5zd2lwZXItc2xpZGUtc2hhZG93XCIpLmZvckVhY2godCA9PiB7XG4gICAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9KSwgKDAsIF9lZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZE1pbi5lKSh7XG4gICAgICAgIHN3aXBlcjogdCxcbiAgICAgICAgZHVyYXRpb246IGUsXG4gICAgICAgIHRyYW5zZm9ybUVsZW1lbnRzOiBzLFxuICAgICAgICBhbGxTbGlkZXM6ICEwXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0LnBhcmFtcy5jcmVhdGl2ZUVmZmVjdC5wZXJzcGVjdGl2ZSxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICF0LnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZaV1ptWldOMFNXNXBkRTFwYmlJc0luSmxjWFZwY21VaUxDSmZaV1ptWldOMFZHRnlaMlYwVFdsdUlpd2lYMlZtWm1WamRGWnBjblIxWVd4VWNtRnVjMmwwYVc5dVJXNWtUV2x1SWl3aVgzVjBhV3h6VFdsdUlpd2lSV1ptWldOMFEzSmxZWFJwZG1VaUxDSmxJaXdpYzNkcGNHVnlJaXdpZENJc0ltVjRkR1Z1WkZCaGNtRnRjeUlzSW5NaUxDSnZiaUlzSW5JaUxDSmpjbVZoZEdsMlpVVm1abVZqZENJc0lteHBiV2wwVUhKdlozSmxjM01pTENKemFHRmtiM2RRWlhKUWNtOW5jbVZ6Y3lJc0luQnliMmR5WlhOelRYVnNkR2x3YkdsbGNpSXNJbkJsY25Od1pXTjBhWFpsSWl3aWNISmxkaUlzSW5SeVlXNXpiR0YwWlNJc0luSnZkR0YwWlNJc0ltOXdZV05wZEhraUxDSnpZMkZzWlNJc0ltNWxlSFFpTENKaElpd2laV1ptWldOMFNXNXBkQ0lzSW1WbVptVmpkQ0lzSW5ObGRGUnlZVzV6YkdGMFpTSXNJbk5zYVdSbGN5SXNJbmR5WVhCd1pYSkZiQ0lzSW5Oc2FXUmxjMU5wZW1WelIzSnBaQ0lzSW1raUxDSndZWEpoYlhNaUxDSnZJaXdpYkNJc0ltTmxiblJsY21Wa1UyeHBaR1Z6SWl3aWMyeHBaR1Z6VDJabWMyVjBRbVZtYjNKbElpd2ljM1I1YkdVaUxDSjBjbUZ1YzJadmNtMGlMQ0pzWlc1bmRHZ2lMQ0p1SWl3aWNISnZaM0psYzNNaUxDSmpJaXdpVFdGMGFDSXNJbTFwYmlJc0ltMWhlQ0lzSW1ZaUxDSnZjbWxuYVc1aGJGQnliMmR5WlhOeklpd2liU0lzSW5OM2FYQmxjbE5zYVdSbFQyWm1jMlYwSWl3aWNDSXNJbU56YzAxdlpHVWlMQ0prSWl3aWFDSXNJbWx6U0c5eWFYcHZiblJoYkNJc0ltY2lMQ0ptYjNKRllXTm9JaXdpWVdKeklpd2lla2x1WkdWNElpd2ljbTkxYm1RaUxDSjNJaXdpYW05cGJpSXNJbmtpTENKMUlpd2lkaUlzSWtVaUxDSnphR0ZrYjNjaUxDSnhkV1Z5ZVZObGJHVmpkRzl5SWl3aVkzSmxZWFJsVTJoaFpHOTNJaXdpVFNJc0ltVm1abVZqZEZSaGNtZGxkQ0lzSW05eWFXZHBiaUlzSW5SeVlXNXpabTl5YlU5eWFXZHBiaUlzSW5ObGRGUnlZVzV6YVhScGIyNGlMQ0p0WVhBaUxDSm5aWFJUYkdsa1pWUnlZVzV6Wm05eWJVVnNJaXdpZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1SWl3aWNYVmxjbmxUWld4bFkzUnZja0ZzYkNJc0ltVm1abVZqZEZacGNuUjFZV3hVY21GdWMybDBhVzl1Ulc1a0lpd2laSFZ5WVhScGIyNGlMQ0owY21GdWMyWnZjbTFGYkdWdFpXNTBjeUlzSW1Gc2JGTnNhV1JsY3lJc0ltOTJaWEozY21sMFpWQmhjbUZ0Y3lJc0luZGhkR05vVTJ4cFpHVnpVSEp2WjNKbGMzTWlMQ0oyYVhKMGRXRnNWSEpoYm5Oc1lYUmxJbDBzSW5OdmRYSmpaWE1pT2xzaU1DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXMjUxYkd4ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVUZyUXl4SlFVRkJRU3hqUVVGQkxFZEJRVUZETEU5QlFVRTdRVUZEUml4SlFVRkJReXhuUWtGQlFTeEhRVUZCUkN4UFFVRkJPMEZCUTBVc1NVRkJRVVVzT0VKQlFVRXNSMEZCUVVZc1QwRkJRVHRCUVVOakxFbEJRVUZITEZOQlFVRXNSMEZCUVVnc1QwRkJRVHRCUVVkb1JDeFRRVUZUU1N4bFFVRmxReXhEUVVGQk8wVkJRM1JDTzBsQlFVbERMRTFCUVVFc1JVRkRSa01zUTBGQlFUdEpRVUZOUXl4WlFVRkJMRVZCUTA1RExFTkJRVUU3U1VGQldVTXNSVUZCUVN4RlFVTmFRenRGUVVGQkxFbEJRMFZPTEVOQlFVRTdSVUZEU2trc1EwRkJRU3hEUVVGaE8wbEJRMWhITEdOQlFVRXNSVUZCWjBJN1RVRkRaRU1zWVVGQlFTeEZRVUZsTzAxQlEyWkRMR2xDUVVGQkxFZEJRVzFDTzAxQlEyNUNReXhyUWtGQlFTeEZRVUZ2UWp0TlFVTndRa01zVjBGQlFTeEhRVUZoTzAxQlEySkRMRWxCUVVFc1JVRkJUVHRSUVVOS1F5eFRRVUZCTEVWQlFWY3NRMEZCUXl4SFFVRkhMRWRCUVVjN1VVRkRiRUpETEUxQlFVRXNSVUZCVVN4RFFVRkRMRWRCUVVjc1IwRkJSenRSUVVObVF5eFBRVUZCTEVWQlFWTTdVVUZEVkVNc1MwRkJRU3hGUVVGUE8wMUJRVUU3VFVGRlZFTXNTVUZCUVN4RlFVRk5PMUZCUTBwS0xGTkJRVUVzUlVGQlZ5eERRVUZETEVkQlFVY3NSMEZCUnp0UlFVTnNRa01zVFVGQlFTeEZRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhPMUZCUTJaRExFOUJRVUVzUlVGQlV6dFJRVU5VUXl4TFFVRkJMRVZCUVU4N1RVRkJRVHRKUVVGQk8wVkJRVUU3UlVGSllpeE5RVUZOUlN4RFFVRkJMRWRCUVc5Q2JFSXNRMEZCUVN4SlFVTklMRzFDUVVGV1FTeERRVUZCTEVkQlFUSkNRU3hEUVVGQkxFZEJReTlDTEVkQlFVZEJMRU5CUVVFN1JVRXJSbG9zU1VGQlFXMUNMR2RDUVVGQkxFVkJRVmM3U1VGRFZFTXNUVUZCUVN4RlFVRlJPMGxCUTFKdVFpeE5RVUZCTEVWQlFVRkRMRU5CUVVFN1NVRkRRVWNzUlVGQlFTeEZRVUZCUXl4RFFVRkJPMGxCUTBGbExGbEJRVUVzUlVGcVIyMUNRU3hEUVVGQk8wMUJRMjVDTzFWQlFVMURMRTFCUVVFc1JVRkRTblJDTEVOQlFVRTdWVUZCVFhWQ0xGTkJRVUVzUlVGRFRtNUNMRU5CUVVFN1ZVRkJVMjlDTEdWQlFVRXNSVUZEVkd4Q08xRkJRVUVzU1VGRFJVb3NRMEZCUVR0UlFVTkZkVUlzUTBGQlFTeEhRVUZUZGtJc1EwRkJRU3hEUVVGUGQwSXNUVUZCUVN4RFFVRlBia0lzWTBGQlFUdFJRVUZCTzFWQlJUTkNSeXhyUWtGQlFTeEZRVUZ2UW1sQ08xRkJRVUVzU1VGRGJFSkdMRU5CUVVFN1VVRkRSVWNzUTBGQlFTeEhRVUZ0UWpGQ0xFTkJRVUVzUTBGQlQzZENMRTFCUVVFc1EwRkJUMGNzWTBGQlFUdE5RVU4yUXl4SlFVRkpSQ3hEUVVGQkxFVkJRV3RDTzFGQlEzQkNMRTFCUVUwMVFpeERRVUZCTEVkQlFWTk5MRU5CUVVFc1EwRkJaMElzUzBGQlN5eEpRVUZKU2l4RFFVRkJMRU5CUVU5M1FpeE5RVUZCTEVOQlFVOUpMR3RDUVVGQkxFbEJRWE5DTzFGQlF6VkZNVUlzUTBGQlFTeERRVUZWTWtJc1MwRkJRU3hEUVVGTlF5eFRRVUZCTEVkQlFWa3NlVUpCUVhsQ2FFTXNRMEZCUVN4TlFVTjJSRHROUVVGQk8wMUJRMEVzUzBGQlN5eEpRVUZKU1N4RFFVRkJMRWRCUVVrc1IwRkJSMEVzUTBGQlFTeEhRVUZKU2l4RFFVRkJMRU5CUVU5cFF5eE5RVUZCTEVWQlFWRTNRaXhEUVVGQkxFbEJRVXNzUjBGQlJ6dFJRVU42UXl4TlFVRk5SU3hEUVVGQkxFZEJRVlZPTEVOQlFVRXNRMEZCVDBrc1EwRkJRVHRWUVVOcVFqaENMRU5CUVVFc1IwRkJaMEkxUWl4RFFVRkJMRU5CUVZFMlFpeFJRVUZCTzFWQlEzaENReXhEUVVGQkxFZEJRVmRETEVsQlFVRXNRMEZCUzBNc1IwRkJRU3hEUVVGSlJDeEpRVUZCTEVOQlFVdEZMRWRCUVVFc1EwRkJTV3BETEVOQlFVRXNRMEZCVVRaQ0xGRkJRVUVzUjBGQlYxWXNRMEZCUVN4RFFVRlBha0lzWVVGQlFTeEhRVUZuUW1sQ0xFTkJRVUVzUTBGQlQycENMR0ZCUVVFN1VVRkRjRVlzU1VGQlNXZERMRU5CUVVFc1IwRkJiVUpLTEVOQlFVRTdVVUZEYkVKU0xFTkJRVUVzUzBGRFNGa3NRMEZCUVN4SFFVRnRRa2dzU1VGQlFTeERRVUZMUXl4SFFVRkJMRU5CUVVsRUxFbEJRVUVzUTBGQlMwVXNSMEZCUVN4RFFVRkpha01zUTBGQlFTeERRVUZSYlVNc1owSkJRVUVzUjBGQmJVSm9RaXhEUVVGQkxFTkJRVTlxUWl4aFFVRkJMRWRCUVdkQ2FVSXNRMEZCUVN4RFFVRlBha0lzWVVGQlFUdFJRVVZvUnl4TlFVRk5hME1zUTBGQlFTeEhRVUZUY0VNc1EwRkJRU3hEUVVGUmNVTXNhVUpCUVVFN1ZVRkRha0pETEVOQlFVRXNSMEZCU1N4RFFVRkRNVU1zUTBGQlFTeERRVUZQZDBJc1RVRkJRU3hEUVVGUGJVSXNUMEZCUVN4SlFVRlhTQ3hEUVVGQkxFZEJRVk40UXl4RFFVRkJMRU5CUVU5WExGTkJRVUVzU1VGQllUWkNMRU5CUVVFc1JVRkJVU3hIUVVGSE8xVkJRM1JGU1N4RFFVRkJMRWRCUVVrc1EwRkJReXhIUVVGSExFZEJRVWM3VVVGRGFrSXNTVUZCU1VNc1EwRkJRU3hKUVVGVE8xRkJRMUkzUXl4RFFVRkJMRU5CUVU4NFF5eFpRVUZCTEU5QlExWktMRU5CUVVFc1EwRkJSU3hMUVVGTFFTeERRVUZCTEVOQlFVVXNTVUZEVkVFc1EwRkJRU3hEUVVGRkxFdEJRVXM3VVVGRlZDeEpRVUZKU3l4RFFVRkJMRWRCUVU4N1ZVRkRWSEJETEZOQlFVRXNSVUZCVnl4RFFVRkRMRWRCUVVjc1IwRkJSenRWUVVOc1FrTXNUVUZCUVN4RlFVRlJMRU5CUVVNc1IwRkJSeXhIUVVGSE8xVkJRMlpGTEV0QlFVRXNSVUZCVHp0VlFVTlFSQ3hQUVVGQkxFVkJRVk03VVVGQlFUdFJRVVZRY1VJc1EwRkJRU3hIUVVGWExFdEJRMkpoTEVOQlFVRXNSMEZCVDNoQ0xFTkJRVUVzUTBGQlQxSXNTVUZCUVN4RlFVTmtPRUlzUTBGQlFTeEpRVUZUTEV0QlEwRllMRU5CUVVFc1IwRkJWeXhOUVVOd1FtRXNRMEZCUVN4SFFVRlBlRUlzUTBGQlFTeERRVUZQWWl4SlFVRkJMRVZCUTJSdFF5eERRVUZCTEVsQlFWTXNTVUZIV0Vnc1EwRkJRU3hEUVVGRlRTeFBRVUZCTEVOQlFWRXNRMEZCUTJ4RUxFTkJRVUVzUlVGQlQwVXNRMEZCUVR0VlFVTm9RakJETEVOQlFVRXNRMEZCUlRGRExFTkJRVUVzU1VGQlV5eFJRVUZSUml4RFFVRkJMRk5CUVdOclFpeERRVUZCTEVOQlFXdENLMElzUTBGQlFTeERRVUZMY0VNc1UwRkJRU3hEUVVGVldDeERRVUZCTEZGQlFXRnRReXhKUVVGQkxFTkJRVXRqTEVkQlFVRXNRMEZCU1dZc1EwRkJRU3hIUVVGWFZDeERRVUZCTEV0QlFXVTdVVUZCUVN4SlFVZHdTRzFDTEVOQlFVRXNRMEZCUlVrc1QwRkJRU3hEUVVGUkxFTkJRVU5zUkN4RFFVRkJMRVZCUVU5RkxFTkJRVUU3VlVGRGFFSTBReXhEUVVGQkxFTkJRVVUxUXl4RFFVRkJMRWxCUVZNclF5eERRVUZCTEVOQlFVdHVReXhOUVVGQkxFTkJRVTlhTEVOQlFVRXNTVUZCVTIxRExFbEJRVUVzUTBGQlMyTXNSMEZCUVN4RFFVRkpaaXhEUVVGQkxFZEJRVmRVTEVOQlFVRXNRMEZCVnp0UlFVRkJMRWxCUldwRmNrSXNRMEZCUVN4RFFVRlJlVUlzUzBGQlFTeERRVUZOY1VJc1RVRkJRU3hKUVVGVlppeEpRVUZCTEVOQlFVdGpMRWRCUVVFc1EwRkJTV1FzU1VGQlFTeERRVUZMWjBJc1MwRkJRU3hEUVVGTmJrSXNRMEZCUVN4TFFVRnJRbXhETEVOQlFVRXNRMEZCVDJsRExFMUJRVUU3VVVGRGNrVXNUVUZCVFhGQ0xFTkJRVUVzUjBGQmEwSldMRU5CUVVFc1EwRkJSVmNzU1VGQlFTeERRVUZMTzFWQlEzcENReXhEUVVGQkxFZEJRV1VzVjBGQlYxWXNRMEZCUVN4RFFVRkZMR3RDUVVGclFrRXNRMEZCUVN4RFFVRkZMR3RDUVVGclFrRXNRMEZCUVN4RFFVRkZPMVZCUTNCRlZ5eERRVUZCTEVkQlFXTnFRaXhEUVVGQkxFZEJRVzFDTEVsQlFVa3NVMEZCVXl4TFFVRkxMRWxCUVVsVExFTkJRVUVzUTBGQlMycERMRXRCUVVFc1NVRkJVM2RDTEVOQlFVRXNSMEZCYlVKaUxFTkJRVUVzVFVGQlowSXNVMEZCVXl4TFFVRkxMRWxCUVVselFpeERRVUZCTEVOQlFVdHFReXhMUVVGQkxFbEJRVk4zUWl4RFFVRkJMRWRCUVcxQ1lpeERRVUZCTzFWQlF6TktLMElzUTBGQlFTeEhRVUZuUW14Q0xFTkJRVUVzUjBGQmJVSXNTVUZCU1N4TFFVRkxMRWxCUVVsVExFTkJRVUVzUTBGQlMyeERMRTlCUVVFc1NVRkJWM2xDTEVOQlFVRXNSMEZCYlVKaUxFTkJRVUVzUjBGQllTeExRVUZMTEVsQlFVbHpRaXhEUVVGQkxFTkJRVXRzUXl4UFFVRkJMRWxCUVZkNVFpeERRVUZCTEVkQlFXMUNZaXhEUVVGQk8xVkJRelZKWjBNc1EwRkJRU3hIUVVGWkxHVkJRV1ZNTEVOQlFVRXNTMEZCYjBKRkxFTkJRVUVzU1VGQlowSkRMRU5CUVVFN1VVRkhja1VzU1VGQlNWWXNRMEZCUVN4SlFVRlZSU3hEUVVGQkxFTkJRVXRYTEUxQlFVRXNTMEZCVjJJc1EwRkJRU3hGUVVGUk8xVkJRM0JETEVsQlFVa3ZReXhEUVVGQkxFZEJRVmROTEVOQlFVRXNRMEZCVVhWRUxHRkJRVUVzUTBGQll6dFZRVWx5UXl4TFFVaExOMFFzUTBGQlFTeEpRVUZaYVVRc1EwRkJRU3hEUVVGTFZ5eE5RVUZCTEV0QlEzQkNOVVFzUTBGQlFTeEhRVUZYTEVsQlFVRTRSQ3hyUWtGQlFTeEZRVUZoTEZsQlFWbDRSQ3hEUVVGQkxFbEJSV3hEVGl4RFFVRkJMRVZCUVZVN1dVRkRXaXhOUVVGTlJTeERRVUZCTEVkQlFXZENkVUlzUTBGQlFTeERRVUZQYUVJc2FVSkJRVUVzUjBGQmIwSXlRaXhEUVVGQkxFbEJRVmtzU1VGQlNWZ3NRMEZCUVN4RFFVRlBha0lzWVVGQlFTeEpRVUZwUWpSQ0xFTkJRVUU3V1VGRGVrWndReXhEUVVGQkxFTkJRVk1yUWl4TFFVRkJMRU5CUVUxb1FpeFBRVUZCTEVkQlFWVnpRaXhKUVVGQkxFTkJRVXRETEVkQlFVRXNRMEZCU1VRc1NVRkJRU3hEUVVGTFJTeEhRVUZCTEVOQlFVbEdMRWxCUVVFc1EwRkJTMk1zUjBGQlFTeERRVUZKYWtRc1EwRkJRU3hIUVVGblFpeEpRVUZKTEVWQlF6RkZPMVZCUVVFN1VVRkRSanRSUVVOQkxFMUJRVTAyUkN4RFFVRkJMRWRCUVZjc1NVRkJRVU1zYTBKQlFVRXNSVUZCWVhaRExFTkJRVUVzUlVGQlVXNUNMRU5CUVVFN1VVRkRkRU41UkN4RFFVRkJMRU5CUVZOb1F5eExRVUZCTEVOQlFVMURMRk5CUVVFc1IwRkJXVEpDTEVOQlFVRXNSVUZETTBKSkxFTkJRVUVzUTBGQlUyaERMRXRCUVVFc1EwRkJUV2hDTEU5QlFVRXNSMEZCVlRKRExFTkJRVUVzUlVGRGNrSlVMRU5CUVVFc1EwRkJTMmRDTEUxQlFVRXNTMEZEVUVZc1EwRkJRU3hEUVVGVGFFTXNTMEZCUVN4RFFVRk5iVU1zWlVGQlFTeEhRVUZyUW1wQ0xFTkJRVUVzUTBGQlMyZENMRTFCUVVFc1EwRkZNVU03VFVGQlFUdEpRVUZCTzBsQmMwSkJSU3hoUVVGQkxFVkJjRUp2UW01RkxFTkJRVUU3VFVGRGNFSXNUVUZCVFVrc1EwRkJRU3hIUVVGdlFrWXNRMEZCUVN4RFFVRlBiMElzVFVGQlFTeERRVUZQT0VNc1IwRkJRU3hEUVVGSmNFVXNRMEZCUVN4SlFVRlhMRWxCUVVGeFJTeFhRVUZCTEVWQlFXOUNja1VzUTBGQlFUdE5RVU16UlVrc1EwRkJRU3hEUVVGclFqaERMRTlCUVVFc1EwRkJVV2hFTEVOQlFVRTdVVUZEZUVKQkxFTkJRVUVzUTBGQlJ6WkNMRXRCUVVFc1EwRkJUWFZETEd0Q1FVRkJMRWRCUVhGQ0xFZEJRVWQwUlN4RFFVRkJMRTFCUTJwRFJTeERRVUZCTEVOQlFVZHhSU3huUWtGQlFTeERRVUZwUWl4M1FrRkJkMEp5UWl4UFFVRkJMRU5CUVZGb1JDeERRVUZCTzFWQlEyeEVRU3hEUVVGQkxFTkJRVk0yUWl4TFFVRkJMRU5CUVUxMVF5eHJRa0ZCUVN4SFFVRnhRaXhIUVVGSGRFVXNRMEZCUVN4SlFVRlpPMUZCUVVFc1JVRkRia1E3VFVGQlFTeEpRVVZLTEVsQlFVRjNSU3huUTBGQlFTeEZRVUV5UWp0UlFVTjZRblpGTEUxQlFVRXNSVUZCUVVNc1EwRkJRVHRSUVVOQmRVVXNVVUZCUVN4RlFVRkJla1VzUTBGQlFUdFJRVU5CTUVVc2FVSkJRVUVzUlVGQlFYUkZMRU5CUVVFN1VVRkRRWFZGTEZOQlFVRXNSMEZCVnp0TlFVRkJMRVZCUTFnN1NVRkJRVHRKUVZGR2FFVXNWMEZCUVN4RlFVRmhRU3hEUVVGQkxFdEJRVTFVTEVOQlFVRXNRMEZCVDNkQ0xFMUJRVUVzUTBGQlQyNUNMR05CUVVFc1EwRkJaVWtzVjBGQlFUdEpRVU5vUkdsRkxHVkJRVUVzUlVGQmFVSkJMRU5CUVVFc1RVRkJUVHROUVVOeVFrTXNiVUpCUVVFc1IwRkJjVUk3VFVGRGNrSkRMR2RDUVVGQkxFZEJRVzFDTlVVc1EwRkJRU3hEUVVGUGQwSXNUVUZCUVN4RFFVRlBiVUk3U1VGQlFUdEZRVUZCTEVWQlIzWkRPMEZCUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEVmZmVjdEN1YmU7XG52YXIgX2VmZmVjdEluaXRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2VmZmVjdC1pbml0Lm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gRWZmZWN0Q3ViZShlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiB0LFxuICAgIGV4dGVuZFBhcmFtczogcyxcbiAgICBvbjogYVxuICB9ID0gZTtcbiAgcyh7XG4gICAgY3ViZUVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiAhMCxcbiAgICAgIHNoYWRvdzogITAsXG4gICAgICBzaGFkb3dPZmZzZXQ6IDIwLFxuICAgICAgc2hhZG93U2NhbGU6IC45NFxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHIgPSAoZSwgdCwgcykgPT4ge1xuICAgIGxldCBhID0gcyA/IGUucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIikgOiBlLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3BcIiksXG4gICAgICByID0gcyA/IGUucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XCIpIDogZS5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tXCIpO1xuICAgIGEgfHwgKGEgPSAoMCwgX3V0aWxzTWluLmMpKFwiZGl2XCIsIChcInN3aXBlci1zbGlkZS1zaGFkb3ctY3ViZSBzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKHMgPyBcImxlZnRcIiA6IFwidG9wXCIpKS5zcGxpdChcIiBcIikpLCBlLmFwcGVuZChhKSksIHIgfHwgKHIgPSAoMCwgX3V0aWxzTWluLmMpKFwiZGl2XCIsIChcInN3aXBlci1zbGlkZS1zaGFkb3ctY3ViZSBzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKHMgPyBcInJpZ2h0XCIgOiBcImJvdHRvbVwiKSkuc3BsaXQoXCIgXCIpKSwgZS5hcHBlbmQocikpLCBhICYmIChhLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtdCwgMCkpLCByICYmIChyLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCh0LCAwKSk7XG4gIH07XG4gICgwLCBfZWZmZWN0SW5pdE1pbi5lKSh7XG4gICAgZWZmZWN0OiBcImN1YmVcIixcbiAgICBzd2lwZXI6IHQsXG4gICAgb246IGEsXG4gICAgc2V0VHJhbnNsYXRlOiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgZWw6IGUsXG4gICAgICAgICAgd3JhcHBlckVsOiBzLFxuICAgICAgICAgIHNsaWRlczogYSxcbiAgICAgICAgICB3aWR0aDogbyxcbiAgICAgICAgICBoZWlnaHQ6IGksXG4gICAgICAgICAgcnRsVHJhbnNsYXRlOiBsLFxuICAgICAgICAgIHNpemU6IGQsXG4gICAgICAgICAgYnJvd3NlcjogblxuICAgICAgICB9ID0gdCxcbiAgICAgICAgcCA9IHQucGFyYW1zLmN1YmVFZmZlY3QsXG4gICAgICAgIGMgPSB0LmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICB3ID0gdC52aXJ0dWFsICYmIHQucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGxldCBoLFxuICAgICAgICBmID0gMDtcbiAgICAgIHAuc2hhZG93ICYmIChjID8gKGggPSB0LndyYXBwZXJFbC5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1jdWJlLXNoYWRvd1wiKSwgaCB8fCAoaCA9ICgwLCBfdXRpbHNNaW4uYykoXCJkaXZcIiwgXCJzd2lwZXItY3ViZS1zaGFkb3dcIiksIHQud3JhcHBlckVsLmFwcGVuZChoKSksIGguc3R5bGUuaGVpZ2h0ID0gYCR7b31weGApIDogKGggPSBlLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLWN1YmUtc2hhZG93XCIpLCBoIHx8IChoID0gKDAsIF91dGlsc01pbi5jKShcImRpdlwiLCBcInN3aXBlci1jdWJlLXNoYWRvd1wiKSwgZS5hcHBlbmQoaCkpKSk7XG4gICAgICBmb3IgKGxldCBlID0gMDsgZSA8IGEubGVuZ3RoOyBlICs9IDEpIHtcbiAgICAgICAgY29uc3QgdCA9IGFbZV07XG4gICAgICAgIGxldCBzID0gZTtcbiAgICAgICAgdyAmJiAocyA9IHBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiksIDEwKSk7XG4gICAgICAgIGxldCBvID0gOTAgKiBzLFxuICAgICAgICAgIGkgPSBNYXRoLmZsb29yKG8gLyAzNjApO1xuICAgICAgICBsICYmIChvID0gLW8sIGkgPSBNYXRoLmZsb29yKC1vIC8gMzYwKSk7XG4gICAgICAgIGNvbnN0IG4gPSBNYXRoLm1heChNYXRoLm1pbih0LnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICBsZXQgaCA9IDAsXG4gICAgICAgICAgbSA9IDAsXG4gICAgICAgICAgdSA9IDA7XG4gICAgICAgIHMgJSA0ID09IDAgPyAoaCA9IDQgKiAtaSAqIGQsIHUgPSAwKSA6IChzIC0gMSkgJSA0ID09IDAgPyAoaCA9IDAsIHUgPSA0ICogLWkgKiBkKSA6IChzIC0gMikgJSA0ID09IDAgPyAoaCA9IGQgKyA0ICogaSAqIGQsIHUgPSBkKSA6IChzIC0gMykgJSA0ID09IDAgJiYgKGggPSAtZCwgdSA9IDMgKiBkICsgNCAqIGQgKiBpKSwgbCAmJiAoaCA9IC1oKSwgYyB8fCAobSA9IGgsIGggPSAwKTtcbiAgICAgICAgY29uc3QgYiA9IGByb3RhdGVYKCR7YyA/IDAgOiAtb31kZWcpIHJvdGF0ZVkoJHtjID8gbyA6IDB9ZGVnKSB0cmFuc2xhdGUzZCgke2h9cHgsICR7bX1weCwgJHt1fXB4KWA7XG4gICAgICAgIG4gPD0gMSAmJiBuID4gLTEgJiYgKGYgPSA5MCAqIHMgKyA5MCAqIG4sIGwgJiYgKGYgPSA5MCAqIC1zIC0gOTAgKiBuKSksIHQuc3R5bGUudHJhbnNmb3JtID0gYiwgcC5zbGlkZVNoYWRvd3MgJiYgcih0LCBuLCBjKTtcbiAgICAgIH1cbiAgICAgIGlmIChzLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGA1MCUgNTAlIC0ke2QgLyAyfXB4YCwgcy5zdHlsZVtcIi13ZWJraXQtdHJhbnNmb3JtLW9yaWdpblwiXSA9IGA1MCUgNTAlIC0ke2QgLyAyfXB4YCwgcC5zaGFkb3cpIGlmIChjKSBoLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsICR7byAvIDIgKyBwLnNoYWRvd09mZnNldH1weCwgJHstbyAvIDJ9cHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwLnNoYWRvd1NjYWxlfSlgO2Vsc2Uge1xuICAgICAgICBjb25zdCBlID0gTWF0aC5hYnMoZikgLSA5MCAqIE1hdGguZmxvb3IoTWF0aC5hYnMoZikgLyA5MCksXG4gICAgICAgICAgdCA9IDEuNSAtIChNYXRoLnNpbigyICogZSAqIE1hdGguUEkgLyAzNjApIC8gMiArIE1hdGguY29zKDIgKiBlICogTWF0aC5QSSAvIDM2MCkgLyAyKSxcbiAgICAgICAgICBzID0gcC5zaGFkb3dTY2FsZSxcbiAgICAgICAgICBhID0gcC5zaGFkb3dTY2FsZSAvIHQsXG4gICAgICAgICAgciA9IHAuc2hhZG93T2Zmc2V0O1xuICAgICAgICBoLnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZTNkKCR7c30sIDEsICR7YX0pIHRyYW5zbGF0ZTNkKDBweCwgJHtpIC8gMiArIHJ9cHgsICR7LWkgLyAyIC8gYX1weCkgcm90YXRlWCgtOTBkZWcpYDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG0gPSAobi5pc1NhZmFyaSB8fCBuLmlzV2ViVmlldykgJiYgbi5uZWVkUGVyc3BlY3RpdmVGaXggPyAtZCAvIDIgOiAwO1xuICAgICAgcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMHB4LDAsJHttfXB4KSByb3RhdGVYKCR7dC5pc0hvcml6b250YWwoKSA/IDAgOiBmfWRlZykgcm90YXRlWSgke3QuaXNIb3Jpem9udGFsKCkgPyAtZiA6IDB9ZGVnKWAsIHMuc3R5bGUuc2V0UHJvcGVydHkoXCItLXN3aXBlci1jdWJlLXRyYW5zbGF0ZS16XCIsIGAke219cHhgKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGUgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbDogcyxcbiAgICAgICAgc2xpZGVzOiBhXG4gICAgICB9ID0gdDtcbiAgICAgIGlmIChhLmZvckVhY2godCA9PiB7XG4gICAgICAgIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2AsIHQucXVlcnlTZWxlY3RvckFsbChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgICAgIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2A7XG4gICAgICAgIH0pO1xuICAgICAgfSksIHQucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93ICYmICF0LmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBzLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLWN1YmUtc2hhZG93XCIpO1xuICAgICAgICB0ICYmICh0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlY3JlYXRlU2hhZG93czogKCkgPT4ge1xuICAgICAgY29uc3QgZSA9IHQuaXNIb3Jpem9udGFsKCk7XG4gICAgICB0LnNsaWRlcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBjb25zdCBzID0gTWF0aC5tYXgoTWF0aC5taW4odC5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgICAgcih0LCBzLCBlKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiB0LnBhcmFtcy5jdWJlRWZmZWN0LFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiAhMCxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiAhMSxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICEwXG4gICAgfSlcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZkWFJwYkhOTmFXNGlMQ0p5WlhGMWFYSmxJaXdpUldabVpXTjBRM1ZpWlNJc0ltVWlMQ0p6ZDJsd1pYSWlMQ0owSWl3aVpYaDBaVzVrVUdGeVlXMXpJaXdpY3lJc0ltOXVJaXdpWVNJc0ltTjFZbVZGWm1abFkzUWlMQ0p6Ykdsa1pWTm9ZV1J2ZDNNaUxDSnphR0ZrYjNjaUxDSnphR0ZrYjNkUFptWnpaWFFpTENKemFHRmtiM2RUWTJGc1pTSXNJbklpTENKamNtVmhkR1ZUYkdsa1pWTm9ZV1J2ZDNNaUxDSnhkV1Z5ZVZObGJHVmpkRzl5SWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW5Od2JHbDBJaXdpWVhCd1pXNWtJaXdpYzNSNWJHVWlMQ0p2Y0dGamFYUjVJaXdpVFdGMGFDSXNJbTFoZUNJc0ltVm1abVZqZEVsdWFYUWlMQ0psWm1abFkzUWlMQ0p6WlhSVWNtRnVjMnhoZEdVaUxDSmxiQ0lzSW5keVlYQndaWEpGYkNJc0luTnNhV1JsY3lJc0luZHBaSFJvSWl3aWJ5SXNJbWhsYVdkb2RDSXNJbWtpTENKeWRHeFVjbUZ1YzJ4aGRHVWlMQ0pzSWl3aWMybDZaU0lzSW1RaUxDSmljbTkzYzJWeUlpd2liaUlzSW5BaUxDSndZWEpoYlhNaUxDSmpJaXdpYVhOSWIzSnBlbTl1ZEdGc0lpd2lkeUlzSW5acGNuUjFZV3dpTENKbGJtRmliR1ZrSWl3aWFDSXNJbVlpTENKc1pXNW5kR2dpTENKd1lYSnpaVWx1ZENJc0ltZGxkRUYwZEhKcFluVjBaU0lzSW1ac2IyOXlJaXdpYldsdUlpd2ljSEp2WjNKbGMzTWlMQ0p0SWl3aWRTSXNJbUlpTENKMGNtRnVjMlp2Y20waUxDSjBjbUZ1YzJadmNtMVBjbWxuYVc0aUxDSmhZbk1pTENKemFXNGlMQ0pRU1NJc0ltTnZjeUlzSW1selUyRm1ZWEpwSWl3aWFYTlhaV0pXYVdWM0lpd2libVZsWkZCbGNuTndaV04wYVhabFJtbDRJaXdpYzJWMFVISnZjR1Z5ZEhraUxDSnpaWFJVY21GdWMybDBhVzl1SWl3aVptOXlSV0ZqYUNJc0luUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpSXNJbkYxWlhKNVUyVnNaV04wYjNKQmJHd2lMQ0p5WldOeVpXRjBaVk5vWVdSdmQzTWlMQ0puWlhSRlptWmxZM1JRWVhKaGJYTWlMQ0p3WlhKemNHVmpkR2wyWlNJc0ltOTJaWEozY21sMFpWQmhjbUZ0Y3lJc0luTnNhV1JsYzFCbGNsWnBaWGNpTENKemJHbGtaWE5RWlhKSGNtOTFjQ0lzSW5kaGRHTm9VMnhwWkdWelVISnZaM0psYzNNaUxDSnlaWE5wYzNSaGJtTmxVbUYwYVc4aUxDSnpjR0ZqWlVKbGRIZGxaVzRpTENKalpXNTBaWEpsWkZOc2FXUmxjeUlzSW5acGNuUjFZV3hVY21GdWMyeGhkR1VpWFN3aWMyOTFjbU5sY3lJNld5SXdJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiYm5Wc2JGMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUVdkRExFbEJRVUZCTEZOQlFVRXNSMEZCUVVNc1QwRkJRVHRCUVVkb1F5eFRRVUZUUXl4WFFVRlhReXhEUVVGQk8wVkJRMnhDTzBsQlFVbERMRTFCUVVFc1JVRkRSa01zUTBGQlFUdEpRVUZOUXl4WlFVRkJMRVZCUTA1RExFTkJRVUU3U1VGQldVTXNSVUZCUVN4RlFVTmFRenRGUVVGQkxFbEJRMFZPTEVOQlFVRTdSVUZEU2trc1EwRkJRU3hEUVVGaE8wbEJRMWhITEZWQlFVRXNSVUZCV1R0TlFVTldReXhaUVVGQkxFZEJRV003VFVGRFpFTXNUVUZCUVN4SFFVRlJPMDFCUTFKRExGbEJRVUVzUlVGQll6dE5RVU5rUXl4WFFVRkJMRVZCUVdFN1NVRkJRVHRGUVVGQk8wVkJSMnBDTEUxQlFVMURMRU5CUVVFc1IwRkJjVUpETEVOQlFVTmlMRU5CUVVFc1JVRkJVMFVzUTBGQlFTeEZRVUZWUlN4RFFVRkJPMGxCUXpkRExFbEJRVWxGTEVOQlFVRXNSMEZCWlVZc1EwRkJRU3hIUVVGbFNpeERRVUZCTEVOQlFWRmpMR0ZCUVVFc1EwRkJZeXdyUWtGQkswSmtMRU5CUVVFc1EwRkJVV01zWVVGQlFTeERRVUZqTzAxQlEzcEhSaXhEUVVGQkxFZEJRV05TTEVOQlFVRXNSMEZCWlVvc1EwRkJRU3hEUVVGUll5eGhRVUZCTEVOQlFXTXNaME5CUVdkRFpDeERRVUZCTEVOQlFWRmpMR0ZCUVVFc1EwRkJZenRKUVVONFIxSXNRMEZCUVN4TFFVTklRU3hEUVVGQkxFZEJRV1VzU1VGQlFWTXNWMEZCUVN4RlFVRmpMRkZCUVU4c2JVUkJRV2RFV0N4RFFVRkJMRWRCUVdVc1UwRkJVeXhSUVVGUldTeExRVUZCTEVOQlFVMHNUMEZETVVob1FpeERRVUZCTEVOQlFWRnBRaXhOUVVGQkxFTkJRVTlZTEVOQlFVRXNTVUZGV2swc1EwRkJRU3hMUVVOSVFTeERRVUZCTEVkQlFXTXNTVUZCUVVjc1YwRkJRU3hGUVVGakxGRkJRVThzYlVSQlFXZEVXQ3hEUVVGQkxFZEJRV1VzVlVGQlZTeFhRVUZYV1N4TFFVRkJMRU5CUVUwc1QwRkROMGhvUWl4RFFVRkJMRU5CUVZGcFFpeE5RVUZCTEVOQlFVOU1MRU5CUVVFc1NVRkZZazRzUTBGQlFTeExRVUZqUVN4RFFVRkJMRU5CUVdGWkxFdEJRVUVzUTBGQlRVTXNUMEZCUVN4SFFVRlZReXhKUVVGQkxFTkJRVXRETEVkQlFVRXNSVUZCUzI1Q0xFTkJRVUVzUlVGQlZTeExRVU12UkZVc1EwRkJRU3hMUVVGaFFTeERRVUZCTEVOQlFWbE5MRXRCUVVFc1EwRkJUVU1zVDBGQlFTeEhRVUZWUXl4SlFVRkJMRU5CUVV0RExFZEJRVUVzUTBGQlNXNUNMRU5CUVVFc1JVRkJWU3hIUVVGRk8wVkJRVUU3UlVFd1NIQkZMRWxCUVVGdlFpeG5Ra0ZCUVN4RlFVRlhPMGxCUTFSRExFMUJRVUVzUlVGQlVUdEpRVU5TZEVJc1RVRkJRU3hGUVVGQlF5eERRVUZCTzBsQlEwRkhMRVZCUVVFc1JVRkJRVU1zUTBGQlFUdEpRVU5CYTBJc1dVRkJRU3hGUVhCSWJVSkJMRU5CUVVFN1RVRkRia0k3VlVGQlRVTXNSVUZCUVN4RlFVTktla0lzUTBGQlFUdFZRVUZGTUVJc1UwRkJRU3hGUVVOR2RFSXNRMEZCUVR0VlFVRlRkVUlzVFVGQlFTeEZRVU5VY2tJc1EwRkJRVHRWUVVOQmMwSXNTMEZCUVN4RlFVRlBReXhEUVVGQk8xVkJRMUJETEUxQlFVRXNSVUZCVVVNc1EwRkJRVHRWUVVOU1F5eFpRVUZCTEVWQlFXTkRMRU5CUVVFN1ZVRkRaRU1zU1VGQlFTeEZRVUZOUXl4RFFVRkJPMVZCUVZWRExFOUJRVUVzUlVGRGFFSkRPMUZCUVVFc1NVRkRSVzVETEVOQlFVRTdVVUZEUlc5RExFTkJRVUVzUjBGQlUzQkRMRU5CUVVFc1EwRkJUM0ZETEUxQlFVRXNRMEZCVDJoRExGVkJRVUU3VVVGRGRrSnBReXhEUVVGQkxFZEJRV1YwUXl4RFFVRkJMRU5CUVU5MVF5eFpRVUZCTzFGQlEzUkNReXhEUVVGQkxFZEJRVmw0UXl4RFFVRkJMRU5CUVU5NVF5eFBRVUZCTEVsQlFWZDZReXhEUVVGQkxFTkJRVTl4UXl4TlFVRkJMRU5CUVU5SkxFOUJRVUVzUTBGQlVVTXNUMEZCUVR0TlFVTXhSQ3hKUVVOSlF5eERRVUZCTzFGQlJFRkRMRU5CUVVFc1IwRkJaMEk3VFVGRmFFSlNMRU5CUVVFc1EwRkJUemRDTEUxQlFVRXNTMEZEVEN0Q0xFTkJRVUVzU1VGRFJrc3NRMEZCUVN4SFFVRmxNME1zUTBGQlFTeERRVUZQZDBJc1UwRkJRU3hEUVVGVldpeGhRVUZCTEVOQlFXTXNkMEpCUTNwREswSXNRMEZCUVN4TFFVTklRU3hEUVVGQkxFZEJRV1VzU1VGQlFUbENMRmRCUVVFc1JVRkJZeXhQUVVGUExIVkNRVU53UTJJc1EwRkJRU3hEUVVGUGQwSXNVMEZCUVN4RFFVRlZWQ3hOUVVGQkxFTkJRVTgwUWl4RFFVRkJMRWxCUlRGQ1FTeERRVUZCTEVOQlFXRXpRaXhMUVVGQkxFTkJRVTFaTEUxQlFVRXNSMEZCVXl4SFFVRkhSQ3hEUVVGQkxGTkJSUzlDWjBJc1EwRkJRU3hIUVVGbE4wTXNRMEZCUVN4RFFVRkhZeXhoUVVGQkxFTkJRV01zZDBKQlF6TkNLMElzUTBGQlFTeExRVU5JUVN4RFFVRkJMRWRCUVdVc1NVRkJRVGxDTEZkQlFVRXNSVUZCWXl4UFFVRlBMSFZDUVVOd1EyWXNRMEZCUVN4RFFVRkhhVUlzVFVGQlFTeERRVUZQTkVJc1EwRkJRVHROUVVsb1FpeExRVUZMTEVsQlFVazNReXhEUVVGQkxFZEJRVWtzUjBGQlIwRXNRMEZCUVN4SFFVRkpUU3hEUVVGQkxFTkJRVTk1UXl4TlFVRkJMRVZCUVZFdlF5eERRVUZCTEVsQlFVc3NSMEZCUnp0UlFVTjZReXhOUVVGTlJTeERRVUZCTEVkQlFWVkpMRU5CUVVFc1EwRkJUMDRzUTBGQlFUdFJRVU4yUWl4SlFVRkpTU3hEUVVGQkxFZEJRV0ZLTEVOQlFVRTdVVUZEWWpCRExFTkJRVUVzUzBGRFJuUkRMRU5CUVVFc1IwRkJZVFJETEZGQlFVRXNRMEZCVXpsRExFTkJRVUVzUTBGQlVTdERMRmxCUVVFc1EwRkJZU3cwUWtGQk5FSTdVVUZGZWtVc1NVRkJTWEJDTEVOQlFVRXNSMEZCTUVJc1MwRkJZbnBDTEVOQlFVRTdWVUZEWWpKQ0xFTkJRVUVzUjBGQlVWZ3NTVUZCUVN4RFFVRkxPRUlzUzBGQlFTeERRVUZOY2tJc1EwRkJRU3hIUVVGaE8xRkJRMmhEU1N4RFFVRkJMRXRCUTBaS0xFTkJRVUVzU1VGQlkwRXNRMEZCUVN4RlFVTmtSU3hEUVVGQkxFZEJRVkZZTEVsQlFVRXNRMEZCU3poQ0xFdEJRVUVzUlVGQlQzSkNMRU5CUVVFc1IwRkJZVHRSUVVWdVF5eE5RVUZOVVN4RFFVRkJMRWRCUVZkcVFpeEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTVVFzU1VGQlFTeERRVUZMSzBJc1IwRkJRU3hEUVVGSmFrUXNRMEZCUVN4RFFVRlJhMFFzVVVGQlFTeEZRVUZWTEV0QlFVczdVVUZETVVRc1NVRkJTVkFzUTBGQlFTeEhRVUZMTzFWQlEweFJMRU5CUVVFc1IwRkJTenRWUVVOTVF5eERRVUZCTEVkQlFVczdVVUZEVEd4RUxFTkJRVUVzUjBGQllTeExRVUZOTEV0QlEzSkNlVU1zUTBGQlFTeEhRVUZqTEV0QlFWSmtMRU5CUVVFc1IwRkJXVWtzUTBGQlFTeEZRVU5zUW0xQ0xFTkJRVUVzUjBGQlN5eE5RVU5MYkVRc1EwRkJRU3hIUVVGaExFdEJRVXNzUzBGQlRTeExRVU5zUTNsRExFTkJRVUVzUjBGQlN5eEhRVU5NVXl4RFFVRkJMRWRCUVdNc1MwRkJVblpDTEVOQlFVRXNSMEZCV1Vrc1EwRkJRU3hMUVVOU0wwSXNRMEZCUVN4SFFVRmhMRXRCUVVzc1MwRkJUU3hMUVVOc1EzbERMRU5CUVVFc1IwRkJTMVlzUTBGQlFTeEhRVUZ4UWl4SlFVRlNTaXhEUVVGQkxFZEJRVmxKTEVOQlFVRXNSVUZET1VKdFFpeERRVUZCTEVkQlFVdHVRaXhEUVVGQkxFdEJRMHN2UWl4RFFVRkJMRWRCUVdFc1MwRkJTeXhMUVVGTkxFMUJRMnhEZVVNc1EwRkJRU3hKUVVGTlZpeERRVUZCTEVWQlEwNXRRaXhEUVVGQkxFZEJRVXNzU1VGQlNXNUNMRU5CUVVFc1IwRkJNRUlzU1VGQllrRXNRMEZCUVN4SFFVRnBRa29zUTBGQlFTeEhRVVZ5UTBVc1EwRkJRU3hMUVVOR1dTeERRVUZCTEVsQlFVMUJMRU5CUVVFc1IwRkZTRXdzUTBGQlFTeExRVU5JWVN4RFFVRkJMRWRCUVV0U0xFTkJRVUVzUlVGRFRFRXNRMEZCUVN4SFFVRkxPMUZCUlZBc1RVRkJUVlVzUTBGQlFTeEhRVUZaTEZkQlFWZG1MRU5CUVVFc1IwRkJaU3hMUVVGTFdDeERRVUZCTEdkQ1FVRXdRbGNzUTBGQlFTeEhRVUZsV0N4RFFVRkJMRWRCUVdFc2NVSkJRWEZDWjBJc1EwRkJRU3hQUVVGVFVTeERRVUZCTEU5QlFWTkRMRU5CUVVFN1VVRkRNVWxxUWl4RFFVRkJMRWxCUVZrc1MwRkJTMEVzUTBGQlFTeEpRVUZaTEUxQlF5OUNVeXhEUVVGQkxFZEJRVFpDTEV0QlFXSXhReXhEUVVGQkxFZEJRVFpDTEV0QlFWaHBReXhEUVVGQkxFVkJRemxDU2l4RFFVRkJMRXRCUVV0aExFTkJRVUVzUjBGQk9FSXNUVUZCWWpGRExFTkJRVUVzUjBGQk5rSXNTMEZCV0dsRExFTkJRVUVzU1VGRk9VTnVReXhEUVVGQkxFTkJRVkZuUWl4TFFVRkJMRU5CUVUxelF5eFRRVUZCTEVkQlFWbEVMRU5CUVVFc1JVRkRkRUpxUWl4RFFVRkJMRU5CUVU4NVFpeFpRVUZCTEVsQlExUkpMRU5CUVVFc1EwRkJiVUpXTEVOQlFVRXNSVUZCVTIxRExFTkJRVUVzUlVGQlZVY3NRMEZCUVN4RFFVVXhRenROUVVGQk8wMUJSMEVzU1VGR1FYQkRMRU5CUVVFc1EwRkJWV01zUzBGQlFTeERRVUZOZFVNc1pVRkJRU3hIUVVGclFpeFpRVUZaZEVJc1EwRkJRU3hIUVVGaExFOUJRek5FTDBJc1EwRkJRU3hEUVVGVll5eExRVUZCTEVOQlFVMHNPRUpCUVRoQ0xGbEJRVmxwUWl4RFFVRkJMRWRCUVdFc1QwRkRia1ZITEVOQlFVRXNRMEZCVHpkQ0xFMUJRVUVzUlVGRFZDeEpRVUZKSzBJc1EwRkJRU3hGUVVOR1N5eERRVUZCTEVOQlFXRXpRaXhMUVVGQkxFTkJRVTF6UXl4VFFVRkJMRWRCUVZrc2IwSkJRVzlDTTBJc1EwRkJRU3hIUVVGakxFbEJRVWxUTEVOQlFVRXNRMEZCVHpWQ0xGbEJRVUVzVVVGQmIwSnRRaXhEUVVGQkxFZEJRV01zTWtOQlFUSkRVeXhEUVVGQkxFTkJRVTh6UWl4WFFVRkJMRk5CUXpOS08xRkJRMHdzVFVGQlRWZ3NRMEZCUVN4SFFVRmpiMElzU1VGQlFTeERRVUZMYzBNc1IwRkJRU3hEUVVGSldpeERRVUZCTEVsQlFUUkVMRXRCUVRORE1VSXNTVUZCUVN4RFFVRkxPRUlzUzBGQlFTeERRVUZOT1VJc1NVRkJRU3hEUVVGTGMwTXNSMEZCUVN4RFFVRkpXaXhEUVVGQkxFbEJRV2xDTzFWQlF6ZEZOVU1zUTBGQlFTeEhRVUZoTEU5QlFVOXJRaXhKUVVGQkxFTkJRVXQxUXl4SFFVRkJMRU5CUVd0Q0xFbEJRV1F6UkN4RFFVRkJMRWRCUVd0Q2IwSXNTVUZCUVN4RFFVRkxkME1zUlVGQlFTeEhRVUZMTEU5QlFVOHNTVUZCU1hoRExFbEJRVUVzUTBGQlMzbERMRWRCUVVFc1EwRkJhMElzU1VGQlpEZEVMRU5CUVVFc1IwRkJhMEp2UWl4SlFVRkJMRU5CUVV0M1F5eEZRVUZCTEVkQlFVc3NUMEZCVHp0VlFVTm9TSGhFTEVOQlFVRXNSMEZCVTJ0RExFTkJRVUVzUTBGQlR6TkNMRmRCUVVFN1ZVRkRhRUpNTEVOQlFVRXNSMEZCVTJkRExFTkJRVUVzUTBGQlR6TkNMRmRCUVVFc1IwRkJZMVFzUTBGQlFUdFZRVU01UWxVc1EwRkJRU3hIUVVGVE1FSXNRMEZCUVN4RFFVRlBOVUlzV1VGQlFUdFJRVU4wUW0xRExFTkJRVUVzUTBGQllUTkNMRXRCUVVFc1EwRkJUWE5ETEZOQlFVRXNSMEZCV1N4WFFVRlhjRVFzUTBGQlFTeFJRVUZqUlN4RFFVRkJMSE5DUVVFMFFubENMRU5CUVVFc1IwRkJaU3hKUVVGSmJrSXNRMEZCUVN4UlFVRmpiVUlzUTBGQlFTeEhRVUZsTEVsQlFVbDZRaXhEUVVGQkxIRkNRVU14U1R0TlFVRkJPMDFCUlVZc1RVRkJUU3RETEVOQlFVRXNTVUZCVjJoQ0xFTkJRVUVzUTBGQlVYbENMRkZCUVVFc1NVRkJXWHBDTEVOQlFVRXNRMEZCVVRCQ0xGTkJRVUVzUzBGQll6RkNMRU5CUVVFc1EwRkJVVEpDTEd0Q1FVRkJMRWxCUVhOQ04wSXNRMEZCUVN4SFFVRmhMRWxCUVVrN1RVRkRNVWN2UWl4RFFVRkJMRU5CUVZWakxFdEJRVUVzUTBGQlRYTkRMRk5CUVVFc1IwRkJXU3h4UWtGQmNVSklMRU5CUVVFc1pVRkJjMEp1UkN4RFFVRkJMRU5CUVU5MVF5eFpRVUZCTEV0QlFXbENMRWxCUVVsTExFTkJRVUVzWjBKQlFUWkNOVU1zUTBGQlFTeERRVUZQZFVNc1dVRkJRU3hOUVVGclFrc3NRMEZCUVN4SFFVRm5RaXhUUVVONlN6RkRMRU5CUVVFc1EwRkJWV01zUzBGQlFTeERRVUZOSzBNc1YwRkJRU3hEUVVGWkxEWkNRVUUyUWl4SFFVRkhXaXhEUVVGQkxFdEJRVms3U1VGQlFUdEpRWFZDZUVWaExHRkJRVUVzUlVGeVFtOUNiRVVzUTBGQlFUdE5RVU53UWp0UlFVRk5lVUlzUlVGQlFTeEZRVU5LY2tJc1EwRkJRVHRSUVVGRmRVSXNUVUZCUVN4RlFVTkdja0k3VFVGQlFTeEpRVU5GU2l4RFFVRkJPMDFCVDBvc1NVRk9RVWtzUTBGQlFTeERRVUZQTmtRc1QwRkJRU3hEUVVGUmFrVXNRMEZCUVR0UlFVTmlRU3hEUVVGQkxFTkJRVkZuUWl4TFFVRkJMRU5CUVUxclJDeHJRa0ZCUVN4SFFVRnhRaXhIUVVGSGNFVXNRMEZCUVN4TlFVTjBRMFVzUTBGQlFTeERRVUZSYlVVc1owSkJRVUVzUTBGQmFVSXNaMGhCUVdkSVJpeFBRVUZCTEVOQlFWRnFSU3hEUVVGQk8xVkJReTlKUVN4RFFVRkJMRU5CUVUxblFpeExRVUZCTEVOQlFVMXJSQ3hyUWtGQlFTeEhRVUZ4UWl4SFFVRkhjRVVzUTBGQlFTeEpRVUZaTzFGQlFVRXNSVUZEYUVRN1RVRkJRU3hKUVVWQlJTeERRVUZCTEVOQlFVOXhReXhOUVVGQkxFTkJRVTlvUXl4VlFVRkJMRU5CUVZkRkxFMUJRVUVzUzBGQlYxQXNRMEZCUVN4RFFVRlBkVU1zV1VGQlFTeEpRVUZuUWp0UlFVTTNSQ3hOUVVGTmRrTXNRMEZCUVN4SFFVRlhSU3hEUVVGQkxFTkJRVWRWTEdGQlFVRXNRMEZCWXp0UlFVTTVRbG9zUTBGQlFTeExRVUZWUVN4RFFVRkJMRU5CUVZOblFpeExRVUZCTEVOQlFVMXJSQ3hyUWtGQlFTeEhRVUZ4UWl4SFFVRkhjRVVzUTBGQlFTeExRVU4yUkR0TlFVRkJPMGxCUVVFN1NVRlJRWE5GTEdWQlFVRXNSVUU1U0hOQ1FTeERRVUZCTzAxQlJYUkNMRTFCUVUxMFJTeERRVUZCTEVkQlFXVkZMRU5CUVVFc1EwRkJUM1ZETEZsQlFVRTdUVUZETlVKMlF5eERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTkzUXl4UFFVRkJMRU5CUVZGcVJTeERRVUZCTzFGQlEzQkNMRTFCUVUxRkxFTkJRVUVzUjBGQlYyZENMRWxCUVVFc1EwRkJTME1zUjBGQlFTeERRVUZKUkN4SlFVRkJMRU5CUVVzclFpeEhRVUZCTEVOQlFVbHFSQ3hEUVVGQkxFTkJRVkZyUkN4UlFVRkJMRVZCUVZVc1MwRkJTenRSUVVNeFJIaERMRU5CUVVFc1EwRkJiVUpXTEVOQlFVRXNSVUZCVTBVc1EwRkJRU3hGUVVGVlNpeERRVUZCTEVOQlFXRTdUVUZCUVN4RlFVTnVSRHRKUVVGQk8wbEJlVWhHZFVVc1pVRkJRU3hGUVVGcFFrRXNRMEZCUVN4TFFVRk5ja1VzUTBGQlFTeERRVUZQY1VNc1RVRkJRU3hEUVVGUGFFTXNWVUZCUVR0SlFVTnlRMmxGTEZkQlFVRXNSVUZCWVVFc1EwRkJRU3hOUVVGTk8wbEJRMjVDUXl4bFFVRkJMRVZCUVdsQ1FTeERRVUZCTEUxQlFVMDdUVUZEY2tKRExHRkJRVUVzUlVGQlpUdE5RVU5tUXl4alFVRkJMRVZCUVdkQ08wMUJRMmhDUXl4dFFrRkJRU3hIUVVGeFFqdE5RVU55UWtNc1pVRkJRU3hGUVVGcFFqdE5RVU5xUWtNc1dVRkJRU3hGUVVGak8wMUJRMlJETEdOQlFVRXNSMEZCWjBJN1RVRkRhRUpETEdkQ1FVRkJMRWRCUVd0Q08wbEJRVUU3UlVGQlFTeEZRVWQ0UWp0QlFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFZmZlY3RGYWRlO1xudmFyIF9lZmZlY3RJbml0TWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9lZmZlY3QtaW5pdC5taW4ubWpzXCIpO1xudmFyIF9lZmZlY3RUYXJnZXRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWluLm1qc1wiKTtcbnZhciBfZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gRWZmZWN0RmFkZShlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiB0LFxuICAgIGV4dGVuZFBhcmFtczogcyxcbiAgICBvbjogYVxuICB9ID0gZTtcbiAgcyh7XG4gICAgZmFkZUVmZmVjdDoge1xuICAgICAgY3Jvc3NGYWRlOiAhMVxuICAgIH1cbiAgfSk7XG4gICgwLCBfZWZmZWN0SW5pdE1pbi5lKSh7XG4gICAgZWZmZWN0OiBcImZhZGVcIixcbiAgICBzd2lwZXI6IHQsXG4gICAgb246IGEsXG4gICAgc2V0VHJhbnNsYXRlOiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgc2xpZGVzOiBlXG4gICAgICAgIH0gPSB0LFxuICAgICAgICBzID0gdC5wYXJhbXMuZmFkZUVmZmVjdDtcbiAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgZS5sZW5ndGg7IGEgKz0gMSkge1xuICAgICAgICBjb25zdCBlID0gdC5zbGlkZXNbYV07XG4gICAgICAgIGxldCByID0gLWUuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIHQucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgfHwgKHIgLT0gdC50cmFuc2xhdGUpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHQuaXNIb3Jpem9udGFsKCkgfHwgKGkgPSByLCByID0gMCk7XG4gICAgICAgIGNvbnN0IGYgPSB0LnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZSA/IE1hdGgubWF4KDEgLSBNYXRoLmFicyhlLnByb2dyZXNzKSwgMCkgOiAxICsgTWF0aC5taW4oTWF0aC5tYXgoZS5wcm9ncmVzcywgLTEpLCAwKSxcbiAgICAgICAgICBuID0gKDAsIF9lZmZlY3RUYXJnZXRNaW4uZSkocywgZSk7XG4gICAgICAgIG4uc3R5bGUub3BhY2l0eSA9IGYsIG4uc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7cn1weCwgJHtpfXB4LCAwcHgpYDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGUgPT4ge1xuICAgICAgY29uc3QgcyA9IHQuc2xpZGVzLm1hcChlID0+ICgwLCBfdXRpbHNNaW4uaykoZSkpO1xuICAgICAgcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgICB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgO1xuICAgICAgfSksICgwLCBfZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmRNaW4uZSkoe1xuICAgICAgICBzd2lwZXI6IHQsXG4gICAgICAgIGR1cmF0aW9uOiBlLFxuICAgICAgICB0cmFuc2Zvcm1FbGVtZW50czogcyxcbiAgICAgICAgYWxsU2xpZGVzOiAhMFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICF0LnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZaV1ptWldOMFZHRnlaMlYwVFdsdUlpd2ljbVZ4ZFdseVpTSXNJbDlsWm1abFkzUldhWEowZFdGc1ZISmhibk5wZEdsdmJrVnVaRTFwYmlJc0lsOTFkR2xzYzAxcGJpSXNJa1ZtWm1WamRFWmhaR1VpTENKbElpd2ljM2RwY0dWeUlpd2lkQ0lzSW1WNGRHVnVaRkJoY21GdGN5SXNJbk1pTENKdmJpSXNJbUVpTENKbVlXUmxSV1ptWldOMElpd2lZM0p2YzNOR1lXUmxJaXdpWldabVpXTjBTVzVwZENJc0ltVm1abVZqZENJc0luTmxkRlJ5WVc1emJHRjBaU0lzSW5Oc2FXUmxjeUlzSW5CaGNtRnRjeUlzSW14bGJtZDBhQ0lzSW5JaUxDSnpkMmx3WlhKVGJHbGtaVTltWm5ObGRDSXNJblpwY25SMVlXeFVjbUZ1YzJ4aGRHVWlMQ0owY21GdWMyeGhkR1VpTENKcElpd2lhWE5JYjNKcGVtOXVkR0ZzSWl3aVppSXNJazFoZEdnaUxDSnRZWGdpTENKaFluTWlMQ0p3Y205bmNtVnpjeUlzSW0xcGJpSXNJbTRpTENKbFptWmxZM1JVWVhKblpYUWlMQ0p6ZEhsc1pTSXNJbTl3WVdOcGRIa2lMQ0owY21GdWMyWnZjbTBpTENKelpYUlVjbUZ1YzJsMGFXOXVJaXdpYldGd0lpd2laMlYwVTJ4cFpHVlVjbUZ1YzJadmNtMUZiQ0lzSW1admNrVmhZMmdpTENKMGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0aUxDSmxabVpsWTNSV2FYSjBkV0ZzVkhKaGJuTnBkR2x2YmtWdVpDSXNJbVIxY21GMGFXOXVJaXdpZEhKaGJuTm1iM0p0Uld4bGJXVnVkSE1pTENKaGJHeFRiR2xrWlhNaUxDSnZkbVZ5ZDNKcGRHVlFZWEpoYlhNaUxDSnpiR2xrWlhOUVpYSldhV1YzSWl3aWMyeHBaR1Z6VUdWeVIzSnZkWEFpTENKM1lYUmphRk5zYVdSbGMxQnliMmR5WlhOeklpd2ljM0JoWTJWQ1pYUjNaV1Z1SWl3aVkzTnpUVzlrWlNKZExDSnpiM1Z5WTJWeklqcGJJakFpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQlowTXNTVUZCUVVFc1owSkJRVUVzUjBGQlFVTXNUMEZCUVR0QlFVTkZMRWxCUVVGRExEaENRVUZCTEVkQlFVRkVMRTlCUVVFN1FVRkRZeXhKUVVGQlJTeFRRVUZCTEVkQlFVRkdMRTlCUVVFN1FVRkhhRVFzVTBGQlUwY3NWMEZCVjBNc1EwRkJRVHRGUVVOc1FqdEpRVUZKUXl4TlFVRkJMRVZCUTBaRExFTkJRVUU3U1VGQlRVTXNXVUZCUVN4RlFVTk9ReXhEUVVGQk8wbEJRVmxETEVWQlFVRXNSVUZEV2tNN1JVRkJRU3hKUVVORlRpeERRVUZCTzBWQlEwcEpMRU5CUVVFc1EwRkJZVHRKUVVOWVJ5eFZRVUZCTEVWQlFWazdUVUZEVmtNc1UwRkJRU3hIUVVGWE8wbEJRVUU3UlVGQlFUdEZRVzlEWml4SlFVRkJReXhuUWtGQlFTeEZRVUZYTzBsQlExUkRMRTFCUVVFc1JVRkJVVHRKUVVOU1ZDeE5RVUZCTEVWQlFVRkRMRU5CUVVFN1NVRkRRVWNzUlVGQlFTeEZRVUZCUXl4RFFVRkJPMGxCUTBGTExGbEJRVUVzUlVGeVEyMUNRU3hEUVVGQk8wMUJRMjVDTzFWQlFVMURMRTFCUVVFc1JVRkRTbG83VVVGQlFTeEpRVU5GUlN4RFFVRkJPMUZCUTBWRkxFTkJRVUVzUjBGQlUwWXNRMEZCUVN4RFFVRlBWeXhOUVVGQkxFTkJRVTlPTEZWQlFVRTdUVUZETjBJc1MwRkJTeXhKUVVGSlJDeERRVUZCTEVkQlFVa3NSMEZCUjBFc1EwRkJRU3hIUVVGSlRpeERRVUZCTEVOQlFVOWpMRTFCUVVFc1JVRkJVVklzUTBGQlFTeEpRVUZMTEVkQlFVYzdVVUZEZWtNc1RVRkJUVTRzUTBGQlFTeEhRVUZWUlN4RFFVRkJMRU5CUVU5VkxFMUJRVUVzUTBGQlQwNHNRMEZCUVR0UlFVVTVRaXhKUVVGSlV5eERRVUZCTEVsQlJGZG1MRU5CUVVFc1EwRkJVV2RDTEdsQ1FVRkJPMUZCUld4Q1pDeERRVUZCTEVOQlFVOVhMRTFCUVVFc1EwRkJUMGtzWjBKQlFVRXNTMEZCYTBKR0xFTkJRVUVzU1VGQlRXSXNRMEZCUVN4RFFVRlBaMElzVTBGQlFUdFJRVU5zUkN4SlFVRkpReXhEUVVGQkxFZEJRVXM3VVVGRFNtcENMRU5CUVVFc1EwRkJUMnRDTEZsQlFVRXNUMEZEVmtRc1EwRkJRU3hIUVVGTFNpeERRVUZCTEVWQlEweEJMRU5CUVVFc1IwRkJTenRSUVVWUUxFMUJRVTFOTEVOQlFVRXNSMEZCWlc1Q0xFTkJRVUVzUTBGQlQxY3NUVUZCUVN4RFFVRlBUaXhWUVVGQkxFTkJRVmRETEZOQlFVRXNSMEZCV1dNc1NVRkJRU3hEUVVGTFF5eEhRVUZCTEVOQlFVa3NTVUZCU1VRc1NVRkJRU3hEUVVGTFJTeEhRVUZCTEVOQlFVbDRRaXhEUVVGQkxFTkJRVkY1UWl4UlFVRkJMRWRCUVZjc1MwRkJTeXhKUVVGSlNDeEpRVUZCTEVOQlFVdEpMRWRCUVVFc1EwRkJTVW9zU1VGQlFTeERRVUZMUXl4SFFVRkJMRU5CUVVsMlFpeERRVUZCTEVOQlFWRjVRaXhSUVVGQkxFZEJRVmNzU1VGQlNUdFZRVU12U1VVc1EwRkJRU3hIUVVGWExFbEJRVUZETEd0Q1FVRkJMRVZCUVdGNFFpeERRVUZCTEVWQlFWRktMRU5CUVVFN1VVRkRkRU15UWl4RFFVRkJMRU5CUVZORkxFdEJRVUVzUTBGQlRVTXNUMEZCUVN4SFFVRlZWQ3hEUVVGQkxFVkJRM3BDVFN4RFFVRkJMRU5CUVZORkxFdEJRVUVzUTBGQlRVVXNVMEZCUVN4SFFVRlpMR1ZCUVdWb1FpeERRVUZCTEU5QlFWTkpMRU5CUVVFc1ZVRkRja1E3VFVGQlFUdEpRVUZCTzBsQmJVSkJZU3hoUVVGQkxFVkJha0p2UW1oRExFTkJRVUU3VFVGRGNFSXNUVUZCVFVrc1EwRkJRU3hIUVVGdlFrWXNRMEZCUVN4RFFVRlBWU3hOUVVGQkxFTkJRVTl4UWl4SFFVRkJMRU5CUVVscVF5eERRVUZCTEVsQlFWY3NTVUZCUVd0RExGZEJRVUVzUlVGQmIwSnNReXhEUVVGQk8wMUJRek5GU1N4RFFVRkJMRU5CUVd0Q0swSXNUMEZCUVN4RFFVRlJha01zUTBGQlFUdFJRVU40UWtFc1EwRkJRU3hEUVVGSE1rSXNTMEZCUVN4RFFVRk5UeXhyUWtGQlFTeEhRVUZ4UWl4SFFVRkhjRU1zUTBGQlFTeEpRVUZaTzAxQlFVRXNTVUZGTDBNc1NVRkJRWEZETEdkRFFVRkJMRVZCUVRKQ08xRkJRM3BDY0VNc1RVRkJRU3hGUVVGQlF5eERRVUZCTzFGQlEwRnZReXhSUVVGQkxFVkJRVUYwUXl4RFFVRkJPMUZCUTBGMVF5eHBRa0ZCUVN4RlFVRkJia01zUTBGQlFUdFJRVU5CYjBNc1UwRkJRU3hIUVVGWE8wMUJRVUVzUlVGRFdEdEpRVUZCTzBsQlVVWkRMR1ZCUVVFc1JVRkJhVUpCTEVOQlFVRXNUVUZCVFR0TlFVTnlRa01zWVVGQlFTeEZRVUZsTzAxQlEyWkRMR05CUVVFc1JVRkJaMEk3VFVGRGFFSkRMRzFDUVVGQkxFZEJRWEZDTzAxQlEzSkNReXhaUVVGQkxFVkJRV003VFVGRFpEVkNMR2RDUVVGQkxFZEJRVzFDWml4RFFVRkJMRU5CUVU5WExFMUJRVUVzUTBGQlQybERPMGxCUVVFN1JVRkJRU3hGUVVkMlF6dEJRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gRWZmZWN0RmxpcDtcbnZhciBfY3JlYXRlU2hhZG93TWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1pbi5tanNcIik7XG52YXIgX2VmZmVjdEluaXRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2VmZmVjdC1pbml0Lm1pbi5tanNcIik7XG52YXIgX2VmZmVjdFRhcmdldE1pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5taW4ubWpzXCIpO1xudmFyIF9lZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZE1pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWluLm1qc1wiKTtcbnZhciBfdXRpbHNNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL3V0aWxzLm1pbi5tanNcIik7XG5mdW5jdGlvbiBFZmZlY3RGbGlwKGUpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IHQsXG4gICAgZXh0ZW5kUGFyYW1zOiBzLFxuICAgIG9uOiByXG4gIH0gPSBlO1xuICBzKHtcbiAgICBmbGlwRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6ICEwLFxuICAgICAgbGltaXRSb3RhdGlvbjogITBcbiAgICB9XG4gIH0pO1xuICBjb25zdCBhID0gKGUsIHMpID0+IHtcbiAgICBsZXQgciA9IHQuaXNIb3Jpem9udGFsKCkgPyBlLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XCIpIDogZS5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wXCIpLFxuICAgICAgYSA9IHQuaXNIb3Jpem9udGFsKCkgPyBlLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodFwiKSA6IGUucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbVwiKTtcbiAgICByIHx8IChyID0gKDAsIF9jcmVhdGVTaGFkb3dNaW4uYykoXCJmbGlwXCIsIGUsIHQuaXNIb3Jpem9udGFsKCkgPyBcImxlZnRcIiA6IFwidG9wXCIpKSwgYSB8fCAoYSA9ICgwLCBfY3JlYXRlU2hhZG93TWluLmMpKFwiZmxpcFwiLCBlLCB0LmlzSG9yaXpvbnRhbCgpID8gXCJyaWdodFwiIDogXCJib3R0b21cIikpLCByICYmIChyLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcywgMCkpLCBhICYmIChhLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChzLCAwKSk7XG4gIH07XG4gICgwLCBfZWZmZWN0SW5pdE1pbi5lKSh7XG4gICAgZWZmZWN0OiBcImZsaXBcIixcbiAgICBzd2lwZXI6IHQsXG4gICAgb246IHIsXG4gICAgc2V0VHJhbnNsYXRlOiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgc2xpZGVzOiBlLFxuICAgICAgICAgIHJ0bFRyYW5zbGF0ZTogc1xuICAgICAgICB9ID0gdCxcbiAgICAgICAgciA9IHQucGFyYW1zLmZsaXBFZmZlY3Q7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgbyA9IGVbaV07XG4gICAgICAgIGxldCBsID0gby5wcm9ncmVzcztcbiAgICAgICAgdC5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uICYmIChsID0gTWF0aC5tYXgoTWF0aC5taW4oby5wcm9ncmVzcywgMSksIC0xKSk7XG4gICAgICAgIGNvbnN0IGYgPSBvLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICBsZXQgbiA9IC0xODAgKiBsLFxuICAgICAgICAgIHAgPSAwLFxuICAgICAgICAgIGQgPSB0LnBhcmFtcy5jc3NNb2RlID8gLWYgLSB0LnRyYW5zbGF0ZSA6IC1mLFxuICAgICAgICAgIG0gPSAwO1xuICAgICAgICB0LmlzSG9yaXpvbnRhbCgpID8gcyAmJiAobiA9IC1uKSA6IChtID0gZCwgZCA9IDAsIHAgPSAtbiwgbiA9IDApLCBvLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKGwpKSArIGUubGVuZ3RoLCByLnNsaWRlU2hhZG93cyAmJiBhKG8sIGwpO1xuICAgICAgICBjb25zdCBjID0gYHRyYW5zbGF0ZTNkKCR7ZH1weCwgJHttfXB4LCAwcHgpIHJvdGF0ZVgoJHtwfWRlZykgcm90YXRlWSgke259ZGVnKWA7XG4gICAgICAgICgwLCBfZWZmZWN0VGFyZ2V0TWluLmUpKHIsIG8pLnN0eWxlLnRyYW5zZm9ybSA9IGM7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBlID0+IHtcbiAgICAgIGNvbnN0IHMgPSB0LnNsaWRlcy5tYXAoZSA9PiAoMCwgX3V0aWxzTWluLmspKGUpKTtcbiAgICAgIHMuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYCwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XCIpLmZvckVhY2godCA9PiB7XG4gICAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9KSwgKDAsIF9lZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZE1pbi5lKSh7XG4gICAgICAgIHN3aXBlcjogdCxcbiAgICAgICAgZHVyYXRpb246IGUsXG4gICAgICAgIHRyYW5zZm9ybUVsZW1lbnRzOiBzXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlY3JlYXRlU2hhZG93czogKCkgPT4ge1xuICAgICAgdC5wYXJhbXMuZmxpcEVmZmVjdCwgdC5zbGlkZXMuZm9yRWFjaChlID0+IHtcbiAgICAgICAgbGV0IHMgPSBlLnByb2dyZXNzO1xuICAgICAgICB0LnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24gJiYgKHMgPSBNYXRoLm1heChNYXRoLm1pbihlLnByb2dyZXNzLCAxKSwgLTEpKSwgYShlLCBzKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiB0LnBhcmFtcy5mbGlwRWZmZWN0LFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiAhMCxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICF0LnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZaV1ptWldOMFNXNXBkRTFwYmlJc0luSmxjWFZwY21VaUxDSmZaV1ptWldOMFZHRnlaMlYwVFdsdUlpd2lYMlZtWm1WamRGWnBjblIxWVd4VWNtRnVjMmwwYVc5dVJXNWtUV2x1SWl3aVgzVjBhV3h6VFdsdUlpd2lSV1ptWldOMFJteHBjQ0lzSW1VaUxDSnpkMmx3WlhJaUxDSjBJaXdpWlhoMFpXNWtVR0Z5WVcxeklpd2ljeUlzSW05dUlpd2ljaUlzSW1ac2FYQkZabVpsWTNRaUxDSnpiR2xrWlZOb1lXUnZkM01pTENKc2FXMXBkRkp2ZEdGMGFXOXVJaXdpWVNJc0ltTnlaV0YwWlZOc2FXUmxVMmhoWkc5M2N5SXNJbWx6U0c5eWFYcHZiblJoYkNJc0luRjFaWEo1VTJWc1pXTjBiM0lpTENKamNtVmhkR1ZUYUdGa2IzY2lMQ0p6ZEhsc1pTSXNJbTl3WVdOcGRIa2lMQ0pOWVhSb0lpd2liV0Y0SWl3aVpXWm1aV04wU1c1cGRDSXNJbVZtWm1WamRDSXNJbk5sZEZSeVlXNXpiR0YwWlNJc0luTnNhV1JsY3lJc0luSjBiRlJ5WVc1emJHRjBaU0lzSW5CaGNtRnRjeUlzSW1raUxDSnNaVzVuZEdnaUxDSnZJaXdpYkNJc0luQnliMmR5WlhOeklpd2liV2x1SWl3aVppSXNJbk4zYVhCbGNsTnNhV1JsVDJabWMyVjBJaXdpYmlJc0luQWlMQ0prSWl3aVkzTnpUVzlrWlNJc0luUnlZVzV6YkdGMFpTSXNJbTBpTENKNlNXNWtaWGdpTENKaFluTWlMQ0p5YjNWdVpDSXNJbU1pTENKbFptWmxZM1JVWVhKblpYUWlMQ0owY21GdWMyWnZjbTBpTENKelpYUlVjbUZ1YzJsMGFXOXVJaXdpYldGd0lpd2laMlYwVTJ4cFpHVlVjbUZ1YzJadmNtMUZiQ0lzSW1admNrVmhZMmdpTENKMGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0aUxDSnhkV1Z5ZVZObGJHVmpkRzl5UVd4c0lpd2laV1ptWldOMFZtbHlkSFZoYkZSeVlXNXphWFJwYjI1RmJtUWlMQ0prZFhKaGRHbHZiaUlzSW5SeVlXNXpabTl5YlVWc1pXMWxiblJ6SWl3aWNtVmpjbVZoZEdWVGFHRmtiM2R6SWl3aVoyVjBSV1ptWldOMFVHRnlZVzF6SWl3aWNHVnljM0JsWTNScGRtVWlMQ0p2ZG1WeWQzSnBkR1ZRWVhKaGJYTWlMQ0p6Ykdsa1pYTlFaWEpXYVdWM0lpd2ljMnhwWkdWelVHVnlSM0p2ZFhBaUxDSjNZWFJqYUZOc2FXUmxjMUJ5YjJkeVpYTnpJaXdpYzNCaFkyVkNaWFIzWldWdUlpd2lkbWx5ZEhWaGJGUnlZVzV6YkdGMFpTSmRMQ0p6YjNWeVkyVnpJanBiSWpBaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdHVkV3hzWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN1FVRkJhME1zU1VGQlFVRXNZMEZCUVN4SFFVRkJReXhQUVVGQk8wRkJRMFlzU1VGQlFVTXNaMEpCUVVFc1IwRkJRVVFzVDBGQlFUdEJRVU5GTEVsQlFVRkZMRGhDUVVGQkxFZEJRVUZHTEU5QlFVRTdRVUZEWXl4SlFVRkJSeXhUUVVGQkxFZEJRVUZJTEU5QlFVRTdRVUZIYUVRc1UwRkJVMGtzVjBGQlYwTXNRMEZCUVR0RlFVTnNRanRKUVVGSlF5eE5RVUZCTEVWQlEwWkRMRU5CUVVFN1NVRkJUVU1zV1VGQlFTeEZRVU5PUXl4RFFVRkJPMGxCUVZsRExFVkJRVUVzUlVGRFdrTTdSVUZCUVN4SlFVTkZUaXhEUVVGQk8wVkJRMHBKTEVOQlFVRXNRMEZCWVR0SlFVTllSeXhWUVVGQkxFVkJRVms3VFVGRFZrTXNXVUZCUVN4SFFVRmpPMDFCUTJSRExHRkJRVUVzUjBGQlpUdEpRVUZCTzBWQlFVRTdSVUZIYmtJc1RVRkJUVU1zUTBGQlFTeEhRVUZ4UWtNc1EwRkJRMWdzUTBGQlFTeEZRVUZUU1N4RFFVRkJPMGxCUTI1RExFbEJRVWxGTEVOQlFVRXNSMEZCWlVvc1EwRkJRU3hEUVVGUFZTeFpRVUZCTEV0QlFXbENXaXhEUVVGQkxFTkJRVkZoTEdGQlFVRXNRMEZCWXl3clFrRkJLMEppTEVOQlFVRXNRMEZCVVdFc1lVRkJRU3hEUVVGak8wMUJRMnhJU0N4RFFVRkJMRWRCUVdOU0xFTkJRVUVzUTBGQlQxVXNXVUZCUVN4TFFVRnBRbG9zUTBGQlFTeERRVUZSWVN4aFFVRkJMRU5CUVdNc1owTkJRV2REWWl4RFFVRkJMRU5CUVZGaExHRkJRVUVzUTBGQll6dEpRVU5xU0ZBc1EwRkJRU3hMUVVOSVFTeERRVUZCTEVkQlFXVXNTVUZCUVZFc2EwSkJRVUVzUlVGQllTeFJRVUZSWkN4RFFVRkJMRVZCUVZORkxFTkJRVUVzUTBGQlQxVXNXVUZCUVN4TFFVRnBRaXhUUVVGVExGTkJSVE5GUml4RFFVRkJMRXRCUTBoQkxFTkJRVUVzUjBGQll5eEpRVUZCU1N4clFrRkJRU3hGUVVGaExGRkJRVkZrTEVOQlFVRXNSVUZCVTBVc1EwRkJRU3hEUVVGUFZTeFpRVUZCTEV0QlFXbENMRlZCUVZVc1dVRkZOVVZPTEVOQlFVRXNTMEZCWTBFc1EwRkJRU3hEUVVGaFV5eExRVUZCTEVOQlFVMURMRTlCUVVFc1IwRkJWVU1zU1VGQlFTeERRVUZMUXl4SFFVRkJMRVZCUVV0a0xFTkJRVUVzUlVGQlZTeExRVU12UkUwc1EwRkJRU3hMUVVGaFFTeERRVUZCTEVOQlFWbExMRXRCUVVFc1EwRkJUVU1zVDBGQlFTeEhRVUZWUXl4SlFVRkJMRU5CUVV0RExFZEJRVUVzUTBGQlNXUXNRMEZCUVN4RlFVRlZMRWRCUVVVN1JVRkJRVHRGUVRoRWNFVXNTVUZCUVdVc1owSkJRVUVzUlVGQlZ6dEpRVU5VUXl4TlFVRkJMRVZCUVZFN1NVRkRVbTVDTEUxQlFVRXNSVUZCUVVNc1EwRkJRVHRKUVVOQlJ5eEZRVUZCTEVWQlFVRkRMRU5CUVVFN1NVRkRRV1VzV1VGQlFTeEZRWEpFYlVKQkxFTkJRVUU3VFVGRGJrSTdWVUZCVFVNc1RVRkJRU3hGUVVOS2RFSXNRMEZCUVR0VlFVTkJkVUlzV1VGQlFTeEZRVUZqYmtJN1VVRkJRU3hKUVVOYVJpeERRVUZCTzFGQlEwVkpMRU5CUVVFc1IwRkJVMG9zUTBGQlFTeERRVUZQYzBJc1RVRkJRU3hEUVVGUGFrSXNWVUZCUVR0TlFVTTNRaXhMUVVGTExFbEJRVWxyUWl4RFFVRkJMRWRCUVVrc1IwRkJSMEVzUTBGQlFTeEhRVUZKZWtJc1EwRkJRU3hEUVVGUE1FSXNUVUZCUVN4RlFVRlJSQ3hEUVVGQkxFbEJRVXNzUjBGQlJ6dFJRVU42UXl4TlFVRk5SU3hEUVVGQkxFZEJRVlV6UWl4RFFVRkJMRU5CUVU5NVFpeERRVUZCTzFGQlEzWkNMRWxCUVVsSExFTkJRVUVzUjBGQlYwUXNRMEZCUVN4RFFVRlJSU3hSUVVGQk8xRkJRMjVDTTBJc1EwRkJRU3hEUVVGUGMwSXNUVUZCUVN4RFFVRlBha0lzVlVGQlFTeERRVUZYUlN4aFFVRkJMRXRCUXpOQ2JVSXNRMEZCUVN4SFFVRlhXQ3hKUVVGQkxFTkJRVXRETEVkQlFVRXNRMEZCU1VRc1NVRkJRU3hEUVVGTFlTeEhRVUZCTEVOQlFVbElMRU5CUVVFc1EwRkJVVVVzVVVGQlFTeEZRVUZWTEV0QlFVczdVVUZGZEVRc1RVRkJUVVVzUTBGQlFTeEhRVUZUU2l4RFFVRkJMRU5CUVZGTExHbENRVUZCTzFGQlJYWkNMRWxCUVVsRExFTkJRVUVzU1VGRVdTeE5RVUZOVEN4RFFVRkJPMVZCUld4Q1RTeERRVUZCTEVkQlFWVTdWVUZEVmtNc1EwRkJRU3hIUVVGTGFrTXNRMEZCUVN4RFFVRlBjMElzVFVGQlFTeERRVUZQV1N4UFFVRkJMRWxCUVZkTUxFTkJRVUVzUjBGQlV6ZENMRU5CUVVFc1EwRkJUMjFETEZOQlFVRXNTVUZCWVU0c1EwRkJRVHRWUVVNelJFOHNRMEZCUVN4SFFVRkxPMUZCUTBwd1F5eERRVUZCTEVOQlFVOVZMRmxCUVVFc1MwRkxSRklzUTBGQlFTeExRVU5VTmtJc1EwRkJRU3hKUVVGWFFTeERRVUZCTEV0QlRGaExMRU5CUVVFc1IwRkJTMGdzUTBGQlFTeEZRVU5NUVN4RFFVRkJMRWRCUVVzc1IwRkRURVFzUTBGQlFTeEpRVUZYUkN4RFFVRkJMRVZCUTFoQkxFTkJRVUVzUjBGQlZTeEpRVWxhVGl4RFFVRkJMRU5CUVZGYUxFdEJRVUVzUTBGQlRYZENMRTFCUVVFc1NVRkJWWFJDTEVsQlFVRXNRMEZCUzNWQ0xFZEJRVUVzUTBGQlNYWkNMRWxCUVVFc1EwRkJTM2RDTEV0QlFVRXNRMEZCVFdJc1EwRkJRU3hMUVVGaE5VSXNRMEZCUVN4RFFVRlBNRUlzVFVGQlFTeEZRVU0xUkhCQ0xFTkJRVUVzUTBGQlQwVXNXVUZCUVN4SlFVTlVSU3hEUVVGQkxFTkJRVzFDYVVJc1EwRkJRU3hGUVVGVFF5eERRVUZCTzFGQlJUbENMRTFCUVUxakxFTkJRVUVzUjBGQldTeGxRVUZsVUN4RFFVRkJMRTlCUVZOSExFTkJRVUVzYjBKQlFYTkNTaXhEUVVGQkxHZENRVUYxUWtRc1EwRkJRVHRSUVVOMFJTeEpRVUZCVlN4clFrRkJRU3hGUVVGaGNrTXNRMEZCUVN4RlFVRlJjVUlzUTBGQlFTeEZRVU0zUWxvc1MwRkJRU3hEUVVGTk5rSXNVMEZCUVN4SFFVRlpSaXhEUVVNM1FqdE5RVUZCTzBsQlFVRTdTVUZ4UWtGSExHRkJRVUVzUlVGdVFtOUNOME1zUTBGQlFUdE5RVU53UWl4TlFVRk5TU3hEUVVGQkxFZEJRVzlDUml4RFFVRkJMRU5CUVU5dlFpeE5RVUZCTEVOQlFVOTNRaXhIUVVGQkxFTkJRVWs1UXl4RFFVRkJMRWxCUVZjc1NVRkJRU3RETEZkQlFVRXNSVUZCYjBJdlF5eERRVUZCTzAxQlF6TkZTU3hEUVVGQkxFTkJRV3RDTkVNc1QwRkJRU3hEUVVGUk9VTXNRMEZCUVR0UlFVTjRRa0VzUTBGQlFTeERRVUZIWVN4TFFVRkJMRU5CUVUxclF5eHJRa0ZCUVN4SFFVRnhRaXhIUVVGSGFrUXNRMEZCUVN4TlFVTnFRMFVzUTBGQlFTeERRVUZIWjBRc1owSkJRVUVzUTBGQmFVSXNaMGhCUVdkSVJpeFBRVUZCTEVOQlFWRTVReXhEUVVGQk8xVkJRekZKUVN4RFFVRkJMRU5CUVZOaExFdEJRVUVzUTBGQlRXdERMR3RDUVVGQkxFZEJRWEZDTEVkQlFVZHFSQ3hEUVVGQkxFbEJRVms3VVVGQlFTeEZRVU51UkR0TlFVRkJMRWxCUlVvc1NVRkJRVzFFTEdkRFFVRkJMRVZCUVRKQ08xRkJRM3BDYkVRc1RVRkJRU3hGUVVGQlF5eERRVUZCTzFGQlEwRnJSQ3hSUVVGQkxFVkJRVUZ3UkN4RFFVRkJPMUZCUTBGeFJDeHBRa0ZCUVN4RlFVRkJha1E3VFVGQlFTeEZRVU5CTzBsQlFVRTdTVUZSUm10RUxHVkJRVUVzUlVGc1JYTkNRU3hEUVVGQk8wMUJSWFJDY0VRc1EwRkJRU3hEUVVGUGMwSXNUVUZCUVN4RFFVRlBha0lzVlVGQlFTeEZRVU5rVEN4RFFVRkJMRU5CUVU5dlFpeE5RVUZCTEVOQlFVOHdRaXhQUVVGQkxFTkJRVkZvUkN4RFFVRkJPMUZCUTNCQ0xFbEJRVWxKTEVOQlFVRXNSMEZCVjBvc1EwRkJRU3hEUVVGUk5rSXNVVUZCUVR0UlFVTnVRak5DTEVOQlFVRXNRMEZCVDNOQ0xFMUJRVUVzUTBGQlQycENMRlZCUVVFc1EwRkJWMFVzWVVGQlFTeExRVU16UWt3c1EwRkJRU3hIUVVGWFlTeEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTVVFzU1VGQlFTeERRVUZMWVN4SFFVRkJMRU5CUVVrNVFpeERRVUZCTEVOQlFWRTJRaXhSUVVGQkxFVkJRVlVzUzBGQlN5eExRVVYwUkc1Q0xFTkJRVUVzUTBGQmJVSldMRU5CUVVFc1JVRkJVMGtzUTBGQlFTeERRVUZUTzAxQlFVRXNSVUZEY2tNN1NVRkJRVHRKUVRCRVJtMUVMR1ZCUVVFc1JVRkJhVUpCTEVOQlFVRXNTMEZCVFhKRUxFTkJRVUVzUTBGQlQzTkNMRTFCUVVFc1EwRkJUMnBDTEZWQlFVRTdTVUZEY2tOcFJDeFhRVUZCTEVWQlFXRkJMRU5CUVVFc1RVRkJUVHRKUVVOdVFrTXNaVUZCUVN4RlFVRnBRa0VzUTBGQlFTeE5RVUZOTzAxQlEzSkNReXhoUVVGQkxFVkJRV1U3VFVGRFprTXNZMEZCUVN4RlFVRm5RanROUVVOb1FrTXNiVUpCUVVFc1IwRkJjVUk3VFVGRGNrSkRMRmxCUVVFc1JVRkJZenROUVVOa1F5eG5Ra0ZCUVN4SFFVRnRRalZFTEVOQlFVRXNRMEZCVDNOQ0xFMUJRVUVzUTBGQlQxazdTVUZCUVR0RlFVRkJMRVZCUjNaRE8wRkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZnJlZU1vZGU7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gZnJlZU1vZGUoZSkge1xuICBsZXQge1xuICAgIHN3aXBlcjogdCxcbiAgICBleHRlbmRQYXJhbXM6IG8sXG4gICAgZW1pdDogbixcbiAgICBvbmNlOiBzXG4gIH0gPSBlO1xuICBvKHtcbiAgICBmcmVlTW9kZToge1xuICAgICAgZW5hYmxlZDogITEsXG4gICAgICBtb21lbnR1bTogITAsXG4gICAgICBtb21lbnR1bVJhdGlvOiAxLFxuICAgICAgbW9tZW50dW1Cb3VuY2U6ICEwLFxuICAgICAgbW9tZW50dW1Cb3VuY2VSYXRpbzogMSxcbiAgICAgIG1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgICAgIHN0aWNreTogITEsXG4gICAgICBtaW5pbXVtVmVsb2NpdHk6IC4wMlxuICAgIH1cbiAgfSksIE9iamVjdC5hc3NpZ24odCwge1xuICAgIGZyZWVNb2RlOiB7XG4gICAgICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHQucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgICAgICAgY29uc3QgZSA9IHQuZ2V0VHJhbnNsYXRlKCk7XG4gICAgICAgIHQuc2V0VHJhbnNsYXRlKGUpLCB0LnNldFRyYW5zaXRpb24oMCksIHQudG91Y2hFdmVudHNEYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMCwgdC5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgICAgICBjdXJyZW50UG9zOiB0LnJ0bCA/IHQudHJhbnNsYXRlIDogLXQudHJhbnNsYXRlXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0LnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB0b3VjaEV2ZW50c0RhdGE6IGUsXG4gICAgICAgICAgdG91Y2hlczogb1xuICAgICAgICB9ID0gdDtcbiAgICAgICAgMCA9PT0gZS52ZWxvY2l0aWVzLmxlbmd0aCAmJiBlLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgICAgcG9zaXRpb246IG9bdC5pc0hvcml6b250YWwoKSA/IFwic3RhcnRYXCIgOiBcInN0YXJ0WVwiXSxcbiAgICAgICAgICB0aW1lOiBlLnRvdWNoU3RhcnRUaW1lXG4gICAgICAgIH0pLCBlLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgICAgcG9zaXRpb246IG9bdC5pc0hvcml6b250YWwoKSA/IFwiY3VycmVudFhcIiA6IFwiY3VycmVudFlcIl0sXG4gICAgICAgICAgdGltZTogKDAsIF91dGlsc01pbi5kKSgpXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgY3VycmVudFBvczogb1xuICAgICAgICB9ID0gZTtcbiAgICAgICAgaWYgKHQucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgcGFyYW1zOiBpLFxuICAgICAgICAgICAgd3JhcHBlckVsOiBhLFxuICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiByLFxuICAgICAgICAgICAgc25hcEdyaWQ6IGwsXG4gICAgICAgICAgICB0b3VjaEV2ZW50c0RhdGE6IG1cbiAgICAgICAgICB9ID0gdCxcbiAgICAgICAgICBjID0gKDAsIF91dGlsc01pbi5kKSgpIC0gbS50b3VjaFN0YXJ0VGltZTtcbiAgICAgICAgaWYgKG8gPCAtdC5taW5UcmFuc2xhdGUoKSkgdC5zbGlkZVRvKHQuYWN0aXZlSW5kZXgpO2Vsc2UgaWYgKG8gPiAtdC5tYXhUcmFuc2xhdGUoKSkgdC5zbGlkZXMubGVuZ3RoIDwgbC5sZW5ndGggPyB0LnNsaWRlVG8obC5sZW5ndGggLSAxKSA6IHQuc2xpZGVUbyh0LnNsaWRlcy5sZW5ndGggLSAxKTtlbHNlIHtcbiAgICAgICAgICBpZiAoaS5mcmVlTW9kZS5tb21lbnR1bSkge1xuICAgICAgICAgICAgaWYgKG0udmVsb2NpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGUgPSBtLnZlbG9jaXRpZXMucG9wKCksXG4gICAgICAgICAgICAgICAgbyA9IG0udmVsb2NpdGllcy5wb3AoKSxcbiAgICAgICAgICAgICAgICBuID0gZS5wb3NpdGlvbiAtIG8ucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgcyA9IGUudGltZSAtIG8udGltZTtcbiAgICAgICAgICAgICAgdC52ZWxvY2l0eSA9IG4gLyBzLCB0LnZlbG9jaXR5IC89IDIsIE1hdGguYWJzKHQudmVsb2NpdHkpIDwgaS5mcmVlTW9kZS5taW5pbXVtVmVsb2NpdHkgJiYgKHQudmVsb2NpdHkgPSAwKSwgKHMgPiAxNTAgfHwgKDAsIF91dGlsc01pbi5kKSgpIC0gZS50aW1lID4gMzAwKSAmJiAodC52ZWxvY2l0eSA9IDApO1xuICAgICAgICAgICAgfSBlbHNlIHQudmVsb2NpdHkgPSAwO1xuICAgICAgICAgICAgdC52ZWxvY2l0eSAqPSBpLmZyZWVNb2RlLm1vbWVudHVtVmVsb2NpdHlSYXRpbywgbS52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICBsZXQgZSA9IDFlMyAqIGkuZnJlZU1vZGUubW9tZW50dW1SYXRpbztcbiAgICAgICAgICAgIGNvbnN0IG8gPSB0LnZlbG9jaXR5ICogZTtcbiAgICAgICAgICAgIGxldCBjID0gdC50cmFuc2xhdGUgKyBvO1xuICAgICAgICAgICAgciAmJiAoYyA9IC1jKTtcbiAgICAgICAgICAgIGxldCBkLFxuICAgICAgICAgICAgICB1ID0gITE7XG4gICAgICAgICAgICBjb25zdCBmID0gMjAgKiBNYXRoLmFicyh0LnZlbG9jaXR5KSAqIGkuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgICAgICAgIGxldCBwO1xuICAgICAgICAgICAgaWYgKGMgPCB0Lm1heFRyYW5zbGF0ZSgpKSBpLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlID8gKGMgKyB0Lm1heFRyYW5zbGF0ZSgpIDwgLWYgJiYgKGMgPSB0Lm1heFRyYW5zbGF0ZSgpIC0gZiksIGQgPSB0Lm1heFRyYW5zbGF0ZSgpLCB1ID0gITAsIG0uYWxsb3dNb21lbnR1bUJvdW5jZSA9ICEwKSA6IGMgPSB0Lm1heFRyYW5zbGF0ZSgpLCBpLmxvb3AgJiYgaS5jZW50ZXJlZFNsaWRlcyAmJiAocCA9ICEwKTtlbHNlIGlmIChjID4gdC5taW5UcmFuc2xhdGUoKSkgaS5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSA/IChjIC0gdC5taW5UcmFuc2xhdGUoKSA+IGYgJiYgKGMgPSB0Lm1pblRyYW5zbGF0ZSgpICsgZiksIGQgPSB0Lm1pblRyYW5zbGF0ZSgpLCB1ID0gITAsIG0uYWxsb3dNb21lbnR1bUJvdW5jZSA9ICEwKSA6IGMgPSB0Lm1pblRyYW5zbGF0ZSgpLCBpLmxvb3AgJiYgaS5jZW50ZXJlZFNsaWRlcyAmJiAocCA9ICEwKTtlbHNlIGlmIChpLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICAgICAgICBsZXQgZTtcbiAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBsLmxlbmd0aDsgdCArPSAxKSBpZiAobFt0XSA+IC1jKSB7XG4gICAgICAgICAgICAgICAgZSA9IHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYyA9IE1hdGguYWJzKGxbZV0gLSBjKSA8IE1hdGguYWJzKGxbZSAtIDFdIC0gYykgfHwgXCJuZXh0XCIgPT09IHQuc3dpcGVEaXJlY3Rpb24gPyBsW2VdIDogbFtlIC0gMV0sIGMgPSAtYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwICYmIHMoXCJ0cmFuc2l0aW9uRW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgdC5sb29wRml4KCk7XG4gICAgICAgICAgICB9KSwgMCAhPT0gdC52ZWxvY2l0eSkge1xuICAgICAgICAgICAgICBpZiAoZSA9IHIgPyBNYXRoLmFicygoLWMgLSB0LnRyYW5zbGF0ZSkgLyB0LnZlbG9jaXR5KSA6IE1hdGguYWJzKChjIC0gdC50cmFuc2xhdGUpIC8gdC52ZWxvY2l0eSksIGkuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IE1hdGguYWJzKChyID8gLWMgOiBjKSAtIHQudHJhbnNsYXRlKSxcbiAgICAgICAgICAgICAgICAgIG4gPSB0LnNsaWRlc1NpemVzR3JpZFt0LmFjdGl2ZUluZGV4XTtcbiAgICAgICAgICAgICAgICBlID0gbyA8IG4gPyBpLnNwZWVkIDogbyA8IDIgKiBuID8gMS41ICogaS5zcGVlZCA6IDIuNSAqIGkuc3BlZWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaS5mcmVlTW9kZS5zdGlja3kpIHJldHVybiB2b2lkIHQuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgICAgIGkuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2UgJiYgdSA/ICh0LnVwZGF0ZVByb2dyZXNzKGQpLCB0LnNldFRyYW5zaXRpb24oZSksIHQuc2V0VHJhbnNsYXRlKGMpLCB0LnRyYW5zaXRpb25TdGFydCghMCwgdC5zd2lwZURpcmVjdGlvbiksIHQuYW5pbWF0aW5nID0gITAsICgwLCBfdXRpbHNNaW4uaSkoYSwgKCkgPT4ge1xuICAgICAgICAgICAgICB0ICYmICF0LmRlc3Ryb3llZCAmJiBtLmFsbG93TW9tZW50dW1Cb3VuY2UgJiYgKG4oXCJtb21lbnR1bUJvdW5jZVwiKSwgdC5zZXRUcmFuc2l0aW9uKGkuc3BlZWQpLCBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0LnNldFRyYW5zbGF0ZShkKSwgKDAsIF91dGlsc01pbi5pKShhLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB0ICYmICF0LmRlc3Ryb3llZCAmJiB0LnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSwgMCkpO1xuICAgICAgICAgICAgfSkpIDogdC52ZWxvY2l0eSA/IChuKFwiX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2VcIiksIHQudXBkYXRlUHJvZ3Jlc3MoYyksIHQuc2V0VHJhbnNpdGlvbihlKSwgdC5zZXRUcmFuc2xhdGUoYyksIHQudHJhbnNpdGlvblN0YXJ0KCEwLCB0LnN3aXBlRGlyZWN0aW9uKSwgdC5hbmltYXRpbmcgfHwgKHQuYW5pbWF0aW5nID0gITAsICgwLCBfdXRpbHNNaW4uaSkoYSwgKCkgPT4ge1xuICAgICAgICAgICAgICB0ICYmICF0LmRlc3Ryb3llZCAmJiB0LnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pKSkgOiB0LnVwZGF0ZVByb2dyZXNzKGMpLCB0LnVwZGF0ZUFjdGl2ZUluZGV4KCksIHQudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaS5mcmVlTW9kZS5zdGlja3kpIHJldHVybiB2b2lkIHQuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgICAgIGkuZnJlZU1vZGUgJiYgbihcIl9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAoIWkuZnJlZU1vZGUubW9tZW50dW0gfHwgYyA+PSBpLmxvbmdTd2lwZXNNcykgJiYgKHQudXBkYXRlUHJvZ3Jlc3MoKSwgdC51cGRhdGVBY3RpdmVJbmRleCgpLCB0LnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUptY21WbFRXOWtaU0lzSW1VaUxDSnpkMmx3WlhJaUxDSjBJaXdpWlhoMFpXNWtVR0Z5WVcxeklpd2lieUlzSW1WdGFYUWlMQ0p1SWl3aWIyNWpaU0lzSW5NaUxDSmxibUZpYkdWa0lpd2liVzl0Wlc1MGRXMGlMQ0p0YjIxbGJuUjFiVkpoZEdsdklpd2liVzl0Wlc1MGRXMUNiM1Z1WTJVaUxDSnRiMjFsYm5SMWJVSnZkVzVqWlZKaGRHbHZJaXdpYlc5dFpXNTBkVzFXWld4dlkybDBlVkpoZEdsdklpd2ljM1JwWTJ0NUlpd2liV2x1YVcxMWJWWmxiRzlqYVhSNUlpd2lUMkpxWldOMElpd2lZWE56YVdkdUlpd2liMjVVYjNWamFGTjBZWEowSWl3aWNHRnlZVzF6SWl3aVkzTnpUVzlrWlNJc0ltZGxkRlJ5WVc1emJHRjBaU0lzSW5ObGRGUnlZVzV6YkdGMFpTSXNJbk5sZEZSeVlXNXphWFJwYjI0aUxDSjBiM1ZqYUVWMlpXNTBjMFJoZEdFaUxDSjJaV3h2WTJsMGFXVnpJaXdpYkdWdVozUm9JaXdpYjI1VWIzVmphRVZ1WkNJc0ltTjFjbkpsYm5SUWIzTWlMQ0p5ZEd3aUxDSjBjbUZ1YzJ4aGRHVWlMQ0p2YmxSdmRXTm9UVzkyWlNJc0luUnZkV05vWlhNaUxDSndkWE5vSWl3aWNHOXphWFJwYjI0aUxDSnBjMGh2Y21sNmIyNTBZV3dpTENKMGFXMWxJaXdpZEc5MVkyaFRkR0Z5ZEZScGJXVWlMQ0p1YjNjaUxDSnBJaXdpZDNKaGNIQmxja1ZzSWl3aVlTSXNJbkowYkZSeVlXNXpiR0YwWlNJc0luSWlMQ0p6Ym1Gd1IzSnBaQ0lzSW13aUxDSnRJaXdpWXlJc0ltMXBibFJ5WVc1emJHRjBaU0lzSW5Oc2FXUmxWRzhpTENKaFkzUnBkbVZKYm1SbGVDSXNJbTFoZUZSeVlXNXpiR0YwWlNJc0luTnNhV1JsY3lJc0luQnZjQ0lzSW5abGJHOWphWFI1SWl3aVRXRjBhQ0lzSW1GaWN5SXNJbVFpTENKMUlpd2laaUlzSW5BaUxDSmhiR3h2ZDAxdmJXVnVkSFZ0UW05MWJtTmxJaXdpYkc5dmNDSXNJbU5sYm5SbGNtVmtVMnhwWkdWeklpd2ljM2RwY0dWRWFYSmxZM1JwYjI0aUxDSnNiMjl3Um1sNElpd2ljMnhwWkdWelUybDZaWE5IY21sa0lpd2ljM0JsWldRaUxDSnpiR2xrWlZSdlEyeHZjMlZ6ZENJc0luVndaR0YwWlZCeWIyZHlaWE56SWl3aWRISmhibk5wZEdsdmJsTjBZWEowSWl3aVlXNXBiV0YwYVc1bklpd2laV3hsYldWdWRGUnlZVzV6YVhScGIyNUZibVFpTENKa1pYTjBjbTk1WldRaUxDSnpaWFJVYVcxbGIzVjBJaXdpZEhKaGJuTnBkR2x2YmtWdVpDSXNJblZ3WkdGMFpVRmpkR2wyWlVsdVpHVjRJaXdpZFhCa1lYUmxVMnhwWkdWelEyeGhjM05sY3lJc0lteHZibWRUZDJsd1pYTk5jeUpkTENKemIzVnlZMlZ6SWpwYklqQWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdRVUZGUVN4VFFVRlRRU3hUUVVGVFF5eERRVUZCTzBWQlEyaENPMGxCUVVsRExFMUJRVUVzUlVGRFJrTXNRMEZCUVR0SlFVRk5ReXhaUVVGQkxFVkJRMDVETEVOQlFVRTdTVUZCV1VNc1NVRkJRU3hGUVVOYVF5eERRVUZCTzBsQlFVbERMRWxCUVVFc1JVRkRTa003UlVGQlFTeEpRVU5GVWl4RFFVRkJPMFZCUTBwSkxFTkJRVUVzUTBGQllUdEpRVU5ZVEN4UlFVRkJMRVZCUVZVN1RVRkRVbFVzVDBGQlFTeEhRVUZUTzAxQlExUkRMRkZCUVVFc1IwRkJWVHROUVVOV1F5eGhRVUZCTEVWQlFXVTdUVUZEWmtNc1kwRkJRU3hIUVVGblFqdE5RVU5vUWtNc2JVSkJRVUVzUlVGQmNVSTdUVUZEY2tKRExIRkNRVUZCTEVWQlFYVkNPMDFCUTNaQ1F5eE5RVUZCTEVkQlFWRTdUVUZEVWtNc1pVRkJRU3hGUVVGcFFqdEpRVUZCTzBWQlFVRXNTVUZuVG5KQ1F5eE5RVUZCTEVOQlFVOURMRTFCUVVFc1EwRkJUMmhDTEVOQlFVRXNSVUZCVVR0SlFVTndRa2dzVVVGQlFTeEZRVUZWTzAxQlExSnZRaXhaUVVGQkxFVkJMMDFLTEZOQlFVRkJMRU5CUVVFN1VVRkRSU3hKUVVGSmFrSXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQUXl4UFFVRkJMRVZCUVZNN1VVRkRNMElzVFVGQlRYSkNMRU5CUVVFc1IwRkJXVVVzUTBGQlFTeERRVUZQYjBJc1dVRkJRVHRSUVVONlFuQkNMRU5CUVVFc1EwRkJUM0ZDTEZsQlFVRXNRMEZCWVhaQ0xFTkJRVUVzUjBGRGNFSkZMRU5CUVVFc1EwRkJUM05DTEdGQlFVRXNRMEZCWXl4SlFVTnlRblJDTEVOQlFVRXNRMEZCVDNWQ0xHVkJRVUVzUTBGQlowSkRMRlZCUVVFc1EwRkJWME1zVFVGQlFTeEhRVUZUTEVkQlF6TkRla0lzUTBGQlFTeERRVUZQU0N4UlFVRkJMRU5CUVZNMlFpeFZRVUZCTEVOQlFWYzdWVUZEZWtKRExGVkJRVUVzUlVGQldUTkNMRU5CUVVFc1EwRkJUelJDTEVkQlFVRXNSMEZCVFRWQ0xFTkJRVUVzUTBGQlR6WkNMRk5CUVVFc1NVRkJZVGRDTEVOQlFVRXNRMEZCVHpaQ08xRkJRVUVzUlVGRmVFUTdUVUZCUVR0TlFYVk5TVU1zVjBGQlFTeEZRWFJOU2l4VFFVRkJRU3hEUVVGQk8xRkJRMFVzU1VGQlNUbENMRU5CUVVFc1EwRkJUMnRDTEUxQlFVRXNRMEZCVDBNc1QwRkJRU3hGUVVGVE8xRkJRek5DTzFWQlEwVkpMR1ZCUVVFc1JVRkJhVUo2UWl4RFFVRkJPMVZCUVVscFF5eFBRVUZCTEVWQlEzSkNOMEk3VVVGQlFTeEpRVU5GUml4RFFVRkJPMUZCUlRKQ0xFMUJRVE5DUml4RFFVRkJMRU5CUVVzd1FpeFZRVUZCTEVOQlFWZERMRTFCUVVFc1NVRkRiRUl6UWl4RFFVRkJMRU5CUVVzd1FpeFZRVUZCTEVOQlFWZFJMRWxCUVVFc1EwRkJTenRWUVVOdVFrTXNVVUZCUVN4RlFVRlZMMElzUTBGQlFTeERRVUZSUml4RFFVRkJMRU5CUVU5clF5eFpRVUZCTEV0QlFXbENMRmRCUVZjN1ZVRkRja1JETEVsQlFVRXNSVUZCVFhKRExFTkJRVUVzUTBGQlMzTkRPMUZCUVVFc1NVRkhablJETEVOQlFVRXNRMEZCU3pCQ0xGVkJRVUVzUTBGQlYxRXNTVUZCUVN4RFFVRkxPMVZCUTI1Q1F5eFJRVUZCTEVWQlFWVXZRaXhEUVVGQkxFTkJRVkZHTEVOQlFVRXNRMEZCVDJ0RExGbEJRVUVzUzBGQmFVSXNZVUZCWVR0VlFVTjJSRU1zU1VGQlFTeEZRVUZOTEVsQlFVRkZMRmRCUVVFN1VVRkJRU3hGUVVWV08wMUJRVUU3VFVGelRFbFlMRlZCUVVFc1JVRnlURW9zVTBGQlFVRXNRMEZCYjBJMVFpeERRVUZCTzFGQlEyeENPMVZCUVVrMlFpeFZRVUZCTEVWQlEwWjZRanRSUVVGQkxFbEJRMFZLTEVOQlFVRTdVVUZEU2l4SlFVRkpSU3hEUVVGQkxFTkJRVTlyUWl4TlFVRkJMRU5CUVU5RExFOUJRVUVzUlVGQlV6dFJRVU16UWp0WlFVRk5SQ3hOUVVGQkxFVkJRMHB2UWl4RFFVRkJPMWxCUVUxRExGTkJRVUVzUlVGRFRrTXNRMEZCUVR0WlFVTkJReXhaUVVGQkxFVkJRV05ETEVOQlFVRTdXVUZCUjBNc1VVRkJRU3hGUVVOcVFrTXNRMEZCUVR0WlFVTkJja0lzWlVGQlFTeEZRVUZwUW5OQ08xVkJRVUVzU1VGRFpqZERMRU5CUVVFN1ZVRkhSVGhETEVOQlFVRXNSMEZFWlN4SlFVRkJWQ3hYUVVGQkxFMUJRMWRSTEVOQlFVRXNRMEZCUzFRc1kwRkJRVHRSUVVOeVF5eEpRVUZKYkVNc1EwRkJRU3hKUVVGalJpeERRVUZCTEVOQlFVOHJReXhaUVVGQkxFbEJRM1pDTDBNc1EwRkJRU3hEUVVGUFowUXNUMEZCUVN4RFFVRlJhRVFzUTBGQlFTeERRVUZQYVVRc1YwRkJRU3hQUVVkNFFpeEpRVUZKTDBNc1EwRkJRU3hKUVVGalJpeERRVUZCTEVOQlFVOXJSQ3haUVVGQkxFbEJRMjVDYkVRc1EwRkJRU3hEUVVGUGJVUXNUVUZCUVN4RFFVRlBNVUlzVFVGQlFTeEhRVUZUYlVJc1EwRkJRU3hEUVVGVGJrSXNUVUZCUVN4SFFVTnNRM3BDTEVOQlFVRXNRMEZCVDJkRUxFOUJRVUVzUTBGQlVVb3NRMEZCUVN4RFFVRlRia0lzVFVGQlFTeEhRVUZUTEV0QlJXcERla0lzUTBGQlFTeERRVUZQWjBRc1QwRkJRU3hEUVVGUmFFUXNRMEZCUVN4RFFVRlBiVVFzVFVGQlFTeERRVUZQTVVJc1RVRkJRU3hIUVVGVExGRkJTakZETzFWQlVVRXNTVUZCU1dFc1EwRkJRU3hEUVVGUGVrTXNVVUZCUVN4RFFVRlRWeXhSUVVGQkxFVkJRVlU3V1VGRE5VSXNTVUZCU1hGRExFTkJRVUVzUTBGQlMzSkNMRlZCUVVFc1EwRkJWME1zVFVGQlFTeEhRVUZUTEVkQlFVYzdZMEZET1VJc1RVRkJUVE5DTEVOQlFVRXNSMEZCWjBJclF5eERRVUZCTEVOQlFVdHlRaXhWUVVGQkxFTkJRVmMwUWl4SFFVRkJPMmRDUVVOb1EyeEVMRU5CUVVFc1IwRkJaMEl5UXl4RFFVRkJMRU5CUVV0eVFpeFZRVUZCTEVOQlFWYzBRaXhIUVVGQk8yZENRVU5vUTJoRUxFTkJRVUVzUjBGQlYwNHNRMEZCUVN4RFFVRmpiVU1zVVVGQlFTeEhRVUZYTDBJc1EwRkJRU3hEUVVGakswSXNVVUZCUVR0blFrRkRiRVF6UWl4RFFVRkJMRWRCUVU5U0xFTkJRVUVzUTBGQlkzRkRMRWxCUVVFc1IwRkJUMnBETEVOQlFVRXNRMEZCWTJsRExFbEJRVUU3WTBGRGFFUnVReXhEUVVGQkxFTkJRVTl4UkN4UlFVRkJMRWRCUVZkcVJDeERRVUZCTEVkQlFWZEZMRU5CUVVFc1JVRkROMEpPTEVOQlFVRXNRMEZCVDNGRUxGRkJRVUVzU1VGQldTeEhRVU5tUXl4SlFVRkJMRU5CUVV0RExFZEJRVUVzUTBGQlNYWkVMRU5CUVVFc1EwRkJUM0ZFTEZGQlFVRXNTVUZCV1dZc1EwRkJRU3hEUVVGUGVrTXNVVUZCUVN4RFFVRlRhVUlzWlVGQlFTeExRVU01UTJRc1EwRkJRU3hEUVVGUGNVUXNVVUZCUVN4SFFVRlhMRXRCU1doQ0wwTXNRMEZCUVN4SFFVRlBMRTlCUVU4c1NVRkJRU3RDTEZkQlFVRXNUVUZCVVhaRExFTkJRVUVzUTBGQlkzRkRMRWxCUVVFc1IwRkJUeXhUUVVNM1EyNURMRU5CUVVFc1EwRkJUM0ZFTEZGQlFVRXNSMEZCVnl4RlFVVjBRanRaUVVGQkxFOUJRMFZ5UkN4RFFVRkJMRU5CUVU5eFJDeFJRVUZCTEVkQlFWYzdXVUZGY0VKeVJDeERRVUZCTEVOQlFVOXhSQ3hSUVVGQkxFbEJRVmxtTEVOQlFVRXNRMEZCVDNwRExGRkJRVUVzUTBGQlUyVXNjVUpCUVVFc1JVRkRia05wUXl4RFFVRkJMRU5CUVV0eVFpeFZRVUZCTEVOQlFWZERMRTFCUVVFc1IwRkJVenRaUVVONlFpeEpRVUZKTTBJc1EwRkJRU3hIUVVGdFFpeE5RVUZQZDBNc1EwRkJRU3hEUVVGUGVrTXNVVUZCUVN4RFFVRlRXU3hoUVVGQk8xbEJRemxETEUxQlFVMVFMRU5CUVVFc1IwRkJiVUpHTEVOQlFVRXNRMEZCVDNGRUxGRkJRVUVzUjBGQlYzWkVMRU5CUVVFN1dVRkRNME1zU1VGQlNXZEVMRU5CUVVFc1IwRkJZemxETEVOQlFVRXNRMEZCVHpaQ0xGTkJRVUVzUjBGQldUTkNMRU5CUVVFN1dVRkRha04zUXl4RFFVRkJMRXRCUVV0SkxFTkJRVUVzU1VGQlpVRXNRMEZCUVR0WlFVTjRRaXhKUVVOSlZTeERRVUZCTzJOQlJFRkRMRU5CUVVFc1NVRkJWenRaUVVWbUxFMUJRVTFETEVOQlFVRXNSMEZCTWtNc1MwRkJOVUpLTEVsQlFVRXNRMEZCUzBNc1IwRkJRU3hEUVVGSmRrUXNRMEZCUVN4RFFVRlBjVVFzVVVGQlFTeEpRVUZwUW1Zc1EwRkJRU3hEUVVGUGVrTXNVVUZCUVN4RFFVRlRZeXh0UWtGQlFUdFpRVU4wUlN4SlFVRkpaMFFzUTBGQlFUdFpRVU5LTEVsQlFVbGlMRU5CUVVFc1IwRkJZemxETEVOQlFVRXNRMEZCVDJ0RUxGbEJRVUVzU1VGRGJrSmFMRU5CUVVFc1EwRkJUM3BETEZGQlFVRXNRMEZCVTJFc1kwRkJRU3hKUVVOa2IwTXNRMEZCUVN4SFFVRmpPVU1zUTBGQlFTeERRVUZQYTBRc1dVRkJRU3hOUVVGclFsRXNRMEZCUVN4TFFVTjZRMW9zUTBGQlFTeEhRVUZqT1VNc1EwRkJRU3hEUVVGUGEwUXNXVUZCUVN4TFFVRnBRbEVzUTBGQlFTeEhRVVY0UTBZc1EwRkJRU3hIUVVGelFuaEVMRU5CUVVFc1EwRkJUMnRFTEZsQlFVRXNTVUZETjBKUExFTkJRVUVzU1VGQlZ5eEhRVU5ZV2l4RFFVRkJMRU5CUVV0bExHMUNRVUZCTEVsQlFYTkNMRXRCUlROQ1pDeERRVUZCTEVkQlFXTTVReXhEUVVGQkxFTkJRVTlyUkN4WlFVRkJMRWxCUlc1Q1dpeERRVUZCTEVOQlFVOTFRaXhKUVVGQkxFbEJRVkYyUWl4RFFVRkJMRU5CUVU5M1FpeGpRVUZCTEV0QlFXZENTQ3hEUVVGQkxFbEJRV1VzVVVGRGNFUXNTVUZCU1dJc1EwRkJRU3hIUVVGak9VTXNRMEZCUVN4RFFVRlBLME1zV1VGQlFTeEpRVU14UWxRc1EwRkJRU3hEUVVGUGVrTXNVVUZCUVN4RFFVRlRZU3hqUVVGQkxFbEJRMlJ2UXl4RFFVRkJMRWRCUVdNNVF5eERRVUZCTEVOQlFVOHJReXhaUVVGQkxFdEJRV2xDVnl4RFFVRkJMRXRCUTNoRFdpeERRVUZCTEVkQlFXTTVReXhEUVVGQkxFTkJRVThyUXl4WlFVRkJMRXRCUVdsQ1Z5eERRVUZCTEVkQlJYaERSaXhEUVVGQkxFZEJRWE5DZUVRc1EwRkJRU3hEUVVGUEswTXNXVUZCUVN4SlFVTTNRbFVzUTBGQlFTeEpRVUZYTEVkQlExaGFMRU5CUVVFc1EwRkJTMlVzYlVKQlFVRXNTVUZCYzBJc1MwRkZNMEprTEVOQlFVRXNSMEZCWXpsRExFTkJRVUVzUTBGQlR5dERMRmxCUVVFc1NVRkZia0pVTEVOQlFVRXNRMEZCVDNWQ0xFbEJRVUVzU1VGQlVYWkNMRU5CUVVFc1EwRkJUM2RDTEdOQlFVRXNTMEZCWjBKSUxFTkJRVUVzU1VGQlpTeFJRVU53UkN4SlFVRkpja0lzUTBGQlFTeERRVUZQZWtNc1VVRkJRU3hEUVVGVFowSXNUVUZCUVN4RlFVRlJPMk5CUTJwRExFbEJRVWxtTEVOQlFVRTdZMEZEU2l4TFFVRkxMRWxCUVVsRkxFTkJRVUVzUjBGQlNTeEhRVUZIUVN4RFFVRkJMRWRCUVVrMFF5eERRVUZCTEVOQlFWTnVRaXhOUVVGQkxFVkJRVkY2UWl4RFFVRkJMRWxCUVVzc1IwRkRlRU1zU1VGQlNUUkRMRU5CUVVFc1EwRkJVelZETEVOQlFVRXNTMEZCVFRoRExFTkJRVUVzUlVGQllUdG5Ra0ZET1VKb1JDeERRVUZCTEVkQlFWbEZMRU5CUVVFN1owSkJRMW83WTBGRFJqdGpRVWRCT0VNc1EwRkJRU3hIUVVSRlVTeEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTVmdzUTBGQlFTeERRVUZUT1VNc1EwRkJRU3hKUVVGaFowUXNRMEZCUVN4SlFVRmxVU3hKUVVGQkxFTkJRVXRETEVkQlFVRXNRMEZCU1Znc1EwRkJRU3hEUVVGVE9VTXNRMEZCUVN4SFFVRlpMRXRCUVV0blJDeERRVUZCTEV0QlFUQkRMRmRCUVRGQ09VTXNRMEZCUVN4RFFVRlBLMFFzWTBGQlFTeEhRVU0xUm01Q0xFTkJRVUVzUTBGQlV6bERMRU5CUVVFc1NVRkZWRGhETEVOQlFVRXNRMEZCVXpsRExFTkJRVUVzUjBGQldTeEpRVVZ5UTJkRUxFTkJRVUVzU1VGQlpVRXNRMEZEYWtJN1dVRkJRVHRaUVU5QkxFbEJUa2xoTEVOQlFVRXNTVUZEUm5KRUxFTkJRVUVzUTBGQlN5eHBRa0ZCYVVJN1kwRkRjRUpPTEVOQlFVRXNRMEZCVDJkRkxFOUJRVUVzUlVGQlV6dFpRVUZCTEVsQlNVa3NUVUZCY0VKb1JTeERRVUZCTEVOQlFVOXhSQ3hSUVVGQk8yTkJUVlFzU1VGS1JYWkVMRU5CUVVFc1IwRkVSVFJETEVOQlFVRXNSMEZEYVVKWkxFbEJRVUVzUTBGQlMwTXNSMEZCUVN4SFFVRk5WQ3hEUVVGQkxFZEJRV001UXl4RFFVRkJMRU5CUVU4MlFpeFRRVUZCTEVsQlFXRTNRaXhEUVVGQkxFTkJRVTl4UkN4UlFVRkJMRWxCUlhCRVF5eEpRVUZCTEVOQlFVdERMRWRCUVVFc1JVRkJTMVFzUTBGQlFTeEhRVUZqT1VNc1EwRkJRU3hEUVVGUE5rSXNVMEZCUVN4SlFVRmhOMElzUTBGQlFTeERRVUZQY1VRc1VVRkJRU3hIUVVWd1JXWXNRMEZCUVN4RFFVRlBla01zVVVGQlFTeERRVUZUWjBJc1RVRkJRU3hGUVVGUk8yZENRVkV4UWl4TlFVRk5XQ3hEUVVGQkxFZEJRV1Z2UkN4SlFVRkJMRU5CUVV0RExFZEJRVUVzUlVGQlMySXNRMEZCUVN4SlFVRlBTU3hEUVVGQkxFZEJRV05CTEVOQlFVRXNTVUZCWlRsRExFTkJRVUVzUTBGQlR6WkNMRk5CUVVFN2EwSkJRM0JGZWtJc1EwRkJRU3hIUVVGdFFrb3NRMEZCUVN4RFFVRlBhVVVzWlVGQlFTeERRVUZuUW1wRkxFTkJRVUVzUTBGQlQybEVMRmRCUVVFN1owSkJSWEpFYmtRc1EwRkJRU3hIUVVSRlNTeERRVUZCTEVkQlFXVkZMRU5CUVVFc1IwRkRSV3RETEVOQlFVRXNRMEZCVHpSQ0xFdEJRVUVzUjBGRGFrSm9SU3hEUVVGQkxFZEJRV1VzU1VGQlNVVXNRMEZCUVN4SFFVTk5MRTFCUVdaclF5eERRVUZCTEVOQlFVODBRaXhMUVVGQkxFZEJSVkVzVFVGQlpqVkNMRU5CUVVFc1EwRkJUelJDTEV0QlJUbENPMk5CUVVFN1dVRkJRU3hQUVVOTExFbEJRVWsxUWl4RFFVRkJMRU5CUVU5NlF5eFJRVUZCTEVOQlFWTm5RaXhOUVVGQkxFVkJSWHBDTEZsQlJFRmlMRU5CUVVFc1EwRkJUMjFGTEdOQlFVRTdXVUZIVERkQ0xFTkJRVUVzUTBGQlQzcERMRkZCUVVFc1EwRkJVMkVzWTBGQlFTeEpRVUZyUWl0RExFTkJRVUVzU1VGRGNFTjZSQ3hEUVVGQkxFTkJRVTl2UlN4alFVRkJMRU5CUVdWYUxFTkJRVUVzUjBGRGRFSjRSQ3hEUVVGQkxFTkJRVTl6UWl4aFFVRkJMRU5CUVdONFFpeERRVUZCTEVkQlEzSkNSU3hEUVVGQkxFTkJRVTl4UWl4WlFVRkJMRU5CUVdGNVFpeERRVUZCTEVkQlEzQkNPVU1zUTBGQlFTeERRVUZQY1VVc1pVRkJRU3hGUVVGblFpeEhRVUZOY2tVc1EwRkJRU3hEUVVGUEswUXNZMEZCUVN4SFFVTndReTlFTEVOQlFVRXNRMEZCVDNORkxGTkJRVUVzU1VGQldTeEhRVU51UWl4SlFVRkJReXhYUVVGQkxFVkJRWEZDTDBJc1EwRkJRU3hGUVVGWE8yTkJRM3BDZUVNc1EwRkJRU3hMUVVGVlFTeERRVUZCTEVOQlFVOTNSU3hUUVVGQkxFbEJRV016UWl4RFFVRkJMRU5CUVV0bExHMUNRVUZCTEV0QlEzcERlRVFzUTBGQlFTeERRVUZMTEcxQ1FVTk1TaXhEUVVGQkxFTkJRVTl6UWl4aFFVRkJMRU5CUVdOblFpeERRVUZCTEVOQlFVODBRaXhMUVVGQkxFZEJRelZDVHl4VlFVRkJMRU5CUVZjN1owSkJRMVI2UlN4RFFVRkJMRU5CUVU5eFFpeFpRVUZCTEVOQlFXRnRReXhEUVVGQkxFZEJRM0JDTEVsQlFVRmxMRmRCUVVFc1JVRkJjVUl2UWl4RFFVRkJMRVZCUVZjN2EwSkJRM3BDZUVNc1EwRkJRU3hMUVVGVlFTeERRVUZCTEVOQlFVOTNSU3hUUVVGQkxFbEJRM1JDZUVVc1EwRkJRU3hEUVVGUE1FVXNZVUZCUVN4RlFVRmxPMmRDUVVGQkxFVkJRM1JDTzJOQlFVRXNSMEZEUkN4SFFVRkZPMWxCUVVFc1RVRkZSVEZGTEVOQlFVRXNRMEZCVDNGRUxGRkJRVUVzU1VGRGFFSnFSQ3hEUVVGQkxFTkJRVXNzSzBKQlEweEtMRU5CUVVFc1EwRkJUMjlGTEdOQlFVRXNRMEZCWlhSQ0xFTkJRVUVzUjBGRGRFSTVReXhEUVVGQkxFTkJRVTl6UWl4aFFVRkJMRU5CUVdONFFpeERRVUZCTEVkQlEzSkNSU3hEUVVGQkxFTkJRVTl4UWl4WlFVRkJMRU5CUVdGNVFpeERRVUZCTEVkQlEzQkNPVU1zUTBGQlFTeERRVUZQY1VVc1pVRkJRU3hGUVVGblFpeEhRVUZOY2tVc1EwRkJRU3hEUVVGUEswUXNZMEZCUVN4SFFVTXZRaTlFTEVOQlFVRXNRMEZCVDNORkxGTkJRVUVzUzBGRFZuUkZMRU5CUVVFc1EwRkJUM05GTEZOQlFVRXNTVUZCV1N4SFFVTnVRaXhKUVVGQlF5eFhRVUZCTEVWQlFYRkNMMElzUTBGQlFTeEZRVUZYTzJOQlEzcENlRU1zUTBGQlFTeExRVUZWUVN4RFFVRkJMRU5CUVU5M1JTeFRRVUZCTEVsQlEzUkNlRVVzUTBGQlFTeERRVUZQTUVVc1lVRkJRU3hGUVVGbE8xbEJRVUVzVDBGSk1VSXhSU3hEUVVGQkxFTkJRVTl2UlN4alFVRkJMRU5CUVdWMFFpeERRVUZCTEVkQlJYaENPVU1zUTBGQlFTeERRVUZQTWtVc2FVSkJRVUVzU1VGRFVETkZMRU5CUVVFc1EwRkJUelJGTEcxQ1FVRkJMRVZCUTFRN1ZVRkJRU3hQUVVGUE8xbEJRVUVzU1VGQlNYUkRMRU5CUVVFc1EwRkJUM3BETEZGQlFVRXNRMEZCVTJkQ0xFMUJRVUVzUlVGRmVrSXNXVUZFUVdJc1EwRkJRU3hEUVVGUGJVVXNZMEZCUVR0WlFVVkZOMElzUTBGQlFTeERRVUZQZWtNc1VVRkJRU3hKUVVOb1FrOHNRMEZCUVN4RFFVRkxMRFpDUVVOUU8xVkJRVUU3VlVGQlFTeEZRVU5MYTBNc1EwRkJRU3hEUVVGUGVrTXNVVUZCUVN4RFFVRlRWeXhSUVVGQkxFbEJRVmx6UXl4RFFVRkJMRWxCUVZsU0xFTkJRVUVzUTBGQlQzVkRMRmxCUVVFc1RVRkRiRVEzUlN4RFFVRkJMRU5CUVU5dlJTeGpRVUZCTEVsQlExQndSU3hEUVVGQkxFTkJRVTh5UlN4cFFrRkJRU3hKUVVOUU0wVXNRMEZCUVN4RFFVRlBORVVzYlVKQlFVRXNSMEZ3U2xRN1VVRkJRVHROUVhOS1JqdEpRVUZCTzBWQlFVRXNSVUZSUmp0QlFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBHcmlkO1xuZnVuY3Rpb24gR3JpZChlKSB7XG4gIGxldCByLFxuICAgIHQsXG4gICAgYSxcbiAgICB7XG4gICAgICBzd2lwZXI6IGwsXG4gICAgICBleHRlbmRQYXJhbXM6IGlcbiAgICB9ID0gZTtcbiAgaSh7XG4gICAgZ3JpZDoge1xuICAgICAgcm93czogMSxcbiAgICAgIGZpbGw6IFwiY29sdW1uXCJcbiAgICB9XG4gIH0pO1xuICBjb25zdCBvID0gKCkgPT4ge1xuICAgIGxldCBlID0gbC5wYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIGUuaW5kZXhPZihcIiVcIikgPj0gMCA/IGUgPSBwYXJzZUZsb2F0KGUucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwICogbC5zaXplIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAoZSA9IHBhcnNlRmxvYXQoZSkpLCBlO1xuICB9O1xuICBsLmdyaWQgPSB7XG4gICAgaW5pdFNsaWRlczogZSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldzogaVxuICAgICAgICB9ID0gbC5wYXJhbXMsXG4gICAgICAgIHtcbiAgICAgICAgICByb3dzOiBvLFxuICAgICAgICAgIGZpbGw6IHNcbiAgICAgICAgfSA9IGwucGFyYW1zLmdyaWQ7XG4gICAgICBhID0gTWF0aC5mbG9vcihlIC8gbyksIHIgPSBNYXRoLmZsb29yKGUgLyBvKSA9PT0gZSAvIG8gPyBlIDogTWF0aC5jZWlsKGUgLyBvKSAqIG8sIFwiYXV0b1wiICE9PSBpICYmIFwicm93XCIgPT09IHMgJiYgKHIgPSBNYXRoLm1heChyLCBpICogbykpLCB0ID0gciAvIG87XG4gICAgfSxcbiAgICB1cGRhdGVTbGlkZTogKGUsIGksIHMsIHApID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgICBzbGlkZXNQZXJHcm91cDogblxuICAgICAgICB9ID0gbC5wYXJhbXMsXG4gICAgICAgIGQgPSBvKCksXG4gICAgICAgIHtcbiAgICAgICAgICByb3dzOiBmLFxuICAgICAgICAgIGZpbGw6IGhcbiAgICAgICAgfSA9IGwucGFyYW1zLmdyaWQ7XG4gICAgICBsZXQgdSwgYywgbTtcbiAgICAgIGlmIChcInJvd1wiID09PSBoICYmIG4gPiAxKSB7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLmZsb29yKGUgLyAobiAqIGYpKSxcbiAgICAgICAgICBhID0gZSAtIGYgKiBuICogdCxcbiAgICAgICAgICBsID0gMCA9PT0gdCA/IG4gOiBNYXRoLm1pbihNYXRoLmNlaWwoKHMgLSB0ICogZiAqIG4pIC8gZiksIG4pO1xuICAgICAgICBtID0gTWF0aC5mbG9vcihhIC8gbCksIGMgPSBhIC0gbSAqIGwgKyB0ICogbiwgdSA9IGMgKyBtICogciAvIGYsIGkuc3R5bGUub3JkZXIgPSB1O1xuICAgICAgfSBlbHNlIFwiY29sdW1uXCIgPT09IGggPyAoYyA9IE1hdGguZmxvb3IoZSAvIGYpLCBtID0gZSAtIGMgKiBmLCAoYyA+IGEgfHwgYyA9PT0gYSAmJiBtID09PSBmIC0gMSkgJiYgKG0gKz0gMSwgbSA+PSBmICYmIChtID0gMCwgYyArPSAxKSkpIDogKG0gPSBNYXRoLmZsb29yKGUgLyB0KSwgYyA9IGUgLSBtICogdCk7XG4gICAgICBpLnJvdyA9IG0sIGkuY29sdW1uID0gYywgaS5zdHlsZVtwKFwibWFyZ2luLXRvcFwiKV0gPSAwICE9PSBtID8gZCAmJiBgJHtkfXB4YCA6IFwiXCI7XG4gICAgfSxcbiAgICB1cGRhdGVXcmFwcGVyU2l6ZTogKGUsIHQsIGEpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgICBjZW50ZXJlZFNsaWRlczogaSxcbiAgICAgICAgICByb3VuZExlbmd0aHM6IHNcbiAgICAgICAgfSA9IGwucGFyYW1zLFxuICAgICAgICBwID0gbygpLFxuICAgICAgICB7XG4gICAgICAgICAgcm93czogblxuICAgICAgICB9ID0gbC5wYXJhbXMuZ3JpZDtcbiAgICAgIGlmIChsLnZpcnR1YWxTaXplID0gKGUgKyBwKSAqIHIsIGwudmlydHVhbFNpemUgPSBNYXRoLmNlaWwobC52aXJ0dWFsU2l6ZSAvIG4pIC0gcCwgbC53cmFwcGVyRWwuc3R5bGVbYShcIndpZHRoXCIpXSA9IGAke2wudmlydHVhbFNpemUgKyBwfXB4YCwgaSkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgdC5sZW5ndGg7IHIgKz0gMSkge1xuICAgICAgICAgIGxldCBhID0gdFtyXTtcbiAgICAgICAgICBzICYmIChhID0gTWF0aC5mbG9vcihhKSksIHRbcl0gPCBsLnZpcnR1YWxTaXplICsgdFswXSAmJiBlLnB1c2goYSk7XG4gICAgICAgIH1cbiAgICAgICAgdC5zcGxpY2UoMCwgdC5sZW5ndGgpLCB0LnB1c2goLi4uZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpIY21sa0lpd2laU0lzSW5JaUxDSjBJaXdpWVNJc0luTjNhWEJsY2lJc0ltd2lMQ0psZUhSbGJtUlFZWEpoYlhNaUxDSnBJaXdpWjNKcFpDSXNJbkp2ZDNNaUxDSm1hV3hzSWl3aWJ5SXNJbWRsZEZOd1lXTmxRbVYwZDJWbGJpSXNJbkJoY21GdGN5SXNJbk53WVdObFFtVjBkMlZsYmlJc0ltbHVaR1Y0VDJZaUxDSndZWEp6WlVac2IyRjBJaXdpY21Wd2JHRmpaU0lzSW5OcGVtVWlMQ0pwYm1sMFUyeHBaR1Z6SWl3aWMyeHBaR1Z6VUdWeVZtbGxkeUlzSW5NaUxDSk5ZWFJvSWl3aVpteHZiM0lpTENKalpXbHNJaXdpYldGNElpd2lkWEJrWVhSbFUyeHBaR1VpTENKd0lpd2ljMnhwWkdWelVHVnlSM0p2ZFhBaUxDSnVJaXdpWkNJc0ltWWlMQ0pvSWl3aWRTSXNJbU1pTENKdElpd2liV2x1SWl3aWMzUjViR1VpTENKdmNtUmxjaUlzSW5KdmR5SXNJbU52YkhWdGJpSXNJblZ3WkdGMFpWZHlZWEJ3WlhKVGFYcGxJaXdpWTJWdWRHVnlaV1JUYkdsa1pYTWlMQ0p5YjNWdVpFeGxibWQwYUhNaUxDSjJhWEowZFdGc1UybDZaU0lzSW5keVlYQndaWEpGYkNJc0lteGxibWQwYUNJc0luQjFjMmdpTENKemNHeHBZMlVpWFN3aWMyOTFjbU5sY3lJNld5SXdJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiYm5Wc2JGMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdRVUZCUVN4VFFVRlRRU3hMUVVGTFF5eERRVUZCTzBWQlExb3NTVUZWU1VNc1EwRkJRVHRKUVVOQlF5eERRVUZCTzBsQlEwRkRMRU5CUVVFN1NVRkJRVHROUVZwQlF5eE5RVUZCTEVWQlEwWkRMRU5CUVVFN1RVRkJUVU1zV1VGQlFTeEZRVU5PUXp0SlFVRkJMRWxCUTBWUUxFTkJRVUU3UlVGRFNrOHNRMEZCUVN4RFFVRmhPMGxCUTFoRExFbEJRVUVzUlVGQlRUdE5RVU5LUXl4SlFVRkJMRVZCUVUwN1RVRkRUa01zU1VGQlFTeEZRVUZOTzBsQlFVRTdSVUZCUVR0RlFVMVdMRTFCUVUxRExFTkJRVUVzUjBGQmEwSkRMRU5CUVVFN1NVRkRkRUlzU1VGQlNWb3NRMEZCUVN4SFFVRmxTeXhEUVVGQkxFTkJRVTlSTEUxQlFVRXNRMEZCVDBNc1dVRkJRVHRKUVUxcVF5eFBRVXcwUWl4dFFrRkJha0prTEVOQlFVRXNTVUZCTmtKQkxFTkJRVUVzUTBGQllXVXNUMEZCUVN4RFFVRlJMRkZCUVZFc1NVRkRia1ZtTEVOQlFVRXNSMEZCWldkQ0xGVkJRVUVzUTBGQlYyaENMRU5CUVVFc1EwRkJZV2xDTEU5QlFVRXNRMEZCVVN4TFFVRkxMRTlCUVU4c1RVRkJUVm9zUTBGQlFTeERRVUZQWVN4SlFVRkJMRWRCUTNaRExHMUNRVUZxUW14Q0xFTkJRVUVzUzBGRGFFSkJMRU5CUVVFc1IwRkJaV2RDTEZWQlFVRXNRMEZCVjJoQ0xFTkJRVUVzU1VGRmNrSkJMRU5CUVZrN1JVRkJRVHRGUVcxR2NrSkxMRU5CUVVFc1EwRkJUMGNzU1VGQlFTeEhRVUZQTzBsQlExcFhMRlZCUVVFc1JVRnNSbWxDYmtJc1EwRkJRVHROUVVOcVFqdFZRVUZOYjBJc1lVRkJRU3hGUVVOS1lqdFJRVUZCTEVsQlEwVkdMRU5CUVVFc1EwRkJUMUVzVFVGQlFUdFJRVUZCTzFWQlEweEtMRWxCUVVFc1JVRkRTa1VzUTBGQlFUdFZRVUZKUkN4SlFVRkJMRVZCUTBwWE8xRkJRVUVzU1VGRFJXaENMRU5CUVVFc1EwRkJUMUVzVFVGQlFTeERRVUZQVEN4SlFVRkJPMDFCUTJ4Q1RDeERRVUZCTEVkQlFXbENiVUlzU1VGQlFTeERRVUZMUXl4TFFVRkJMRU5CUVUxMlFpeERRVUZCTEVkQlFXVlhMRU5CUVVFc1IwRkZla05XTEVOQlFVRXNSMEZFUlhGQ0xFbEJRVUVzUTBGQlMwTXNTMEZCUVN4RFFVRk5ka0lzUTBGQlFTeEhRVUZsVnl4RFFVRkJMRTFCUVZWWUxFTkJRVUVzUjBGQlpWY3NRMEZCUVN4SFFVTTFRbGdzUTBGQlFTeEhRVVZCYzBJc1NVRkJRU3hEUVVGTFJTeEpRVUZCTEVOQlFVdDRRaXhEUVVGQkxFZEJRV1ZYTEVOQlFVRXNTVUZCVVVFc1EwRkJRU3hGUVVWMFF5eFhRVUZzUWtvc1EwRkJRU3hKUVVGeFF5eFZRVUZVWXl4RFFVRkJMRXRCUXpsQ2NFSXNRMEZCUVN4SFFVRjVRbkZDTEVsQlFVRXNRMEZCUzBjc1IwRkJRU3hEUVVGSmVFSXNRMEZCUVN4RlFVRjNRazBzUTBGQlFTeEhRVUZuUWtrc1EwRkJRU3hKUVVVMVJWUXNRMEZCUVN4SFFVRmxSQ3hEUVVGQkxFZEJRWGxDVlN4RFFVRkpPMGxCUVVFN1NVRnJSVFZEWlN4WFFVRkJMRVZCYUVWclFrRXNRMEZCUXpGQ0xFTkJRVUVzUlVGQlIwOHNRMEZCUVN4RlFVRlBZeXhEUVVGQkxFVkJRV05OTEVOQlFVRTdUVUZETTBNN1ZVRkJUVU1zWTBGQlFTeEZRVU5LUXp0UlFVRkJMRWxCUTBWNFFpeERRVUZCTEVOQlFVOVJMRTFCUVVFN1VVRkRUR2xDTEVOQlFVRXNSMEZCWlc1Q0xFTkJRVUU3VVVGQlFUdFZRVU5tUml4SlFVRkJMRVZCUTBwelFpeERRVUZCTzFWQlFVbHlRaXhKUVVGQkxFVkJRMHB6UWp0UlFVRkJMRWxCUTBVelFpeERRVUZCTEVOQlFVOVJMRTFCUVVFc1EwRkJUMHdzU1VGQlFUdE5RVVZzUWl4SlFVRkplVUlzUTBGQlFTeEZRVU5CUXl4RFFVRkJMRVZCUTBGRExFTkJRVUU3VFVGRFNpeEpRVUZoTEZWQlFWUklMRU5CUVVFc1NVRkJhMEpJTEVOQlFVRXNSMEZCYVVJc1IwRkJSenRSUVVONFF5eE5RVUZOTTBJc1EwRkJRU3hIUVVGaGIwSXNTVUZCUVN4RFFVRkxReXhMUVVGQkxFTkJRVTEyUWl4RFFVRkJMRWxCUVVzMlFpeERRVUZCTEVkQlFXbENSU3hEUVVGQk8xVkJRemxETlVJc1EwRkJRU3hIUVVGdlFrZ3NRMEZCUVN4SFFVRkpLMElzUTBGQlFTeEhRVUZQUml4RFFVRkJMRWRCUVdsQ00wSXNRMEZCUVR0VlFVTm9SRWNzUTBGQlFTeEhRVUZuUXl4TlFVRm1TQ3hEUVVGQkxFZEJRVzFDTWtJc1EwRkJRU3hIUVVGcFFsQXNTVUZCUVN4RFFVRkxZeXhIUVVGQkxFTkJRVWxrTEVsQlFVRXNRMEZCUzBVc1NVRkJRU3hGUVVGTlNDeERRVUZCTEVkQlFXVnVRaXhEUVVGQkxFZEJRV0UyUWl4RFFVRkJMRWRCUVU5R0xFTkJRVUVzU1VGQmEwSkZMRU5CUVVFc1IwRkJUMFlzUTBGQlFUdFJRVU16U1Uwc1EwRkJRU3hIUVVGTllpeEpRVUZCTEVOQlFVdERMRXRCUVVFc1EwRkJUWEJDTEVOQlFVRXNSMEZCYjBKRkxFTkJRVUVzUjBGRGNrTTJRaXhEUVVGQkxFZEJRVk12UWl4RFFVRkJMRWRCUVc5Q1owTXNRMEZCUVN4SFFVRk5PVUlzUTBGQlFTeEhRVUZwUWtnc1EwRkJRU3hIUVVGaE1rSXNRMEZCUVN4RlFVTnFSVWtzUTBGQlFTeEhRVUZ4UWtNc1EwRkJRU3hIUVVGVFF5eERRVUZCTEVkQlFVMXNReXhEUVVGQkxFZEJRWGxDT0VJc1EwRkJRU3hGUVVNM1JIaENMRU5CUVVFc1EwRkJUVGhDTEV0QlFVRXNRMEZCVFVNc1MwRkJRU3hIUVVGUlRDeERRVU4wUWp0TlFVRkJMRTlCUVc5Q0xHRkJRVlJFTEVOQlFVRXNTVUZEVkVVc1EwRkJRU3hIUVVGVFdpeEpRVUZCTEVOQlFVdERMRXRCUVVFc1EwRkJUWFpDTEVOQlFVRXNSMEZCU1N0Q0xFTkJRVUVzUjBGRGVFSkpMRU5CUVVFc1IwRkJUVzVETEVOQlFVRXNSMEZCU1d0RExFTkJRVUVzUjBGQlUwZ3NRMEZCUVN4SFFVTm1SeXhEUVVGQkxFZEJRVk12UWl4RFFVRkJMRWxCUVd0Q0swSXNRMEZCUVN4TFFVRlhMMElzUTBGQlFTeEpRVUZyUW1kRExFTkJRVUVzUzBGQlVVb3NRMEZCUVN4SFFVRlBMRTlCUTNwRlNTeERRVUZCTEVsQlFVOHNSMEZEU0VFc1EwRkJRU3hKUVVGUFNpeERRVUZCTEV0QlExUkpMRU5CUVVFc1IwRkJUU3hIUVVOT1JDeERRVUZCTEVsQlFWVXNVVUZKWkVNc1EwRkJRU3hIUVVGTllpeEpRVUZCTEVOQlFVdERMRXRCUVVFc1EwRkJUWFpDTEVOQlFVRXNSMEZCU1VVc1EwRkJRU3hIUVVOeVFtZERMRU5CUVVFc1IwRkJVMnhETEVOQlFVRXNSMEZCU1cxRExFTkJRVUVzUjBGQlRXcERMRU5CUVVFN1RVRkZja0pMTEVOQlFVRXNRMEZCVFdkRExFZEJRVUVzUjBGQlRVb3NRMEZCUVN4RlFVTmFOVUlzUTBGQlFTeERRVUZOYVVNc1RVRkJRU3hIUVVGVFRpeERRVUZCTEVWQlEyWXpRaXhEUVVGQkxFTkJRVTA0UWl4TFFVRkJMRU5CUVUxV0xFTkJRVUVzUTBGQmEwSXNhVUpCUVhsQ0xFMUJRVkpSTEVOQlFVRXNSMEZCV1V3c1EwRkJRU3hKUVVGblFpeEhRVUZIUVN4RFFVRkJMRTlCUVcxQ0xFVkJRVVU3U1VGQlFUdEpRVFJDYmtkWExHbENRVUZCTEVWQk1VSjNRa0VzUTBGQlEzcERMRU5CUVVFc1JVRkJWMFVzUTBGQlFTeEZRVUZWUXl4RFFVRkJPMDFCUXpsRE8xVkJRVTExUXl4alFVRkJMRVZCUTBwdVF5eERRVUZCTzFWQlFXTnZReXhaUVVGQkxFVkJRMlIwUWp0UlFVRkJMRWxCUTBWb1FpeERRVUZCTEVOQlFVOVJMRTFCUVVFN1VVRkRUR01zUTBGQlFTeEhRVUZsYUVJc1EwRkJRVHRSUVVGQk8xVkJRMlpHTEVsQlFVRXNSVUZEU205Q08xRkJRVUVzU1VGRFJYaENMRU5CUVVFc1EwRkJUMUVzVFVGQlFTeERRVUZQVEN4SlFVRkJPMDFCU1d4Q0xFbEJTRUZJTEVOQlFVRXNRMEZCVDNWRExGZEJRVUVzU1VGQlpUVkRMRU5CUVVFc1IwRkJXVEpDTEVOQlFVRXNTVUZCWjBJeFFpeERRVUZCTEVWQlEyeEVTU3hEUVVGQkxFTkJRVTkxUXl4WFFVRkJMRWRCUVdOMFFpeEpRVUZCTEVOQlFVdEZMRWxCUVVFc1EwRkJTMjVDTEVOQlFVRXNRMEZCVDNWRExGZEJRVUVzUjBGQlkyWXNRMEZCUVN4SlFVRlJSaXhEUVVGQkxFVkJRelZFZEVJc1EwRkJRU3hEUVVGUGQwTXNVMEZCUVN4RFFVRlZVaXhMUVVGQkxFTkJRVTFzUXl4RFFVRkJMRU5CUVd0Q0xGbEJRVmtzUjBGQlIwVXNRMEZCUVN4RFFVRlBkVU1zVjBGQlFTeEhRVUZqYWtJc1EwRkJRU3hOUVVONlJYQkNMRU5CUVVFc1JVRkJaMEk3VVVGRGJFSXNUVUZCVFZBc1EwRkJRU3hIUVVGblFqdFJRVU4wUWl4TFFVRkxMRWxCUVVsRExFTkJRVUVzUjBGQlNTeEhRVUZIUVN4RFFVRkJMRWRCUVVsRExFTkJRVUVzUTBGQlV6UkRMRTFCUVVFc1JVRkJVVGRETEVOQlFVRXNTVUZCU3l4SFFVRkhPMVZCUXpORExFbEJRVWxGTEVOQlFVRXNSMEZCYVVKRUxFTkJRVUVzUTBGQlUwUXNRMEZCUVR0VlFVTXhRbTlDTEVOQlFVRXNTMEZCWTJ4Q0xFTkJRVUVzUjBGQmFVSnRRaXhKUVVGQkxFTkJRVXRETEV0QlFVRXNRMEZCVFhCQ0xFTkJRVUVzU1VGRE1VTkVMRU5CUVVFc1EwRkJVMFFzUTBGQlFTeEpRVUZMU1N4RFFVRkJMRU5CUVU5MVF5eFhRVUZCTEVkQlFXTXhReXhEUVVGQkxFTkJRVk1zVFVGQlNVWXNRMEZCUVN4RFFVRmpLME1zU1VGQlFTeERRVUZMTlVNc1EwRkJRU3hEUVVONlJUdFJRVUZCTzFGQlEwRkVMRU5CUVVFc1EwRkJVemhETEUxQlFVRXNRMEZCVHl4SFFVRkhPVU1zUTBGQlFTeERRVUZUTkVNc1RVRkJRU3hIUVVNMVFqVkRMRU5CUVVFc1EwRkJVelpETEVsQlFVRXNTVUZCVVM5RExFTkJRVUVzUTBGRGJrSTdUVUZCUVR0SlFVRkJPMFZCUVVFc1EwRlBTanRCUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEhhc2hOYXZpZ2F0aW9uO1xudmFyIF9zc3JXaW5kb3dFc21NaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gSGFzaE5hdmlnYXRpb24oYSkge1xuICBsZXQge1xuICAgICAgc3dpcGVyOiBlLFxuICAgICAgZXh0ZW5kUGFyYW1zOiB0LFxuICAgICAgZW1pdDogcyxcbiAgICAgIG9uOiBpXG4gICAgfSA9IGEsXG4gICAgbiA9ICExO1xuICBjb25zdCByID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uZykoKSxcbiAgICBoID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKTtcbiAgdCh7XG4gICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgcmVwbGFjZVN0YXRlOiAhMSxcbiAgICAgIHdhdGNoU3RhdGU6ICExLFxuICAgICAgZ2V0U2xpZGVJbmRleChhLCB0KSB7XG4gICAgICAgIGlmIChlLnZpcnR1YWwgJiYgZS5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAgICAgY29uc3QgYSA9IGUuc2xpZGVzLmZpbHRlcihhID0+IGEuZ2V0QXR0cmlidXRlKFwiZGF0YS1oYXNoXCIpID09PSB0KVswXTtcbiAgICAgICAgICBpZiAoIWEpIHJldHVybiAwO1xuICAgICAgICAgIHJldHVybiBwYXJzZUludChhLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUuZ2V0U2xpZGVJbmRleCgoMCwgX3V0aWxzTWluLmUpKGUuc2xpZGVzRWwsIGAuJHtlLnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLWhhc2g9XCIke3R9XCJdLCBzd2lwZXItc2xpZGVbZGF0YS1oYXNoPVwiJHt0fVwiXWApWzBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBkID0gKCkgPT4ge1xuICAgICAgcyhcImhhc2hDaGFuZ2VcIik7XG4gICAgICBjb25zdCBhID0gci5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoXCIjXCIsIFwiXCIpLFxuICAgICAgICB0ID0gZS52aXJ0dWFsICYmIGUucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IGUuc2xpZGVzRWwucXVlcnlTZWxlY3RvcihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtlLmFjdGl2ZUluZGV4fVwiXWApIDogZS5zbGlkZXNbZS5hY3RpdmVJbmRleF07XG4gICAgICBpZiAoYSAhPT0gKHQgPyB0LmdldEF0dHJpYnV0ZShcImRhdGEtaGFzaFwiKSA6IFwiXCIpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5nZXRTbGlkZUluZGV4KGUsIGEpO1xuICAgICAgICBpZiAodm9pZCAwID09PSB0IHx8IE51bWJlci5pc05hTih0KSkgcmV0dXJuO1xuICAgICAgICBlLnNsaWRlVG8odCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBsID0gKCkgPT4ge1xuICAgICAgaWYgKCFuIHx8ICFlLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSByZXR1cm47XG4gICAgICBjb25zdCBhID0gZS52aXJ0dWFsICYmIGUucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IGUuc2xpZGVzRWwucXVlcnlTZWxlY3RvcihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtlLmFjdGl2ZUluZGV4fVwiXWApIDogZS5zbGlkZXNbZS5hY3RpdmVJbmRleF0sXG4gICAgICAgIHQgPSBhID8gYS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhhc2hcIikgfHwgYS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhpc3RvcnlcIikgOiBcIlwiO1xuICAgICAgZS5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIGguaGlzdG9yeSAmJiBoLmhpc3RvcnkucmVwbGFjZVN0YXRlID8gKGguaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgYCMke3R9YCB8fCBcIlwiKSwgcyhcImhhc2hTZXRcIikpIDogKHIubG9jYXRpb24uaGFzaCA9IHQgfHwgXCJcIiwgcyhcImhhc2hTZXRcIikpO1xuICAgIH07XG4gIGkoXCJpbml0XCIsICgpID0+IHtcbiAgICBlLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkICYmICgoKSA9PiB7XG4gICAgICBpZiAoIWUucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHwgZS5wYXJhbXMuaGlzdG9yeSAmJiBlLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIG4gPSAhMDtcbiAgICAgIGNvbnN0IGEgPSByLmxvY2F0aW9uLmhhc2gucmVwbGFjZShcIiNcIiwgXCJcIik7XG4gICAgICBpZiAoYSkge1xuICAgICAgICBjb25zdCB0ID0gMCxcbiAgICAgICAgICBzID0gZS5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZ2V0U2xpZGVJbmRleChlLCBhKTtcbiAgICAgICAgZS5zbGlkZVRvKHMgfHwgMCwgdCwgZS5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCAhMCk7XG4gICAgICB9XG4gICAgICBlLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlICYmIGguYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgZCk7XG4gICAgfSkoKTtcbiAgfSksIGkoXCJkZXN0cm95XCIsICgpID0+IHtcbiAgICBlLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkICYmIGUucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUgJiYgaC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCBkKTtcbiAgfSksIGkoXCJ0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlXCIsICgpID0+IHtcbiAgICBuICYmIGwoKTtcbiAgfSksIGkoXCJzbGlkZUNoYW5nZVwiLCAoKSA9PiB7XG4gICAgbiAmJiBlLnBhcmFtcy5jc3NNb2RlICYmIGwoKTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZkWFJwYkhOTmFXNGlMQ0p5WlhGMWFYSmxJaXdpU0dGemFFNWhkbWxuWVhScGIyNGlMQ0poSWl3aWMzZHBjR1Z5SWl3aVpTSXNJbVY0ZEdWdVpGQmhjbUZ0Y3lJc0luUWlMQ0psYldsMElpd2ljeUlzSW05dUlpd2lhU0lzSW00aUxDSnlJaXdpWjJWMFJHOWpkVzFsYm5RaUxDSm9JaXdpWjJWMFYybHVaRzkzSWl3aWFHRnphRTVoZG1sbllYUnBiMjRpTENKbGJtRmliR1ZrSWl3aWNtVndiR0ZqWlZOMFlYUmxJaXdpZDJGMFkyaFRkR0YwWlNJc0ltZGxkRk5zYVdSbFNXNWtaWGdpTENKMmFYSjBkV0ZzSWl3aWNHRnlZVzF6SWl3aWMyeHBaR1Z6SWl3aVptbHNkR1Z5SWl3aVoyVjBRWFIwY21saWRYUmxJaXdpY0dGeWMyVkpiblFpTENKbGJHVnRaVzUwUTJocGJHUnlaVzRpTENKemJHbGtaWE5GYkNJc0luTnNhV1JsUTJ4aGMzTWlMQ0prSWl3aWIyNUlZWE5vUTJoaGJtZGxJaXdpYkc5allYUnBiMjRpTENKb1lYTm9JaXdpY21Wd2JHRmpaU0lzSW5GMVpYSjVVMlZzWldOMGIzSWlMQ0poWTNScGRtVkpibVJsZUNJc0lrNTFiV0psY2lJc0ltbHpUbUZPSWl3aWMyeHBaR1ZVYnlJc0ltd2lMQ0p6WlhSSVlYTm9JaXdpYUdsemRHOXllU0lzSW5KMWJrTmhiR3hpWVdOcmMwOXVTVzVwZENJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJaXdpWTNOelRXOWtaU0pkTENKemIzVnlZMlZ6SWpwYklqQWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdRVUZCYVVRc1NVRkJRVUVzVTBGQlFTeEhRVUZCUXl4UFFVRkJPMEZCUjJwRUxGTkJRVk5ETEdWQlFXVkRMRU5CUVVFN1JVRkRkRUk3VFVGQlNVTXNUVUZCUVN4RlFVTkdReXhEUVVGQk8wMUJRVTFETEZsQlFVRXNSVUZEVGtNc1EwRkJRVHROUVVGWlF5eEpRVUZCTEVWQlExcERMRU5CUVVFN1RVRkJTVU1zUlVGQlFTeEZRVU5LUXp0SlFVRkJMRWxCUTBWU0xFTkJRVUU3U1VGRFFWTXNRMEZCUVN4SlFVRmpPMFZCUTJ4Q0xFMUJRVTFETEVOQlFVRXNSMEZCVnl4SlFVRkJReXhyUWtGQlFUdEpRVU5ZUXl4RFFVRkJMRWRCUVZNc1NVRkJRVU1zYTBKQlFVRTdSVUZEWmxRc1EwRkJRU3hEUVVGaE8wbEJRMWhWTEdOQlFVRXNSVUZCWjBJN1RVRkRaRU1zVDBGQlFTeEhRVUZUTzAxQlExUkRMRmxCUVVFc1IwRkJZenROUVVOa1F5eFZRVUZCTEVkQlFWazdUVUZEV2tNc1kwRkJZMnhDTEVOQlFVRXNSVUZCU1Vrc1EwRkJRVHRSUVVOb1FpeEpRVUZKUml4RFFVRkJMRU5CUVU5cFFpeFBRVUZCTEVsQlFWZHFRaXhEUVVGQkxFTkJRVTlyUWl4TlFVRkJMRU5CUVU5RUxFOUJRVUVzUTBGQlVVb3NUMEZCUVN4RlFVRlRPMVZCUTI1RUxFMUJRVTFtTEVOQlFVRXNSMEZCWjBKRkxFTkJRVUVzUTBGQlQyMUNMRTFCUVVFc1EwRkJUME1zVFVGQlFTeERRVUZQZEVJc1EwRkJRU3hKUVVGWFFTeERRVUZCTEVOQlFWRjFRaXhaUVVGQkxFTkJRV0VzYVVKQlFXbENia0lzUTBGQlFTeEZRVUZOTzFWQlEyeEhMRXRCUVV0S0xFTkJRVUVzUlVGQlpTeFBRVUZQTzFWQlJUTkNMRTlCUkdOM1FpeFJRVUZCTEVOQlFWTjRRaXhEUVVGQkxFTkJRV04xUWl4WlFVRkJMRU5CUVdFc05FSkJRVFJDTEVkQlJXaEdPMUZCUVVFN1VVRkRRU3hQUVVGUGNrSXNRMEZCUVN4RFFVRlBaMElzWVVGQlFTeERRVUZqTEVsQlFVRlBMRmRCUVVFc1JVRkJaMEoyUWl4RFFVRkJMRU5CUVU5M1FpeFJRVUZCTEVWQlFWVXNTVUZCU1hoQ0xFTkJRVUVzUTBGQlQydENMRTFCUVVFc1EwRkJUMDhzVlVGQlFTeGxRVUY1UW5aQ0xFTkJRVUVzSzBKQlFXMURRU3hEUVVGQkxFMUJRVlVzUjBGRGRrbzdUVUZCUVR0SlFVRkJPMFZCUVVFN1JVRkhTaXhOUVVGTmQwSXNRMEZCUVN4SFFVRmxReXhEUVVGQk8wMUJRMjVDZGtJc1EwRkJRU3hEUVVGTE8wMUJRMHdzVFVGQlRVNHNRMEZCUVN4SFFVRlZWU3hEUVVGQkxFTkJRVk52UWl4UlFVRkJMRU5CUVZORExFbEJRVUVzUTBGQlMwTXNUMEZCUVN4RFFVRlJMRXRCUVVzN1VVRkRPVU0xUWl4RFFVRkJMRWRCUVdkQ1JpeERRVUZCTEVOQlFVOXBRaXhQUVVGQkxFbEJRVmRxUWl4RFFVRkJMRU5CUVU5clFpeE5RVUZCTEVOQlFVOUVMRTlCUVVFc1EwRkJVVW9zVDBGQlFTeEhRVUZWWWl4RFFVRkJMRU5CUVU5M1FpeFJRVUZCTEVOQlFWTlBMR0ZCUVVFc1EwRkJZeXcyUWtGQk5rSXZRaXhEUVVGQkxFTkJRVTluUXl4WFFVRkJMRkZCUVcxQ2FFTXNRMEZCUVN4RFFVRlBiVUlzVFVGQlFTeERRVUZQYmtJc1EwRkJRU3hEUVVGUFowTXNWMEZCUVR0TlFVVnNUQ3hKUVVGSmJFTXNRMEZCUVN4TlFVUnZRa2tzUTBGQlFTeEhRVUZuUWtFc1EwRkJRU3hEUVVGamJVSXNXVUZCUVN4RFFVRmhMR1ZCUVdVc1MwRkRha1E3VVVGREwwSXNUVUZCVFc1Q0xFTkJRVUVzUjBGQlYwWXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQVGl4alFVRkJMRU5CUVdWSkxHRkJRVUVzUTBGQlkyaENMRU5CUVVFc1JVRkJVVVlzUTBGQlFUdFJRVU53UlN4VFFVRjNRaXhOUVVGaVNTeERRVUZCTEVsQlFUUkNLMElzVFVGQlFTeERRVUZQUXl4TFFVRkJMRU5CUVUxb1F5eERRVUZCTEVkQlFWYzdVVUZETDBSR0xFTkJRVUVzUTBGQlQyMURMRTlCUVVFc1EwRkJVV3BETEVOQlFVRXNRMEZEYWtJN1RVRkJRVHRKUVVGQk8wbEJSVWxyUXl4RFFVRkJMRWRCUVZWRExFTkJRVUU3VFVGRFpDeExRVUZMT1VJc1EwRkJRU3hMUVVGblFsQXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQVGl4alFVRkJMRU5CUVdWRExFOUJRVUVzUlVGQlV6dE5RVU16UkN4TlFVRk5aaXhEUVVGQkxFZEJRV2RDUlN4RFFVRkJMRU5CUVU5cFFpeFBRVUZCTEVsQlFWZHFRaXhEUVVGQkxFTkJRVTlyUWl4TlFVRkJMRU5CUVU5RUxFOUJRVUVzUTBGQlVVb3NUMEZCUVN4SFFVRlZZaXhEUVVGQkxFTkJRVTkzUWl4UlFVRkJMRU5CUVZOUExHRkJRVUVzUTBGQll5dzJRa0ZCTmtJdlFpeERRVUZCTEVOQlFVOW5ReXhYUVVGQkxGRkJRVzFDYUVNc1EwRkJRU3hEUVVGUGJVSXNUVUZCUVN4RFFVRlBia0lzUTBGQlFTeERRVUZQWjBNc1YwRkJRVHRSUVVNMVN6bENMRU5CUVVFc1IwRkJhMEpLTEVOQlFVRXNSMEZCWjBKQkxFTkJRVUVzUTBGQlkzVkNMRmxCUVVFc1EwRkJZU3huUWtGQlowSjJRaXhEUVVGQkxFTkJRV04xUWl4WlFVRkJMRU5CUVdFc2EwSkJRV3RDTzAxQlF6Vklja0lzUTBGQlFTeERRVUZQYTBJc1RVRkJRU3hEUVVGUFRpeGpRVUZCTEVOQlFXVkZMRmxCUVVFc1NVRkJaMEpLTEVOQlFVRXNRMEZCVHpSQ0xFOUJRVUVzU1VGQlZ6VkNMRU5CUVVFc1EwRkJUelJDTEU5QlFVRXNRMEZCVVhoQ0xGbEJRVUVzU1VGRGFFWktMRU5CUVVFc1EwRkJUelJDTEU5QlFVRXNRMEZCVVhoQ0xGbEJRVUVzUTBGQllTeE5RVUZOTEUxQlFVMHNTVUZCU1Zvc1EwRkJRU3hOUVVGeFFpeExRVU5xUlVVc1EwRkJRU3hEUVVGTExHVkJSVXhKTEVOQlFVRXNRMEZCVTI5Q0xGRkJRVUVzUTBGQlUwTXNTVUZCUVN4SFFVRlBNMElzUTBGQlFTeEpRVUZ0UWl4SlFVTTFRMFVzUTBGQlFTeERRVUZMTEZkQlExQTdTVUZCUVR0RlFXOUNSa1VzUTBGQlFTeERRVUZITEZGQlFWRTdTVUZEVEU0c1EwRkJRU3hEUVVGUGEwSXNUVUZCUVN4RFFVRlBUaXhqUVVGQkxFTkJRV1ZETEU5QlFVRXNTVUZ1UW5SQ08wMUJRMWdzUzBGQlMySXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQVGl4alFVRkJMRU5CUVdWRExFOUJRVUVzU1VGQlYySXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQYjBJc1QwRkJRU3hKUVVGWGRFTXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQYjBJc1QwRkJRU3hEUVVGUmVrSXNUMEZCUVN4RlFVRlRPMDFCUTNKSFRpeERRVUZCTEVsQlFXTTdUVUZEWkN4TlFVRk5WQ3hEUVVGQkxFZEJRVTlWTEVOQlFVRXNRMEZCVTI5Q0xGRkJRVUVzUTBGQlUwTXNTVUZCUVN4RFFVRkxReXhQUVVGQkxFTkJRVkVzUzBGQlN6dE5RVU5xUkN4SlFVRkphRU1zUTBGQlFTeEZRVUZOTzFGQlExSXNUVUZCVFVrc1EwRkJRU3hIUVVGUk8xVkJRMUpGTEVOQlFVRXNSMEZCVVVvc1EwRkJRU3hEUVVGUGEwSXNUVUZCUVN4RFFVRlBUaXhqUVVGQkxFTkJRV1ZKTEdGQlFVRXNRMEZCWTJoQ0xFTkJRVUVzUlVGQlVVWXNRMEZCUVR0UlFVTnFSVVVzUTBGQlFTeERRVUZQYlVNc1QwRkJRU3hEUVVGUkwwSXNRMEZCUVN4SlFVRlRMRWRCUVVkR0xFTkJRVUVzUlVGQlQwWXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQY1VJc2EwSkJRVUVzUjBGQmIwSXNSVUZEZEVVN1RVRkJRVHROUVVOSmRrTXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQVGl4alFVRkJMRU5CUVdWSExGVkJRVUVzU1VGREwwSk1MRU5CUVVFc1EwRkJUemhDTEdkQ1FVRkJMRU5CUVdsQ0xHTkJRV05rTEVOQlFVRXNRMEZEZUVNN1NVRkJRU3hIUVZORkxFTkJRMFk3UlVGQlFTeEpRVVZHY0VJc1EwRkJRU3hEUVVGSExGZEJRVmM3U1VGRFVrNHNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQVGl4alFVRkJMRU5CUVdWRExFOUJRVUVzU1VGV04wSmlMRU5CUVVFc1EwRkJUMnRDTEUxQlFVRXNRMEZCVDA0c1kwRkJRU3hEUVVGbFJ5eFZRVUZCTEVsQlF5OUNUQ3hEUVVGQkxFTkJRVThyUWl4dFFrRkJRU3hEUVVGdlFpeGpRVUZqWml4RFFVRkJMRU5CVnpORE8wVkJRVUVzU1VGRlJuQkNMRU5CUVVFc1EwRkJSeXcwUTBGQk5FTTdTVUZEZWtORExFTkJRVUVzU1VGRFJqWkNMRU5CUVVFc1JVRkRSanRGUVVGQkxFbEJSVVk1UWl4RFFVRkJMRU5CUVVjc1pVRkJaVHRKUVVOYVF5eERRVUZCTEVsQlFXVlFMRU5CUVVFc1EwRkJUMnRDTEUxQlFVRXNRMEZCVDNkQ0xFOUJRVUVzU1VGREwwSk9MRU5CUVVFc1JVRkRSanRGUVVGQkxFVkJSVW83UVVGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEhpc3Rvcnk7XG52YXIgX3NzcldpbmRvd0VzbU1pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWluLm1qc1wiKTtcbmZ1bmN0aW9uIEhpc3RvcnkoZSkge1xuICBsZXQge1xuICAgIHN3aXBlcjogdCxcbiAgICBleHRlbmRQYXJhbXM6IGEsXG4gICAgb246IHNcbiAgfSA9IGU7XG4gIGEoe1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgcm9vdDogXCJcIixcbiAgICAgIHJlcGxhY2VTdGF0ZTogITEsXG4gICAgICBrZXk6IFwic2xpZGVzXCIsXG4gICAgICBrZWVwUXVlcnk6ICExXG4gICAgfVxuICB9KTtcbiAgbGV0IHIgPSAhMSxcbiAgICBpID0ge307XG4gIGNvbnN0IG8gPSBlID0+IGUudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csIFwiLVwiKS5yZXBsYWNlKC9bXlxcdy1dKy9nLCBcIlwiKS5yZXBsYWNlKC8tLSsvZywgXCItXCIpLnJlcGxhY2UoL14tKy8sIFwiXCIpLnJlcGxhY2UoLy0rJC8sIFwiXCIpLFxuICAgIGwgPSBlID0+IHtcbiAgICAgIGNvbnN0IHQgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpO1xuICAgICAgbGV0IGE7XG4gICAgICBhID0gZSA/IG5ldyBVUkwoZSkgOiB0LmxvY2F0aW9uO1xuICAgICAgY29uc3QgcyA9IGEucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoXCIvXCIpLmZpbHRlcihlID0+IFwiXCIgIT09IGUpLFxuICAgICAgICByID0gcy5sZW5ndGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IHNbciAtIDJdLFxuICAgICAgICB2YWx1ZTogc1tyIC0gMV1cbiAgICAgIH07XG4gICAgfSxcbiAgICBuID0gKGUsIGEpID0+IHtcbiAgICAgIGNvbnN0IHMgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpO1xuICAgICAgaWYgKCFyIHx8ICF0LnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIGxldCBpO1xuICAgICAgaSA9IHQucGFyYW1zLnVybCA/IG5ldyBVUkwodC5wYXJhbXMudXJsKSA6IHMubG9jYXRpb247XG4gICAgICBjb25zdCBsID0gdC5zbGlkZXNbYV07XG4gICAgICBsZXQgbiA9IG8obC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhpc3RvcnlcIikpO1xuICAgICAgaWYgKHQucGFyYW1zLmhpc3Rvcnkucm9vdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBhID0gdC5wYXJhbXMuaGlzdG9yeS5yb290O1xuICAgICAgICBcIi9cIiA9PT0gYVthLmxlbmd0aCAtIDFdICYmIChhID0gYS5zbGljZSgwLCBhLmxlbmd0aCAtIDEpKSwgbiA9IGAke2F9LyR7ZSA/IGAke2V9L2AgOiBcIlwifSR7bn1gO1xuICAgICAgfSBlbHNlIGkucGF0aG5hbWUuaW5jbHVkZXMoZSkgfHwgKG4gPSBgJHtlID8gYCR7ZX0vYCA6IFwiXCJ9JHtufWApO1xuICAgICAgdC5wYXJhbXMuaGlzdG9yeS5rZWVwUXVlcnkgJiYgKG4gKz0gaS5zZWFyY2gpO1xuICAgICAgY29uc3QgcCA9IHMuaGlzdG9yeS5zdGF0ZTtcbiAgICAgIHAgJiYgcC52YWx1ZSA9PT0gbiB8fCAodC5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUgPyBzLmhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgdmFsdWU6IG5cbiAgICAgIH0sIG51bGwsIG4pIDogcy5oaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgIHZhbHVlOiBuXG4gICAgICB9LCBudWxsLCBuKSk7XG4gICAgfSxcbiAgICBwID0gKGUsIGEsIHMpID0+IHtcbiAgICAgIGlmIChhKSBmb3IgKGxldCByID0gMCwgaSA9IHQuc2xpZGVzLmxlbmd0aDsgciA8IGk7IHIgKz0gMSkge1xuICAgICAgICBjb25zdCBpID0gdC5zbGlkZXNbcl07XG4gICAgICAgIGlmIChvKGkuZ2V0QXR0cmlidXRlKFwiZGF0YS1oaXN0b3J5XCIpKSA9PT0gYSkge1xuICAgICAgICAgIGNvbnN0IGEgPSB0LmdldFNsaWRlSW5kZXgoaSk7XG4gICAgICAgICAgdC5zbGlkZVRvKGEsIGUsIHMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgdC5zbGlkZVRvKDAsIGUsIHMpO1xuICAgIH0sXG4gICAgZCA9ICgpID0+IHtcbiAgICAgIGkgPSBsKHQucGFyYW1zLnVybCksIHAodC5wYXJhbXMuc3BlZWQsIGkudmFsdWUsICExKTtcbiAgICB9O1xuICBzKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgdC5wYXJhbXMuaGlzdG9yeS5lbmFibGVkICYmICgoKSA9PiB7XG4gICAgICBjb25zdCBlID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKTtcbiAgICAgIGlmICh0LnBhcmFtcy5oaXN0b3J5KSB7XG4gICAgICAgIGlmICghZS5oaXN0b3J5IHx8ICFlLmhpc3RvcnkucHVzaFN0YXRlKSByZXR1cm4gdC5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gITEsIHZvaWQgKHQucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgPSAhMCk7XG4gICAgICAgIHIgPSAhMCwgaSA9IGwodC5wYXJhbXMudXJsKSwgaS5rZXkgfHwgaS52YWx1ZSA/IChwKDAsIGkudmFsdWUsIHQucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCksIHQucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlIHx8IGUuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGQpKSA6IHQucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlIHx8IGUuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGQpO1xuICAgICAgfVxuICAgIH0pKCk7XG4gIH0pLCBzKFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgdC5wYXJhbXMuaGlzdG9yeS5lbmFibGVkICYmICgoKSA9PiB7XG4gICAgICBjb25zdCBlID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKTtcbiAgICAgIHQucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlIHx8IGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGQpO1xuICAgIH0pKCk7XG4gIH0pLCBzKFwidHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZVwiLCAoKSA9PiB7XG4gICAgciAmJiBuKHQucGFyYW1zLmhpc3Rvcnkua2V5LCB0LmFjdGl2ZUluZGV4KTtcbiAgfSksIHMoXCJzbGlkZUNoYW5nZVwiLCAoKSA9PiB7XG4gICAgciAmJiB0LnBhcmFtcy5jc3NNb2RlICYmIG4odC5wYXJhbXMuaGlzdG9yeS5rZXksIHQuYWN0aXZlSW5kZXgpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKSWFYTjBiM0o1SWl3aVpTSXNJbk4zYVhCbGNpSXNJblFpTENKbGVIUmxibVJRWVhKaGJYTWlMQ0poSWl3aWIyNGlMQ0p6SWl3aWFHbHpkRzl5ZVNJc0ltVnVZV0pzWldRaUxDSnliMjkwSWl3aWNtVndiR0ZqWlZOMFlYUmxJaXdpYTJWNUlpd2lhMlZsY0ZGMVpYSjVJaXdpY2lJc0lta2lMQ0p2SWl3aWRHOVRkSEpwYm1jaUxDSnlaWEJzWVdObElpd2liQ0lzSW1kbGRGZHBibVJ2ZHlJc0lsVlNUQ0lzSW14dlkyRjBhVzl1SWl3aWNHRjBhRzVoYldVaUxDSnpiR2xqWlNJc0luTndiR2wwSWl3aVptbHNkR1Z5SWl3aWJHVnVaM1JvSWl3aWRtRnNkV1VpTENKdUlpd2ljMlYwU0dsemRHOXllU0lzSW5CaGNtRnRjeUlzSW5WeWJDSXNJbk5zYVdSbGN5SXNJbWRsZEVGMGRISnBZblYwWlNJc0ltbHVZMngxWkdWeklpd2ljMlZoY21Ob0lpd2ljQ0lzSW5OMFlYUmxJaXdpY0hWemFGTjBZWFJsSWl3aWMyTnliMnhzVkc5VGJHbGtaU0lzSW1kbGRGTnNhV1JsU1c1a1pYZ2lMQ0p6Ykdsa1pWUnZJaXdpWkNJc0luTmxkRWhwYzNSdmNubFFiM0JUZEdGMFpTSXNJbk53WldWa0lpd2lhR0Z6YUU1aGRtbG5ZWFJwYjI0aUxDSnlkVzVEWVd4c1ltRmphM05QYmtsdWFYUWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lJc0ltRmpkR2wyWlVsdVpHVjRJaXdpWTNOelRXOWtaU0pkTENKemIzVnlZMlZ6SWpwYklqQWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdRVUZGUVN4VFFVRlRRU3hSUVVGUlF5eERRVUZCTzBWQlEyWTdTVUZCU1VNc1RVRkJRU3hGUVVOR1F5eERRVUZCTzBsQlFVMURMRmxCUVVFc1JVRkRUa01zUTBGQlFUdEpRVUZaUXl4RlFVRkJMRVZCUTFwRE8wVkJRVUVzU1VGRFJVNHNRMEZCUVR0RlFVTktTU3hEUVVGQkxFTkJRV0U3U1VGRFdFY3NUMEZCUVN4RlFVRlRPMDFCUTFCRExFOUJRVUVzUjBGQlV6dE5RVU5VUXl4SlFVRkJMRVZCUVUwN1RVRkRUa01zV1VGQlFTeEhRVUZqTzAxQlEyUkRMRWRCUVVFc1JVRkJTenROUVVOTVF5eFRRVUZCTEVkQlFWYzdTVUZCUVR0RlFVRkJPMFZCUjJZc1NVRkJTVU1zUTBGQlFTeEpRVUZqTzBsQlEyUkRMRU5CUVVFc1IwRkJVU3hEUVVGRE8wVkJRMklzVFVGQlRVTXNRMEZCUVN4SFFVRlZaaXhEUVVGQkxFbEJRMUJCTEVOQlFVRXNRMEZCUzJkQ0xGRkJRVUVzUjBGQlYwTXNUMEZCUVN4RFFVRlJMRkZCUVZFc1MwRkJTMEVzVDBGQlFTeERRVUZSTEZsQlFWa3NTVUZCU1VFc1QwRkJRU3hEUVVGUkxGRkJRVkVzUzBGQlMwRXNUMEZCUVN4RFFVRlJMRTlCUVU4c1NVRkJTVUVzVDBGQlFTeERRVUZSTEU5QlFVODdTVUZGZGtoRExFTkJRVUVzUjBGQlowSnNRaXhEUVVGQk8wMUJRM0JDTEUxQlFVMUZMRU5CUVVFc1IwRkJVeXhKUVVGQmFVSXNhMEpCUVVFN1RVRkRaaXhKUVVGSlppeERRVUZCTzAxQlJVWkJMRU5CUVVFc1IwRkVSVW9zUTBGQlFTeEhRVU5UTEVsQlFVbHZRaXhIUVVGQkxFTkJRVWx3UWl4RFFVRkJMRWxCUlZKRkxFTkJRVUVzUTBGQlQyMUNMRkZCUVVFN1RVRkZjRUlzVFVGQlRXWXNRMEZCUVN4SFFVRlpSaXhEUVVGQkxFTkJRVk5yUWl4UlFVRkJMRU5CUVZORExFdEJRVUVzUTBGQlRTeEhRVUZIUXl4TFFVRkJMRU5CUVUwc1MwRkJTME1zVFVGQlFTeERRVUZQZWtJc1EwRkJRU3hKUVVGcFFpeFBRVUZVUVN4RFFVRkJPMUZCUTJwRllTeERRVUZCTEVkQlFWRlFMRU5CUVVFc1EwRkJWVzlDTEUxQlFVRTdUVUZIZUVJc1QwRkJUenRSUVVOTVppeEhRVUZCTEVWQlNGVk1MRU5CUVVFc1EwRkJWVThzUTBGQlFTeEhRVUZSTzFGQlNUVkNZeXhMUVVGQkxFVkJTRmx5UWl4RFFVRkJMRU5CUVZWUExFTkJRVUVzUjBGQlVUdE5RVUZCTEVOQlNTOUNPMGxCUVVFN1NVRkZSMlVzUTBGQlFTeEhRVUZoUXl4RFFVRkROMElzUTBGQlFTeEZRVUZMU1N4RFFVRkJPMDFCUTNaQ0xFMUJRVTFGTEVOQlFVRXNSMEZCVXl4SlFVRkJZU3hyUWtGQlFUdE5RVU5tTEV0QlFVdE9MRU5CUVVFc1MwRkJaMEpZTEVOQlFVRXNRMEZCVHpSQ0xFMUJRVUVzUTBGQlQzWkNMRTlCUVVFc1EwRkJVVU1zVDBGQlFTeEZRVUZUTzAxQlEzQkVMRWxCUVVsTkxFTkJRVUU3VFVGRlJrRXNRMEZCUVN4SFFVUkZXaXhEUVVGQkxFTkJRVTgwUWl4TlFVRkJMRU5CUVU5RExFZEJRVUVzUjBGRFRDeEpRVUZKV0N4SFFVRkJMRU5CUVVsc1FpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTlETEVkQlFVRXNTVUZGZEVKNlFpeERRVUZCTEVOQlFVOWxMRkZCUVVFN1RVRkZjRUlzVFVGQlRVZ3NRMEZCUVN4SFFVRlJhRUlzUTBGQlFTeERRVUZQT0VJc1RVRkJRU3hEUVVGUE5VSXNRMEZCUVR0TlFVTTFRaXhKUVVGSmQwSXNRMEZCUVN4SFFVRlJZaXhEUVVGQkxFTkJRVkZITEVOQlFVRXNRMEZCVFdVc1dVRkJRU3hEUVVGaE8wMUJRM1pETEVsQlFVa3ZRaXhEUVVGQkxFTkJRVTgwUWl4TlFVRkJMRU5CUVU5MlFpeFBRVUZCTEVOQlFWRkZMRWxCUVVFc1EwRkJTMmxDTEUxQlFVRXNSMEZCVXl4SFFVRkhPMUZCUTNwRExFbEJRVWwwUWl4RFFVRkJMRWRCUVU5R0xFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUM1pDTEU5QlFVRXNRMEZCVVVVc1NVRkJRVHRSUVVOSUxGRkJRVEZDVEN4RFFVRkJMRU5CUVV0QkxFTkJRVUVzUTBGQlMzTkNMRTFCUVVFc1IwRkJVeXhQUVVGWmRFSXNRMEZCUVN4SFFVRlBRU3hEUVVGQkxFTkJRVXR0UWl4TFFVRkJMRU5CUVUwc1IwRkJSMjVDTEVOQlFVRXNRMEZCUzNOQ0xFMUJRVUVzUjBGQlV5eExRVU4wUlVVc1EwRkJRU3hIUVVGUkxFZEJRVWQ0UWl4RFFVRkJMRWxCUVZGS0xFTkJRVUVzUjBGQlRTeEhRVUZIUVN4RFFVRkJMRTFCUVZNc1MwRkJTelJDTEVOQlFVRXNSVUZETlVNN1RVRkJRU3hQUVVGWlpDeERRVUZCTEVOQlFWTlJMRkZCUVVFc1EwRkJVMWtzVVVGQlFTeERRVUZUYkVNc1EwRkJRU3hOUVVOeVF6UkNMRU5CUVVFc1IwRkJVU3hIUVVGSE5VSXNRMEZCUVN4SFFVRk5MRWRCUVVkQkxFTkJRVUVzVFVGQlV5eExRVUZMTkVJc1EwRkJRVHROUVVWb1F6RkNMRU5CUVVFc1EwRkJUelJDTEUxQlFVRXNRMEZCVDNaQ0xFOUJRVUVzUTBGQlVVc3NVMEZCUVN4TFFVTjRRbWRDTEVOQlFVRXNTVUZCVTJRc1EwRkJRU3hEUVVGVGNVSXNUVUZCUVR0TlFVVndRaXhOUVVGTlF5eERRVUZCTEVkQlFXVTVRaXhEUVVGQkxFTkJRVTlETEU5QlFVRXNRMEZCVVRoQ0xFdEJRVUU3VFVGRGFFTkVMRU5CUVVFc1NVRkJaMEpCTEVOQlFVRXNRMEZCWVZRc1MwRkJRU3hMUVVGVlF5eERRVUZCTEV0QlIzWkRNVUlzUTBGQlFTeERRVUZQTkVJc1RVRkJRU3hEUVVGUGRrSXNUMEZCUVN4RFFVRlJSeXhaUVVGQkxFZEJRM2hDU2l4RFFVRkJMRU5CUVU5RExFOUJRVUVzUTBGQlVVY3NXVUZCUVN4RFFVRmhPMUZCUXpGQ2FVSXNTMEZCUVN4RlFVRkJRenROUVVGQkxFZEJRME1zVFVGQlRVRXNRMEZCUVN4SlFVVlVkRUlzUTBGQlFTeERRVUZQUXl4UFFVRkJMRU5CUVZFclFpeFRRVUZCTEVOQlFWVTdVVUZEZGtKWUxFdEJRVUVzUlVGQlFVTTdUVUZCUVN4SFFVTkRMRTFCUVUxQkxFTkJRVUVzUlVGRFdEdEpRVUZCTzBsQlJVbFJMRU5CUVVFc1IwRkJaMEpITEVOQlFVTjJReXhEUVVGQkxFVkJRVTlKTEVOQlFVRXNSVUZCVDBVc1EwRkJRVHROUVVOdVF5eEpRVUZKUml4RFFVRkJMRVZCUTBZc1MwRkJTeXhKUVVGSlV5eERRVUZCTEVkQlFVa3NSMEZCUjBNc1EwRkJRU3hIUVVGVFdpeERRVUZCTEVOQlFVODRRaXhOUVVGQkxFTkJRVTlPTEUxQlFVRXNSVUZCVVdJc1EwRkJRU3hIUVVGSlF5eERRVUZCTEVWQlFWRkVMRU5CUVVFc1NVRkJTeXhIUVVGSE8xRkJRMnBGTEUxQlFVMURMRU5CUVVFc1IwRkJVVm9zUTBGQlFTeERRVUZQT0VJc1RVRkJRU3hEUVVGUGJrSXNRMEZCUVR0UlFVVTFRaXhKUVVSeFFrVXNRMEZCUVN4RFFVRlJSQ3hEUVVGQkxFTkJRVTF0UWl4WlFVRkJMRU5CUVdFc2NVSkJRek5DTjBJc1EwRkJRU3hGUVVGUE8xVkJRekZDTEUxQlFVMUJMRU5CUVVFc1IwRkJVVVlzUTBGQlFTeERRVUZQYzBNc1lVRkJRU3hEUVVGak1VSXNRMEZCUVR0VlFVTnVRMW9zUTBGQlFTeERRVUZQZFVNc1QwRkJRU3hEUVVGUmNrTXNRMEZCUVN4RlFVRlBTaXhEUVVGQkxFVkJRVTlOTEVOQlFVRXNRMEZETDBJN1VVRkJRVHROUVVOR0xFOUJSVUZLTEVOQlFVRXNRMEZCVDNWRExFOUJRVUVzUTBGQlVTeEhRVUZIZWtNc1EwRkJRU3hGUVVGUFRTeERRVUZCTEVOQlF6TkNPMGxCUVVFN1NVRkZTVzlETEVOQlFVRXNSMEZCY1VKRExFTkJRVUU3VFVGRGVrSTNRaXhEUVVGQkxFZEJRVkZKTEVOQlFVRXNRMEZCWTJoQ0xFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUME1zUjBGQlFTeEhRVU53UTBzc1EwRkJRU3hEUVVGamJFTXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQWXl4TFFVRkJMRVZCUVU4NVFpeERRVUZCTEVOQlFVMWhMRXRCUVVFc1IwRkJUeXhGUVVGTk8wbEJRVUU3UlVFMlFuaEVja0lzUTBGQlFTeERRVUZITEZGQlFWRTdTVUZEVEVvc1EwRkJRU3hEUVVGUE5FSXNUVUZCUVN4RFFVRlBka0lzVDBGQlFTeERRVUZSUXl4UFFVRkJMRWxCTlVKbU8wMUJRMWdzVFVGQlRWSXNRMEZCUVN4SFFVRlRMRWxCUVVGdFFpeHJRa0ZCUVR0TlFVTm1MRWxCUVV0cVFpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTkyUWl4UFFVRkJMRVZCUVc1Q08xRkJRMEVzUzBGQlMxQXNRMEZCUVN4RFFVRlBUeXhQUVVGQkxFdEJRVmxRTEVOQlFVRXNRMEZCVDA4c1QwRkJRU3hEUVVGUkswSXNVMEZCUVN4RlFVZHlReXhQUVVaQmNFTXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQZGtJc1QwRkJRU3hEUVVGUlF5eFBRVUZCTEVsQlFWVXNVMEZEYUVOT0xFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUMlVzWTBGQlFTeERRVUZsY2tNc1QwRkJRU3hKUVVGVk8xRkJSM3BEU3l4RFFVRkJMRWxCUVdNc1IwRkRaRU1zUTBGQlFTeEhRVUZSU1N4RFFVRkJMRU5CUVdOb1FpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTlETEVkQlFVRXNSMEZETDBKcVFpeERRVUZCTEVOQlFVMUlMRWRCUVVFc1NVRkJVVWNzUTBGQlFTeERRVUZOWVN4TFFVRkJMRWxCVFhwQ1V5eERRVUZCTEVOQlFXTXNSMEZCUjNSQ0xFTkJRVUVzUTBGQlRXRXNTMEZCUVN4RlFVRlBla0lzUTBGQlFTeERRVUZQTkVJc1RVRkJRU3hEUVVGUFowSXNhMEpCUVVFc1IwRkRka00xUXl4RFFVRkJMRU5CUVU4MFFpeE5RVUZCTEVOQlFVOTJRaXhQUVVGQkxFTkJRVkZITEZsQlFVRXNTVUZEZWtKV0xFTkJRVUVzUTBGQlR5dERMR2RDUVVGQkxFTkJRV2xDTEZsQlFWbE1MRU5CUVVFc1MwRlFMMEo0UXl4RFFVRkJMRU5CUVU4MFFpeE5RVUZCTEVOQlFVOTJRaXhQUVVGQkxFTkJRVkZITEZsQlFVRXNTVUZEZWtKV0xFTkJRVUVzUTBGQlR5dERMR2RDUVVGQkxFTkJRV2xDTEZsQlFWbE1MRU5CUVVFc1EwRldUanROUVVGQk8wbEJhVUpzUXl4SFFWVkZMRU5CUTBZN1JVRkJRU3hKUVVWR2NFTXNRMEZCUVN4RFFVRkhMRmRCUVZjN1NVRkRVa29zUTBGQlFTeERRVUZQTkVJc1RVRkJRU3hEUVVGUGRrSXNUMEZCUVN4RFFVRlJReXhQUVVGQkxFbEJXbG83VFVGRFpDeE5RVUZOVWl4RFFVRkJMRWRCUVZNc1NVRkJRVzFDTEd0Q1FVRkJPMDFCUTFacVFpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTkyUWl4UFFVRkJMRU5CUVZGSExGbEJRVUVzU1VGRGVrSldMRU5CUVVFc1EwRkJUMmRFTEcxQ1FVRkJMRU5CUVc5Q0xGbEJRVmxPTEVOQlFVRXNRMEZEZWtNN1NVRkJRU3hIUVZORkxFTkJRMFk3UlVGQlFTeEpRVVZHY0VNc1EwRkJRU3hEUVVGSExEUkRRVUUwUXp0SlFVTjZRMDhzUTBGQlFTeEpRVU5HWlN4RFFVRkJMRU5CUVZjeFFpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTkyUWl4UFFVRkJMRU5CUVZGSkxFZEJRVUVzUlVGQlMxUXNRMEZCUVN4RFFVRlBLME1zVjBGQlFTeERRVU12UXp0RlFVRkJMRWxCUlVZelF5eERRVUZCTEVOQlFVY3NaVUZCWlR0SlFVTmFUeXhEUVVGQkxFbEJRV1ZZTEVOQlFVRXNRMEZCVHpSQ0xFMUJRVUVzUTBGQlQyOUNMRTlCUVVFc1NVRkRMMEowUWl4RFFVRkJMRU5CUVZjeFFpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTkyUWl4UFFVRkJMRU5CUVZGSkxFZEJRVUVzUlVGQlMxUXNRMEZCUVN4RFFVRlBLME1zVjBGQlFTeERRVU12UXp0RlFVRkJMRVZCUlVvN1FVRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBLZXlib2FyZDtcbnZhciBfc3NyV2luZG93RXNtTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5taW4ubWpzXCIpO1xudmFyIF91dGlsc01pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvdXRpbHMubWluLm1qc1wiKTtcbmZ1bmN0aW9uIEtleWJvYXJkKGUpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IHQsXG4gICAgZXh0ZW5kUGFyYW1zOiBuLFxuICAgIG9uOiBhLFxuICAgIGVtaXQ6IHJcbiAgfSA9IGU7XG4gIGNvbnN0IGwgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5nKSgpLFxuICAgIGkgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpO1xuICBmdW5jdGlvbiBvKGUpIHtcbiAgICBpZiAoIXQuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bFRyYW5zbGF0ZTogblxuICAgIH0gPSB0O1xuICAgIGxldCBhID0gZTtcbiAgICBhLm9yaWdpbmFsRXZlbnQgJiYgKGEgPSBhLm9yaWdpbmFsRXZlbnQpO1xuICAgIGNvbnN0IG8gPSBhLmtleUNvZGUgfHwgYS5jaGFyQ29kZSxcbiAgICAgIHMgPSB0LnBhcmFtcy5rZXlib2FyZC5wYWdlVXBEb3duLFxuICAgICAgZCA9IHMgJiYgMzMgPT09IG8sXG4gICAgICBmID0gcyAmJiAzNCA9PT0gbyxcbiAgICAgIG0gPSAzNyA9PT0gbyxcbiAgICAgIGIgPSAzOSA9PT0gbyxcbiAgICAgIGMgPSAzOCA9PT0gbyxcbiAgICAgIHAgPSA0MCA9PT0gbztcbiAgICBpZiAoIXQuYWxsb3dTbGlkZU5leHQgJiYgKHQuaXNIb3Jpem9udGFsKCkgJiYgYiB8fCB0LmlzVmVydGljYWwoKSAmJiBwIHx8IGYpKSByZXR1cm4gITE7XG4gICAgaWYgKCF0LmFsbG93U2xpZGVQcmV2ICYmICh0LmlzSG9yaXpvbnRhbCgpICYmIG0gfHwgdC5pc1ZlcnRpY2FsKCkgJiYgYyB8fCBkKSkgcmV0dXJuICExO1xuICAgIGlmICghKGEuc2hpZnRLZXkgfHwgYS5hbHRLZXkgfHwgYS5jdHJsS2V5IHx8IGEubWV0YUtleSB8fCBsLmFjdGl2ZUVsZW1lbnQgJiYgbC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lICYmIChcImlucHV0XCIgPT09IGwuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIHx8IFwidGV4dGFyZWFcIiA9PT0gbC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKSkge1xuICAgICAgaWYgKHQucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChkIHx8IGYgfHwgbSB8fCBiIHx8IGMgfHwgcCkpIHtcbiAgICAgICAgbGV0IGUgPSAhMTtcbiAgICAgICAgaWYgKCgwLCBfdXRpbHNNaW4uYSkodC5lbCwgYC4ke3QucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5sZW5ndGggPiAwICYmIDAgPT09ICgwLCBfdXRpbHNNaW4uYSkodC5lbCwgYC4ke3QucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YCkubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGEgPSB0LmVsLFxuICAgICAgICAgIHIgPSBhLmNsaWVudFdpZHRoLFxuICAgICAgICAgIGwgPSBhLmNsaWVudEhlaWdodCxcbiAgICAgICAgICBvID0gaS5pbm5lcldpZHRoLFxuICAgICAgICAgIHMgPSBpLmlubmVySGVpZ2h0LFxuICAgICAgICAgIGQgPSAoMCwgX3V0aWxzTWluLmIpKGEpO1xuICAgICAgICBuICYmIChkLmxlZnQgLT0gYS5zY3JvbGxMZWZ0KTtcbiAgICAgICAgY29uc3QgZiA9IFtbZC5sZWZ0LCBkLnRvcF0sIFtkLmxlZnQgKyByLCBkLnRvcF0sIFtkLmxlZnQsIGQudG9wICsgbF0sIFtkLmxlZnQgKyByLCBkLnRvcCArIGxdXTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBmLmxlbmd0aDsgdCArPSAxKSB7XG4gICAgICAgICAgY29uc3QgbiA9IGZbdF07XG4gICAgICAgICAgaWYgKG5bMF0gPj0gMCAmJiBuWzBdIDw9IG8gJiYgblsxXSA+PSAwICYmIG5bMV0gPD0gcykge1xuICAgICAgICAgICAgaWYgKDAgPT09IG5bMF0gJiYgMCA9PT0gblsxXSkgY29udGludWU7XG4gICAgICAgICAgICBlID0gITA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZSkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdC5pc0hvcml6b250YWwoKSA/ICgoZCB8fCBmIHx8IG0gfHwgYikgJiYgKGEucHJldmVudERlZmF1bHQgPyBhLnByZXZlbnREZWZhdWx0KCkgOiBhLnJldHVyblZhbHVlID0gITEpLCAoKGYgfHwgYikgJiYgIW4gfHwgKGQgfHwgbSkgJiYgbikgJiYgdC5zbGlkZU5leHQoKSwgKChkIHx8IG0pICYmICFuIHx8IChmIHx8IGIpICYmIG4pICYmIHQuc2xpZGVQcmV2KCkpIDogKChkIHx8IGYgfHwgYyB8fCBwKSAmJiAoYS5wcmV2ZW50RGVmYXVsdCA/IGEucHJldmVudERlZmF1bHQoKSA6IGEucmV0dXJuVmFsdWUgPSAhMSksIChmIHx8IHApICYmIHQuc2xpZGVOZXh0KCksIChkIHx8IGMpICYmIHQuc2xpZGVQcmV2KCkpLCByKFwia2V5UHJlc3NcIiwgbyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHMoKSB7XG4gICAgdC5rZXlib2FyZC5lbmFibGVkIHx8IChsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG8pLCB0LmtleWJvYXJkLmVuYWJsZWQgPSAhMCk7XG4gIH1cbiAgZnVuY3Rpb24gZCgpIHtcbiAgICB0LmtleWJvYXJkLmVuYWJsZWQgJiYgKGwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgbyksIHQua2V5Ym9hcmQuZW5hYmxlZCA9ICExKTtcbiAgfVxuICB0LmtleWJvYXJkID0ge1xuICAgIGVuYWJsZWQ6ICExXG4gIH0sIG4oe1xuICAgIGtleWJvYXJkOiB7XG4gICAgICBlbmFibGVkOiAhMSxcbiAgICAgIG9ubHlJblZpZXdwb3J0OiAhMCxcbiAgICAgIHBhZ2VVcERvd246ICEwXG4gICAgfVxuICB9KSwgYShcImluaXRcIiwgKCkgPT4ge1xuICAgIHQucGFyYW1zLmtleWJvYXJkLmVuYWJsZWQgJiYgcygpO1xuICB9KSwgYShcImRlc3Ryb3lcIiwgKCkgPT4ge1xuICAgIHQua2V5Ym9hcmQuZW5hYmxlZCAmJiBkKCk7XG4gIH0pLCBPYmplY3QuYXNzaWduKHQua2V5Ym9hcmQsIHtcbiAgICBlbmFibGU6IHMsXG4gICAgZGlzYWJsZTogZFxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKZmRYUnBiSE5OYVc0aUxDSnlaWEYxYVhKbElpd2lTMlY1WW05aGNtUWlMQ0psSWl3aWMzZHBjR1Z5SWl3aWRDSXNJbVY0ZEdWdVpGQmhjbUZ0Y3lJc0ltNGlMQ0p2YmlJc0ltRWlMQ0psYldsMElpd2ljaUlzSW13aUxDSm5aWFJFYjJOMWJXVnVkQ0lzSW1raUxDSm5aWFJYYVc1a2IzY2lMQ0p2SWl3aVpXNWhZbXhsWkNJc0luSjBiRlJ5WVc1emJHRjBaU0lzSW05eWFXZHBibUZzUlhabGJuUWlMQ0pyWlhsRGIyUmxJaXdpWTJoaGNrTnZaR1VpTENKeklpd2ljR0Z5WVcxeklpd2lhMlY1WW05aGNtUWlMQ0p3WVdkbFZYQkViM2R1SWl3aVpDSXNJbVlpTENKdElpd2lZaUlzSW1NaUxDSndJaXdpWVd4c2IzZFRiR2xrWlU1bGVIUWlMQ0pwYzBodmNtbDZiMjUwWVd3aUxDSnBjMVpsY25ScFkyRnNJaXdpWVd4c2IzZFRiR2xrWlZCeVpYWWlMQ0p6YUdsbWRFdGxlU0lzSW1Gc2RFdGxlU0lzSW1OMGNteExaWGtpTENKdFpYUmhTMlY1SWl3aVlXTjBhWFpsUld4bGJXVnVkQ0lzSW01dlpHVk9ZVzFsSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0p2Ym14NVNXNVdhV1YzY0c5eWRDSXNJbVZzWlcxbGJuUlFZWEpsYm5Seklpd2laV3dpTENKemJHbGtaVU5zWVhOeklpd2liR1Z1WjNSb0lpd2ljMnhwWkdWQlkzUnBkbVZEYkdGemN5SXNJbU5zYVdWdWRGZHBaSFJvSWl3aVkyeHBaVzUwU0dWcFoyaDBJaXdpYVc1dVpYSlhhV1IwYUNJc0ltbHVibVZ5U0dWcFoyaDBJaXdpWld4bGJXVnVkRTltWm5ObGRDSXNJbXhsWm5RaUxDSnpZM0p2Ykd4TVpXWjBJaXdpZEc5d0lpd2ljSEpsZG1WdWRFUmxabUYxYkhRaUxDSnlaWFIxY201V1lXeDFaU0lzSW5Oc2FXUmxUbVY0ZENJc0luTnNhV1JsVUhKbGRpSXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aVQySnFaV04wSWl3aVlYTnphV2R1SWl3aVpXNWhZbXhsSWl3aVpHbHpZV0pzWlNKZExDSnpiM1Z5WTJWeklqcGJJakFpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQmFVUXNTVUZCUVVFc1UwRkJRU3hIUVVGQlF5eFBRVUZCTzBGQlNXcEVMRk5CUVZORExGTkJRVk5ETEVOQlFVRTdSVUZEYUVJN1NVRkJTVU1zVFVGQlFTeEZRVU5HUXl4RFFVRkJPMGxCUVUxRExGbEJRVUVzUlVGRFRrTXNRMEZCUVR0SlFVRlpReXhGUVVGQkxFVkJRMXBETEVOQlFVRTdTVUZCUlVNc1NVRkJRU3hGUVVOR1F6dEZRVUZCTEVsQlEwVlNMRU5CUVVFN1JVRkRTaXhOUVVGTlV5eERRVUZCTEVkQlFWY3NTVUZCUVVNc2EwSkJRVUU3U1VGRFdFTXNRMEZCUVN4SFFVRlRMRWxCUVVGRExHdENRVUZCTzBWQlYyWXNVMEZCVTBNc1JVRkJUMklzUTBGQlFUdEpRVU5rTEV0QlFVdEZMRU5CUVVFc1EwRkJUMWtzVDBGQlFTeEZRVUZUTzBsQlEzSkNPMDFCUTBWRExGbEJRVUVzUlVGQlkxZzdTVUZCUVN4SlFVTmFSaXhEUVVGQk8wbEJRMG9zU1VGQlNVa3NRMEZCUVN4SFFVRkpUaXhEUVVGQk8wbEJRMHBOTEVOQlFVRXNRMEZCUlZVc1lVRkJRU3hMUVVGbFZpeERRVUZCTEVkQlFVbEJMRU5CUVVFc1EwRkJSVlVzWVVGQlFUdEpRVU16UWl4TlFVRk5TQ3hEUVVGQkxFZEJRVXRRTEVOQlFVRXNRMEZCUlZjc1QwRkJRU3hKUVVGWFdDeERRVUZCTEVOQlFVVlpMRkZCUVVFN1RVRkRjRUpETEVOQlFVRXNSMEZCWVdwQ0xFTkJRVUVzUTBGQlQydENMRTFCUVVFc1EwRkJUME1zVVVGQlFTeERRVUZUUXl4VlFVRkJPMDFCUTNCRFF5eERRVUZCTEVkQlFWZEtMRU5CUVVFc1NVRkJjVUlzVDBGQlVFNHNRMEZCUVR0TlFVTjZRbGNzUTBGQlFTeEhRVUZoVEN4RFFVRkJMRWxCUVhGQ0xFOUJRVkJPTEVOQlFVRTdUVUZETTBKWkxFTkJRVUVzUjBGQmNVSXNUMEZCVUZvc1EwRkJRVHROUVVOa1lTeERRVUZCTEVkQlFYTkNMRTlCUVZCaUxFTkJRVUU3VFVGRFptTXNRMEZCUVN4SFFVRnRRaXhQUVVGUVpDeERRVUZCTzAxQlExcGxMRU5CUVVFc1IwRkJjVUlzVDBGQlVHWXNRMEZCUVR0SlFVVndRaXhMUVVGTFdDeERRVUZCTEVOQlFVOHlRaXhqUVVGQkxFdEJRVzFDTTBJc1EwRkJRU3hEUVVGUE5FSXNXVUZCUVN4TlFVRnJRa29zUTBGQlFTeEpRVUZuUW5oQ0xFTkJRVUVzUTBGQlR6WkNMRlZCUVVFc1RVRkJaMEpJTEVOQlFVRXNTVUZCWlVvc1EwRkJRU3hIUVVNMVJ5eFJRVUZQTzBsQlJWUXNTMEZCUzNSQ0xFTkJRVUVzUTBGQlR6aENMR05CUVVFc1MwRkJiVUk1UWl4RFFVRkJMRU5CUVU4MFFpeFpRVUZCTEUxQlFXdENUQ3hEUVVGQkxFbEJRV1YyUWl4RFFVRkJMRU5CUVU4MlFpeFZRVUZCTEUxQlFXZENTaXhEUVVGQkxFbEJRV0ZLTEVOQlFVRXNSMEZEZWtjc1VVRkJUenRKUVVWVUxFMUJRVWxxUWl4RFFVRkJMRU5CUVVVeVFpeFJRVUZCTEVsQlFWa3pRaXhEUVVGQkxFTkJRVVUwUWl4TlFVRkJMRWxCUVZVMVFpeERRVUZCTEVOQlFVVTJRaXhQUVVGQkxFbEJRVmMzUWl4RFFVRkJMRU5CUVVVNFFpeFBRVUZCTEVsQlIzcERNMElzUTBGQlFTeERRVUZUTkVJc1lVRkJRU3hKUVVGcFFqVkNMRU5CUVVFc1EwRkJVelJDTEdGQlFVRXNRMEZCWTBNc1VVRkJRU3hMUVVFclJDeFpRVUZzUkRkQ0xFTkJRVUVzUTBGQlV6UkNMR0ZCUVVFc1EwRkJZME1zVVVGQlFTeERRVUZUUXl4WFFVRkJMRTFCUVN0RkxHVkJRV3hFT1VJc1EwRkJRU3hEUVVGVE5FSXNZVUZCUVN4RFFVRmpReXhSUVVGQkxFTkJRVk5ETEZkQlFVRXNUVUZCTDBvN1RVRkhRU3hKUVVGSmNrTXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQUXl4UlFVRkJMRU5CUVZOdFFpeGpRVUZCTEV0QlFXMUNha0lzUTBGQlFTeEpRVUZaUXl4RFFVRkJMRWxCUVdORExFTkJRVUVzU1VGQlpVTXNRMEZCUVN4SlFVRm5Ra01zUTBGQlFTeEpRVUZoUXl4RFFVRkJMRWRCUVdNN1VVRkRhRWtzU1VGQlNUVkNMRU5CUVVFc1NVRkJVenRSUVVWaUxFbEJRVWtzU1VGQlFYbERMRmRCUVVFc1JVRkJaWFpETEVOQlFVRXNRMEZCVDNkRExFVkJRVUVzUlVGQlNTeEpRVUZKZUVNc1EwRkJRU3hEUVVGUGEwSXNUVUZCUVN4RFFVRlBkVUlzVlVGQlFTeHJRa0ZCTkVKRExFMUJRVUVzUjBGQlV5eExRVUZuUml4TlFVRXpSU3hKUVVGQlNDeFhRVUZCTEVWQlFXVjJReXhEUVVGQkxFTkJRVTkzUXl4RlFVRkJMRVZCUVVrc1NVRkJTWGhETEVOQlFVRXNRMEZCVDJ0Q0xFMUJRVUVzUTBGQlQzbENMR2RDUVVGQkxFbEJRVzlDUkN4TlFVRkJMRVZCUTNoS08xRkJSVVlzVFVGQlRYUkRMRU5CUVVFc1IwRkJTMG9zUTBGQlFTeERRVUZQZDBNc1JVRkJRVHRWUVVOYWJFTXNRMEZCUVN4SFFVRmpSaXhEUVVGQkxFTkJRVWQzUXl4WFFVRkJPMVZCUTJwQ2NrTXNRMEZCUVN4SFFVRmxTQ3hEUVVGQkxFTkJRVWQ1UXl4WlFVRkJPMVZCUTJ4Q2JFTXNRMEZCUVN4SFFVRmpSaXhEUVVGQkxFTkJRVTl4UXl4VlFVRkJPMVZCUTNKQ04wSXNRMEZCUVN4SFFVRmxVaXhEUVVGQkxFTkJRVTl6UXl4WFFVRkJPMVZCUTNSQ01VSXNRMEZCUVN4SFFVRmxMRWxCUVVFeVFpeFhRVUZCTEVWQlFXTTFReXhEUVVGQk8xRkJReTlDUml4RFFVRkJMRXRCUVV0dFFpeERRVUZCTEVOQlFXRTBRaXhKUVVGQkxFbEJRVkUzUXl4RFFVRkJMRU5CUVVjNFF5eFZRVUZCTzFGQlEycERMRTFCUVUwMVFpeERRVUZCTEVkQlFXTXNRMEZCUXl4RFFVRkRSQ3hEUVVGQkxFTkJRV0UwUWl4SlFVRkJMRVZCUVUwMVFpeERRVUZCTEVOQlFXRTRRaXhIUVVGQkxFZEJRVTBzUTBGQlF6bENMRU5CUVVFc1EwRkJZVFJDTEVsQlFVRXNSMEZCVHpORExFTkJRVUVzUlVGQllXVXNRMEZCUVN4RFFVRmhPRUlzUjBGQlFTeEhRVUZOTEVOQlFVTTVRaXhEUVVGQkxFTkJRV0UwUWl4SlFVRkJMRVZCUVUwMVFpeERRVUZCTEVOQlFXRTRRaXhIUVVGQkxFZEJRVTAxUXl4RFFVRkJMRWRCUVdVc1EwRkJRMk1zUTBGQlFTeERRVUZoTkVJc1NVRkJRU3hIUVVGUE0wTXNRMEZCUVN4RlFVRmhaU3hEUVVGQkxFTkJRV0U0UWl4SFFVRkJMRWRCUVUwMVF5eERRVUZCTzFGQlF6Vk9MRXRCUVVzc1NVRkJTVkFzUTBGQlFTeEhRVUZKTEVkQlFVZEJMRU5CUVVFc1IwRkJTWE5DTEVOQlFVRXNRMEZCV1c5Q0xFMUJRVUVzUlVGQlVURkRMRU5CUVVFc1NVRkJTeXhIUVVGSE8xVkJRemxETEUxQlFVMUZMRU5CUVVFc1IwRkJVVzlDTEVOQlFVRXNRMEZCV1hSQ0xFTkJRVUU3VlVGRE1VSXNTVUZCU1VVc1EwRkJRU3hEUVVGTkxFMUJRVTBzUzBGQlMwRXNRMEZCUVN4RFFVRk5MRTFCUVUxVExFTkJRVUVzU1VGQlpWUXNRMEZCUVN4RFFVRk5MRTFCUVUwc1MwRkJTMEVzUTBGQlFTeERRVUZOTEUxQlFVMWxMRU5CUVVFc1JVRkJZenRaUVVONlJpeEpRVUZwUWl4TlFVRmlaaXhEUVVGQkxFTkJRVTBzVFVGQmVVSXNUVUZCWWtFc1EwRkJRU3hEUVVGTkxFbEJRVlU3V1VGRGRFTktMRU5CUVVFc1NVRkJVeXhEUVVOWU8xVkJRVUU3VVVGRFJqdFJRVU5CTEV0QlFVdEJMRU5CUVVFc1JVRkJVVHROUVVObU8wMUJRMGxGTEVOQlFVRXNRMEZCVHpSQ0xGbEJRVUVzVDBGRFRGQXNRMEZCUVN4SlFVRlpReXhEUVVGQkxFbEJRV05ETEVOQlFVRXNTVUZCWlVNc1EwRkJRU3hOUVVOMlEzQkNMRU5CUVVFc1EwRkJSV2RFTEdOQlFVRXNSMEZCWjBKb1JDeERRVUZCTEVOQlFVVm5SQ3hqUVVGQkxFdEJRWE5DYUVRc1EwRkJRU3hEUVVGRmFVUXNWMEZCUVN4SlFVRmpMRTFCUlRORUwwSXNRMEZCUVN4SlFVRmpSU3hEUVVGQkxFMUJRV3RDZEVJc1EwRkJRU3hMUVVGUmJVSXNRMEZCUVN4SlFVRlpSU3hEUVVGQkxFdEJRV2RDY2tJc1EwRkJRU3hMUVVGTFJpeERRVUZCTEVOQlFVOXpSQ3hUUVVGQkxFMUJRMmhHYWtNc1EwRkJRU3hKUVVGWlJTeERRVUZCTEUxQlFXbENja0lzUTBGQlFTeExRVUZSYjBJc1EwRkJRU3hKUVVGalJTeERRVUZCTEV0QlFXbENkRUlzUTBGQlFTeExRVUZMUml4RFFVRkJMRU5CUVU5MVJDeFRRVUZCTEZGQlJXcEdiRU1zUTBGQlFTeEpRVUZaUXl4RFFVRkJMRWxCUVdOSExFTkJRVUVzU1VGQllVTXNRMEZCUVN4TlFVTnlRM1JDTEVOQlFVRXNRMEZCUldkRUxHTkJRVUVzUjBGQlowSm9SQ3hEUVVGQkxFTkJRVVZuUkN4alFVRkJMRXRCUVhOQ2FFUXNRMEZCUVN4RFFVRkZhVVFzVjBGQlFTeEpRVUZqTEV0QlJUVkVMMElzUTBGQlFTeEpRVUZqU1N4RFFVRkJMRXRCUVdFeFFpeERRVUZCTEVOQlFVOXpSQ3hUUVVGQkxFdEJRMnhEYWtNc1EwRkJRU3hKUVVGWlNTeERRVUZCTEV0QlFWZDZRaXhEUVVGQkxFTkJRVTkxUkN4VFFVRkJMRXRCUlhCRGFrUXNRMEZCUVN4RFFVRkxMRmxCUVZsTExFTkJRVUVzUTBGeVEycENPMGxCUVVFN1JVRjFRMFk3UlVGRFFTeFRRVUZUVFN4RlFVRkJPMGxCUTBocVFpeERRVUZCTEVOQlFVOXRRaXhSUVVGQkxFTkJRVk5RTEU5QlFVRXNTMEZEY0VKTUxFTkJRVUVzUTBGQlUybEVMR2RDUVVGQkxFTkJRV2xDTEZkQlFWYzNReXhEUVVGQkxFZEJRM0pEV0N4RFFVRkJMRU5CUVU5dFFpeFJRVUZCTEVOQlFWTlFMRTlCUVVFc1NVRkJWU3hGUVVNMVFqdEZRVUZCTzBWQlEwRXNVMEZCVTFNc1JVRkJRVHRKUVVOR2NrSXNRMEZCUVN4RFFVRlBiVUlzVVVGQlFTeERRVUZUVUN4UFFVRkJMRXRCUTNKQ1RDeERRVUZCTEVOQlFWTnJSQ3h0UWtGQlFTeERRVUZ2UWl4WFFVRlhPVU1zUTBGQlFTeEhRVU40UTFnc1EwRkJRU3hEUVVGUGJVSXNVVUZCUVN4RFFVRlRVQ3hQUVVGQkxFbEJRVlVzUlVGRE5VSTdSVUZCUVR0RlFYUkdRVm9zUTBGQlFTeERRVUZQYlVJc1VVRkJRU3hIUVVGWE8wbEJRMmhDVUN4UFFVRkJMRWRCUVZNN1JVRkJRU3hIUVVWWVZpeERRVUZCTEVOQlFXRTdTVUZEV0dsQ0xGRkJRVUVzUlVGQlZUdE5RVU5TVUN4UFFVRkJMRWRCUVZNN1RVRkRWREJDTEdOQlFVRXNSMEZCWjBJN1RVRkRhRUpzUWl4VlFVRkJMRWRCUVZrN1NVRkJRVHRGUVVGQkxFbEJaMFpvUW1oQ0xFTkJRVUVzUTBGQlJ5eFJRVUZSTzBsQlEweEtMRU5CUVVFc1EwRkJUMnRDTEUxQlFVRXNRMEZCVDBNc1VVRkJRU3hEUVVGVFVDeFBRVUZCTEVsQlEzcENTeXhEUVVGQkxFVkJRMFk3UlVGQlFTeEpRVVZHWWl4RFFVRkJMRU5CUVVjc1YwRkJWenRKUVVOU1NpeERRVUZCTEVOQlFVOXRRaXhSUVVGQkxFTkJRVk5RTEU5QlFVRXNTVUZEYkVKVExFTkJRVUVzUlVGRFJqdEZRVUZCTEVsQlJVWnhReXhOUVVGQkxFTkJRVTlETEUxQlFVRXNRMEZCVHpORUxFTkJRVUVzUTBGQlQyMUNMRkZCUVVFc1JVRkJWVHRKUVVNM1FubERMRTFCUVVFc1JVRkJRVE5ETEVOQlFVRTdTVUZEUVRSRExFOUJRVUVzUlVGQlFYaERPMFZCUVVFc1JVRkZTanRCUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1hbmlwdWxhdGlvbjtcbmZ1bmN0aW9uIGFwcGVuZFNsaWRlKGUpIHtcbiAgY29uc3QgbCA9IHRoaXMsXG4gICAge1xuICAgICAgcGFyYW1zOiBvLFxuICAgICAgc2xpZGVzRWw6IGlcbiAgICB9ID0gbDtcbiAgby5sb29wICYmIGwubG9vcERlc3Ryb3koKTtcbiAgY29uc3QgdCA9IGUgPT4ge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSB7XG4gICAgICBjb25zdCBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGwuaW5uZXJIVE1MID0gZSwgaS5hcHBlbmQobC5jaGlsZHJlblswXSksIGwuaW5uZXJIVE1MID0gXCJcIjtcbiAgICB9IGVsc2UgaS5hcHBlbmQoZSk7XG4gIH07XG4gIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIFwibGVuZ3RoXCIgaW4gZSkgZm9yIChsZXQgbCA9IDA7IGwgPCBlLmxlbmd0aDsgbCArPSAxKSBlW2xdICYmIHQoZVtsXSk7ZWxzZSB0KGUpO1xuICBsLnJlY2FsY1NsaWRlcygpLCBvLmxvb3AgJiYgbC5sb29wQ3JlYXRlKCksIG8ub2JzZXJ2ZXIgJiYgIWwuaXNFbGVtZW50IHx8IGwudXBkYXRlKCk7XG59XG5mdW5jdGlvbiBwcmVwZW5kU2xpZGUoZSkge1xuICBjb25zdCBsID0gdGhpcyxcbiAgICB7XG4gICAgICBwYXJhbXM6IG8sXG4gICAgICBhY3RpdmVJbmRleDogaSxcbiAgICAgIHNsaWRlc0VsOiB0XG4gICAgfSA9IGw7XG4gIG8ubG9vcCAmJiBsLmxvb3BEZXN0cm95KCk7XG4gIGxldCBuID0gaSArIDE7XG4gIGNvbnN0IGQgPSBlID0+IHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSkge1xuICAgICAgY29uc3QgbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBsLmlubmVySFRNTCA9IGUsIHQucHJlcGVuZChsLmNoaWxkcmVuWzBdKSwgbC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH0gZWxzZSB0LnByZXBlbmQoZSk7XG4gIH07XG4gIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIFwibGVuZ3RoXCIgaW4gZSkge1xuICAgIGZvciAobGV0IGwgPSAwOyBsIDwgZS5sZW5ndGg7IGwgKz0gMSkgZVtsXSAmJiBkKGVbbF0pO1xuICAgIG4gPSBpICsgZS5sZW5ndGg7XG4gIH0gZWxzZSBkKGUpO1xuICBsLnJlY2FsY1NsaWRlcygpLCBvLmxvb3AgJiYgbC5sb29wQ3JlYXRlKCksIG8ub2JzZXJ2ZXIgJiYgIWwuaXNFbGVtZW50IHx8IGwudXBkYXRlKCksIGwuc2xpZGVUbyhuLCAwLCAhMSk7XG59XG5mdW5jdGlvbiBhZGRTbGlkZShlLCBsKSB7XG4gIGNvbnN0IG8gPSB0aGlzLFxuICAgIHtcbiAgICAgIHBhcmFtczogaSxcbiAgICAgIGFjdGl2ZUluZGV4OiB0LFxuICAgICAgc2xpZGVzRWw6IG5cbiAgICB9ID0gbztcbiAgbGV0IGQgPSB0O1xuICBpLmxvb3AgJiYgKGQgLT0gby5sb29wZWRTbGlkZXMsIG8ubG9vcERlc3Ryb3koKSwgby5yZWNhbGNTbGlkZXMoKSk7XG4gIGNvbnN0IHMgPSBvLnNsaWRlcy5sZW5ndGg7XG4gIGlmIChlIDw9IDApIHJldHVybiB2b2lkIG8ucHJlcGVuZFNsaWRlKGwpO1xuICBpZiAoZSA+PSBzKSByZXR1cm4gdm9pZCBvLmFwcGVuZFNsaWRlKGwpO1xuICBsZXQgcCA9IGQgPiBlID8gZCArIDEgOiBkO1xuICBjb25zdCByID0gW107XG4gIGZvciAobGV0IGwgPSBzIC0gMTsgbCA+PSBlOyBsIC09IDEpIHtcbiAgICBjb25zdCBlID0gby5zbGlkZXNbbF07XG4gICAgZS5yZW1vdmUoKSwgci51bnNoaWZ0KGUpO1xuICB9XG4gIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBsICYmIFwibGVuZ3RoXCIgaW4gbCkge1xuICAgIGZvciAobGV0IGUgPSAwOyBlIDwgbC5sZW5ndGg7IGUgKz0gMSkgbFtlXSAmJiBuLmFwcGVuZChsW2VdKTtcbiAgICBwID0gZCA+IGUgPyBkICsgbC5sZW5ndGggOiBkO1xuICB9IGVsc2Ugbi5hcHBlbmQobCk7XG4gIGZvciAobGV0IGUgPSAwOyBlIDwgci5sZW5ndGg7IGUgKz0gMSkgbi5hcHBlbmQocltlXSk7XG4gIG8ucmVjYWxjU2xpZGVzKCksIGkubG9vcCAmJiBvLmxvb3BDcmVhdGUoKSwgaS5vYnNlcnZlciAmJiAhby5pc0VsZW1lbnQgfHwgby51cGRhdGUoKSwgaS5sb29wID8gby5zbGlkZVRvKHAgKyBvLmxvb3BlZFNsaWRlcywgMCwgITEpIDogby5zbGlkZVRvKHAsIDAsICExKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVNsaWRlKGUpIHtcbiAgY29uc3QgbCA9IHRoaXMsXG4gICAge1xuICAgICAgcGFyYW1zOiBvLFxuICAgICAgYWN0aXZlSW5kZXg6IGlcbiAgICB9ID0gbDtcbiAgbGV0IHQgPSBpO1xuICBvLmxvb3AgJiYgKHQgLT0gbC5sb29wZWRTbGlkZXMsIGwubG9vcERlc3Ryb3koKSk7XG4gIGxldCBuLFxuICAgIGQgPSB0O1xuICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBcImxlbmd0aFwiIGluIGUpIHtcbiAgICBmb3IgKGxldCBvID0gMDsgbyA8IGUubGVuZ3RoOyBvICs9IDEpIG4gPSBlW29dLCBsLnNsaWRlc1tuXSAmJiBsLnNsaWRlc1tuXS5yZW1vdmUoKSwgbiA8IGQgJiYgKGQgLT0gMSk7XG4gICAgZCA9IE1hdGgubWF4KGQsIDApO1xuICB9IGVsc2UgbiA9IGUsIGwuc2xpZGVzW25dICYmIGwuc2xpZGVzW25dLnJlbW92ZSgpLCBuIDwgZCAmJiAoZCAtPSAxKSwgZCA9IE1hdGgubWF4KGQsIDApO1xuICBsLnJlY2FsY1NsaWRlcygpLCBvLmxvb3AgJiYgbC5sb29wQ3JlYXRlKCksIG8ub2JzZXJ2ZXIgJiYgIWwuaXNFbGVtZW50IHx8IGwudXBkYXRlKCksIG8ubG9vcCA/IGwuc2xpZGVUbyhkICsgbC5sb29wZWRTbGlkZXMsIDAsICExKSA6IGwuc2xpZGVUbyhkLCAwLCAhMSk7XG59XG5mdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gIGNvbnN0IGUgPSB0aGlzLFxuICAgIGwgPSBbXTtcbiAgZm9yIChsZXQgbyA9IDA7IG8gPCBlLnNsaWRlcy5sZW5ndGg7IG8gKz0gMSkgbC5wdXNoKG8pO1xuICBlLnJlbW92ZVNsaWRlKGwpO1xufVxuZnVuY3Rpb24gTWFuaXB1bGF0aW9uKGUpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IGxcbiAgfSA9IGU7XG4gIE9iamVjdC5hc3NpZ24obCwge1xuICAgIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZS5iaW5kKGwpLFxuICAgIHByZXBlbmRTbGlkZTogcHJlcGVuZFNsaWRlLmJpbmQobCksXG4gICAgYWRkU2xpZGU6IGFkZFNsaWRlLmJpbmQobCksXG4gICAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLmJpbmQobCksXG4gICAgcmVtb3ZlQWxsU2xpZGVzOiByZW1vdmVBbGxTbGlkZXMuYmluZChsKVxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKaGNIQmxibVJUYkdsa1pTSXNJbVVpTENKc0lpd2ljR0Z5WVcxeklpd2lieUlzSW5Oc2FXUmxjMFZzSWl3aWFTSXNJbXh2YjNBaUxDSnNiMjl3UkdWemRISnZlU0lzSW5RaUxDSmtiMk4xYldWdWRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnBibTVsY2toVVRVd2lMQ0poY0hCbGJtUWlMQ0pqYUdsc1pISmxiaUlzSW14bGJtZDBhQ0lzSW5KbFkyRnNZMU5zYVdSbGN5SXNJbXh2YjNCRGNtVmhkR1VpTENKdlluTmxjblpsY2lJc0ltbHpSV3hsYldWdWRDSXNJblZ3WkdGMFpTSXNJbkJ5WlhCbGJtUlRiR2xrWlNJc0ltRmpkR2wyWlVsdVpHVjRJaXdpYmlJc0ltUWlMQ0p3Y21Wd1pXNWtJaXdpYzJ4cFpHVlVieUlzSW1Ga1pGTnNhV1JsSWl3aWJHOXZjR1ZrVTJ4cFpHVnpJaXdpY3lJc0luTnNhV1JsY3lJc0luQWlMQ0p5SWl3aWNtVnRiM1psSWl3aWRXNXphR2xtZENJc0luSmxiVzkyWlZOc2FXUmxJaXdpVFdGMGFDSXNJbTFoZUNJc0luSmxiVzkyWlVGc2JGTnNhV1JsY3lJc0luQjFjMmdpTENKTllXNXBjSFZzWVhScGIyNGlMQ0p6ZDJsd1pYSWlMQ0pQWW1wbFkzUWlMQ0poYzNOcFoyNGlMQ0ppYVc1a0lsMHNJbk52ZFhKalpYTWlPbHNpTUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNlcyNTFiR3hkTENKdFlYQndhVzVuY3lJNklqczdPenM3TzBGQlFVRXNVMEZCVTBFc1dVRkJXVU1zUTBGQlFUdEZRVU51UWl4TlFVRk5ReXhEUVVGQkxFZEJRVk03U1VGQlFUdE5RVU5VUXl4TlFVRkJMRVZCUTBwRExFTkJRVUU3VFVGQlRVTXNVVUZCUVN4RlFVTk9RenRKUVVGQkxFbEJRMFZLTEVOQlFVRTdSVUZEUVVVc1EwRkJRU3hEUVVGUFJ5eEpRVUZCTEVsQlExUk1MRU5CUVVFc1EwRkJUMDBzVjBGQlFUdEZRVVZVTEUxQlFVMURMRU5CUVVFc1IwRkJaMEpTTEVOQlFVRTdTVUZEY0VJc1NVRkJkVUlzYlVKQlFWcEJMRU5CUVVFc1JVRkJjMEk3VFVGREwwSXNUVUZCVFVNc1EwRkJRU3hIUVVGVlVTeFJRVUZCTEVOQlFWTkRMR0ZCUVVFc1EwRkJZenROUVVOMlExUXNRMEZCUVN4RFFVRlJWU3hUUVVGQkxFZEJRVmxZTEVOQlFVRXNSVUZEY0VKTExFTkJRVUVzUTBGQlUwOHNUVUZCUVN4RFFVRlBXQ3hEUVVGQkxFTkJRVkZaTEZGQlFVRXNRMEZCVXl4TFFVTnFRMW9zUTBGQlFTeERRVUZSVlN4VFFVRkJMRWRCUVZrc1JVRkRkRUk3U1VGQlFTeFBRVU5GVGl4RFFVRkJMRU5CUVZOUExFMUJRVUVzUTBGQlQxb3NRMEZCUVN4RFFVTnNRanRGUVVGQk8wVkJSVVlzU1VGQmMwSXNiVUpCUVZoQkxFTkJRVUVzU1VGQmRVSXNXVUZCV1VFc1EwRkJRU3hGUVVNMVF5eExRVUZMTEVsQlFVbERMRU5CUVVFc1IwRkJTU3hIUVVGSFFTeERRVUZCTEVkQlFVbEVMRU5CUVVFc1EwRkJUMk1zVFVGQlFTeEZRVUZSWWl4RFFVRkJMRWxCUVVzc1IwRkRiRU5FTEVOQlFVRXNRMEZCVDBNc1EwRkJRU3hMUVVGSlR5eERRVUZCTEVOQlFXTlNMRU5CUVVFc1EwRkJUME1zUTBGQlFTeFJRVWQwUTA4c1EwRkJRU3hEUVVGalVpeERRVUZCTzBWQlJXaENReXhEUVVGQkxFTkJRVTlqTEZsQlFVRXNTVUZEU0Zvc1EwRkJRU3hEUVVGUFJ5eEpRVUZCTEVsQlExUk1MRU5CUVVFc1EwRkJUMlVzVlVGQlFTeEpRVVZLWWl4RFFVRkJMRU5CUVU5akxGRkJRVUVzUzBGQldXaENMRU5CUVVFc1EwRkJUMmxDTEZOQlFVRXNTVUZETjBKcVFpeERRVUZCTEVOQlFVOXJRaXhOUVVGQkxFVkJSVmc3UVVGQlFUdEJRVVZCTEZOQlFWTkRMR0ZCUVdGd1FpeERRVUZCTzBWQlEzQkNMRTFCUVUxRExFTkJRVUVzUjBGQlV6dEpRVUZCTzAxQlExUkRMRTFCUVVFc1JVRkRTa01zUTBGQlFUdE5RVUZOYTBJc1YwRkJRU3hGUVVOT2FFSXNRMEZCUVR0TlFVRlhSQ3hSUVVGQkxFVkJRMWhKTzBsQlFVRXNTVUZEUlZBc1EwRkJRVHRGUVVOQlJTeERRVUZCTEVOQlFVOUhMRWxCUVVFc1NVRkRWRXdzUTBGQlFTeERRVUZQVFN4WFFVRkJPMFZCUlZRc1NVRkJTV1VzUTBGQlFTeEhRVUZwUW1wQ0xFTkJRVUVzUjBGQll6dEZRVU51UXl4TlFVRk5hMElzUTBGQlFTeEhRVUZwUW5aQ0xFTkJRVUU3U1VGRGNrSXNTVUZCZFVJc2JVSkJRVnBCTEVOQlFVRXNSVUZCYzBJN1RVRkRMMElzVFVGQlRVTXNRMEZCUVN4SFFVRlZVU3hSUVVGQkxFTkJRVk5ETEdGQlFVRXNRMEZCWXp0TlFVTjJRMVFzUTBGQlFTeERRVUZSVlN4VFFVRkJMRWRCUVZsWUxFTkJRVUVzUlVGRGNFSlJMRU5CUVVFc1EwRkJVMmRDTEU5QlFVRXNRMEZCVVhaQ0xFTkJRVUVzUTBGQlVWa3NVVUZCUVN4RFFVRlRMRXRCUTJ4RFdpeERRVUZCTEVOQlFWRlZMRk5CUVVFc1IwRkJXU3hGUVVOMFFqdEpRVUZCTEU5QlEwVklMRU5CUVVFc1EwRkJVMmRDTEU5QlFVRXNRMEZCVVhoQ0xFTkJRVUVzUTBGRGJrSTdSVUZCUVR0RlFVVkdMRWxCUVhOQ0xHMUNRVUZZUVN4RFFVRkJMRWxCUVhWQ0xGbEJRVmxCTEVOQlFVRXNSVUZCVVR0SlFVTndSQ3hMUVVGTExFbEJRVWxETEVOQlFVRXNSMEZCU1N4SFFVRkhRU3hEUVVGQkxFZEJRVWxFTEVOQlFVRXNRMEZCVDJNc1RVRkJRU3hGUVVGUllpeERRVUZCTEVsQlFVc3NSMEZEYkVORUxFTkJRVUVzUTBGQlQwTXNRMEZCUVN4TFFVRkpjMElzUTBGQlFTeERRVUZsZGtJc1EwRkJRU3hEUVVGUFF5eERRVUZCTzBsQlJYWkRjVUlzUTBGQlFTeEhRVUZwUW1wQ0xFTkJRVUVzUjBGQlkwd3NRMEZCUVN4RFFVRlBZeXhOUVVONFF6dEZRVUZCTEU5QlEwVlRMRU5CUVVFc1EwRkJaWFpDTEVOQlFVRTdSVUZGYWtKRExFTkJRVUVzUTBGQlQyTXNXVUZCUVN4SlFVTklXaXhEUVVGQkxFTkJRVTlITEVsQlFVRXNTVUZEVkV3c1EwRkJRU3hEUVVGUFpTeFZRVUZCTEVsQlJVcGlMRU5CUVVFc1EwRkJUMk1zVVVGQlFTeExRVUZaYUVJc1EwRkJRU3hEUVVGUGFVSXNVMEZCUVN4SlFVTTNRbXBDTEVOQlFVRXNRMEZCVDJ0Q0xFMUJRVUVzU1VGRlZHeENMRU5CUVVFc1EwRkJUM2RDTEU5QlFVRXNRMEZCVVVnc1EwRkJRU3hGUVVGblFpeEpRVUZITEVWQlEzQkRPMEZCUVVFN1FVRkZRU3hUUVVGVFNTeFRRVUZUTVVJc1EwRkJRU3hGUVVGUFF5eERRVUZCTzBWQlEzWkNMRTFCUVUxRkxFTkJRVUVzUjBGQlV6dEpRVUZCTzAxQlExUkVMRTFCUVVFc1JVRkRTa2NzUTBGQlFUdE5RVUZOWjBJc1YwRkJRU3hGUVVOT1lpeERRVUZCTzAxQlFWZEtMRkZCUVVFc1JVRkRXR3RDTzBsQlFVRXNTVUZEUlc1Q0xFTkJRVUU3UlVGRFNpeEpRVUZKYjBJc1EwRkJRU3hIUVVGdlFtWXNRMEZCUVR0RlFVTndRa2dzUTBGQlFTeERRVUZQUXl4SlFVRkJMRXRCUTFScFFpeERRVUZCTEVsQlFYRkNjRUlzUTBGQlFTeERRVUZQZDBJc1dVRkJRU3hGUVVNMVFuaENMRU5CUVVFc1EwRkJUMGtzVjBGQlFTeEpRVU5RU2l4RFFVRkJMRU5CUVU5WkxGbEJRVUU3UlVGRlZDeE5RVUZOWVN4RFFVRkJMRWRCUVdGNlFpeERRVUZCTEVOQlFVOHdRaXhOUVVGQkxFTkJRVTltTEUxQlFVRTdSVUZEYWtNc1NVRkJTV1FzUTBGQlFTeEpRVUZUTEVkQlJWZ3NXVUZFUVVjc1EwRkJRU3hEUVVGUGFVSXNXVUZCUVN4RFFVRmhia0lzUTBGQlFUdEZRVWQwUWl4SlFVRkpSQ3hEUVVGQkxFbEJRVk0wUWl4RFFVRkJMRVZCUlZnc1dVRkVRWHBDTEVOQlFVRXNRMEZCVDBvc1YwRkJRU3hEUVVGWlJTeERRVUZCTzBWQlIzSkNMRWxCUVVrMlFpeERRVUZCTEVkQlFXbENVQ3hEUVVGQkxFZEJRVzlDZGtJc1EwRkJRU3hIUVVGUmRVSXNRMEZCUVN4SFFVRnZRaXhKUVVGSlFTeERRVUZCTzBWQlEzcEZMRTFCUVUxUkxFTkJRVUVzUjBGQlpUdEZRVU55UWl4TFFVRkxMRWxCUVVrNVFpeERRVUZCTEVkQlFVa3lRaXhEUVVGQkxFZEJRV0VzUjBGQlJ6TkNMRU5CUVVFc1NVRkJTMFFzUTBGQlFTeEZRVUZQUXl4RFFVRkJMRWxCUVVzc1IwRkJSenRKUVVNdlF5eE5RVUZOUkN4RFFVRkJMRWRCUVdWSExFTkJRVUVzUTBGQlR6QkNMRTFCUVVFc1EwRkJUelZDTEVOQlFVRTdTVUZEYmtORUxFTkJRVUVzUTBGQllXZERMRTFCUVVFc1NVRkRZa1FzUTBGQlFTeERRVUZoUlN4UFFVRkJMRU5CUVZGcVF5eERRVUZCTEVOQlEzWkNPMFZCUVVFN1JVRkRRU3hKUVVGelFpeHRRa0ZCV0VNc1EwRkJRU3hKUVVGMVFpeFpRVUZaUVN4RFFVRkJMRVZCUVZFN1NVRkRjRVFzUzBGQlN5eEpRVUZKUkN4RFFVRkJMRWRCUVVrc1IwRkJSMEVzUTBGQlFTeEhRVUZKUXl4RFFVRkJMRU5CUVU5aExFMUJRVUVzUlVGQlVXUXNRMEZCUVN4SlFVRkxMRWRCUTJ4RFF5eERRVUZCTEVOQlFVOUVMRU5CUVVFc1MwRkJTWE5DTEVOQlFVRXNRMEZCVTFZc1RVRkJRU3hEUVVGUFdDeERRVUZCTEVOQlFVOUVMRU5CUVVFN1NVRkZlRU00UWl4RFFVRkJMRWRCUVdsQ1VDeERRVUZCTEVkQlFXOUNka0lzUTBGQlFTeEhRVUZSZFVJc1EwRkJRU3hIUVVGdlFuUkNMRU5CUVVFc1EwRkJUMkVzVFVGQlFTeEhRVUZUVXl4RFFVTnVSanRGUVVGQkxFOUJRMFZFTEVOQlFVRXNRMEZCVTFZc1RVRkJRU3hEUVVGUFdDeERRVUZCTzBWQlJXeENMRXRCUVVzc1NVRkJTVVFzUTBGQlFTeEhRVUZKTEVkQlFVZEJMRU5CUVVFc1IwRkJTU3RDTEVOQlFVRXNRMEZCWVdwQ0xFMUJRVUVzUlVGQlVXUXNRMEZCUVN4SlFVRkxMRWRCUXpWRGMwSXNRMEZCUVN4RFFVRlRWaXhOUVVGQkxFTkJRVTl0UWl4RFFVRkJMRU5CUVdFdlFpeERRVUZCTzBWQlJTOUNSeXhEUVVGQkxFTkJRVTlaTEZsQlFVRXNTVUZEU0ZZc1EwRkJRU3hEUVVGUFF5eEpRVUZCTEVsQlExUklMRU5CUVVFc1EwRkJUMkVzVlVGQlFTeEpRVVZLV0N4RFFVRkJMRU5CUVU5WkxGRkJRVUVzUzBGQldXUXNRMEZCUVN4RFFVRlBaU3hUUVVGQkxFbEJRemRDWml4RFFVRkJMRU5CUVU5blFpeE5RVUZCTEVsQlJVeGtMRU5CUVVFc1EwRkJUME1zU1VGQlFTeEhRVU5VU0N4RFFVRkJMRU5CUVU5elFpeFBRVUZCTEVOQlFWRkxMRU5CUVVFc1IwRkJhVUl6UWl4RFFVRkJMRU5CUVU5M1FpeFpRVUZCTEVWQlFXTXNTVUZCUnl4TFFVVjRSSGhDTEVOQlFVRXNRMEZCVDNOQ0xFOUJRVUVzUTBGQlVVc3NRMEZCUVN4RlFVRm5RaXhKUVVGSExFVkJSWFJETzBGQlFVRTdRVUZGUVN4VFFVRlRTU3haUVVGWmJFTXNRMEZCUVR0RlFVTnVRaXhOUVVGTlF5eERRVUZCTEVkQlFWTTdTVUZCUVR0TlFVTlVReXhOUVVGQkxFVkJRMHBETEVOQlFVRTdUVUZCVFd0Q0xGZEJRVUVzUlVGRFRtaENPMGxCUVVFc1NVRkRSVW9zUTBGQlFUdEZRVU5LTEVsQlFVbFBMRU5CUVVFc1IwRkJiMEpJTEVOQlFVRTdSVUZEY0VKR0xFTkJRVUVzUTBGQlQwY3NTVUZCUVN4TFFVTlVSU3hEUVVGQkxFbEJRWEZDVUN4RFFVRkJMRU5CUVU4d1FpeFpRVUZCTEVWQlF6VkNNVUlzUTBGQlFTeERRVUZQVFN4WFFVRkJPMFZCUlZRc1NVRkRTV1VzUTBGQlFUdEpRVVJCUXl4RFFVRkJMRWRCUVdsQ1ppeERRVUZCTzBWQlJYSkNMRWxCUVRaQ0xHMUNRVUZzUWxJc1EwRkJRU3hKUVVFNFFpeFpRVUZaUVN4RFFVRkJMRVZCUVdVN1NVRkRiRVVzUzBGQlN5eEpRVUZKUnl4RFFVRkJMRWRCUVVrc1IwRkJSMEVzUTBGQlFTeEhRVUZKU0N4RFFVRkJMRU5CUVdOakxFMUJRVUVzUlVGQlVWZ3NRMEZCUVN4SlFVRkxMRWRCUXpkRGJVSXNRMEZCUVN4SFFVRm5RblJDTEVOQlFVRXNRMEZCWTBjc1EwRkJRU3hIUVVNeFFrWXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQVUN4RFFVRkJMRXRCUVdkQ2NrSXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQVUN4RFFVRkJMRVZCUVdWVkxFMUJRVUVzU1VGRE0wUldMRU5CUVVFc1IwRkJaMEpETEVOQlFVRXNTMEZCWjBKQkxFTkJRVUVzU1VGQmEwSTdTVUZGZUVSQkxFTkJRVUVzUjBGQmFVSlpMRWxCUVVFc1EwRkJTME1zUjBGQlFTeERRVUZKWWl4RFFVRkJMRVZCUVdkQ0xFVkJRelZETzBWQlFVRXNUMEZEUlVRc1EwRkJRU3hIUVVGblFuUkNMRU5CUVVFc1JVRkRXa01zUTBGQlFTeERRVUZQTkVJc1RVRkJRU3hEUVVGUFVDeERRVUZCTEV0QlFXZENja0lzUTBGQlFTeERRVUZQTkVJc1RVRkJRU3hEUVVGUFVDeERRVUZCTEVWQlFXVlZMRTFCUVVFc1NVRkRNMFJXTEVOQlFVRXNSMEZCWjBKRExFTkJRVUVzUzBGQlowSkJMRU5CUVVFc1NVRkJhMElzU1VGRGRFUkJMRU5CUVVFc1IwRkJhVUpaTEVsQlFVRXNRMEZCUzBNc1IwRkJRU3hEUVVGSllpeERRVUZCTEVWQlFXZENPMFZCUlRWRGRFSXNRMEZCUVN4RFFVRlBZeXhaUVVGQkxFbEJRMGhhTEVOQlFVRXNRMEZCVDBjc1NVRkJRU3hKUVVOVVRDeERRVUZCTEVOQlFVOWxMRlZCUVVFc1NVRkZTbUlzUTBGQlFTeERRVUZQWXl4UlFVRkJMRXRCUVZsb1FpeERRVUZCTEVOQlFVOXBRaXhUUVVGQkxFbEJRemRDYWtJc1EwRkJRU3hEUVVGUGEwSXNUVUZCUVN4SlFVVk1hRUlzUTBGQlFTeERRVUZQUnl4SlFVRkJMRWRCUTFSTUxFTkJRVUVzUTBGQlQzZENMRTlCUVVFc1EwRkJVVVlzUTBGQlFTeEhRVUZwUW5SQ0xFTkJRVUVzUTBGQlR6QkNMRmxCUVVFc1JVRkJZeXhKUVVGSExFdEJSWGhFTVVJc1EwRkJRU3hEUVVGUGQwSXNUMEZCUVN4RFFVRlJSaXhEUVVGQkxFVkJRV2RDTEVsQlFVY3NSVUZGZEVNN1FVRkJRVHRCUVVWQkxGTkJRVk5qTEdkQ1FVRkJPMFZCUTFBc1RVRkJUWEpETEVOQlFVRXNSMEZCVXp0SlFVTlVReXhEUVVGQkxFZEJRV2RDTzBWQlEzUkNMRXRCUVVzc1NVRkJTVVVzUTBGQlFTeEhRVUZKTEVkQlFVZEJMRU5CUVVFc1IwRkJTVWdzUTBGQlFTeERRVUZQTmtJc1RVRkJRU3hEUVVGUFppeE5RVUZCTEVWQlFWRllMRU5CUVVFc1NVRkJTeXhIUVVNM1EwWXNRMEZCUVN4RFFVRmpjVU1zU1VGQlFTeERRVUZMYmtNc1EwRkJRVHRGUVVWeVFrZ3NRMEZCUVN4RFFVRlBhME1zVjBGQlFTeERRVUZaYWtNc1EwRkJRU3hEUVVOeVFqdEJRVUZCTzBGQlJVRXNVMEZCVTNORExHRkJRV0YyUXl4RFFVRkJPMFZCUTNCQ08wbEJRVWwzUXl4TlFVRkJMRVZCUTBaMlF6dEZRVUZCTEVsQlEwVkVMRU5CUVVFN1JVRkRTbmxETEUxQlFVRXNRMEZCVDBNc1RVRkJRU3hEUVVGUGVrTXNRMEZCUVN4RlFVRlJPMGxCUTNCQ1JpeFhRVUZCTEVWQlFXRkJMRmRCUVVFc1EwRkJXVFJETEVsQlFVRXNRMEZCU3pGRExFTkJRVUU3U1VGRE9VSnRRaXhaUVVGQkxFVkJRV05CTEZsQlFVRXNRMEZCWVhWQ0xFbEJRVUVzUTBGQlN6RkRMRU5CUVVFN1NVRkRhRU41UWl4UlFVRkJMRVZCUVZWQkxGRkJRVUVzUTBGQlUybENMRWxCUVVFc1EwRkJTekZETEVOQlFVRTdTVUZEZUVKcFF5eFhRVUZCTEVWQlFXRkJMRmRCUVVFc1EwRkJXVk1zU1VGQlFTeERRVUZMTVVNc1EwRkJRVHRKUVVNNVFtOURMR1ZCUVVFc1JVRkJhVUpCTEdWQlFVRXNRMEZCWjBKTkxFbEJRVUVzUTBGQlN6RkRMRU5CUVVFN1JVRkJRU3hGUVVVeFF6dEJRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gTW91c2V3aGVlbDtcbnZhciBfc3NyV2luZG93RXNtTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5taW4ubWpzXCIpO1xudmFyIF91dGlsc01pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvdXRpbHMubWluLm1qc1wiKTtcbmZ1bmN0aW9uIE1vdXNld2hlZWwoZSkge1xuICBsZXQge1xuICAgIHN3aXBlcjogdCxcbiAgICBleHRlbmRQYXJhbXM6IGEsXG4gICAgb246IHMsXG4gICAgZW1pdDogblxuICB9ID0gZTtcbiAgY29uc3QgbCA9ICgwLCBfc3NyV2luZG93RXNtTWluLmEpKCk7XG4gIGxldCBpO1xuICBhKHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiAhMSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiAhMSxcbiAgICAgIGludmVydDogITEsXG4gICAgICBmb3JjZVRvQXhpczogITEsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogXCJjb250YWluZXJcIixcbiAgICAgIHRocmVzaG9sZERlbHRhOiBudWxsLFxuICAgICAgdGhyZXNob2xkVGltZTogbnVsbCxcbiAgICAgIG5vTW91c2V3aGVlbENsYXNzOiBcInN3aXBlci1uby1tb3VzZXdoZWVsXCJcbiAgICB9XG4gIH0pLCB0Lm1vdXNld2hlZWwgPSB7XG4gICAgZW5hYmxlZDogITFcbiAgfTtcbiAgbGV0IHIsXG4gICAgbyA9ICgwLCBfdXRpbHNNaW4uZCkoKTtcbiAgY29uc3QgZCA9IFtdO1xuICBmdW5jdGlvbiBtKCkge1xuICAgIHQuZW5hYmxlZCAmJiAodC5tb3VzZUVudGVyZWQgPSAhMCk7XG4gIH1cbiAgZnVuY3Rpb24gcCgpIHtcbiAgICB0LmVuYWJsZWQgJiYgKHQubW91c2VFbnRlcmVkID0gITEpO1xuICB9XG4gIGZ1bmN0aW9uIHUoZSkge1xuICAgIHJldHVybiAhKHQucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEgJiYgZS5kZWx0YSA8IHQucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEpICYmICEodC5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lICYmICgwLCBfdXRpbHNNaW4uZCkoKSAtIG8gPCB0LnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUpICYmIChlLmRlbHRhID49IDYgJiYgKDAsIF91dGlsc01pbi5kKSgpIC0gbyA8IDYwIHx8IChlLmRpcmVjdGlvbiA8IDAgPyB0LmlzRW5kICYmICF0LnBhcmFtcy5sb29wIHx8IHQuYW5pbWF0aW5nIHx8ICh0LnNsaWRlTmV4dCgpLCBuKFwic2Nyb2xsXCIsIGUucmF3KSkgOiB0LmlzQmVnaW5uaW5nICYmICF0LnBhcmFtcy5sb29wIHx8IHQuYW5pbWF0aW5nIHx8ICh0LnNsaWRlUHJldigpLCBuKFwic2Nyb2xsXCIsIGUucmF3KSksIG8gPSBuZXcgbC5EYXRlKCkuZ2V0VGltZSgpLCAhMSkpO1xuICB9XG4gIGZ1bmN0aW9uIGgoZSkge1xuICAgIGxldCBhID0gZSxcbiAgICAgIHMgPSAhMDtcbiAgICBpZiAoIXQuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KGAuJHt0LnBhcmFtcy5tb3VzZXdoZWVsLm5vTW91c2V3aGVlbENsYXNzfWApKSByZXR1cm47XG4gICAgY29uc3QgbCA9IHQucGFyYW1zLm1vdXNld2hlZWw7XG4gICAgdC5wYXJhbXMuY3NzTW9kZSAmJiBhLnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IG8gPSB0LmVsO1xuICAgIFwiY29udGFpbmVyXCIgIT09IHQucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICYmIChvID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0LnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCkpO1xuICAgIGNvbnN0IG0gPSBvICYmIG8uY29udGFpbnMoYS50YXJnZXQpO1xuICAgIGlmICghdC5tb3VzZUVudGVyZWQgJiYgIW0gJiYgIWwucmVsZWFzZU9uRWRnZXMpIHJldHVybiAhMDtcbiAgICBhLm9yaWdpbmFsRXZlbnQgJiYgKGEgPSBhLm9yaWdpbmFsRXZlbnQpO1xuICAgIGxldCBwID0gMDtcbiAgICBjb25zdCBoID0gdC5ydGxUcmFuc2xhdGUgPyAtMSA6IDEsXG4gICAgICBjID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgbGV0IHQgPSAwLFxuICAgICAgICAgIGEgPSAwLFxuICAgICAgICAgIHMgPSAwLFxuICAgICAgICAgIG4gPSAwO1xuICAgICAgICByZXR1cm4gXCJkZXRhaWxcIiBpbiBlICYmIChhID0gZS5kZXRhaWwpLCBcIndoZWVsRGVsdGFcIiBpbiBlICYmIChhID0gLWUud2hlZWxEZWx0YSAvIDEyMCksIFwid2hlZWxEZWx0YVlcIiBpbiBlICYmIChhID0gLWUud2hlZWxEZWx0YVkgLyAxMjApLCBcIndoZWVsRGVsdGFYXCIgaW4gZSAmJiAodCA9IC1lLndoZWVsRGVsdGFYIC8gMTIwKSwgXCJheGlzXCIgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTICYmICh0ID0gYSwgYSA9IDApLCBzID0gMTAgKiB0LCBuID0gMTAgKiBhLCBcImRlbHRhWVwiIGluIGUgJiYgKG4gPSBlLmRlbHRhWSksIFwiZGVsdGFYXCIgaW4gZSAmJiAocyA9IGUuZGVsdGFYKSwgZS5zaGlmdEtleSAmJiAhcyAmJiAocyA9IG4sIG4gPSAwKSwgKHMgfHwgbikgJiYgZS5kZWx0YU1vZGUgJiYgKDEgPT09IGUuZGVsdGFNb2RlID8gKHMgKj0gNDAsIG4gKj0gNDApIDogKHMgKj0gODAwLCBuICo9IDgwMCkpLCBzICYmICF0ICYmICh0ID0gcyA8IDEgPyAtMSA6IDEpLCBuICYmICFhICYmIChhID0gbiA8IDEgPyAtMSA6IDEpLCB7XG4gICAgICAgICAgc3Bpblg6IHQsXG4gICAgICAgICAgc3Bpblk6IGEsXG4gICAgICAgICAgcGl4ZWxYOiBzLFxuICAgICAgICAgIHBpeGVsWTogblxuICAgICAgICB9O1xuICAgICAgfShhKTtcbiAgICBpZiAobC5mb3JjZVRvQXhpcykge1xuICAgICAgaWYgKHQuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKCEoTWF0aC5hYnMoYy5waXhlbFgpID4gTWF0aC5hYnMoYy5waXhlbFkpKSkgcmV0dXJuICEwO1xuICAgICAgICBwID0gLWMucGl4ZWxYICogaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghKE1hdGguYWJzKGMucGl4ZWxZKSA+IE1hdGguYWJzKGMucGl4ZWxYKSkpIHJldHVybiAhMDtcbiAgICAgICAgcCA9IC1jLnBpeGVsWTtcbiAgICAgIH1cbiAgICB9IGVsc2UgcCA9IE1hdGguYWJzKGMucGl4ZWxYKSA+IE1hdGguYWJzKGMucGl4ZWxZKSA/IC1jLnBpeGVsWCAqIGggOiAtYy5waXhlbFk7XG4gICAgaWYgKDAgPT09IHApIHJldHVybiAhMDtcbiAgICBsLmludmVydCAmJiAocCA9IC1wKTtcbiAgICBsZXQgdyA9IHQuZ2V0VHJhbnNsYXRlKCkgKyBwICogbC5zZW5zaXRpdml0eTtcbiAgICBpZiAodyA+PSB0Lm1pblRyYW5zbGF0ZSgpICYmICh3ID0gdC5taW5UcmFuc2xhdGUoKSksIHcgPD0gdC5tYXhUcmFuc2xhdGUoKSAmJiAodyA9IHQubWF4VHJhbnNsYXRlKCkpLCBzID0gISF0LnBhcmFtcy5sb29wIHx8ICEodyA9PT0gdC5taW5UcmFuc2xhdGUoKSB8fCB3ID09PSB0Lm1heFRyYW5zbGF0ZSgpKSwgcyAmJiB0LnBhcmFtcy5uZXN0ZWQgJiYgYS5zdG9wUHJvcGFnYXRpb24oKSwgdC5wYXJhbXMuZnJlZU1vZGUgJiYgdC5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgICAgY29uc3QgZSA9IHtcbiAgICAgICAgICB0aW1lOiAoMCwgX3V0aWxzTWluLmQpKCksXG4gICAgICAgICAgZGVsdGE6IE1hdGguYWJzKHApLFxuICAgICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKHApXG4gICAgICAgIH0sXG4gICAgICAgIHMgPSByICYmIGUudGltZSA8IHIudGltZSArIDUwMCAmJiBlLmRlbHRhIDw9IHIuZGVsdGEgJiYgZS5kaXJlY3Rpb24gPT09IHIuZGlyZWN0aW9uO1xuICAgICAgaWYgKCFzKSB7XG4gICAgICAgIHIgPSB2b2lkIDA7XG4gICAgICAgIGxldCBvID0gdC5nZXRUcmFuc2xhdGUoKSArIHAgKiBsLnNlbnNpdGl2aXR5O1xuICAgICAgICBjb25zdCBtID0gdC5pc0JlZ2lubmluZyxcbiAgICAgICAgICB1ID0gdC5pc0VuZDtcbiAgICAgICAgaWYgKG8gPj0gdC5taW5UcmFuc2xhdGUoKSAmJiAobyA9IHQubWluVHJhbnNsYXRlKCkpLCBvIDw9IHQubWF4VHJhbnNsYXRlKCkgJiYgKG8gPSB0Lm1heFRyYW5zbGF0ZSgpKSwgdC5zZXRUcmFuc2l0aW9uKDApLCB0LnNldFRyYW5zbGF0ZShvKSwgdC51cGRhdGVQcm9ncmVzcygpLCB0LnVwZGF0ZUFjdGl2ZUluZGV4KCksIHQudXBkYXRlU2xpZGVzQ2xhc3NlcygpLCAoIW0gJiYgdC5pc0JlZ2lubmluZyB8fCAhdSAmJiB0LmlzRW5kKSAmJiB0LnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgdC5wYXJhbXMubG9vcCAmJiB0Lmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbjogZS5kaXJlY3Rpb24gPCAwID8gXCJuZXh0XCIgOiBcInByZXZcIixcbiAgICAgICAgICBieU1vdXNld2hlZWw6ICEwXG4gICAgICAgIH0pLCB0LnBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoaSksIGkgPSB2b2lkIDAsIGQubGVuZ3RoID49IDE1ICYmIGQuc2hpZnQoKTtcbiAgICAgICAgICBjb25zdCBhID0gZC5sZW5ndGggPyBkW2QubGVuZ3RoIC0gMV0gOiB2b2lkIDAsXG4gICAgICAgICAgICBzID0gZFswXTtcbiAgICAgICAgICBpZiAoZC5wdXNoKGUpLCBhICYmIChlLmRlbHRhID4gYS5kZWx0YSB8fCBlLmRpcmVjdGlvbiAhPT0gYS5kaXJlY3Rpb24pKSBkLnNwbGljZSgwKTtlbHNlIGlmIChkLmxlbmd0aCA+PSAxNSAmJiBlLnRpbWUgLSBzLnRpbWUgPCA1MDAgJiYgcy5kZWx0YSAtIGUuZGVsdGEgPj0gMSAmJiBlLmRlbHRhIDw9IDYpIHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBwID4gMCA/IC44IDogLjI7XG4gICAgICAgICAgICByID0gZSwgZC5zcGxpY2UoMCksIGkgPSAoMCwgX3V0aWxzTWluLm4pKCgpID0+IHtcbiAgICAgICAgICAgICAgdC5zbGlkZVRvQ2xvc2VzdCh0LnBhcmFtcy5zcGVlZCwgITAsIHZvaWQgMCwgYSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaSB8fCAoaSA9ICgwLCBfdXRpbHNNaW4ubikoKCkgPT4ge1xuICAgICAgICAgICAgciA9IGUsIGQuc3BsaWNlKDApLCB0LnNsaWRlVG9DbG9zZXN0KHQucGFyYW1zLnNwZWVkLCAhMCwgdm9pZCAwLCAuNSk7XG4gICAgICAgICAgfSwgNTAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMgfHwgbihcInNjcm9sbFwiLCBhKSwgdC5wYXJhbXMuYXV0b3BsYXkgJiYgdC5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiAmJiB0LmF1dG9wbGF5LnN0b3AoKSwgbC5yZWxlYXNlT25FZGdlcyAmJiAobyA9PT0gdC5taW5UcmFuc2xhdGUoKSB8fCBvID09PSB0Lm1heFRyYW5zbGF0ZSgpKSkgcmV0dXJuICEwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhID0ge1xuICAgICAgICB0aW1lOiAoMCwgX3V0aWxzTWluLmQpKCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhwKSxcbiAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24ocCksXG4gICAgICAgIHJhdzogZVxuICAgICAgfTtcbiAgICAgIGQubGVuZ3RoID49IDIgJiYgZC5zaGlmdCgpO1xuICAgICAgY29uc3QgcyA9IGQubGVuZ3RoID8gZFtkLmxlbmd0aCAtIDFdIDogdm9pZCAwO1xuICAgICAgaWYgKGQucHVzaChhKSwgcyA/IChhLmRpcmVjdGlvbiAhPT0gcy5kaXJlY3Rpb24gfHwgYS5kZWx0YSA+IHMuZGVsdGEgfHwgYS50aW1lID4gcy50aW1lICsgMTUwKSAmJiB1KGEpIDogdShhKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgYSA9IHQucGFyYW1zLm1vdXNld2hlZWw7XG4gICAgICAgIGlmIChlLmRpcmVjdGlvbiA8IDApIHtcbiAgICAgICAgICBpZiAodC5pc0VuZCAmJiAhdC5wYXJhbXMubG9vcCAmJiBhLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gITA7XG4gICAgICAgIH0gZWxzZSBpZiAodC5pc0JlZ2lubmluZyAmJiAhdC5wYXJhbXMubG9vcCAmJiBhLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIH0oYSkpIHJldHVybiAhMDtcbiAgICB9XG4gICAgcmV0dXJuIGEucHJldmVudERlZmF1bHQgPyBhLnByZXZlbnREZWZhdWx0KCkgOiBhLnJldHVyblZhbHVlID0gITEsICExO1xuICB9XG4gIGZ1bmN0aW9uIGMoZSkge1xuICAgIGxldCBhID0gdC5lbDtcbiAgICBcImNvbnRhaW5lclwiICE9PSB0LnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAmJiAoYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodC5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpKSwgYVtlXShcIm1vdXNlZW50ZXJcIiwgbSksIGFbZV0oXCJtb3VzZWxlYXZlXCIsIHApLCBhW2VdKFwid2hlZWxcIiwgaCk7XG4gIH1cbiAgZnVuY3Rpb24gdygpIHtcbiAgICByZXR1cm4gdC5wYXJhbXMuY3NzTW9kZSA/ICh0LndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgaCksICEwKSA6ICF0Lm1vdXNld2hlZWwuZW5hYmxlZCAmJiAoYyhcImFkZEV2ZW50TGlzdGVuZXJcIiksIHQubW91c2V3aGVlbC5lbmFibGVkID0gITAsICEwKTtcbiAgfVxuICBmdW5jdGlvbiBmKCkge1xuICAgIHJldHVybiB0LnBhcmFtcy5jc3NNb2RlID8gKHQud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGgpLCAhMCkgOiAhIXQubW91c2V3aGVlbC5lbmFibGVkICYmIChjKFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiKSwgdC5tb3VzZXdoZWVsLmVuYWJsZWQgPSAhMSwgITApO1xuICB9XG4gIHMoXCJpbml0XCIsICgpID0+IHtcbiAgICAhdC5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkICYmIHQucGFyYW1zLmNzc01vZGUgJiYgZigpLCB0LnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQgJiYgdygpO1xuICB9KSwgcyhcImRlc3Ryb3lcIiwgKCkgPT4ge1xuICAgIHQucGFyYW1zLmNzc01vZGUgJiYgdygpLCB0Lm1vdXNld2hlZWwuZW5hYmxlZCAmJiBmKCk7XG4gIH0pLCBPYmplY3QuYXNzaWduKHQubW91c2V3aGVlbCwge1xuICAgIGVuYWJsZTogdyxcbiAgICBkaXNhYmxlOiBmXG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpmZFhScGJITk5hVzRpTENKeVpYRjFhWEpsSWl3aVRXOTFjMlYzYUdWbGJDSXNJbVVpTENKemQybHdaWElpTENKMElpd2laWGgwWlc1a1VHRnlZVzF6SWl3aVlTSXNJbTl1SWl3aWN5SXNJbVZ0YVhRaUxDSnVJaXdpYkNJc0ltZGxkRmRwYm1SdmR5SXNJbWtpTENKdGIzVnpaWGRvWldWc0lpd2laVzVoWW14bFpDSXNJbkpsYkdWaGMyVlBia1ZrWjJWeklpd2lhVzUyWlhKMElpd2labTl5WTJWVWIwRjRhWE1pTENKelpXNXphWFJwZG1sMGVTSXNJbVYyWlc1MGMxUmhjbWRsZENJc0luUm9jbVZ6YUc5c1pFUmxiSFJoSWl3aWRHaHlaWE5vYjJ4a1ZHbHRaU0lzSW01dlRXOTFjMlYzYUdWbGJFTnNZWE56SWl3aWNpSXNJbThpTENKdWIzY2lMQ0prSWl3aWJTSXNJbTF2ZFhObFJXNTBaWEpsWkNJc0luQWlMQ0oxSWl3aWNHRnlZVzF6SWl3aVpHVnNkR0VpTENKa2FYSmxZM1JwYjI0aUxDSnBjMFZ1WkNJc0lteHZiM0FpTENKaGJtbHRZWFJwYm1jaUxDSnpiR2xrWlU1bGVIUWlMQ0p5WVhjaUxDSnBjMEpsWjJsdWJtbHVaeUlzSW5Oc2FXUmxVSEpsZGlJc0lrUmhkR1VpTENKblpYUlVhVzFsSWl3aWFDSXNJblJoY21kbGRDSXNJbU5zYjNObGMzUWlMQ0pqYzNOTmIyUmxJaXdpY0hKbGRtVnVkRVJsWm1GMWJIUWlMQ0psYkNJc0ltUnZZM1Z0Wlc1MElpd2ljWFZsY25sVFpXeGxZM1J2Y2lJc0ltTnZiblJoYVc1eklpd2liM0pwWjJsdVlXeEZkbVZ1ZENJc0luSjBiRlJ5WVc1emJHRjBaU0lzSW1NaUxDSmtaWFJoYVd3aUxDSjNhR1ZsYkVSbGJIUmhJaXdpZDJobFpXeEVaV3gwWVZraUxDSjNhR1ZsYkVSbGJIUmhXQ0lzSW1GNGFYTWlMQ0pJVDFKSldrOU9WRUZNWDBGWVNWTWlMQ0prWld4MFlWa2lMQ0prWld4MFlWZ2lMQ0p6YUdsbWRFdGxlU0lzSW1SbGJIUmhUVzlrWlNJc0luTndhVzVZSWl3aWMzQnBibGtpTENKd2FYaGxiRmdpTENKd2FYaGxiRmtpTENKcGMwaHZjbWw2YjI1MFlXd2lMQ0pOWVhSb0lpd2lZV0p6SWl3aWR5SXNJbWRsZEZSeVlXNXpiR0YwWlNJc0ltMXBibFJ5WVc1emJHRjBaU0lzSW0xaGVGUnlZVzV6YkdGMFpTSXNJbTVsYzNSbFpDSXNJbk4wYjNCUWNtOXdZV2RoZEdsdmJpSXNJbVp5WldWTmIyUmxJaXdpZEdsdFpTSXNJbk5wWjI0aUxDSnpaWFJVY21GdWMybDBhVzl1SWl3aWMyVjBWSEpoYm5Oc1lYUmxJaXdpZFhCa1lYUmxVSEp2WjNKbGMzTWlMQ0oxY0dSaGRHVkJZM1JwZG1WSmJtUmxlQ0lzSW5Wd1pHRjBaVk5zYVdSbGMwTnNZWE56WlhNaUxDSnNiMjl3Um1sNElpd2lZbmxOYjNWelpYZG9aV1ZzSWl3aWMzUnBZMnQ1SWl3aVkyeGxZWEpVYVcxbGIzVjBJaXdpYkdWdVozUm9JaXdpYzJocFpuUWlMQ0p3ZFhOb0lpd2ljM0JzYVdObElpd2libVY0ZEZScFkyc2lMQ0p6Ykdsa1pWUnZRMnh2YzJWemRDSXNJbk53WldWa0lpd2lZWFYwYjNCc1lYa2lMQ0poZFhSdmNHeGhlVVJwYzJGaWJHVlBia2x1ZEdWeVlXTjBhVzl1SWl3aWMzUnZjQ0lzSW5KbGRIVnlibFpoYkhWbElpd2lkM0poY0hCbGNrVnNJaXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lJc0ltWWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpWlhabGJuUWlMQ0pQWW1wbFkzUWlMQ0poYzNOcFoyNGlMQ0psYm1GaWJHVWlMQ0prYVhOaFlteGxJbDBzSW5OdmRYSmpaWE1pT2xzaU1DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXMjUxYkd4ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVUVyUWl4SlFVRkJRU3hUUVVGQkxFZEJRVUZETEU5QlFVRTdRVUZKTDBJc1UwRkJVME1zVjBGQlYwTXNRMEZCUVR0RlFVTnNRanRKUVVGSlF5eE5RVUZCTEVWQlEwWkRMRU5CUVVFN1NVRkJUVU1zV1VGQlFTeEZRVU5PUXl4RFFVRkJPMGxCUVZsRExFVkJRVUVzUlVGRFdrTXNRMEZCUVR0SlFVRkZReXhKUVVGQkxFVkJRMFpETzBWQlFVRXNTVUZEUlZJc1EwRkJRVHRGUVVOS0xFMUJRVTFUTEVOQlFVRXNSMEZCVXl4SlFVRkJReXhyUWtGQlFUdEZRV2xDWml4SlFVRkpReXhEUVVGQk8wVkJhRUpLVUN4RFFVRkJMRU5CUVdFN1NVRkRXRkVzVlVGQlFTeEZRVUZaTzAxQlExWkRMRTlCUVVFc1IwRkJVenROUVVOVVF5eGpRVUZCTEVkQlFXZENPMDFCUTJoQ1F5eE5RVUZCTEVkQlFWRTdUVUZEVWtNc1YwRkJRU3hIUVVGaE8wMUJRMkpETEZkQlFVRXNSVUZCWVR0TlFVTmlReXhaUVVGQkxFVkJRV003VFVGRFpFTXNZMEZCUVN4RlFVRm5RanROUVVOb1FrTXNZVUZCUVN4RlFVRmxPMDFCUTJaRExHbENRVUZCTEVWQlFXMUNPMGxCUVVFN1JVRkJRU3hKUVVkMlFtNUNMRU5CUVVFc1EwRkJUMVVzVlVGQlFTeEhRVUZoTzBsQlEyeENReXhQUVVGQkxFZEJRVk03UlVGQlFUdEZRVWRZTEVsQlEwbFRMRU5CUVVFN1NVRkVRVU1zUTBGQlFTeEhRVUZwUWl4SlFVRkJReXhYUVVGQk8wVkJSWEpDTEUxQlFVMURMRU5CUVVFc1IwRkJiMEk3UlVGeFJURkNMRk5CUVZORExFVkJRVUU3U1VGRFJuaENMRU5CUVVFc1EwRkJUMWNzVDBGQlFTeExRVU5hV0N4RFFVRkJMRU5CUVU5NVFpeFpRVUZCTEVsQlFXVXNSVUZEZUVJN1JVRkJRVHRGUVVOQkxGTkJRVk5ETEVWQlFVRTdTVUZEUmpGQ0xFTkJRVUVzUTBGQlQxY3NUMEZCUVN4TFFVTmFXQ3hEUVVGQkxFTkJRVTk1UWl4WlFVRkJMRWxCUVdVc1JVRkRlRUk3UlVGQlFUdEZRVU5CTEZOQlFWTkZMRVZCUVdNM1FpeERRVUZCTzBsQlEzSkNMRk5CUVVsRkxFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUMnhDTEZWQlFVRXNRMEZCVjA4c1kwRkJRU3hKUVVGclFtNUNMRU5CUVVFc1EwRkJVeXRDTEV0QlFVRXNSMEZCVVRkQ0xFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUMnhDTEZWQlFVRXNRMEZCVjA4c1kwRkJRU3hQUVVseVJtcENMRU5CUVVFc1EwRkJUelJDTEUxQlFVRXNRMEZCVDJ4Q0xGVkJRVUVzUTBGQlYxRXNZVUZCUVN4SlFVRnBRaXhKUVVGQlNTeFhRVUZCTEUxQlFWRkVMRU5CUVVFc1IwRkJhVUp5UWl4RFFVRkJMRU5CUVU4MFFpeE5RVUZCTEVOQlFVOXNRaXhWUVVGQkxFTkJRVmRSTEdGQlFVRXNUVUZSTlVad1FpeERRVUZCTEVOQlFWTXJRaXhMUVVGQkxFbEJRVk1zUzBGQlN5eEpRVUZCVUN4WFFVRkJMRTFCUVZGRUxFTkJRVUVzUjBGQmFVSXNUMEZuUW1oRWRrSXNRMEZCUVN4RFFVRlRaME1zVTBGQlFTeEhRVUZaTEVsQlEycENPVUlzUTBGQlFTeERRVUZQSzBJc1MwRkJRU3hMUVVGVEwwSXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQU1N4SlFVRkJMRWxCUVZWb1F5eERRVUZCTEVOQlFVOXBReXhUUVVGQkxFdEJRMjVFYWtNc1EwRkJRU3hEUVVGUGEwTXNVMEZCUVN4SlFVTlFOVUlzUTBGQlFTeERRVUZMTEZWQlFWVlNMRU5CUVVFc1EwRkJVM0ZETEVkQlFVRXNTMEZGWm01RExFTkJRVUVzUTBGQlQyOURMRmRCUVVFc1MwRkJaWEJETEVOQlFVRXNRMEZCVHpSQ0xFMUJRVUVzUTBGQlQwa3NTVUZCUVN4SlFVRlZhRU1zUTBGQlFTeERRVUZQYVVNc1UwRkJRU3hMUVVOb1JXcERMRU5CUVVFc1EwRkJUM0ZETEZOQlFVRXNTVUZEVUM5Q0xFTkJRVUVzUTBGQlN5eFZRVUZWVWl4RFFVRkJMRU5CUVZOeFF5eEhRVUZCTEVsQlJ6RkNaQ3hEUVVGQkxFZEJRV2xDTEVsQlFVbGtMRU5CUVVFc1EwRkJUeXRDTEVsQlFVRXNSMEZCVDBNc1QwRkJRU3hMUVVVMVFpeEhRVU5VTzBWQlFVRTdSVUZqUVN4VFFVRlRReXhGUVVGUE1VTXNRMEZCUVR0SlFVTmtMRWxCUVVsSkxFTkJRVUVzUjBGQlNVb3NRMEZCUVR0TlFVTktUU3hEUVVGQkxFbEJRWE5DTzBsQlF6RkNMRXRCUVV0S0xFTkJRVUVzUTBGQlQxY3NUMEZCUVN4RlFVRlRPMGxCUjNKQ0xFbEJRVWxpTEVOQlFVRXNRMEZCVFRKRExFMUJRVUVzUTBGQlQwTXNUMEZCUVN4RFFVRlJMRWxCUVVreFF5eERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTlzUWl4VlFVRkJMRU5CUVZkVExHbENRVUZCTEV0QlFYTkNPMGxCUXpWRkxFMUJRVTFhTEVOQlFVRXNSMEZCVTFBc1EwRkJRU3hEUVVGUE5FSXNUVUZCUVN4RFFVRlBiRUlzVlVGQlFUdEpRVU42UWxZc1EwRkJRU3hEUVVGUE5FSXNUVUZCUVN4RFFVRlBaU3hQUVVGQkxFbEJRMmhDZWtNc1EwRkJRU3hEUVVGRk1FTXNZMEZCUVR0SlFVVktMRWxCUVVsMlFpeERRVUZCTEVkQlFWZHlRaXhEUVVGQkxFTkJRVTgyUXl4RlFVRkJPMGxCUTNkQ0xHZENRVUV4UXpkRExFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUMnhDTEZWQlFVRXNRMEZCVjAwc1dVRkJRU3hMUVVNelFrc3NRMEZCUVN4SFFVRlhlVUlzVVVGQlFTeERRVUZUUXl4aFFVRkJMRU5CUVdNdlF5eERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTlzUWl4VlFVRkJMRU5CUVZkTkxGbEJRVUU3U1VGRk4wUXNUVUZCVFZFc1EwRkJRU3hIUVVGNVFrZ3NRMEZCUVN4SlFVRlpRU3hEUVVGQkxFTkJRVk15UWl4UlFVRkJMRU5CUVZNNVF5eERRVUZCTEVOQlFVVjFReXhOUVVGQk8wbEJReTlFTEV0QlFVdDZReXhEUVVGQkxFTkJRVTk1UWl4WlFVRkJMRXRCUVdsQ1JDeERRVUZCTEV0QlFUSkNha0lzUTBGQlFTeERRVUZQU3l4alFVRkJMRVZCUVdkQ0xGRkJRVTg3U1VGRGJFWldMRU5CUVVFc1EwRkJSU3RETEdGQlFVRXNTMEZCWlM5RExFTkJRVUVzUjBGQlNVRXNRMEZCUVN4RFFVRkZLME1zWVVGQlFUdEpRVU16UWl4SlFVRkpka0lzUTBGQlFTeEhRVUZSTzBsQlExb3NUVUZCVFdNc1EwRkJRU3hIUVVGWmVFTXNRMEZCUVN4RFFVRlBhMFFzV1VGQlFTeEpRVUZuUWl4SlFVRkpPMDFCUTNaRFF5eERRVUZCTEVkQmVFcFNMRlZCUVcxQ2NrUXNRMEZCUVR0UlFVdHFRaXhKUVVGSlJTeERRVUZCTEVkQlFVczdWVUZEVEVVc1EwRkJRU3hIUVVGTE8xVkJRMHhGTEVOQlFVRXNSMEZCU3p0VlFVTk1SU3hEUVVGQkxFZEJRVXM3VVVGeFJGUXNUMEZzUkVrc1dVRkJXVklzUTBGQlFTeExRVU5rU1N4RFFVRkJMRWRCUVV0S0xFTkJRVUVzUTBGQlJYTkVMRTFCUVVFc1IwRkZUQ3huUWtGQlowSjBSQ3hEUVVGQkxFdEJRMnhDU1N4RFFVRkJMRWxCUVUxS0xFTkJRVUVzUTBGQlJYVkVMRlZCUVVFc1IwRkJZU3hOUVVWdVFpeHBRa0ZCYVVKMlJDeERRVUZCTEV0QlEyNUNTU3hEUVVGQkxFbEJRVTFLTEVOQlFVRXNRMEZCUlhkRUxGZEJRVUVzUjBGQll5eE5RVVZ3UWl4cFFrRkJhVUo0UkN4RFFVRkJMRXRCUTI1Q1JTeERRVUZCTEVsQlFVMUdMRU5CUVVFc1EwRkJSWGxFTEZkQlFVRXNSMEZCWXl4TlFVbHdRaXhWUVVGVmVrUXNRMEZCUVN4SlFVRkxRU3hEUVVGQkxFTkJRVVV3UkN4SlFVRkJMRXRCUVZNeFJDeERRVUZCTEVOQlFVVXlSQ3hsUVVGQkxFdEJRemxDZWtRc1EwRkJRU3hIUVVGTFJTeERRVUZCTEVWQlEweEJMRU5CUVVFc1IwRkJTeXhKUVVWUVJTeERRVUZCTEVkQk0wSnRRaXhMUVRKQ1pFb3NRMEZCUVN4RlFVTk1UU3hEUVVGQkxFZEJOVUp0UWl4TFFUUkNaRW9zUTBGQlFTeEZRVU5FTEZsQlFWbEtMRU5CUVVFc1MwRkRaRkVzUTBGQlFTeEhRVUZMVWl4RFFVRkJMRU5CUVVVMFJDeE5RVUZCTEVkQlJVd3NXVUZCV1RWRUxFTkJRVUVzUzBGRFpFMHNRMEZCUVN4SFFVRkxUaXhEUVVGQkxFTkJRVVUyUkN4TlFVRkJMRWRCUlV3M1JDeERRVUZCTEVOQlFVVTRSQ3hSUVVGQkxFdEJRV0Y0UkN4RFFVRkJMRXRCUldwQ1FTeERRVUZCTEVkQlFVdEZMRU5CUVVFc1JVRkRURUVzUTBGQlFTeEhRVUZMTEV0QlJVWkdMRU5CUVVFc1NVRkJUVVVzUTBGQlFTeExRVUZQVWl4RFFVRkJMRU5CUVVVclJDeFRRVUZCTEV0QlEwVXNUVUZCYUVJdlJDeERRVUZCTEVOQlFVVXJSQ3hUUVVGQkxFbEJSVXA2UkN4RFFVRkJMRWxCTVVOblFpeEpRVEpEYUVKRkxFTkJRVUVzU1VFelEyZENMRTlCT0VOb1FrWXNRMEZCUVN4SlFUZERaMElzUzBFNFEyaENSU3hEUVVGQkxFbEJPVU5uUWl4UFFXMUVhRUpHTEVOQlFVRXNTMEZCVDBvc1EwRkJRU3hMUVVOVVFTeERRVUZCTEVkQlFVdEpMRU5CUVVFc1IwRkJTeXhMUVVGTExFbEJRVWtzU1VGRmFrSkZMRU5CUVVFc1MwRkJUMG9zUTBGQlFTeExRVU5VUVN4RFFVRkJMRWRCUVV0SkxFTkJRVUVzUjBGQlN5eExRVUZMTEVsQlFVa3NTVUZGWkR0VlFVTk1kMFFzUzBGQlFTeEZRVUZQT1VRc1EwRkJRVHRWUVVOUUswUXNTMEZCUVN4RlFVRlBOMFFzUTBGQlFUdFZRVU5RT0VRc1RVRkJRU3hGUVVGUk5VUXNRMEZCUVR0VlFVTlNOa1FzVFVGQlFTeEZRVUZSTTBRN1VVRkJRU3hEUVVWYU8wMUJRVUVzUTBGeFJtVXNRMEZCVlVvc1EwRkJRVHRKUVVOMlFpeEpRVUZKU3l4RFFVRkJMRU5CUVU5UExGZEJRVUU3VFVGRFZDeEpRVUZKWkN4RFFVRkJMRU5CUVU5clJTeFpRVUZCTEVsQlFXZENPMUZCUTNwQ0xFMUJRVWxETEVsQlFVRXNRMEZCUzBNc1IwRkJRU3hEUVVGSmFrSXNRMEZCUVN4RFFVRkxZU3hOUVVGQkxFbEJRVlZITEVsQlFVRXNRMEZCUzBNc1IwRkJRU3hEUVVGSmFrSXNRMEZCUVN4RFFVRkxZeXhOUVVGQkxFbEJRU3RETEZGQlFVODdVVUZCTjBOMlF5eERRVUZCTEVsQlFWTjVRaXhEUVVGQkxFTkJRVXRoTEUxQlFVRXNSMEZCVTNoQ0xFTkJRelZGTzAxQlFVRXNUMEZCVHp0UlFVRkJMRTFCUVVreVFpeEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTV3BDTEVOQlFVRXNRMEZCUzJNc1RVRkJRU3hKUVVGVlJTeEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTV3BDTEVOQlFVRXNRMEZCUzJFc1RVRkJRU3hKUVVGdFF5eFJRVUZQTzFGQlFXcERkRU1zUTBGQlFTeEpRVUZUZVVJc1EwRkJRU3hEUVVGTFl5eE5RVUYxUWp0TlFVRkJPMGxCUVVFc1QwRkZMMFoyUXl4RFFVRkJMRWRCUVZGNVF5eEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTV3BDTEVOQlFVRXNRMEZCUzJFc1RVRkJRU3hKUVVGVlJ5eEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTV3BDTEVOQlFVRXNRMEZCUzJNc1RVRkJRU3hMUVVGWFpDeERRVUZCTEVOQlFVdGhMRTFCUVVFc1IwRkJVM2hDTEVOQlFVRXNTVUZCWVZjc1EwRkJRU3hEUVVGTFl5eE5RVUZCTzBsQlJUTkdMRWxCUVdNc1RVRkJWblpETEVOQlFVRXNSVUZCWVN4UlFVRlBPMGxCUTNCQ2JrSXNRMEZCUVN4RFFVRlBUU3hOUVVGQkxFdEJRVkZoTEVOQlFVRXNTVUZCVTBFc1EwRkJRVHRKUVVjMVFpeEpRVUZKTWtNc1EwRkJRU3hIUVVGWmNrVXNRMEZCUVN4RFFVRlBjMFVzV1VGQlFTeExRVUZwUWpWRExFTkJRVUVzUjBGQlVXNUNMRU5CUVVFc1EwRkJUMUVzVjBGQlFUdEpRV0YyUkN4SlFWcEpjMFFzUTBGQlFTeEpRVUZoY2tVc1EwRkJRU3hEUVVGUGRVVXNXVUZCUVN4UFFVRm5Ra1lzUTBGQlFTeEhRVUZaY2tVc1EwRkJRU3hEUVVGUGRVVXNXVUZCUVN4TFFVTjJSRVlzUTBGQlFTeEpRVUZoY2tVc1EwRkJRU3hEUVVGUGQwVXNXVUZCUVN4UFFVRm5Ra2dzUTBGQlFTeEhRVUZaY2tVc1EwRkJRU3hEUVVGUGQwVXNXVUZCUVN4TFFWTXpSSEJGTEVOQlFVRXNTMEZCYzBKS0xFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUMGtzU1VGQlFTeE5RVUZuUW5GRExFTkJRVUVzUzBGQlkzSkZMRU5CUVVFc1EwRkJUM1ZGTEZsQlFVRXNUVUZCYTBKR0xFTkJRVUVzUzBGQlkzSkZMRU5CUVVFc1EwRkJUM2RGTEZsQlFVRXNTMEZETlVkd1JTeERRVUZCTEVsQlFYVkNTaXhEUVVGQkxFTkJRVTgwUWl4TlFVRkJMRU5CUVU4MlF5eE5RVUZCTEVsQlFWRjJSU3hEUVVGQkxFTkJRVVYzUlN4bFFVRkJMRWxCUXpsRE1VVXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQSzBNc1VVRkJRU3hKUVVGaE0wVXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQSzBNc1VVRkJRU3hEUVVGVGFFVXNUMEZCUVN4RlFXOURhRVE3VFVGUFRDeE5RVUZOWWl4RFFVRkJMRWRCUVZjN1ZVRkRaamhGTEVsQlFVRXNSVUZCVFN4SlFVRkJkRVFzVjBGQlFUdFZRVU5PVHl4TFFVRkJMRVZCUVU5elF5eEpRVUZCTEVOQlFVdERMRWRCUVVFc1EwRkJTVEZETEVOQlFVRTdWVUZEYUVKSkxGTkJRVUVzUlVGQlYzRkRMRWxCUVVFc1EwRkJTMVVzU1VGQlFTeERRVUZMYmtRc1EwRkJRVHRSUVVGQk8xRkJSV3BDZEVJc1EwRkJRU3hIUVVGdlFtZENMRU5CUVVFc1NVRkJkVUowUWl4RFFVRkJMRU5CUVZNNFJTeEpRVUZCTEVkQlFVOTRSQ3hEUVVGQkxFTkJRVzlDZDBRc1NVRkJRU3hIUVVGUExFOUJRVTg1UlN4RFFVRkJMRU5CUVZNclFpeExRVUZCTEVsQlFWTlVMRU5CUVVFc1EwRkJiMEpUTEV0QlFVRXNTVUZCVXk5Q0xFTkJRVUVzUTBGQlUyZERMRk5CUVVFc1MwRkJZMVlzUTBGQlFTeERRVUZ2UWxVc1UwRkJRVHROUVVNM1RDeExRVUZMTVVJc1EwRkJRU3hGUVVGdFFqdFJRVU4wUW1kQ0xFTkJRVUVzVVVGQmMwSTdVVUZEZEVJc1NVRkJTVU1zUTBGQlFTeEhRVUZYY2tJc1EwRkJRU3hEUVVGUGMwVXNXVUZCUVN4TFFVRnBRalZETEVOQlFVRXNSMEZCVVc1Q0xFTkJRVUVzUTBGQlQxRXNWMEZCUVR0UlFVTjBSQ3hOUVVGTlV5eERRVUZCTEVkQlFXVjRRaXhEUVVGQkxFTkJRVTl2UXl4WFFVRkJPMVZCUTNSQ1ZDeERRVUZCTEVkQlFWTXpRaXhEUVVGQkxFTkJRVThyUWl4TFFVRkJPMUZCYVVKMFFpeEpRV2hDU1ZZc1EwRkJRU3hKUVVGWmNrSXNRMEZCUVN4RFFVRlBkVVVzV1VGQlFTeFBRVUZuUW14RUxFTkJRVUVzUjBGQlYzSkNMRU5CUVVFc1EwRkJUM1ZGTEZsQlFVRXNTMEZEY2tSc1JDeERRVUZCTEVsQlFWbHlRaXhEUVVGQkxFTkJRVTkzUlN4WlFVRkJMRTlCUVdkQ2JrUXNRMEZCUVN4SFFVRlhja0lzUTBGQlFTeERRVUZQZDBVc1dVRkJRU3hMUVVONlJIaEZMRU5CUVVFc1EwRkJUemhGTEdGQlFVRXNRMEZCWXl4SlFVTnlRamxGTEVOQlFVRXNRMEZCVHl0RkxGbEJRVUVzUTBGQllURkVMRU5CUVVFc1IwRkRjRUp5UWl4RFFVRkJMRU5CUVU5blJpeGpRVUZCTEVsQlExQm9SaXhEUVVGQkxFTkJRVTlwUml4cFFrRkJRU3hKUVVOUWFrWXNRMEZCUVN4RFFVRlBhMFlzYlVKQlFVRXNUVUZEUmpGRUxFTkJRVUVzU1VGQlowSjRRaXhEUVVGQkxFTkJRVTl2UXl4WFFVRkJMRXRCUVdkQ1ZDeERRVUZCTEVsQlFWVXpRaXhEUVVGQkxFTkJRVThyUWl4TFFVRkJMRXRCUXpORUwwSXNRMEZCUVN4RFFVRlBhMFlzYlVKQlFVRXNTVUZGVEd4R0xFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUMGtzU1VGQlFTeEpRVU5vUW1oRExFTkJRVUVzUTBGQlQyMUdMRTlCUVVFc1EwRkJVVHRWUVVOaWNrUXNVMEZCUVN4RlFVRlhhRU1zUTBGQlFTeERRVUZUWjBNc1UwRkJRU3hIUVVGWkxFbEJRVWtzVTBGQlV6dFZRVU0zUTNORUxGbEJRVUVzUjBGQll6dFJRVUZCTEVsQlIyUndSaXhEUVVGQkxFTkJRVTgwUWl4TlFVRkJMRU5CUVU4clF5eFJRVUZCTEVOQlFWTlZMRTFCUVVFc1JVRkJVVHRWUVZscVEwTXNXVUZCUVN4RFFVRmhOMFVzUTBGQlFTeEhRVU5pUVN4RFFVRkJMRkZCUVZVc1IwRkRUbU1zUTBGQlFTeERRVUZyUW1kRkxFMUJRVUVzU1VGQlZTeE5RVU01UW1oRkxFTkJRVUVzUTBGQmEwSnBSU3hMUVVGQk8xVkJSM0JDTEUxQlFVMTBSaXhEUVVGQkxFZEJRVmx4UWl4RFFVRkJMRU5CUVd0Q1owVXNUVUZCUVN4SFFVRlRhRVVzUTBGQlFTeERRVUZyUWtFc1EwRkJRU3hEUVVGclFtZEZMRTFCUVVFc1IwRkJVeXhWUVVGTE8xbEJRM3BHYmtZc1EwRkJRU3hIUVVGaGJVSXNRMEZCUVN4RFFVRnJRanRWUVVWeVF5eEpRVVJCUVN4RFFVRkJMRU5CUVd0Q2EwVXNTVUZCUVN4RFFVRkxNMFlzUTBGQlFTeEhRVU51UWtrc1EwRkJRU3hMUVVGalNpeERRVUZCTEVOQlFWTXJRaXhMUVVGQkxFZEJRVkV6UWl4RFFVRkJMRU5CUVZVeVFpeExRVUZCTEVsQlFWTXZRaXhEUVVGQkxFTkJRVk5uUXl4VFFVRkJMRXRCUVdNMVFpeERRVUZCTEVOQlFWVTBRaXhUUVVGQkxFZEJSWEpHVUN4RFFVRkJMRU5CUVd0Q2JVVXNUVUZCUVN4RFFVRlBMRkZCUTNCQ0xFbEJRVWx1UlN4RFFVRkJMRU5CUVd0Q1owVXNUVUZCUVN4SlFVRlZMRTFCUVUxNlJpeERRVUZCTEVOQlFWTTRSU3hKUVVGQkxFZEJRVTk0UlN4RFFVRkJMRU5CUVZkM1JTeEpRVUZCTEVkQlFVOHNUMEZCVDNoRkxFTkJRVUVzUTBGQlYzbENMRXRCUVVFc1IwRkJVUzlDTEVOQlFVRXNRMEZCVXl0Q0xFdEJRVUVzU1VGQlV5eExRVUZMTDBJc1EwRkJRU3hEUVVGVEswSXNTMEZCUVN4SlFVRlRMRWRCUVVjN1dVRlBia29zVFVGQlRUTkNMRU5CUVVFc1IwRkJhMEozUWl4RFFVRkJMRWRCUVZFc1NVRkJTU3hMUVVGTk8xbEJRekZEVGl4RFFVRkJMRWRCUVhOQ2RFSXNRMEZCUVN4RlFVTjBRbmxDTEVOQlFVRXNRMEZCYTBKdFJTeE5RVUZCTEVOQlFVOHNTVUZEZWtKcVJpeERRVUZCTEVkQlFWVXNTVUZCUVd0R0xGZEJRVUVzUlVGQlV6dGpRVU5xUWpOR0xFTkJRVUVzUTBGQlR6UkdMR05CUVVFc1EwRkJaVFZHTEVOQlFVRXNRMEZCVHpSQ0xFMUJRVUVzUTBGQlQybEZMRXRCUVVFc1IwRkJUeXhSUVVGTkxFZEJRVmN6Uml4RFFVRkJMRU5CUVdkQ08xbEJRVUVzUjBGRE0wVXNSVUZEVER0VlFVRkJPMVZCUlV0UExFTkJRVUVzUzBGSlNFRXNRMEZCUVN4SFFVRlZMRWxCUVVGclJpeFhRVUZCTEVWQlFWTTdXVUZGYWtKMlJTeERRVUZCTEVkQlFYTkNkRUlzUTBGQlFTeEZRVU4wUW5sQ0xFTkJRVUVzUTBGQmEwSnRSU3hOUVVGQkxFTkJRVThzU1VGRGVrSXhSaXhEUVVGQkxFTkJRVTgwUml4alFVRkJMRU5CUVdVMVJpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTlwUlN4TFFVRkJMRWRCUVU4c1VVRkJUU3hIUVVoNlFpeEhRVWR2UkR0VlFVRkJMRWRCUXpORkxFdEJSVkE3VVVGQlFUdFJRVkZCTEVsQlRFdDZSaXhEUVVGQkxFbEJRVzFDUlN4RFFVRkJMRU5CUVVzc1ZVRkJWVW9zUTBGQlFTeEhRVWR1UTBZc1EwRkJRU3hEUVVGUE5FSXNUVUZCUVN4RFFVRlBhMFVzVVVGQlFTeEpRVUZaT1VZc1EwRkJRU3hEUVVGUE5FSXNUVUZCUVN4RFFVRlBiVVVzTkVKQlFVRXNTVUZCT0VJdlJpeERRVUZCTEVOQlFVODRSaXhSUVVGQkxFTkJRVk5GTEVsQlFVRXNTVUZGZEVaNlJpeERRVUZCTEVOQlFVOUxMR05CUVVFc1MwRkJiVUpUTEVOQlFVRXNTMEZCWVhKQ0xFTkJRVUVzUTBGQlQzVkZMRmxCUVVFc1RVRkJhMEpzUkN4RFFVRkJMRXRCUVdGeVFpeERRVUZCTEVOQlFVOTNSU3haUVVGQkxFdEJRM1JHTEZGQlFVOHNRMEZGV0R0TlFVRkJPMGxCUTBZc1QwRndTV2RGTzAxQlJUbEVMRTFCUVUxMFJTeERRVUZCTEVkQlFWYzdVVUZEWmpCRkxFbEJRVUVzUlVGQlRTeEpRVUZCZEVRc1YwRkJRVHRSUVVOT1R5eExRVUZCTEVWQlFVOXpReXhKUVVGQkxFTkJRVXRETEVkQlFVRXNRMEZCU1RGRExFTkJRVUU3VVVGRGFFSkpMRk5CUVVFc1JVRkJWM0ZETEVsQlFVRXNRMEZCUzFVc1NVRkJRU3hEUVVGTGJrUXNRMEZCUVR0UlFVTnlRbE1zUjBGQlFTeEZRVUZMY2tNN1RVRkJRVHROUVVsSWVVSXNRMEZCUVN4RFFVRnJRbWRGTEUxQlFVRXNTVUZCVlN4TFFVTTVRbWhGTEVOQlFVRXNRMEZCYTBKcFJTeExRVUZCTzAxQlIzQkNMRTFCUVUxd1JpeERRVUZCTEVkQlFWbHRRaXhEUVVGQkxFTkJRV3RDWjBVc1RVRkJRU3hIUVVGVGFFVXNRMEZCUVN4RFFVRnJRa0VzUTBGQlFTeERRVUZyUW1kRkxFMUJRVUVzUjBGQlV5eFZRVUZMTzAxQmJVSXZSaXhKUVd4Q1FXaEZMRU5CUVVFc1EwRkJhMEpyUlN4SlFVRkJMRU5CUVV0MlJpeERRVUZCTEVkQlVXNUNSU3hEUVVGQkxFbEJRMFZHTEVOQlFVRXNRMEZCVXpSQ0xGTkJRVUVzUzBGQll6RkNMRU5CUVVFc1EwRkJWVEJDTEZOQlFVRXNTVUZCWVRWQ0xFTkJRVUVzUTBGQlV6SkNMRXRCUVVFc1IwRkJVWHBDTEVOQlFVRXNRMEZCVlhsQ0xFdEJRVUVzU1VGQlV6TkNMRU5CUVVFc1EwRkJVekJGTEVsQlFVRXNSMEZCVDNoRkxFTkJRVUVzUTBGQlZYZEZMRWxCUVVFc1IwRkJUeXhSUVVOeVNHcEVMRU5CUVVFc1EwRkJZM3BDTEVOQlFVRXNTVUZIYUVKNVFpeERRVUZCTEVOQlFXTjZRaXhEUVVGQkxFZEJkRVp3UWl4VlFVRjFRa29zUTBGQlFUdFJRVU55UWl4TlFVRk5TU3hEUVVGQkxFZEJRVk5HTEVOQlFVRXNRMEZCVHpSQ0xFMUJRVUVzUTBGQlQyeENMRlZCUVVFN1VVRkROMElzU1VGQlNWb3NRMEZCUVN4RFFVRlRaME1zVTBGQlFTeEhRVUZaTzFWQlEzWkNMRWxCUVVrNVFpeERRVUZCTEVOQlFVOHJRaXhMUVVGQkxFdEJRVlV2UWl4RFFVRkJMRU5CUVU4MFFpeE5RVUZCTEVOQlFVOUpMRWxCUVVFc1NVRkJVVGxDTEVOQlFVRXNRMEZCVDFVc1kwRkJRU3hGUVVWb1JDeFJRVUZQTzFGQlFVRXNUMEZGU2l4SlFVRkpXaXhEUVVGQkxFTkJRVTl2UXl4WFFVRkJMRXRCUVdkQ2NFTXNRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQU1N4SlFVRkJMRWxCUVZFNVFpeERRVUZCTEVOQlFVOVZMR05CUVVFc1JVRkZOMFFzVVVGQlR6dFJRVVZVTEZGQlFVOHNRMEZEVkR0TlFVRkJMRU5CSzBWUkxFTkJRV05XTEVOQlFVRXNSMEZEYUVJc1VVRkJUeXhEUVVWWU8wbEJRVUU3U1VGclIwRXNUMEZFU1VFc1EwRkJRU3hEUVVGRk1FTXNZMEZCUVN4SFFVRm5RakZETEVOQlFVRXNRMEZCUlRCRExHTkJRVUVzUzBGQmMwSXhReXhEUVVGQkxFTkJRVVVyUml4WFFVRkJMRWxCUVdNc1NVRkRka1FzUTBGRFZEdEZRVUZCTzBWQlEwRXNVMEZCVXpsRExFVkJRVTl5UkN4RFFVRkJPMGxCUTJRc1NVRkJTVWtzUTBGQlFTeEhRVUZYUml4RFFVRkJMRU5CUVU4MlF5eEZRVUZCTzBsQlEzZENMR2RDUVVFeFF6ZERMRU5CUVVFc1EwRkJUelJDTEUxQlFVRXNRMEZCVDJ4Q0xGVkJRVUVzUTBGQlYwMHNXVUZCUVN4TFFVTXpRbVFzUTBGQlFTeEhRVUZYTkVNc1VVRkJRU3hEUVVGVFF5eGhRVUZCTEVOQlFXTXZReXhEUVVGQkxFTkJRVTgwUWl4TlFVRkJMRU5CUVU5c1FpeFZRVUZCTEVOQlFWZE5MRmxCUVVFc1NVRkZOMFJrTEVOQlFVRXNRMEZCVTBvc1EwRkJRU3hGUVVGUkxHTkJRV013UWl4RFFVRkJMRWRCUXk5Q2RFSXNRMEZCUVN4RFFVRlRTaXhEUVVGQkxFVkJRVkVzWTBGQll6UkNMRU5CUVVFc1IwRkRMMEo0UWl4RFFVRkJMRU5CUVZOS0xFTkJRVUVzUlVGQlVTeFRRVUZUTUVNc1EwRkJRU3hEUVVNMVFqdEZRVUZCTzBWQlEwRXNVMEZCVXpaQ0xFVkJRVUU3U1VGRFVDeFBRVUZKY2tVc1EwRkJRU3hEUVVGUE5FSXNUVUZCUVN4RFFVRlBaU3hQUVVGQkxFbEJRMmhDTTBNc1EwRkJRU3hEUVVGUGEwY3NVMEZCUVN4RFFVRlZReXh0UWtGQlFTeERRVUZ2UWl4VFFVRlRNMFFzUTBGQlFTeEpRVU4yUXl4TlFVVk1lRU1zUTBGQlFTeERRVUZQVlN4VlFVRkJMRU5CUVZkRExFOUJRVUVzUzBGRGRFSjNReXhEUVVGQkxFTkJRVThzY1VKQlExQnVSQ3hEUVVGQkxFTkJRVTlWTEZWQlFVRXNRMEZCVjBNc1QwRkJRU3hKUVVGVkxFbEJRM0pDTEVWQlExUTdSVUZCUVR0RlFVTkJMRk5CUVZONVJpeEZRVUZCTzBsQlExQXNUMEZCU1hCSExFTkJRVUVzUTBGQlR6UkNMRTFCUVVFc1EwRkJUMlVzVDBGQlFTeEpRVU5vUWpORExFTkJRVUVzUTBGQlQydEhMRk5CUVVFc1EwRkJWVWNzWjBKQlFVRXNRMEZCYVVKRExFdEJRVUVzUlVGQlR6bEVMRU5CUVVFc1NVRkRiRU1zVDBGRlNuaERMRU5CUVVFc1EwRkJUMVVzVlVGQlFTeERRVUZYUXl4UFFVRkJMRXRCUTNaQ2QwTXNRMEZCUVN4RFFVRlBMSGRDUVVOUWJrUXNRMEZCUVN4RFFVRlBWU3hWUVVGQkxFTkJRVmRETEU5QlFVRXNTVUZCVlN4SlFVTnlRaXhGUVVOVU8wVkJRVUU3UlVGRFFWQXNRMEZCUVN4RFFVRkhMRkZCUVZFN1NVRkJRU3hEUVVOS1NpeERRVUZCTEVOQlFVODBRaXhOUVVGQkxFTkJRVTlzUWl4VlFVRkJMRU5CUVZkRExFOUJRVUVzU1VGQlYxZ3NRMEZCUVN4RFFVRlBORUlzVFVGQlFTeERRVUZQWlN4UFFVRkJMRWxCUTNKRWVVUXNRMEZCUVN4SlFVVkZjRWNzUTBGQlFTeERRVUZQTkVJc1RVRkJRU3hEUVVGUGJFSXNWVUZCUVN4RFFVRlhReXhQUVVGQkxFbEJRVk13UkN4RFFVRkJMRVZCUVZFN1JVRkJRU3hKUVVWb1JHcEZMRU5CUVVFc1EwRkJSeXhYUVVGWE8wbEJRMUpLTEVOQlFVRXNRMEZCVHpSQ0xFMUJRVUVzUTBGQlQyVXNUMEZCUVN4SlFVTm9RakJDTEVOQlFVRXNTVUZGUlhKRkxFTkJRVUVzUTBGQlQxVXNWVUZCUVN4RFFVRlhReXhQUVVGQkxFbEJRVk41Uml4RFFVRkJMRVZCUVZNN1JVRkJRU3hKUVVVeFEwY3NUVUZCUVN4RFFVRlBReXhOUVVGQkxFTkJRVTk0Unl4RFFVRkJMRU5CUVU5VkxGVkJRVUVzUlVGQldUdEpRVU12UWl0R0xFMUJRVUVzUlVGQlFYQkRMRU5CUVVFN1NVRkRRWEZETEU5QlFVRXNSVUZCUVU0N1JVRkJRU3hGUVVWS08wRkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gTmF2aWdhdGlvbjtcbnZhciBfY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZE1pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWluLm1qc1wiKTtcbmZ1bmN0aW9uIE5hdmlnYXRpb24oYSkge1xuICBsZXQge1xuICAgIHN3aXBlcjogbixcbiAgICBleHRlbmRQYXJhbXM6IGUsXG4gICAgb246IGksXG4gICAgZW1pdDogdFxuICB9ID0gYTtcbiAgZSh7XG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgcHJldkVsOiBudWxsLFxuICAgICAgaGlkZU9uQ2xpY2s6ICExLFxuICAgICAgZGlzYWJsZWRDbGFzczogXCJzd2lwZXItYnV0dG9uLWRpc2FibGVkXCIsXG4gICAgICBoaWRkZW5DbGFzczogXCJzd2lwZXItYnV0dG9uLWhpZGRlblwiLFxuICAgICAgbG9ja0NsYXNzOiBcInN3aXBlci1idXR0b24tbG9ja1wiLFxuICAgICAgbmF2aWdhdGlvbkRpc2FibGVkQ2xhc3M6IFwic3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWRcIlxuICAgIH1cbiAgfSksIG4ubmF2aWdhdGlvbiA9IHtcbiAgICBuZXh0RWw6IG51bGwsXG4gICAgcHJldkVsOiBudWxsXG4gIH07XG4gIGNvbnN0IHMgPSBhID0+IChBcnJheS5pc0FycmF5KGEpID8gYSA6IFthXSkuZmlsdGVyKGEgPT4gISFhKTtcbiAgZnVuY3Rpb24gbChhKSB7XG4gICAgbGV0IGU7XG4gICAgcmV0dXJuIGEgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgYSAmJiBuLmlzRWxlbWVudCAmJiAoZSA9IG4uZWwucXVlcnlTZWxlY3RvcihhKSwgZSkgPyBlIDogKGEgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgJiYgKGUgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhKV0pLCBuLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBhICYmIGUubGVuZ3RoID4gMSAmJiAxID09PSBuLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoYSkubGVuZ3RoICYmIChlID0gbi5lbC5xdWVyeVNlbGVjdG9yKGEpKSksIGEgJiYgIWUgPyBhIDogZSk7XG4gIH1cbiAgZnVuY3Rpb24gbyhhLCBlKSB7XG4gICAgY29uc3QgaSA9IG4ucGFyYW1zLm5hdmlnYXRpb247XG4gICAgKGEgPSBzKGEpKS5mb3JFYWNoKGEgPT4ge1xuICAgICAgYSAmJiAoYS5jbGFzc0xpc3RbZSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSguLi5pLmRpc2FibGVkQ2xhc3Muc3BsaXQoXCIgXCIpKSwgXCJCVVRUT05cIiA9PT0gYS50YWdOYW1lICYmIChhLmRpc2FibGVkID0gZSksIG4ucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgbi5lbmFibGVkICYmIGEuY2xhc3NMaXN0W24uaXNMb2NrZWQgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0oaS5sb2NrQ2xhc3MpKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbDogYSxcbiAgICAgIHByZXZFbDogZVxuICAgIH0gPSBuLm5hdmlnYXRpb247XG4gICAgaWYgKG4ucGFyYW1zLmxvb3ApIHJldHVybiBvKGUsICExKSwgdm9pZCBvKGEsICExKTtcbiAgICBvKGUsIG4uaXNCZWdpbm5pbmcgJiYgIW4ucGFyYW1zLnJld2luZCksIG8oYSwgbi5pc0VuZCAmJiAhbi5wYXJhbXMucmV3aW5kKTtcbiAgfVxuICBmdW5jdGlvbiBkKGEpIHtcbiAgICBhLnByZXZlbnREZWZhdWx0KCksICghbi5pc0JlZ2lubmluZyB8fCBuLnBhcmFtcy5sb29wIHx8IG4ucGFyYW1zLnJld2luZCkgJiYgKG4uc2xpZGVQcmV2KCksIHQoXCJuYXZpZ2F0aW9uUHJldlwiKSk7XG4gIH1cbiAgZnVuY3Rpb24gYyhhKSB7XG4gICAgYS5wcmV2ZW50RGVmYXVsdCgpLCAoIW4uaXNFbmQgfHwgbi5wYXJhbXMubG9vcCB8fCBuLnBhcmFtcy5yZXdpbmQpICYmIChuLnNsaWRlTmV4dCgpLCB0KFwibmF2aWdhdGlvbk5leHRcIikpO1xuICB9XG4gIGZ1bmN0aW9uIHAoKSB7XG4gICAgY29uc3QgYSA9IG4ucGFyYW1zLm5hdmlnYXRpb247XG4gICAgaWYgKG4ucGFyYW1zLm5hdmlnYXRpb24gPSAoMCwgX2NyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWRNaW4uYykobiwgbi5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCBuLnBhcmFtcy5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWw6IFwic3dpcGVyLWJ1dHRvbi1uZXh0XCIsXG4gICAgICBwcmV2RWw6IFwic3dpcGVyLWJ1dHRvbi1wcmV2XCJcbiAgICB9KSwgIWEubmV4dEVsICYmICFhLnByZXZFbCkgcmV0dXJuO1xuICAgIGxldCBlID0gbChhLm5leHRFbCksXG4gICAgICBpID0gbChhLnByZXZFbCk7XG4gICAgT2JqZWN0LmFzc2lnbihuLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbDogZSxcbiAgICAgIHByZXZFbDogaVxuICAgIH0pLCBlID0gcyhlKSwgaSA9IHMoaSk7XG4gICAgY29uc3QgdCA9IChlLCBpKSA9PiB7XG4gICAgICBlICYmIGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFwibmV4dFwiID09PSBpID8gYyA6IGQpLCAhbi5lbmFibGVkICYmIGUgJiYgZS5jbGFzc0xpc3QuYWRkKC4uLmEubG9ja0NsYXNzLnNwbGl0KFwiIFwiKSk7XG4gICAgfTtcbiAgICBlLmZvckVhY2goYSA9PiB0KGEsIFwibmV4dFwiKSksIGkuZm9yRWFjaChhID0+IHQoYSwgXCJwcmV2XCIpKTtcbiAgfVxuICBmdW5jdGlvbiB2KCkge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWw6IGEsXG4gICAgICBwcmV2RWw6IGVcbiAgICB9ID0gbi5uYXZpZ2F0aW9uO1xuICAgIGEgPSBzKGEpLCBlID0gcyhlKTtcbiAgICBjb25zdCBpID0gKGEsIGUpID0+IHtcbiAgICAgIGEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFwibmV4dFwiID09PSBlID8gYyA6IGQpLCBhLmNsYXNzTGlzdC5yZW1vdmUoLi4ubi5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzLnNwbGl0KFwiIFwiKSk7XG4gICAgfTtcbiAgICBhLmZvckVhY2goYSA9PiBpKGEsIFwibmV4dFwiKSksIGUuZm9yRWFjaChhID0+IGkoYSwgXCJwcmV2XCIpKTtcbiAgfVxuICBpKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgITEgPT09IG4ucGFyYW1zLm5hdmlnYXRpb24uZW5hYmxlZCA/IGcoKSA6IChwKCksIHIoKSk7XG4gIH0pLCBpKFwidG9FZGdlIGZyb21FZGdlIGxvY2sgdW5sb2NrXCIsICgpID0+IHtcbiAgICByKCk7XG4gIH0pLCBpKFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgdigpO1xuICB9KSwgaShcImVuYWJsZSBkaXNhYmxlXCIsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsOiBhLFxuICAgICAgcHJldkVsOiBlXG4gICAgfSA9IG4ubmF2aWdhdGlvbjtcbiAgICBhID0gcyhhKSwgZSA9IHMoZSksIFsuLi5hLCAuLi5lXS5maWx0ZXIoYSA9PiAhIWEpLmZvckVhY2goYSA9PiBhLmNsYXNzTGlzdFtuLmVuYWJsZWQgPyBcInJlbW92ZVwiIDogXCJhZGRcIl0obi5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpKTtcbiAgfSksIGkoXCJjbGlja1wiLCAoYSwgZSkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWw6IGksXG4gICAgICBwcmV2RWw6IGxcbiAgICB9ID0gbi5uYXZpZ2F0aW9uO1xuICAgIGkgPSBzKGkpLCBsID0gcyhsKTtcbiAgICBjb25zdCBvID0gZS50YXJnZXQ7XG4gICAgaWYgKG4ucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgIWwuaW5jbHVkZXMobykgJiYgIWkuaW5jbHVkZXMobykpIHtcbiAgICAgIGlmIChuLnBhZ2luYXRpb24gJiYgbi5wYXJhbXMucGFnaW5hdGlvbiAmJiBuLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAobi5wYWdpbmF0aW9uLmVsID09PSBvIHx8IG4ucGFnaW5hdGlvbi5lbC5jb250YWlucyhvKSkpIHJldHVybjtcbiAgICAgIGxldCBhO1xuICAgICAgaS5sZW5ndGggPyBhID0gaVswXS5jbGFzc0xpc3QuY29udGFpbnMobi5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykgOiBsLmxlbmd0aCAmJiAoYSA9IGxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKG4ucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpKSwgdCghMCA9PT0gYSA/IFwibmF2aWdhdGlvblNob3dcIiA6IFwibmF2aWdhdGlvbkhpZGVcIiksIFsuLi5pLCAuLi5sXS5maWx0ZXIoYSA9PiAhIWEpLmZvckVhY2goYSA9PiBhLmNsYXNzTGlzdC50b2dnbGUobi5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGcgPSAoKSA9PiB7XG4gICAgbi5lbC5jbGFzc0xpc3QuYWRkKC4uLm4ucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoXCIgXCIpKSwgdigpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKG4ubmF2aWdhdGlvbiwge1xuICAgIGVuYWJsZTogKCkgPT4ge1xuICAgICAgbi5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLm4ucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoXCIgXCIpKSwgcCgpLCByKCk7XG4gICAgfSxcbiAgICBkaXNhYmxlOiBnLFxuICAgIHVwZGF0ZTogcixcbiAgICBpbml0OiBwLFxuICAgIGRlc3Ryb3k6IHZcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5Sk9ZWFpwWjJGMGFXOXVJaXdpWVNJc0luTjNhWEJsY2lJc0ltNGlMQ0psZUhSbGJtUlFZWEpoYlhNaUxDSmxJaXdpYjI0aUxDSnBJaXdpWlcxcGRDSXNJblFpTENKdVlYWnBaMkYwYVc5dUlpd2libVY0ZEVWc0lpd2ljSEpsZGtWc0lpd2lhR2xrWlU5dVEyeHBZMnNpTENKa2FYTmhZbXhsWkVOc1lYTnpJaXdpYUdsa1pHVnVRMnhoYzNNaUxDSnNiMk5yUTJ4aGMzTWlMQ0p1WVhacFoyRjBhVzl1UkdsellXSnNaV1JEYkdGemN5SXNJbk1pTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKbWFXeDBaWElpTENKc0lpd2lhWE5GYkdWdFpXNTBJaXdpWld3aUxDSnhkV1Z5ZVZObGJHVmpkRzl5SWl3aVpHOWpkVzFsYm5RaUxDSnhkV1Z5ZVZObGJHVmpkRzl5UVd4c0lpd2ljR0Z5WVcxeklpd2lkVzVwY1hWbFRtRjJSV3hsYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0p2SWl3aVptOXlSV0ZqYUNJc0ltTnNZWE56VEdsemRDSXNJbk53YkdsMElpd2lkR0ZuVG1GdFpTSXNJbVJwYzJGaWJHVmtJaXdpZDJGMFkyaFBkbVZ5Wm14dmR5SXNJbVZ1WVdKc1pXUWlMQ0pwYzB4dlkydGxaQ0lzSW5JaUxDSnNiMjl3SWl3aWFYTkNaV2RwYm01cGJtY2lMQ0p5WlhkcGJtUWlMQ0pwYzBWdVpDSXNJbVFpTENKd2NtVjJaVzUwUkdWbVlYVnNkQ0lzSW5Oc2FXUmxVSEpsZGlJc0ltTWlMQ0p6Ykdsa1pVNWxlSFFpTENKd0lpd2lZM0psWVhSbFJXeGxiV1Z1ZEVsbVRtOTBSR1ZtYVc1bFpDSXNJbTl5YVdkcGJtRnNVR0Z5WVcxeklpd2lUMkpxWldOMElpd2lZWE56YVdkdUlpd2lhVzVwZEVKMWRIUnZiaUlzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKaFpHUWlMQ0oySWl3aVpHVnpkSEp2ZVVKMWRIUnZiaUlzSW5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJaUxDSnlaVzF2ZG1VaUxDSm5JaXdpZEdGeVoyVjBJaXdpYVc1amJIVmtaWE1pTENKd1lXZHBibUYwYVc5dUlpd2lZMnhwWTJ0aFlteGxJaXdpWTI5dWRHRnBibk1pTENKMGIyZG5iR1VpTENKa2FYTmhZbXhsSWl3aVpXNWhZbXhsSWl3aWRYQmtZWFJsSWl3aWFXNXBkQ0lzSW1SbGMzUnliM2tpWFN3aWMyOTFjbU5sY3lJNld5SXdJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiYm5Wc2JGMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUlVFc1UwRkJVMEVzVjBGQlYwTXNRMEZCUVR0RlFVTnNRanRKUVVGSlF5eE5RVUZCTEVWQlEwWkRMRU5CUVVFN1NVRkJUVU1zV1VGQlFTeEZRVU5PUXl4RFFVRkJPMGxCUVZsRExFVkJRVUVzUlVGRFdrTXNRMEZCUVR0SlFVRkZReXhKUVVGQkxFVkJRMFpETzBWQlFVRXNTVUZEUlZJc1EwRkJRVHRGUVVOS1NTeERRVUZCTEVOQlFXRTdTVUZEV0Vzc1ZVRkJRU3hGUVVGWk8wMUJRMVpETEUxQlFVRXNSVUZCVVR0TlFVTlNReXhOUVVGQkxFVkJRVkU3VFVGRFVrTXNWMEZCUVN4SFFVRmhPMDFCUTJKRExHRkJRVUVzUlVGQlpUdE5RVU5tUXl4WFFVRkJMRVZCUVdFN1RVRkRZa01zVTBGQlFTeEZRVUZYTzAxQlExaERMSFZDUVVGQkxFVkJRWGxDTzBsQlFVRTdSVUZCUVN4SlFVYzNRbVFzUTBGQlFTeERRVUZQVHl4VlFVRkJMRWRCUVdFN1NVRkRiRUpETEUxQlFVRXNSVUZCVVR0SlFVTlNReXhOUVVGQkxFVkJRVkU3UlVGQlFUdEZRVVZXTEUxQlFVMU5MRU5CUVVFc1IwRkJiMEpxUWl4RFFVRkJMRXRCUVU5clFpeExRVUZCTEVOQlFVMURMRTlCUVVFc1EwRkJVVzVDTEVOQlFVRXNTVUZCVFVFc1EwRkJRU3hIUVVGTExFTkJRVU5CTEVOQlFVRXNSMEZCUzI5Q0xFMUJRVUVzUTBGQlQzQkNMRU5CUVVFc1RVRkJUMEVzUTBGQlFUdEZRVU01UlN4VFFVRlRjVUlzUlVGQlRYSkNMRU5CUVVFN1NVRkRZaXhKUVVGSlNTeERRVUZCTzBsQlEwb3NUMEZCU1Vvc1EwRkJRU3hKUVVGdlFpeHRRa0ZCVUVFc1EwRkJRU3hKUVVGdFFrVXNRMEZCUVN4RFFVRlBiMElzVTBGQlFTeExRVU42UTJ4Q0xFTkJRVUVzUjBGQlRVWXNRMEZCUVN4RFFVRlBjVUlzUlVGQlFTeERRVUZIUXl4aFFVRkJMRU5CUVdONFFpeERRVUZCTEVkQlF6RkNTU3hEUVVGQkxFbEJRVmxCTEVOQlFVRXNTVUZGWkVvc1EwRkJRU3hMUVVOblFpeHRRa0ZCVUVFc1EwRkJRU3hMUVVGcFFra3NRMEZCUVN4SFFVRk5MRWxCUVVseFFpeFJRVUZCTEVOQlFWTkRMR2RDUVVGQkxFTkJRV2xDTVVJc1EwRkJRU3hMUVVNMVJFVXNRMEZCUVN4RFFVRlBlVUlzVFVGQlFTeERRVUZQUXl4cFFrRkJRU3hKUVVGdFF5eHRRa0ZCVURWQ0xFTkJRVUVzU1VGQmJVSkpMRU5CUVVFc1EwRkJTWGxDTEUxQlFVRXNSMEZCVXl4TFFVRXJReXhOUVVFeFF6TkNMRU5CUVVFc1EwRkJUM0ZDTEVWQlFVRXNRMEZCUjBjc1owSkJRVUVzUTBGQmFVSXhRaXhEUVVGQkxFVkJRVWsyUWl4TlFVRkJMRXRCUTJoSWVrSXNRMEZCUVN4SFFVRk5SaXhEUVVGQkxFTkJRVTl4UWl4RlFVRkJMRU5CUVVkRExHRkJRVUVzUTBGQlkzaENMRU5CUVVFc1MwRkhPVUpCTEVOQlFVRXNTMEZCVDBrc1EwRkJRU3hIUVVGWlNpeERRVUZCTEVkQlJXaENTU3hEUVVGQkxFTkJRMVE3UlVGQlFUdEZRVU5CTEZOQlFWTXdRaXhGUVVGVE9VSXNRMEZCUVN4RlFVRkpTU3hEUVVGQk8wbEJRM0JDTEUxQlFVMUZMRU5CUVVFc1IwRkJVMG9zUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUGJFSXNWVUZCUVR0SlFVRkJMRU5CUXpkQ1ZDeERRVUZCTEVkQlFVdHBRaXhEUVVGQkxFTkJRV3RDYWtJc1EwRkJRU3hIUVVOd1FpdENMRTlCUVVFc1EwRkJVUzlDTEVOQlFVRTdUVUZEVEVFc1EwRkJRU3hMUVVOR1FTeERRVUZCTEVOQlFVMW5ReXhUUVVGQkxFTkJRVlUxUWl4RFFVRkJMRWRCUVZjc1VVRkJVU3hoUVVGaFJTeERRVUZCTEVOQlFVOVBMR0ZCUVVFc1EwRkJZMjlDTEV0QlFVRXNRMEZCVFN4UFFVTnlSQ3hoUVVGc1FtcERMRU5CUVVFc1EwRkJUV3RETEU5QlFVRXNTMEZCYzBKc1F5eERRVUZCTEVOQlFVMXRReXhSUVVGQkxFZEJRVmN2UWl4RFFVRkJMRWRCUXpkRFJpeERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlUTEdGQlFVRXNTVUZCYVVKc1F5eERRVUZCTEVOQlFVOXRReXhQUVVGQkxFbEJRM2hEY2tNc1EwRkJRU3hEUVVGTlowTXNVMEZCUVN4RFFVRlZPVUlzUTBGQlFTeERRVUZQYjBNc1VVRkJRU3hIUVVGWExGRkJRVkVzVlVGQlZXaERMRU5CUVVFc1EwRkJUMU1zVTBGQlFTeEZRVVV2UkR0SlFVRkJMRVZCUlVvN1JVRkJRVHRGUVVOQkxGTkJRVk4zUWl4RlFVRkJPMGxCUlZBN1RVRkJUVGRDTEUxQlFVRXNSVUZEU2xZc1EwRkJRVHROUVVGTlZ5eE5RVUZCTEVWQlEwNVFPMGxCUVVFc1NVRkRSVVlzUTBGQlFTeERRVUZQVHl4VlFVRkJPMGxCUTFnc1NVRkJTVkFzUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUFlTeEpRVUZCTEVWQlIyaENMRTlCUmtGV0xFTkJRVUVzUTBGQlV6RkNMRU5CUVVFc1IwRkJVU3hUUVVOcVFqQkNMRU5CUVVFc1EwRkJVemxDTEVOQlFVRXNSMEZCVVR0SlFVZHVRamhDTEVOQlFVRXNRMEZCVXpGQ0xFTkJRVUVzUlVGQlVVWXNRMEZCUVN4RFFVRlBkVU1zVjBGQlFTeExRVUZuUW5aRExFTkJRVUVzUTBGQlQzbENMRTFCUVVFc1EwRkJUMlVzVFVGQlFTeEhRVU4wUkZvc1EwRkJRU3hEUVVGVE9VSXNRMEZCUVN4RlFVRlJSU3hEUVVGQkxFTkJRVTk1UXl4TFFVRkJMRXRCUVZWNlF5eERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlsTEUxQlFVRXNRMEZEYkVRN1JVRkJRVHRGUVVOQkxGTkJRVk5GTEVWQlFWazFReXhEUVVGQk8wbEJRMjVDUVN4RFFVRkJMRU5CUVVVMlF5eGpRVUZCTEUxQlEwVXpReXhEUVVGQkxFTkJRVTkxUXl4WFFVRkJMRWxCUVdkQ2RrTXNRMEZCUVN4RFFVRlBlVUlzVFVGQlFTeERRVUZQWVN4SlFVRkJMRWxCUVZOMFF5eERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlsTEUxQlFVRXNUVUZEYUVWNFF5eERRVUZCTEVOQlFVODBReXhUUVVGQkxFbEJRMUIwUXl4RFFVRkJMRU5CUVVzc2EwSkJRMUE3UlVGQlFUdEZRVU5CTEZOQlFWTjFReXhGUVVGWkwwTXNRMEZCUVR0SlFVTnVRa0VzUTBGQlFTeERRVUZGTmtNc1kwRkJRU3hOUVVORk0wTXNRMEZCUVN4RFFVRlBlVU1zUzBGQlFTeEpRVUZWZWtNc1EwRkJRU3hEUVVGUGVVSXNUVUZCUVN4RFFVRlBZU3hKUVVGQkxFbEJRVk4wUXl4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOWxMRTFCUVVFc1RVRkRNVVI0UXl4RFFVRkJMRU5CUVU4NFF5eFRRVUZCTEVsQlExQjRReXhEUVVGQkxFTkJRVXNzYTBKQlExQTdSVUZCUVR0RlFVTkJMRk5CUVZONVF5eEZRVUZCTzBsQlExQXNUVUZCVFdwRUxFTkJRVUVzUjBGQlUwVXNRMEZCUVN4RFFVRlBlVUlzVFVGQlFTeERRVUZQYkVJc1ZVRkJRVHRKUVVzM1FpeEpRVXBCVUN4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXNRaXhWUVVGQkxFZEJRV0VzU1VGQlFYbERMQ3RDUVVGQkxFVkJRVEJDYUVRc1EwRkJRU3hGUVVGUlFTeERRVUZCTEVOQlFVOXBSQ3hqUVVGQkxFTkJRV1V4UXl4VlFVRkJMRVZCUVZsUUxFTkJRVUVzUTBGQlQzbENMRTFCUVVFc1EwRkJUMnhDTEZWQlFVRXNSVUZCV1R0TlFVTjJTRU1zVFVGQlFTeEZRVUZSTzAxQlExSkRMRTFCUVVFc1JVRkJVVHRKUVVGQkxFdEJSVXBZTEVOQlFVRXNRMEZCVDFVc1RVRkJRU3hMUVVGVlZpeERRVUZCTEVOQlFVOVhMRTFCUVVFc1JVRkJVenRKUVVOMlF5eEpRVUZKVUN4RFFVRkJMRWRCUVZOcFFpeERRVUZCTEVOQlFVMXlRaXhEUVVGQkxFTkJRVTlWTEUxQlFVRTdUVUZEZEVKS0xFTkJRVUVzUjBGQlUyVXNRMEZCUVN4RFFVRk5ja0lzUTBGQlFTeERRVUZQVnl4TlFVRkJPMGxCUXpGQ2VVTXNUVUZCUVN4RFFVRlBReXhOUVVGQkxFTkJRVTl1UkN4RFFVRkJMRU5CUVU5UExGVkJRVUVzUlVGQldUdE5RVU12UWtNc1RVRkJRU3hGUVVGQlRpeERRVUZCTzAxQlEwRlBMRTFCUVVFc1JVRkJRVXc3U1VGQlFTeEpRVVZHUml4RFFVRkJMRWRCUVZOaExFTkJRVUVzUTBGQmEwSmlMRU5CUVVFc1IwRkRNMEpGTEVOQlFVRXNSMEZCVTFjc1EwRkJRU3hEUVVGclFsZ3NRMEZCUVR0SlFVTXpRaXhOUVVGTlJTeERRVUZCTEVkQlFXRTRReXhEUVVGRGJFUXNRMEZCUVN4RlFVRkpSU3hEUVVGQk8wMUJRMnhDUml4RFFVRkJMRWxCUTBaQkxFTkJRVUVzUTBGQlIyMUVMR2RDUVVGQkxFTkJRV2xDTEZOQlFXbENMRmRCUVZKcVJDeERRVUZCTEVkQlFXbENlVU1zUTBGQlFTeEhRVUZqU0N4RFFVRkJMRWxCUlhwRU1VTXNRMEZCUVN4RFFVRlBiVU1zVDBGQlFTeEpRVUZYYWtNc1EwRkJRU3hKUVVOeVFrRXNRMEZCUVN4RFFVRkhORUlzVTBGQlFTeERRVUZWZDBJc1IwRkJRU3hKUVVGUGVFUXNRMEZCUVN4RFFVRlBaU3hUUVVGQkxFTkJRVlZyUWl4TFFVRkJMRU5CUVUwc1MwRkROME03U1VGQlFUdEpRVVZHTjBJc1EwRkJRU3hEUVVGUE1rSXNUMEZCUVN4RFFVRlJMMElzUTBGQlFTeEpRVUZOVVN4RFFVRkJMRU5CUVZkU0xFTkJRVUVzUlVGQlNTeFZRVU53UTAwc1EwRkJRU3hEUVVGUGVVSXNUMEZCUVN4RFFVRlJMMElzUTBGQlFTeEpRVUZOVVN4RFFVRkJMRU5CUVZkU0xFTkJRVUVzUlVGQlNTeFJRVU4wUXp0RlFVRkJPMFZCUTBFc1UwRkJVM2xFTEVWQlFVRTdTVUZEVUR0TlFVRkpMME1zVFVGQlFTeEZRVU5HVml4RFFVRkJPMDFCUVUxWExFMUJRVUVzUlVGRFRsQTdTVUZCUVN4SlFVTkZSaXhEUVVGQkxFTkJRVTlQTEZWQlFVRTdTVUZEV0ZRc1EwRkJRU3hIUVVGVGFVSXNRMEZCUVN4RFFVRnJRbXBDTEVOQlFVRXNSMEZETTBKSkxFTkJRVUVzUjBGQlUyRXNRMEZCUVN4RFFVRnJRbUlzUTBGQlFUdEpRVU16UWl4TlFVRk5SU3hEUVVGQkxFZEJRV2RDYjBRc1EwRkJRekZFTEVOQlFVRXNSVUZCU1Vrc1EwRkJRVHROUVVONlFrb3NRMEZCUVN4RFFVRkhNa1FzYlVKQlFVRXNRMEZCYjBJc1UwRkJhVUlzVjBGQlVuWkVMRU5CUVVFc1IwRkJhVUl5UXl4RFFVRkJMRWRCUVdOSUxFTkJRVUVzUjBGREwwUTFReXhEUVVGQkxFTkJRVWRuUXl4VFFVRkJMRU5CUVZVMFFpeE5RVUZCTEVsQlFWVXhSQ3hEUVVGQkxFTkJRVTk1UWl4TlFVRkJMRU5CUVU5c1FpeFZRVUZCTEVOQlFWZEpMR0ZCUVVFc1EwRkJZMjlDTEV0QlFVRXNRMEZCVFN4TFFVRkxPMGxCUVVFN1NVRkZNMFZxUXl4RFFVRkJMRU5CUVU4clFpeFBRVUZCTEVOQlFWRXZRaXhEUVVGQkxFbEJRVTFOTEVOQlFVRXNRMEZCWTA0c1EwRkJRU3hGUVVGSkxGVkJRM1pEU1N4RFFVRkJMRU5CUVU4eVFpeFBRVUZCTEVOQlFWRXZRaXhEUVVGQkxFbEJRVTFOTEVOQlFVRXNRMEZCWTA0c1EwRkJRU3hGUVVGSkxGRkJRM3BETzBWQlFVRTdSVUZEUVUwc1EwRkJRU3hEUVVGSExGRkJRVkU3U1VGQlFTeERRVU5uUXl4TlFVRnlRMG9zUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUGJFSXNWVUZCUVN4RFFVRlhORUlzVDBGQlFTeEhRVVV6UW5kQ0xFTkJRVUVzVFVGRlFWb3NRMEZCUVN4SlFVTkJWaXhEUVVGQkxFZEJRMFk3UlVGQlFTeEpRVVZHYWtNc1EwRkJRU3hEUVVGSExDdENRVUVyUWp0SlFVTm9RMmxETEVOQlFVRXNSVUZCVVR0RlFVRkJMRWxCUlZacVF5eERRVUZCTEVOQlFVY3NWMEZCVnp0SlFVTmFiVVFzUTBGQlFTeEZRVUZUTzBWQlFVRXNTVUZGV0c1RUxFTkJRVUVzUTBGQlJ5eHJRa0ZCYTBJN1NVRkRia0k3VFVGQlNVa3NUVUZCUVN4RlFVTkdWaXhEUVVGQk8wMUJRVTFYTEUxQlFVRXNSVUZEVGxBN1NVRkJRU3hKUVVORlJpeERRVUZCTEVOQlFVOVBMRlZCUVVFN1NVRkRXRlFzUTBGQlFTeEhRVUZUYVVJc1EwRkJRU3hEUVVGclFtcENMRU5CUVVFc1IwRkRNMEpKTEVOQlFVRXNSMEZCVTJFc1EwRkJRU3hEUVVGclFtSXNRMEZCUVN4SFFVTXpRaXhKUVVGSlNpeERRVUZCTEV0QlFWZEpMRU5CUVVFc1JVRkJVV2RDTEUxQlFVRXNRMEZCVDNCQ0xFTkJRVUVzVFVGQlVVRXNRMEZCUVN4RlFVRkpLMElzVDBGQlFTeERRVUZSTDBJc1EwRkJRU3hKUVVGTlFTeERRVUZCTEVOQlFVZG5ReXhUUVVGQkxFTkJRVlU1UWl4RFFVRkJMRU5CUVU5dFF5eFBRVUZCTEVkQlFWVXNWMEZCVnl4UFFVRlBia01zUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUGJFSXNWVUZCUVN4RFFVRlhUU3hUUVVGQkxFVkJRVmM3UlVGQlFTeEpRVVU1U1ZRc1EwRkJRU3hEUVVGSExGTkJRVk1zUTBGQlEwNHNRMEZCUVN4RlFVRkpTU3hEUVVGQk8wbEJRMlk3VFVGQlNVMHNUVUZCUVN4RlFVTkdTaXhEUVVGQk8wMUJRVTFMTEUxQlFVRXNSVUZEVGxVN1NVRkJRU3hKUVVORmJrSXNRMEZCUVN4RFFVRlBUeXhWUVVGQk8wbEJRMWhJTEVOQlFVRXNSMEZCVTFjc1EwRkJRU3hEUVVGclFsZ3NRMEZCUVN4SFFVTXpRbVVzUTBGQlFTeEhRVUZUU2l4RFFVRkJMRU5CUVd0Q1NTeERRVUZCTzBsQlF6TkNMRTFCUVUxVExFTkJRVUVzUjBGQlZ6RkNMRU5CUVVFc1EwRkJSVEJFTEUxQlFVRTdTVUZEYmtJc1NVRkJTVFZFTEVOQlFVRXNRMEZCVDNsQ0xFMUJRVUVzUTBGQlQyeENMRlZCUVVFc1EwRkJWMGNzVjBGQlFTeExRVUZuUWxNc1EwRkJRU3hEUVVGUE1FTXNVVUZCUVN4RFFVRlRha01zUTBGQlFTeE5RVUZqZUVJc1EwRkJRU3hEUVVGUGVVUXNVVUZCUVN4RFFVRlRha01zUTBGQlFTeEhRVUZYTzAxQlEzQkhMRWxCUVVrMVFpeERRVUZCTEVOQlFVODRSQ3hWUVVGQkxFbEJRV001UkN4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXhReXhWUVVGQkxFbEJRV001UkN4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXhReXhWUVVGQkxFTkJRVmRETEZOQlFVRXNTMEZCWXk5RUxFTkJRVUVzUTBGQlR6aEVMRlZCUVVFc1EwRkJWM3BETEVWQlFVRXNTMEZCVDA4c1EwRkJRU3hKUVVGWk5VSXNRMEZCUVN4RFFVRlBPRVFzVlVGQlFTeERRVUZYZWtNc1JVRkJRU3hEUVVGSE1rTXNVVUZCUVN4RFFVRlRjRU1zUTBGQlFTeEpRVUZaTzAxQlF6TkxMRWxCUVVrNVFpeERRVUZCTzAxQlEwRk5MRU5CUVVFc1EwRkJUM1ZDTEUxQlFVRXNSMEZEVkRkQ0xFTkJRVUVzUjBGQlYwMHNRMEZCUVN4RFFVRlBMRWRCUVVjd1FpeFRRVUZCTEVOQlFWVnJReXhSUVVGQkxFTkJRVk5vUlN4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXNRaXhWUVVGQkxFTkJRVmRMTEZkQlFVRXNTVUZEZUVSUExFTkJRVUVzUTBGQlQxRXNUVUZCUVN4TFFVTm9RamRDTEVOQlFVRXNSMEZCVjNGQ0xFTkJRVUVzUTBGQlR5eEhRVUZIVnl4VFFVRkJMRU5CUVZWclF5eFJRVUZCTEVOQlFWTm9SU3hEUVVGQkxFTkJRVTk1UWl4TlFVRkJMRU5CUVU5c1FpeFZRVUZCTEVOQlFWZExMRmRCUVVFc1NVRkhha1ZPTEVOQlFVRXNSVUZFWlN4TlFVRmlVaXhEUVVGQkxFZEJRMGNzYlVKQlJVRXNiVUpCUlZBc1NVRkJTVTBzUTBGQlFTeExRVUZYWlN4RFFVRkJMRVZCUVZGRUxFMUJRVUVzUTBGQlQzQkNMRU5CUVVFc1RVRkJVVUVzUTBGQlFTeEZRVUZKSzBJc1QwRkJRU3hEUVVGUkwwSXNRMEZCUVN4SlFVRk5RU3hEUVVGQkxFTkJRVWRuUXl4VFFVRkJMRU5CUVZWdFF5eE5RVUZCTEVOQlFVOXFSU3hEUVVGQkxFTkJRVTk1UWl4TlFVRkJMRU5CUVU5c1FpeFZRVUZCTEVOQlFWZExMRmRCUVVFc1JVRkRka2M3U1VGQlFUdEZRVUZCTzBWQlJVWXNUVUZMVFN0RExFTkJRVUVzUjBGQlZVOHNRMEZCUVR0SlFVTmtiRVVzUTBGQlFTeERRVUZQY1VJc1JVRkJRU3hEUVVGSFV5eFRRVUZCTEVOQlFWVjNRaXhIUVVGQkxFbEJRVTkwUkN4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXNRaXhWUVVGQkxFTkJRVmRQTEhWQ1FVRkJMRU5CUVhkQ2FVSXNTMEZCUVN4RFFVRk5MRTlCUTJ4R2QwSXNRMEZCUVN4RlFVRlRPMFZCUVVFN1JVRkZXRXdzVFVGQlFTeERRVUZQUXl4TlFVRkJMRU5CUVU5dVJDeERRVUZCTEVOQlFVOVBMRlZCUVVFc1JVRkJXVHRKUVVNdlFqUkVMRTFCUVVFc1JVRldZVUVzUTBGQlFUdE5RVU5pYmtVc1EwRkJRU3hEUVVGUGNVSXNSVUZCUVN4RFFVRkhVeXhUUVVGQkxFTkJRVlUwUWl4TlFVRkJMRWxCUVZVeFJDeERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlzUWl4VlFVRkJMRU5CUVZkUExIVkNRVUZCTEVOQlFYZENhVUlzUzBGQlFTeERRVUZOTEU5QlEzSkdaMElzUTBGQlFTeEpRVU5CVml4RFFVRkJMRVZCUVZFN1NVRkJRVHRKUVZGU05rSXNUMEZCUVN4RlFVRkJVQ3hEUVVGQk8wbEJRMEZUTEUxQlFVRXNSVUZCUVM5Q0xFTkJRVUU3U1VGRFFXZERMRWxCUVVFc1JVRkJRWFJDTEVOQlFVRTdTVUZEUVhWQ0xFOUJRVUVzUlVGQlFXWTdSVUZCUVN4RlFVVktPMEZCUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBhZ2luYXRpb247XG52YXIgX2NsYXNzZXNUb1NlbGVjdG9yTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1pbi5tanNcIik7XG52YXIgX2NyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWRNaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gUGFnaW5hdGlvbihlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiBhLFxuICAgIGV4dGVuZFBhcmFtczogbCxcbiAgICBvbjogcyxcbiAgICBlbWl0OiB0XG4gIH0gPSBlO1xuICBjb25zdCBpID0gXCJzd2lwZXItcGFnaW5hdGlvblwiO1xuICBsZXQgbjtcbiAgbCh7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiBcInNwYW5cIixcbiAgICAgIGNsaWNrYWJsZTogITEsXG4gICAgICBoaWRlT25DbGljazogITEsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogITEsXG4gICAgICB0eXBlOiBcImJ1bGxldHNcIixcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiAhMSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogZSA9PiBlLFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZSA9PiBlLFxuICAgICAgYnVsbGV0Q2xhc3M6IGAke2l9LWJ1bGxldGAsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogYCR7aX0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtpfS1gLFxuICAgICAgY3VycmVudENsYXNzOiBgJHtpfS1jdXJyZW50YCxcbiAgICAgIHRvdGFsQ2xhc3M6IGAke2l9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtpfS1oaWRkZW5gLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6IGAke2l9LXByb2dyZXNzYmFyLWZpbGxgLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiBgJHtpfS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7aX0tY2xpY2thYmxlYCxcbiAgICAgIGxvY2tDbGFzczogYCR7aX0tbG9ja2AsXG4gICAgICBob3Jpem9udGFsQ2xhc3M6IGAke2l9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7aX0tdmVydGljYWxgLFxuICAgICAgcGFnaW5hdGlvbkRpc2FibGVkQ2xhc3M6IGAke2l9LWRpc2FibGVkYFxuICAgIH1cbiAgfSksIGEucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBidWxsZXRzOiBbXVxuICB9O1xuICBsZXQgciA9IDA7XG4gIGNvbnN0IG8gPSBlID0+IChBcnJheS5pc0FycmF5KGUpID8gZSA6IFtlXSkuZmlsdGVyKGUgPT4gISFlKTtcbiAgZnVuY3Rpb24gcCgpIHtcbiAgICByZXR1cm4gIWEucGFyYW1zLnBhZ2luYXRpb24uZWwgfHwgIWEucGFnaW5hdGlvbi5lbCB8fCBBcnJheS5pc0FycmF5KGEucGFnaW5hdGlvbi5lbCkgJiYgMCA9PT0gYS5wYWdpbmF0aW9uLmVsLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiBjKGUsIGwpIHtcbiAgICBjb25zdCB7XG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogc1xuICAgIH0gPSBhLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGUgJiYgKGUgPSBlWyhcInByZXZcIiA9PT0gbCA/IFwicHJldmlvdXNcIiA6IFwibmV4dFwiKSArIFwiRWxlbWVudFNpYmxpbmdcIl0pICYmIChlLmNsYXNzTGlzdC5hZGQoYCR7c30tJHtsfWApLCAoZSA9IGVbKFwicHJldlwiID09PSBsID8gXCJwcmV2aW91c1wiIDogXCJuZXh0XCIpICsgXCJFbGVtZW50U2libGluZ1wiXSkgJiYgZS5jbGFzc0xpc3QuYWRkKGAke3N9LSR7bH0tJHtsfWApKTtcbiAgfVxuICBmdW5jdGlvbiBkKGUpIHtcbiAgICBjb25zdCBsID0gZS50YXJnZXQuY2xvc2VzdCgoMCwgX2NsYXNzZXNUb1NlbGVjdG9yTWluLmMpKGEucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKTtcbiAgICBpZiAoIWwpIHJldHVybjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgcyA9ICgwLCBfdXRpbHNNaW4uZykobCkgKiBhLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAoYS5wYXJhbXMubG9vcCkge1xuICAgICAgaWYgKGEucmVhbEluZGV4ID09PSBzKSByZXR1cm47XG4gICAgICBjb25zdCBlID0gYS5nZXRTbGlkZUluZGV4QnlEYXRhKHMpLFxuICAgICAgICBsID0gYS5nZXRTbGlkZUluZGV4QnlEYXRhKGEucmVhbEluZGV4KTtcbiAgICAgIGUgPiBhLnNsaWRlcy5sZW5ndGggLSBhLmxvb3BlZFNsaWRlcyAmJiBhLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246IGUgPiBsID8gXCJuZXh0XCIgOiBcInByZXZcIixcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogZSxcbiAgICAgICAgc2xpZGVUbzogITFcbiAgICAgIH0pLCBhLnNsaWRlVG9Mb29wKHMpO1xuICAgIH0gZWxzZSBhLnNsaWRlVG8ocyk7XG4gIH1cbiAgZnVuY3Rpb24gdSgpIHtcbiAgICBjb25zdCBlID0gYS5ydGwsXG4gICAgICBsID0gYS5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAocCgpKSByZXR1cm47XG4gICAgbGV0IHMsXG4gICAgICBpLFxuICAgICAgZCA9IGEucGFnaW5hdGlvbi5lbDtcbiAgICBkID0gbyhkKTtcbiAgICBjb25zdCB1ID0gYS52aXJ0dWFsICYmIGEucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IGEudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogYS5zbGlkZXMubGVuZ3RoLFxuICAgICAgZyA9IGEucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwodSAvIGEucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IGEuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChhLnBhcmFtcy5sb29wID8gKGkgPSBhLnByZXZpb3VzUmVhbEluZGV4IHx8IDAsIHMgPSBhLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgPyBNYXRoLmZsb29yKGEucmVhbEluZGV4IC8gYS5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogYS5yZWFsSW5kZXgpIDogdm9pZCAwICE9PSBhLnNuYXBJbmRleCA/IChzID0gYS5zbmFwSW5kZXgsIGkgPSBhLnByZXZpb3VzU25hcEluZGV4KSA6IChpID0gYS5wcmV2aW91c0luZGV4IHx8IDAsIHMgPSBhLmFjdGl2ZUluZGV4IHx8IDApLCBcImJ1bGxldHNcIiA9PT0gbC50eXBlICYmIGEucGFnaW5hdGlvbi5idWxsZXRzICYmIGEucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHQgPSBhLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBvLCBwLCB1O1xuICAgICAgaWYgKGwuZHluYW1pY0J1bGxldHMgJiYgKG4gPSAoMCwgX3V0aWxzTWluLmYpKHRbMF0sIGEuaXNIb3Jpem9udGFsKCkgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiLCAhMCksIGQuZm9yRWFjaChlID0+IHtcbiAgICAgICAgZS5zdHlsZVthLmlzSG9yaXpvbnRhbCgpID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBuICogKGwuZHluYW1pY01haW5CdWxsZXRzICsgNCkgKyBcInB4XCI7XG4gICAgICB9KSwgbC5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHZvaWQgMCAhPT0gaSAmJiAociArPSBzIC0gKGkgfHwgMCksIHIgPiBsLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEgPyByID0gbC5keW5hbWljTWFpbkJ1bGxldHMgLSAxIDogciA8IDAgJiYgKHIgPSAwKSksIG8gPSBNYXRoLm1heChzIC0gciwgMCksIHAgPSBvICsgKE1hdGgubWluKHQubGVuZ3RoLCBsLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKSwgdSA9IChwICsgbykgLyAyKSwgdC5mb3JFYWNoKGUgPT4ge1xuICAgICAgICBjb25zdCBhID0gWy4uLltcIlwiLCBcIi1uZXh0XCIsIFwiLW5leHQtbmV4dFwiLCBcIi1wcmV2XCIsIFwiLXByZXYtcHJldlwiLCBcIi1tYWluXCJdLm1hcChlID0+IGAke2wuYnVsbGV0QWN0aXZlQ2xhc3N9JHtlfWApXS5tYXAoZSA9PiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIGUuaW5jbHVkZXMoXCIgXCIpID8gZS5zcGxpdChcIiBcIikgOiBlKS5mbGF0KCk7XG4gICAgICAgIGUuY2xhc3NMaXN0LnJlbW92ZSguLi5hKTtcbiAgICAgIH0pLCBkLmxlbmd0aCA+IDEpIHQuZm9yRWFjaChlID0+IHtcbiAgICAgICAgY29uc3QgdCA9ICgwLCBfdXRpbHNNaW4uZykoZSk7XG4gICAgICAgIHQgPT09IHMgPyBlLmNsYXNzTGlzdC5hZGQoLi4ubC5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdChcIiBcIikpIDogYS5pc0VsZW1lbnQgJiYgZS5zZXRBdHRyaWJ1dGUoXCJwYXJ0XCIsIFwiYnVsbGV0XCIpLCBsLmR5bmFtaWNCdWxsZXRzICYmICh0ID49IG8gJiYgdCA8PSBwICYmIGUuY2xhc3NMaXN0LmFkZCguLi5gJHtsLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYC5zcGxpdChcIiBcIikpLCB0ID09PSBvICYmIGMoZSwgXCJwcmV2XCIpLCB0ID09PSBwICYmIGMoZSwgXCJuZXh0XCIpKTtcbiAgICAgIH0pO2Vsc2Uge1xuICAgICAgICBjb25zdCBlID0gdFtzXTtcbiAgICAgICAgaWYgKGUgJiYgZS5jbGFzc0xpc3QuYWRkKC4uLmwuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoXCIgXCIpKSwgYS5pc0VsZW1lbnQgJiYgdC5mb3JFYWNoKChlLCBhKSA9PiB7XG4gICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJwYXJ0XCIsIGEgPT09IHMgPyBcImJ1bGxldC1hY3RpdmVcIiA6IFwiYnVsbGV0XCIpO1xuICAgICAgICB9KSwgbC5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIGNvbnN0IGUgPSB0W29dLFxuICAgICAgICAgICAgYSA9IHRbcF07XG4gICAgICAgICAgZm9yIChsZXQgZSA9IG87IGUgPD0gcDsgZSArPSAxKSB0W2VdICYmIHRbZV0uY2xhc3NMaXN0LmFkZCguLi5gJHtsLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYC5zcGxpdChcIiBcIikpO1xuICAgICAgICAgIGMoZSwgXCJwcmV2XCIpLCBjKGEsIFwibmV4dFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGwuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgcyA9IE1hdGgubWluKHQubGVuZ3RoLCBsLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpLFxuICAgICAgICAgIGkgPSAobiAqIHMgLSBuKSAvIDIgLSB1ICogbixcbiAgICAgICAgICByID0gZSA/IFwicmlnaHRcIiA6IFwibGVmdFwiO1xuICAgICAgICB0LmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgZS5zdHlsZVthLmlzSG9yaXpvbnRhbCgpID8gciA6IFwidG9wXCJdID0gYCR7aX1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBkLmZvckVhY2goKGUsIGkpID0+IHtcbiAgICAgIGlmIChcImZyYWN0aW9uXCIgPT09IGwudHlwZSAmJiAoZS5xdWVyeVNlbGVjdG9yQWxsKCgwLCBfY2xhc3Nlc1RvU2VsZWN0b3JNaW4uYykobC5jdXJyZW50Q2xhc3MpKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgICBlLnRleHRDb250ZW50ID0gbC5mb3JtYXRGcmFjdGlvbkN1cnJlbnQocyArIDEpO1xuICAgICAgfSksIGUucXVlcnlTZWxlY3RvckFsbCgoMCwgX2NsYXNzZXNUb1NlbGVjdG9yTWluLmMpKGwudG90YWxDbGFzcykpLmZvckVhY2goZSA9PiB7XG4gICAgICAgIGUudGV4dENvbnRlbnQgPSBsLmZvcm1hdEZyYWN0aW9uVG90YWwoZyk7XG4gICAgICB9KSksIFwicHJvZ3Jlc3NiYXJcIiA9PT0gbC50eXBlKSB7XG4gICAgICAgIGxldCB0O1xuICAgICAgICB0ID0gbC5wcm9ncmVzc2Jhck9wcG9zaXRlID8gYS5pc0hvcml6b250YWwoKSA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiIDogYS5pc0hvcml6b250YWwoKSA/IFwiaG9yaXpvbnRhbFwiIDogXCJ2ZXJ0aWNhbFwiO1xuICAgICAgICBjb25zdCBpID0gKHMgKyAxKSAvIGc7XG4gICAgICAgIGxldCBuID0gMSxcbiAgICAgICAgICByID0gMTtcbiAgICAgICAgXCJob3Jpem9udGFsXCIgPT09IHQgPyBuID0gaSA6IHIgPSBpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoKDAsIF9jbGFzc2VzVG9TZWxlY3Rvck1pbi5jKShsLnByb2dyZXNzYmFyRmlsbENsYXNzKSkuZm9yRWFjaChlID0+IHtcbiAgICAgICAgICBlLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKCR7bn0pIHNjYWxlWSgke3J9KWAsIGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7YS5wYXJhbXMuc3BlZWR9bXNgO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFwiY3VzdG9tXCIgPT09IGwudHlwZSAmJiBsLnJlbmRlckN1c3RvbSA/IChlLmlubmVySFRNTCA9IGwucmVuZGVyQ3VzdG9tKGEsIHMgKyAxLCBnKSwgMCA9PT0gaSAmJiB0KFwicGFnaW5hdGlvblJlbmRlclwiLCBlKSkgOiAoMCA9PT0gaSAmJiB0KFwicGFnaW5hdGlvblJlbmRlclwiLCBlKSwgdChcInBhZ2luYXRpb25VcGRhdGVcIiwgZSkpLCBhLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIGEuZW5hYmxlZCAmJiBlLmNsYXNzTGlzdFthLmlzTG9ja2VkID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKGwubG9ja0NsYXNzKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnKCkge1xuICAgIGNvbnN0IGUgPSBhLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChwKCkpIHJldHVybjtcbiAgICBjb25zdCBsID0gYS52aXJ0dWFsICYmIGEucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IGEudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogYS5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBzID0gYS5wYWdpbmF0aW9uLmVsO1xuICAgIHMgPSBvKHMpO1xuICAgIGxldCBpID0gXCJcIjtcbiAgICBpZiAoXCJidWxsZXRzXCIgPT09IGUudHlwZSkge1xuICAgICAgbGV0IHMgPSBhLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKGwgLyBhLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBhLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGEucGFyYW1zLmZyZWVNb2RlICYmIGEucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgcyA+IGwgJiYgKHMgPSBsKTtcbiAgICAgIGZvciAobGV0IGwgPSAwOyBsIDwgczsgbCArPSAxKSBlLnJlbmRlckJ1bGxldCA/IGkgKz0gZS5yZW5kZXJCdWxsZXQuY2FsbChhLCBsLCBlLmJ1bGxldENsYXNzKSA6IGkgKz0gYDwke2UuYnVsbGV0RWxlbWVudH0gJHthLmlzRWxlbWVudCA/ICdwYXJ0PVwiYnVsbGV0XCInIDogXCJcIn0gY2xhc3M9XCIke2UuYnVsbGV0Q2xhc3N9XCI+PC8ke2UuYnVsbGV0RWxlbWVudH0+YDtcbiAgICB9XG4gICAgXCJmcmFjdGlvblwiID09PSBlLnR5cGUgJiYgKGkgPSBlLnJlbmRlckZyYWN0aW9uID8gZS5yZW5kZXJGcmFjdGlvbi5jYWxsKGEsIGUuY3VycmVudENsYXNzLCBlLnRvdGFsQ2xhc3MpIDogYDxzcGFuIGNsYXNzPVwiJHtlLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+IC8gPHNwYW4gY2xhc3M9XCIke2UudG90YWxDbGFzc31cIj48L3NwYW4+YCksIFwicHJvZ3Jlc3NiYXJcIiA9PT0gZS50eXBlICYmIChpID0gZS5yZW5kZXJQcm9ncmVzc2JhciA/IGUucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChhLCBlLnByb2dyZXNzYmFyRmlsbENsYXNzKSA6IGA8c3BhbiBjbGFzcz1cIiR7ZS5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YCksIGEucGFnaW5hdGlvbi5idWxsZXRzID0gW10sIHMuZm9yRWFjaChsID0+IHtcbiAgICAgIFwiY3VzdG9tXCIgIT09IGUudHlwZSAmJiAobC5pbm5lckhUTUwgPSBpIHx8IFwiXCIpLCBcImJ1bGxldHNcIiA9PT0gZS50eXBlICYmIGEucGFnaW5hdGlvbi5idWxsZXRzLnB1c2goLi4ubC5xdWVyeVNlbGVjdG9yQWxsKCgwLCBfY2xhc3Nlc1RvU2VsZWN0b3JNaW4uYykoZS5idWxsZXRDbGFzcykpKTtcbiAgICB9KSwgXCJjdXN0b21cIiAhPT0gZS50eXBlICYmIHQoXCJwYWdpbmF0aW9uUmVuZGVyXCIsIHNbMF0pO1xuICB9XG4gIGZ1bmN0aW9uIG0oKSB7XG4gICAgYS5wYXJhbXMucGFnaW5hdGlvbiA9ICgwLCBfY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZE1pbi5jKShhLCBhLm9yaWdpbmFsUGFyYW1zLnBhZ2luYXRpb24sIGEucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiBcInN3aXBlci1wYWdpbmF0aW9uXCJcbiAgICB9KTtcbiAgICBjb25zdCBlID0gYS5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIWUuZWwpIHJldHVybjtcbiAgICBsZXQgbDtcbiAgICBcInN0cmluZ1wiID09IHR5cGVvZiBlLmVsICYmIGEuaXNFbGVtZW50ICYmIChsID0gYS5lbC5xdWVyeVNlbGVjdG9yKGUuZWwpKSwgbCB8fCBcInN0cmluZ1wiICE9IHR5cGVvZiBlLmVsIHx8IChsID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZS5lbCldKSwgbCB8fCAobCA9IGUuZWwpLCBsICYmIDAgIT09IGwubGVuZ3RoICYmIChhLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBlLmVsICYmIEFycmF5LmlzQXJyYXkobCkgJiYgbC5sZW5ndGggPiAxICYmIChsID0gWy4uLmEuZWwucXVlcnlTZWxlY3RvckFsbChlLmVsKV0sIGwubGVuZ3RoID4gMSAmJiAobCA9IGwuZmlsdGVyKGUgPT4gKDAsIF91dGlsc01pbi5hKShlLCBcIi5zd2lwZXJcIilbMF0gPT09IGEuZWwpWzBdKSksIEFycmF5LmlzQXJyYXkobCkgJiYgMSA9PT0gbC5sZW5ndGggJiYgKGwgPSBsWzBdKSwgT2JqZWN0LmFzc2lnbihhLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiBsXG4gICAgfSksIGwgPSBvKGwpLCBsLmZvckVhY2gobCA9PiB7XG4gICAgICBcImJ1bGxldHNcIiA9PT0gZS50eXBlICYmIGUuY2xpY2thYmxlICYmIGwuY2xhc3NMaXN0LmFkZChlLmNsaWNrYWJsZUNsYXNzKSwgbC5jbGFzc0xpc3QuYWRkKGUubW9kaWZpZXJDbGFzcyArIGUudHlwZSksIGwuY2xhc3NMaXN0LmFkZChhLmlzSG9yaXpvbnRhbCgpID8gZS5ob3Jpem9udGFsQ2xhc3MgOiBlLnZlcnRpY2FsQ2xhc3MpLCBcImJ1bGxldHNcIiA9PT0gZS50eXBlICYmIGUuZHluYW1pY0J1bGxldHMgJiYgKGwuY2xhc3NMaXN0LmFkZChgJHtlLm1vZGlmaWVyQ2xhc3N9JHtlLnR5cGV9LWR5bmFtaWNgKSwgciA9IDAsIGUuZHluYW1pY01haW5CdWxsZXRzIDwgMSAmJiAoZS5keW5hbWljTWFpbkJ1bGxldHMgPSAxKSksIFwicHJvZ3Jlc3NiYXJcIiA9PT0gZS50eXBlICYmIGUucHJvZ3Jlc3NiYXJPcHBvc2l0ZSAmJiBsLmNsYXNzTGlzdC5hZGQoZS5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpLCBlLmNsaWNrYWJsZSAmJiBsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkKSwgYS5lbmFibGVkIHx8IGwuY2xhc3NMaXN0LmFkZChlLmxvY2tDbGFzcyk7XG4gICAgfSkpO1xuICB9XG4gIGZ1bmN0aW9uIGIoKSB7XG4gICAgY29uc3QgZSA9IGEucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKHAoKSkgcmV0dXJuO1xuICAgIGxldCBsID0gYS5wYWdpbmF0aW9uLmVsO1xuICAgIGwgJiYgKGwgPSBvKGwpLCBsLmZvckVhY2gobCA9PiB7XG4gICAgICBsLmNsYXNzTGlzdC5yZW1vdmUoZS5oaWRkZW5DbGFzcyksIGwuY2xhc3NMaXN0LnJlbW92ZShlLm1vZGlmaWVyQ2xhc3MgKyBlLnR5cGUpLCBsLmNsYXNzTGlzdC5yZW1vdmUoYS5pc0hvcml6b250YWwoKSA/IGUuaG9yaXpvbnRhbENsYXNzIDogZS52ZXJ0aWNhbENsYXNzKSwgZS5jbGlja2FibGUgJiYgbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZCk7XG4gICAgfSkpLCBhLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBhLnBhZ2luYXRpb24uYnVsbGV0cy5mb3JFYWNoKGEgPT4gYS5jbGFzc0xpc3QucmVtb3ZlKC4uLmUuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoXCIgXCIpKSk7XG4gIH1cbiAgcyhcImNoYW5nZURpcmVjdGlvblwiLCAoKSA9PiB7XG4gICAgaWYgKCFhLnBhZ2luYXRpb24gfHwgIWEucGFnaW5hdGlvbi5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGUgPSBhLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGxldCB7XG4gICAgICBlbDogbFxuICAgIH0gPSBhLnBhZ2luYXRpb247XG4gICAgbCA9IG8obCksIGwuZm9yRWFjaChsID0+IHtcbiAgICAgIGwuY2xhc3NMaXN0LnJlbW92ZShlLmhvcml6b250YWxDbGFzcywgZS52ZXJ0aWNhbENsYXNzKSwgbC5jbGFzc0xpc3QuYWRkKGEuaXNIb3Jpem9udGFsKCkgPyBlLmhvcml6b250YWxDbGFzcyA6IGUudmVydGljYWxDbGFzcyk7XG4gICAgfSk7XG4gIH0pLCBzKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgITEgPT09IGEucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA/IGYoKSA6IChtKCksIGcoKSwgdSgpKTtcbiAgfSksIHMoXCJhY3RpdmVJbmRleENoYW5nZVwiLCAoKSA9PiB7XG4gICAgdm9pZCAwID09PSBhLnNuYXBJbmRleCAmJiB1KCk7XG4gIH0pLCBzKFwic25hcEluZGV4Q2hhbmdlXCIsICgpID0+IHtcbiAgICB1KCk7XG4gIH0pLCBzKFwic25hcEdyaWRMZW5ndGhDaGFuZ2VcIiwgKCkgPT4ge1xuICAgIGcoKSwgdSgpO1xuICB9KSwgcyhcImRlc3Ryb3lcIiwgKCkgPT4ge1xuICAgIGIoKTtcbiAgfSksIHMoXCJlbmFibGUgZGlzYWJsZVwiLCAoKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGVsOiBlXG4gICAgfSA9IGEucGFnaW5hdGlvbjtcbiAgICBlICYmIChlID0gbyhlKSwgZS5mb3JFYWNoKGUgPT4gZS5jbGFzc0xpc3RbYS5lbmFibGVkID8gXCJyZW1vdmVcIiA6IFwiYWRkXCJdKGEucGFyYW1zLnBhZ2luYXRpb24ubG9ja0NsYXNzKSkpO1xuICB9KSwgcyhcImxvY2sgdW5sb2NrXCIsICgpID0+IHtcbiAgICB1KCk7XG4gIH0pLCBzKFwiY2xpY2tcIiwgKGUsIGwpID0+IHtcbiAgICBjb25zdCBzID0gbC50YXJnZXQsXG4gICAgICBpID0gbyhhLnBhZ2luYXRpb24uZWwpO1xuICAgIGlmIChhLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIGEucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgaSAmJiBpLmxlbmd0aCA+IDAgJiYgIXMuY2xhc3NMaXN0LmNvbnRhaW5zKGEucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7XG4gICAgICBpZiAoYS5uYXZpZ2F0aW9uICYmIChhLm5hdmlnYXRpb24ubmV4dEVsICYmIHMgPT09IGEubmF2aWdhdGlvbi5uZXh0RWwgfHwgYS5uYXZpZ2F0aW9uLnByZXZFbCAmJiBzID09PSBhLm5hdmlnYXRpb24ucHJldkVsKSkgcmV0dXJuO1xuICAgICAgY29uc3QgZSA9IGlbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKGEucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgdCghMCA9PT0gZSA/IFwicGFnaW5hdGlvblNob3dcIiA6IFwicGFnaW5hdGlvbkhpZGVcIiksIGkuZm9yRWFjaChlID0+IGUuY2xhc3NMaXN0LnRvZ2dsZShhLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZiA9ICgpID0+IHtcbiAgICBhLmVsLmNsYXNzTGlzdC5hZGQoYS5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsOiBlXG4gICAgfSA9IGEucGFnaW5hdGlvbjtcbiAgICBlICYmIChlID0gbyhlKSwgZS5mb3JFYWNoKGUgPT4gZS5jbGFzc0xpc3QuYWRkKGEucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKSksIGIoKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihhLnBhZ2luYXRpb24sIHtcbiAgICBlbmFibGU6ICgpID0+IHtcbiAgICAgIGEuZWwuY2xhc3NMaXN0LnJlbW92ZShhLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICAgIGxldCB7XG4gICAgICAgIGVsOiBlXG4gICAgICB9ID0gYS5wYWdpbmF0aW9uO1xuICAgICAgZSAmJiAoZSA9IG8oZSksIGUuZm9yRWFjaChlID0+IGUuY2xhc3NMaXN0LnJlbW92ZShhLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSkpLCBtKCksIGcoKSwgdSgpO1xuICAgIH0sXG4gICAgZGlzYWJsZTogZixcbiAgICByZW5kZXI6IGcsXG4gICAgdXBkYXRlOiB1LFxuICAgIGluaXQ6IG0sXG4gICAgZGVzdHJveTogYlxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKZlkzSmxZWFJsUld4bGJXVnVkRWxtVG05MFJHVm1hVzVsWkUxcGJpSXNJbkpsY1hWcGNtVWlMQ0pmZFhScGJITk5hVzRpTENKUVlXZHBibUYwYVc5dUlpd2laU0lzSW5OM2FYQmxjaUlzSW1FaUxDSmxlSFJsYm1SUVlYSmhiWE1pTENKc0lpd2liMjRpTENKeklpd2laVzFwZENJc0luUWlMQ0pwSWl3aWJpSXNJbkJoWjJsdVlYUnBiMjRpTENKbGJDSXNJbUoxYkd4bGRFVnNaVzFsYm5RaUxDSmpiR2xqYTJGaWJHVWlMQ0pvYVdSbFQyNURiR2xqYXlJc0luSmxibVJsY2tKMWJHeGxkQ0lzSW5KbGJtUmxjbEJ5YjJkeVpYTnpZbUZ5SWl3aWNtVnVaR1Z5Um5KaFkzUnBiMjRpTENKeVpXNWtaWEpEZFhOMGIyMGlMQ0p3Y205bmNtVnpjMkpoY2s5d2NHOXphWFJsSWl3aWRIbHdaU0lzSW1SNWJtRnRhV05DZFd4c1pYUnpJaXdpWkhsdVlXMXBZMDFoYVc1Q2RXeHNaWFJ6SWl3aVptOXliV0YwUm5KaFkzUnBiMjVEZFhKeVpXNTBJaXdpWm05eWJXRjBSbkpoWTNScGIyNVViM1JoYkNJc0ltSjFiR3hsZEVOc1lYTnpJaXdpWW5Wc2JHVjBRV04wYVhabFEyeGhjM01pTENKdGIyUnBabWxsY2tOc1lYTnpJaXdpWTNWeWNtVnVkRU5zWVhOeklpd2lkRzkwWVd4RGJHRnpjeUlzSW1ocFpHUmxia05zWVhOeklpd2ljSEp2WjNKbGMzTmlZWEpHYVd4c1EyeGhjM01pTENKd2NtOW5jbVZ6YzJKaGNrOXdjRzl6YVhSbFEyeGhjM01pTENKamJHbGphMkZpYkdWRGJHRnpjeUlzSW14dlkydERiR0Z6Y3lJc0ltaHZjbWw2YjI1MFlXeERiR0Z6Y3lJc0luWmxjblJwWTJGc1EyeGhjM01pTENKd1lXZHBibUYwYVc5dVJHbHpZV0pzWldSRGJHRnpjeUlzSW1KMWJHeGxkSE1pTENKeUlpd2lieUlzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW1acGJIUmxjaUlzSW5BaUxDSndZWEpoYlhNaUxDSnNaVzVuZEdnaUxDSmpJaXdpWTJ4aGMzTk1hWE4wSWl3aVlXUmtJaXdpWkNJc0luUmhjbWRsZENJc0ltTnNiM05sYzNRaUxDSmpiR0Z6YzJWelZHOVRaV3hsWTNSdmNpSXNJbkJ5WlhabGJuUkVaV1poZFd4MElpd2laV3hsYldWdWRFbHVaR1Y0SWl3aWMyeHBaR1Z6VUdWeVIzSnZkWEFpTENKc2IyOXdJaXdpY21WaGJFbHVaR1Y0SWl3aVoyVjBVMnhwWkdWSmJtUmxlRUo1UkdGMFlTSXNJbk5zYVdSbGN5SXNJbXh2YjNCbFpGTnNhV1JsY3lJc0lteHZiM0JHYVhnaUxDSmthWEpsWTNScGIyNGlMQ0poWTNScGRtVlRiR2xrWlVsdVpHVjRJaXdpYzJ4cFpHVlVieUlzSW5Oc2FXUmxWRzlNYjI5d0lpd2lkU0lzSW5KMGJDSXNJblpwY25SMVlXd2lMQ0psYm1GaWJHVmtJaXdpWnlJc0lrMWhkR2dpTENKalpXbHNJaXdpYzI1aGNFZHlhV1FpTENKd2NtVjJhVzkxYzFKbFlXeEpibVJsZUNJc0ltWnNiMjl5SWl3aWMyNWhjRWx1WkdWNElpd2ljSEpsZG1sdmRYTlRibUZ3U1c1a1pYZ2lMQ0p3Y21WMmFXOTFjMGx1WkdWNElpd2lZV04wYVhabFNXNWtaWGdpTENKbGJHVnRaVzUwVDNWMFpYSlRhWHBsSWl3aWFYTkliM0pwZW05dWRHRnNJaXdpWm05eVJXRmphQ0lzSW5OMGVXeGxJaXdpYldGNElpd2liV2x1SWl3aWJXRndJaXdpYVc1amJIVmtaWE1pTENKemNHeHBkQ0lzSW1ac1lYUWlMQ0p5WlcxdmRtVWlMQ0pwYzBWc1pXMWxiblFpTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNJaXdpZEdWNGRFTnZiblJsYm5RaUxDSjBjbUZ1YzJadmNtMGlMQ0owY21GdWMybDBhVzl1UkhWeVlYUnBiMjRpTENKemNHVmxaQ0lzSW1sdWJtVnlTRlJOVENJc0luZGhkR05vVDNabGNtWnNiM2NpTENKcGMweHZZMnRsWkNJc0ltWnlaV1ZOYjJSbElpd2lZMkZzYkNJc0luQjFjMmdpTENKdElpd2lZM0psWVhSbFJXeGxiV1Z1ZEVsbVRtOTBSR1ZtYVc1bFpDSXNJbTl5YVdkcGJtRnNVR0Z5WVcxeklpd2ljWFZsY25sVFpXeGxZM1J2Y2lJc0ltUnZZM1Z0Wlc1MElpd2lkVzVwY1hWbFRtRjJSV3hsYldWdWRITWlMQ0psYkdWdFpXNTBVR0Z5Wlc1MGN5SXNJazlpYW1WamRDSXNJbUZ6YzJsbmJpSXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0ppSWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpSXNJbVlpTENKamIyNTBZV2x1Y3lJc0ltNWhkbWxuWVhScGIyNGlMQ0p1WlhoMFJXd2lMQ0p3Y21WMlJXd2lMQ0owYjJkbmJHVWlMQ0prYVhOaFlteGxJaXdpWlc1aFlteGxJaXdpY21WdVpHVnlJaXdpZFhCa1lYUmxJaXdpYVc1cGRDSXNJbVJsYzNSeWIza2lYU3dpYzI5MWNtTmxjeUk2V3lJd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJiblZzYkYwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJRWFZETEVsQlFVRkJMRFpDUVVGQkxFZEJRVUZETEU5QlFVRTdRVUZEVVN4SlFVRkJReXhUUVVGQkxFZEJRVUZFTEU5QlFVRTdRVUZITDBNc1UwRkJVMFVzVjBGQlYwTXNRMEZCUVR0RlFVTnNRanRKUVVGSlF5eE5RVUZCTEVWQlEwWkRMRU5CUVVFN1NVRkJUVU1zV1VGQlFTeEZRVU5PUXl4RFFVRkJPMGxCUVZsRExFVkJRVUVzUlVGRFdrTXNRMEZCUVR0SlFVRkZReXhKUVVGQkxFVkJRMFpETzBWQlFVRXNTVUZEUlZJc1EwRkJRVHRGUVVOS0xFMUJRVTFUTEVOQlFVRXNSMEZCVFR0RlFYRkRXaXhKUVVGSlF5eERRVUZCTzBWQmNFTktUaXhEUVVGQkxFTkJRV0U3U1VGRFdFOHNWVUZCUVN4RlFVRlpPMDFCUTFaRExFVkJRVUVzUlVGQlNUdE5RVU5LUXl4aFFVRkJMRVZCUVdVN1RVRkRaa01zVTBGQlFTeEhRVUZYTzAxQlExaERMRmRCUVVFc1IwRkJZVHROUVVOaVF5eFpRVUZCTEVWQlFXTTdUVUZEWkVNc2FVSkJRVUVzUlVGQmJVSTdUVUZEYmtKRExHTkJRVUVzUlVGQlowSTdUVUZEYUVKRExGbEJRVUVzUlVGQll6dE5RVU5rUXl4dFFrRkJRU3hIUVVGeFFqdE5RVU55UWtNc1NVRkJRU3hGUVVGTk8wMUJSVTVETEdOQlFVRXNSMEZCWjBJN1RVRkRhRUpETEd0Q1FVRkJMRVZCUVc5Q08wMUJRM0JDUXl4eFFrRkJRU3hGUVVGMVFuaENMRU5CUVVFc1NVRkJWVUVzUTBGQlFUdE5RVU5xUTNsQ0xHMUNRVUZCTEVWQlFYRkNla0lzUTBGQlFTeEpRVUZWUVN4RFFVRkJPMDFCUXk5Q01FSXNWMEZCUVN4RlFVRmhMRWRCUVVkcVFpeERRVUZCTzAxQlEyaENhMElzYVVKQlFVRXNSVUZCYlVJc1IwRkJSMnhDTEVOQlFVRTdUVUZEZEVKdFFpeGhRVUZCTEVWQlFXVXNSMEZCUjI1Q0xFTkJRVUU3VFVGRGJFSnZRaXhaUVVGQkxFVkJRV01zUjBGQlIzQkNMRU5CUVVFN1RVRkRha0p4UWl4VlFVRkJMRVZCUVZrc1IwRkJSM0pDTEVOQlFVRTdUVUZEWm5OQ0xGZEJRVUVzUlVGQllTeEhRVUZIZEVJc1EwRkJRVHROUVVOb1FuVkNMRzlDUVVGQkxFVkJRWE5DTEVkQlFVZDJRaXhEUVVGQk8wMUJRM3BDZDBJc2QwSkJRVUVzUlVGQk1FSXNSMEZCUjNoQ0xFTkJRVUU3VFVGRE4wSjVRaXhqUVVGQkxFVkJRV2RDTEVkQlFVZDZRaXhEUVVGQk8wMUJRMjVDTUVJc1UwRkJRU3hGUVVGWExFZEJRVWN4UWl4RFFVRkJPMDFCUTJReVFpeGxRVUZCTEVWQlFXbENMRWRCUVVjelFpeERRVUZCTzAxQlEzQkNORUlzWVVGQlFTeEZRVUZsTEVkQlFVYzFRaXhEUVVGQk8wMUJRMnhDTmtJc2RVSkJRVUVzUlVGQmVVSXNSMEZCUnpkQ0xFTkJRVUU3U1VGQlFUdEZRVUZCTEVsQlIyaERVQ3hEUVVGQkxFTkJRVTlUTEZWQlFVRXNSMEZCWVR0SlFVTnNRa01zUlVGQlFTeEZRVUZKTzBsQlEwb3lRaXhQUVVGQkxFVkJRVk03UlVGQlFUdEZRVWRZTEVsQlFVbERMRU5CUVVFc1IwRkJjVUk3UlVGRGVrSXNUVUZCVFVNc1EwRkJRU3hIUVVGdlFucERMRU5CUVVFc1MwRkJUekJETEV0QlFVRXNRMEZCVFVNc1QwRkJRU3hEUVVGUk0wTXNRMEZCUVN4SlFVRk5RU3hEUVVGQkxFZEJRVXNzUTBGQlEwRXNRMEZCUVN4SFFVRkxORU1zVFVGQlFTeERRVUZQTlVNc1EwRkJRU3hOUVVGUFFTeERRVUZCTzBWQlF6bEZMRk5CUVZNMlF5eEZRVUZCTzBsQlExQXNVVUZCVVRORExFTkJRVUVzUTBGQlR6UkRMRTFCUVVFc1EwRkJUMjVETEZWQlFVRXNRMEZCVjBNc1JVRkJRU3hMUVVGUFZpeERRVUZCTEVOQlFVOVRMRlZCUVVFc1EwRkJWME1zUlVGQlFTeEpRVUZOT0VJc1MwRkJRU3hEUVVGTlF5eFBRVUZCTEVOQlFWRjZReXhEUVVGQkxFTkJRVTlUTEZWQlFVRXNRMEZCVjBNc1JVRkJRU3hMUVVGMVF5eE5RVUZvUTFZc1EwRkJRU3hEUVVGUFV5eFZRVUZCTEVOQlFWZERMRVZCUVVFc1EwRkJSMjFETEUxQlF6bElPMFZCUVVFN1JVRkRRU3hUUVVGVFF5eEZRVUZsYUVRc1EwRkJRU3hGUVVGVlNTeERRVUZCTzBsQlEyaERPMDFCUVUxMVFpeHBRa0ZCUVN4RlFVTktja0k3U1VGQlFTeEpRVU5GU2l4RFFVRkJMRU5CUVU4MFF5eE5RVUZCTEVOQlFVOXVReXhWUVVGQk8wbEJRMkpZTEVOQlFVRXNTMEZEVEVFc1EwRkJRU3hIUVVGWFFTeERRVUZCTEVWQlFYbENMRmRCUVdKSkxFTkJRVUVzUjBGQmMwSXNZVUZCWVN4VlFVRjBReXgxUWtGRmJFSktMRU5CUVVFc1EwRkJVMmxFTEZOQlFVRXNRMEZCVlVNc1IwRkJRU3hEUVVGSkxFZEJRVWMxUXl4RFFVRkJMRWxCUVhGQ1JpeERRVUZCTEUxQlF5OURTaXhEUVVGQkxFZEJRVmRCTEVOQlFVRXNSVUZCZVVJc1YwRkJZa2tzUTBGQlFTeEhRVUZ6UWl4aFFVRmhMRlZCUVhSRExITkNRVVZzUWtvc1EwRkJRU3hEUVVGVGFVUXNVMEZCUVN4RFFVRlZReXhIUVVGQkxFTkJRVWtzUjBGQlJ6VkRMRU5CUVVFc1NVRkJjVUpHTEVOQlFVRXNTVUZCV1VFc1EwRkJRU3hKUVVkcVJUdEZRVUZCTzBWQlEwRXNVMEZCVXl0RExFVkJRV051UkN4RFFVRkJPMGxCUTNKQ0xFMUJRVTFKTEVOQlFVRXNSMEZCVjBvc1EwRkJRU3hEUVVGRmIwUXNUVUZCUVN4RFFVRlBReXhQUVVGQkxFTkJRVkVzU1VGQlFVTXNkVUpCUVVFc1JVRkJhMEp3UkN4RFFVRkJMRU5CUVU4MFF5eE5RVUZCTEVOQlFVOXVReXhWUVVGQkxFTkJRVmRsTEZkQlFVRTdTVUZETjBVc1MwRkJTM1JDTEVOQlFVRXNSVUZEU0R0SlFVVkdTaXhEUVVGQkxFTkJRVVYxUkN4alFVRkJPMGxCUTBZc1RVRkJUV3BFTEVOQlFVRXNSMEZCVVN4SlFVRkJhMFFzVjBGQlFTeEZRVUZoY0VRc1EwRkJRU3hKUVVGWlJpeERRVUZCTEVOQlFVODBReXhOUVVGQkxFTkJRVTlYTEdOQlFVRTdTVUZEY2tRc1NVRkJTWFpFTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlQxa3NTVUZCUVN4RlFVRk5PMDFCUTNSQ0xFbEJRVWw0UkN4RFFVRkJMRU5CUVU5NVJDeFRRVUZCTEV0QlFXTnlSQ3hEUVVGQkxFVkJRVTg3VFVGRGFFTXNUVUZCVFU0c1EwRkJRU3hIUVVGblFrVXNRMEZCUVN4RFFVRlBNRVFzYlVKQlFVRXNRMEZCYjBKMFJDeERRVUZCTzFGQlF6TkRSaXhEUVVGQkxFZEJRVzlDUml4RFFVRkJMRU5CUVU4d1JDeHRRa0ZCUVN4RFFVRnZRakZFTEVOQlFVRXNRMEZCVDNsRUxGTkJRVUU3VFVGRGVFUXpSQ3hEUVVGQkxFZEJRV2RDUlN4RFFVRkJMRU5CUVU4eVJDeE5RVUZCTEVOQlFVOWtMRTFCUVVFc1IwRkJVemRETEVOQlFVRXNRMEZCVHpSRUxGbEJRVUVzU1VGRGFFUTFSQ3hEUVVGQkxFTkJRVTgyUkN4UFFVRkJMRU5CUVZFN1VVRkRZa01zVTBGQlFTeEZRVUZYYUVVc1EwRkJRU3hIUVVGblFra3NRMEZCUVN4SFFVRnZRaXhUUVVGVE8xRkJRM2hFTmtRc1owSkJRVUVzUlVGQmEwSnFSU3hEUVVGQk8xRkJRMnhDYTBVc1QwRkJRU3hIUVVGVE8wMUJRVUVzU1VGSFltaEZMRU5CUVVFc1EwRkJUMmxGTEZkQlFVRXNRMEZCV1RkRUxFTkJRVUVzUTBGRGNrSTdTVUZCUVN4UFFVTkZTaXhEUVVGQkxFTkJRVTluUlN4UFFVRkJMRU5CUVZFMVJDeERRVUZCTEVOQlJXNUNPMFZCUVVFN1JVRkRRU3hUUVVGVE9FUXNSVUZCUVR0SlFVVlFMRTFCUVUxd1JTeERRVUZCTEVkQlFVMUZMRU5CUVVFc1EwRkJUMjFGTEVkQlFVRTdUVUZEWW1wRkxFTkJRVUVzUjBGQlUwWXNRMEZCUVN4RFFVRlBORU1zVFVGQlFTeERRVUZQYmtNc1ZVRkJRVHRKUVVNM1FpeEpRVUZKYTBNc1EwRkJRU3hKUVVGM1FqdEpRVU0xUWl4SlFVZEpka01zUTBGQlFUdE5RVU5CUnl4RFFVRkJPMDFCU2tFd1F5eERRVUZCTEVkQlFVdHFSQ3hEUVVGQkxFTkJRVTlUTEZWQlFVRXNRMEZCVjBNc1JVRkJRVHRKUVVNelFuVkRMRU5CUVVFc1IwRkJTMVlzUTBGQlFTeERRVUZyUWxVc1EwRkJRVHRKUVVsMlFpeE5RVUZOYVVJc1EwRkJRU3hIUVVGbGJFVXNRMEZCUVN4RFFVRlBiMFVzVDBGQlFTeEpRVUZYY0VVc1EwRkJRU3hEUVVGUE5FTXNUVUZCUVN4RFFVRlBkMElzVDBGQlFTeERRVUZSUXl4UFFVRkJMRWRCUVZWeVJTeERRVUZCTEVOQlFVOXZSU3hQUVVGQkxFTkJRVkZVTEUxQlFVRXNRMEZCVDJRc1RVRkJRU3hIUVVGVE4wTXNRMEZCUVN4RFFVRlBNa1FzVFVGQlFTeERRVUZQWkN4TlFVRkJPMDFCUXpsSGVVSXNRMEZCUVN4SFFVRlJkRVVzUTBGQlFTeERRVUZQTkVNc1RVRkJRU3hEUVVGUFdTeEpRVUZCTEVkQlFVOWxMRWxCUVVFc1EwRkJTME1zU1VGQlFTeERRVUZMVGl4RFFVRkJMRWRCUVdWc1JTeERRVUZCTEVOQlFVODBReXhOUVVGQkxFTkJRVTlYTEdOQlFVRXNTVUZCYTBKMlJDeERRVUZCTEVOQlFVOTVSU3hSUVVGQkxFTkJRVk0xUWl4TlFVRkJPMGxCV1RWSExFbEJXRWszUXl4RFFVRkJMRU5CUVU4MFF5eE5RVUZCTEVOQlFVOVpMRWxCUVVFc1NVRkRhRUpxUkN4RFFVRkJMRWRCUVdkQ1VDeERRVUZCTEVOQlFVOHdSU3hwUWtGQlFTeEpRVUZ4UWl4SFFVTTFRM1JGTEVOQlFVRXNSMEZCVlVvc1EwRkJRU3hEUVVGUE5FTXNUVUZCUVN4RFFVRlBWeXhqUVVGQkxFZEJRV2xDTEVsQlFVbG5RaXhKUVVGQkxFTkJRVXRKTEV0QlFVRXNRMEZCVFRORkxFTkJRVUVzUTBGQlQzbEVMRk5CUVVFc1IwRkJXWHBFTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlQxY3NZMEZCUVN4SlFVRnJRblpFTEVOQlFVRXNRMEZCVDNsRUxGTkJRVUVzVTBGRE4wVXNUVUZCY2tKNlJDeERRVUZCTEVOQlFVODBSU3hUUVVGQkxFbEJRM1pDZUVVc1EwRkJRU3hIUVVGVlNpeERRVUZCTEVOQlFVODBSU3hUUVVGQkxFVkJRMnBDY2tVc1EwRkJRU3hIUVVGblFsQXNRMEZCUVN4RFFVRlBOa1VzYVVKQlFVRXNTMEZGZGtKMFJTeERRVUZCTEVkQlFXZENVQ3hEUVVGQkxFTkJRVTg0UlN4aFFVRkJMRWxCUVdsQ0xFZEJRM2hETVVVc1EwRkJRU3hIUVVGVlNpeERRVUZCTEVOQlFVOHJSU3hYUVVGQkxFbEJRV1VzU1VGSFpDeGpRVUZvUWpkRkxFTkJRVUVzUTBGQlQybENMRWxCUVVFc1NVRkJjMEp1UWl4RFFVRkJMRU5CUVU5VExGVkJRVUVzUTBGQlZ6UkNMRTlCUVVFc1NVRkJWM0pETEVOQlFVRXNRMEZCVDFNc1ZVRkJRU3hEUVVGWE5FSXNUMEZCUVN4RFFVRlJVU3hOUVVGQkxFZEJRVk1zUjBGQlJ6dE5RVU5zUnl4TlFVRk5ka01zUTBGQlFTeEhRVUZWVGl4RFFVRkJMRU5CUVU5VExGVkJRVUVzUTBGQlZ6UkNMRTlCUVVFN1RVRkRiRU1zU1VGQlNVVXNRMEZCUVN4RlFVTkJTU3hEUVVGQkxFVkJRMEYxUWl4RFFVRkJPMDFCYzBKS0xFbEJja0pKYUVVc1EwRkJRU3hEUVVGUGEwSXNZMEZCUVN4TFFVTlVXaXhEUVVGQkxFZEJRV0VzU1VGQlFYZEZMRmRCUVVFc1JVRkJhVUl4UlN4RFFVRkJMRU5CUVZFc1NVRkJTVTRzUTBGQlFTeERRVUZQYVVZc1dVRkJRU3hMUVVGcFFpeFZRVUZWTEZkQlFWVXNTVUZEZEVab1F5eERRVUZCTEVOQlFVZHBReXhQUVVGQkxFTkJRVkZ3Uml4RFFVRkJPMUZCUTFSQkxFTkJRVUVzUTBGQlRYRkdMRXRCUVVFc1EwRkJUVzVHTEVOQlFVRXNRMEZCVDJsR0xGbEJRVUVzUzBGQmFVSXNWVUZCVlN4WlFVRmxla1VzUTBGQlFTeEpRVUZqVGl4RFFVRkJMRU5CUVU5dFFpeHJRa0ZCUVN4SFFVRnhRaXhMUVVFM1F5eEpRVUZ0UkR0TlFVRkJMRWxCUlROSGJrSXNRMEZCUVN4RFFVRlBiVUlzYTBKQlFVRXNSMEZCY1VJc1ZVRkJkVUlzVFVGQmJFSmtMRU5CUVVFc1MwRkRia01yUWl4RFFVRkJMRWxCUVhOQ2JFTXNRMEZCUVN4SlFVRlhSeXhEUVVGQkxFbEJRV2xDTEVsQlF6bERLMElzUTBGQlFTeEhRVUZ4UW5CRExFTkJRVUVzUTBGQlQyMUNMR3RDUVVGQkxFZEJRWEZDTEVsQlEyNUVhVUlzUTBGQlFTeEhRVUZ4UW5CRExFTkJRVUVzUTBGQlQyMUNMR3RDUVVGQkxFZEJRWEZDTEVsQlEzaERhVUlzUTBGQlFTeEhRVUZ4UWl4TlFVTTVRa0VzUTBGQlFTeEhRVUZ4UWl4TFFVZDZRa01zUTBGQlFTeEhRVUZoWjBNc1NVRkJRU3hEUVVGTFlTeEhRVUZCTEVOQlFVbG9SaXhEUVVGQkxFZEJRVlZyUXl4RFFVRkJMRVZCUVc5Q0xFbEJRM0JFU3l4RFFVRkJMRWRCUVZsS0xFTkJRVUVzU1VGQlkyZERMRWxCUVVFc1EwRkJTMk1zUjBGQlFTeERRVUZKTDBVc1EwRkJRU3hEUVVGUmRVTXNUVUZCUVN4RlFVRlJNME1zUTBGQlFTeERRVUZQYlVJc2EwSkJRVUVzU1VGQmMwSXNTVUZEYUVZMlF5eERRVUZCTEVsQlFWbDJRaXhEUVVGQkxFZEJRVmxLTEVOQlFVRXNTVUZCWXl4SlFVVjRRMnBETEVOQlFVRXNRMEZCVVRSRkxFOUJRVUVzUTBGQlVYQkdMRU5CUVVFN1VVRkRaQ3hOUVVGTlJTeERRVUZCTEVkQlFXdENMRWxCUVVrc1EwRkJReXhKUVVGSkxGTkJRVk1zWTBGQll5eFRRVUZUTEdOQlFXTXNVMEZCVTNOR0xFZEJRVUVzUTBGQlNYaEdMRU5CUVVFc1NVRkJWU3hIUVVGSFNTeERRVUZCTEVOQlFVOTFRaXhwUWtGQlFTeEhRVUZ2UWpOQ0xFTkJRVUVzUzBGQlYzZEdMRWRCUVVFc1EwRkJTWGhHTEVOQlFVRXNTVUZCYTBJc2JVSkJRVTVCTEVOQlFVRXNTVUZCYTBKQkxFTkJRVUVzUTBGQlJYbEdMRkZCUVVFc1EwRkJVeXhQUVVGUGVrWXNRMEZCUVN4RFFVRkZNRVlzUzBGQlFTeERRVUZOTEU5QlFVOHhSaXhEUVVGQkxFVkJRVWN5Uml4SlFVRkJPMUZCUTNKT00wWXNRMEZCUVN4RFFVRlRhVVFzVTBGQlFTeERRVUZWTWtNc1RVRkJRU3hKUVVGVk1VWXNRMEZCUVN4RFFVRm5RanROUVVGQkxFbEJSVE5EYVVRc1EwRkJRU3hEUVVGSFNpeE5RVUZCTEVkQlFWTXNSMEZEWkhaRExFTkJRVUVzUTBGQlVUUkZMRTlCUVVFc1EwRkJVWEJHTEVOQlFVRTdVVUZEWkN4TlFVRk5VU3hEUVVGQkxFZEJRV01zU1VGQlFXZEVMRmRCUVVFc1JVRkJZWGhFTEVOQlFVRTdVVUZETjBKUkxFTkJRVUVzUzBGQlowSkdMRU5CUVVFc1IwRkRiRUpPTEVOQlFVRXNRMEZCVDJsRUxGTkJRVUVzUTBGQlZVTXNSMEZCUVN4SlFVRlBPVU1zUTBGQlFTeERRVUZQZFVJc2FVSkJRVUVzUTBGQmEwSXJSQ3hMUVVGQkxFTkJRVTBzVVVGRE9VTjRSaXhEUVVGQkxFTkJRVTh5Uml4VFFVRkJMRWxCUTJoQ04wWXNRMEZCUVN4RFFVRlBPRVlzV1VGQlFTeERRVUZoTEZGQlFWRXNWMEZGTVVJeFJpeERRVUZCTEVOQlFVOXJRaXhqUVVGQkxFdEJRMHhrTEVOQlFVRXNTVUZCWldsRExFTkJRVUVzU1VGQlkycERMRU5CUVVFc1NVRkJaWEZETEVOQlFVRXNTVUZET1VNM1F5eERRVUZCTEVOQlFVOXBSQ3hUUVVGQkxFTkJRVlZETEVkQlFVRXNTVUZCVHl4SFFVRkhPVU1zUTBGQlFTeERRVUZQZFVJc2FVSkJRVUVzVVVGQmVVSXJSQ3hMUVVGQkxFTkJRVTBzVDBGRkwwUnNSaXhEUVVGQkxFdEJRV2RDYVVNc1EwRkJRU3hKUVVOc1FrOHNRMEZCUVN4RFFVRmxhRVFzUTBGQlFTeEZRVUZSTEZOQlJYSkNVU3hEUVVGQkxFdEJRV2RDY1VNc1EwRkJRU3hKUVVOc1FrY3NRMEZCUVN4RFFVRmxhRVFzUTBGQlFTeEZRVUZSTEZGQlJUTkNPMDFCUVVFc1VVRkZSenRSUVVOTUxFMUJRVTFCTEVOQlFVRXNSMEZCVTFFc1EwRkJRU3hEUVVGUlJpeERRVUZCTzFGQlUzWkNMRWxCVWtsT0xFTkJRVUVzU1VGRFJrRXNRMEZCUVN4RFFVRlBhVVFzVTBGQlFTeERRVUZWUXl4SFFVRkJMRWxCUVU4NVF5eERRVUZCTEVOQlFVOTFRaXhwUWtGQlFTeERRVUZyUWl0RUxFdEJRVUVzUTBGQlRTeFBRVVZ5UkhoR0xFTkJRVUVzUTBGQlR6SkdMRk5CUVVFc1NVRkRWSEpHTEVOQlFVRXNRMEZCVVRSRkxFOUJRVUVzUTBGQlVTeERRVUZEY0VZc1EwRkJRU3hGUVVGVlJTeERRVUZCTzFWQlEzcENSaXhEUVVGQkxFTkJRVk00Uml4WlFVRkJMRU5CUVdFc1VVRkJVVFZHTEVOQlFVRXNTMEZCWjBKSkxFTkJRVUVzUjBGQlZTeHJRa0ZCYTBJc1UwRkJVenRSUVVGQkxFbEJSMjVHUml4RFFVRkJMRU5CUVU5clFpeGpRVUZCTEVWQlFXZENPMVZCUTNwQ0xFMUJRVTEwUWl4RFFVRkJMRWRCUVhWQ1VTeERRVUZCTEVOQlFWRnBReXhEUVVGQk8xbEJReTlDZGtNc1EwRkJRU3hIUVVGelFrMHNRMEZCUVN4RFFVRlJjVU1zUTBGQlFUdFZRVU53UXl4TFFVRkxMRWxCUVVrM1F5eERRVUZCTEVkQlFVbDVReXhEUVVGQkxFVkJRVmw2UXl4RFFVRkJMRWxCUVVzMlF5eERRVUZCTEVWQlFWYzNReXhEUVVGQkxFbEJRVXNzUjBGRGVFTlJMRU5CUVVFc1EwRkJVVklzUTBGQlFTeExRVU5XVVN4RFFVRkJMRU5CUVZGU0xFTkJRVUVzUlVGQlIybEVMRk5CUVVFc1EwRkJWVU1zUjBGQlFTeEpRVUZQTEVkQlFVYzVReXhEUVVGQkxFTkJRVTkxUWl4cFFrRkJRU3hSUVVGNVFpdEVMRXRCUVVFc1EwRkJUVHRWUVVkNlJURkRMRU5CUVVFc1EwRkJaV2hFTEVOQlFVRXNSVUZCYzBJc1UwRkRja05uUkN4RFFVRkJMRU5CUVdVNVF5eERRVUZCTEVWQlFYRkNMRTlCUTNSRE8xRkJRVUU3VFVGRFJqdE5RVU5CTEVsQlFVbEZMRU5CUVVFc1EwRkJUMnRDTEdOQlFVRXNSVUZCWjBJN1VVRkRla0lzVFVGQlRXaENMRU5CUVVFc1IwRkJkVUp0UlN4SlFVRkJMRU5CUVV0akxFZEJRVUVzUTBGQlNTOUZMRU5CUVVFc1EwRkJVWFZETEUxQlFVRXNSVUZCVVRORExFTkJRVUVzUTBGQlQyMUNMR3RDUVVGQkxFZEJRWEZDTzFWQlF6VkZaQ3hEUVVGQkxFbEJRV2xDUXl4RFFVRkJMRWRCUVdGS0xFTkJRVUVzUjBGQmRVSkpMRU5CUVVFc1NVRkJZeXhKUVVGSk1FUXNRMEZCUVN4SFFVRlhNVVFzUTBGQlFUdFZRVU5zUmpoQ0xFTkJRVUVzUjBGQllYaERMRU5CUVVFc1IwRkJUU3hWUVVGVk8xRkJRMjVEVVN4RFFVRkJMRU5CUVZFMFJTeFBRVUZCTEVOQlFWRndSaXhEUVVGQk8xVkJRMlJCTEVOQlFVRXNRMEZCVDNGR0xFdEJRVUVzUTBGQlRXNUdMRU5CUVVFc1EwRkJUMmxHTEZsQlFVRXNTMEZCYVVJelF5eERRVUZCTEVkQlFXRXNVMEZCVXl4SFFVRkhMMElzUTBGQlFTeEpRVUZwUWp0UlFVRkJMRVZCUlc1R08wMUJRVUU3U1VGRFJqdEpRVU5CTUVNc1EwRkJRU3hEUVVGSGFVTXNUMEZCUVN4RFFVRlJMRU5CUVVOd1JpeERRVUZCTEVWQlFVOVRMRU5CUVVFN1RVRlRha0lzU1VGU2IwSXNaVUZCYUVKTUxFTkJRVUVzUTBGQlQybENMRWxCUVVFc1MwRkRWSEpDTEVOQlFVRXNRMEZCVFN0R0xHZENRVUZCTEVOQlFXbENMRWxCUVVGNlF5eDFRa0ZCUVN4RlFVRnJRbXhFTEVOQlFVRXNRMEZCVDNsQ0xGbEJRVUVzUjBGQlpYVkVMRTlCUVVFc1EwRkJVWEJHTEVOQlFVRTdVVUZEY2tWQkxFTkJRVUVzUTBGQlYyZEhMRmRCUVVFc1IwRkJZelZHTEVOQlFVRXNRMEZCVDI5Q0xIRkNRVUZCTEVOQlFYTkNiRUlzUTBGQlFTeEhRVUZWTEVWQlFVVTdUVUZCUVN4SlFVVndSVTRzUTBGQlFTeERRVUZOSzBZc1owSkJRVUVzUTBGQmFVSXNTVUZCUVhwRExIVkNRVUZCTEVWQlFXdENiRVFzUTBGQlFTeERRVUZQTUVJc1ZVRkJRU3hIUVVGaGMwUXNUMEZCUVN4RFFVRlJjRVlzUTBGQlFUdFJRVU51UlVFc1EwRkJRU3hEUVVGUlowY3NWMEZCUVN4SFFVRmpOVVlzUTBGQlFTeERRVUZQY1VJc2JVSkJRVUVzUTBGQmIwSXJReXhEUVVGQkxFTkJRVTA3VFVGQlFTeExRVWQyUXl4clFrRkJhRUp3UlN4RFFVRkJMRU5CUVU5cFFpeEpRVUZCTEVWQlFYZENPMUZCUTJwRExFbEJRVWxpTEVOQlFVRTdVVUZGUmtFc1EwRkJRU3hIUVVSRlNpeERRVUZCTEVOQlFVOW5RaXh0UWtGQlFTeEhRVU5qYkVJc1EwRkJRU3hEUVVGUGFVWXNXVUZCUVN4TFFVRnBRaXhoUVVGaExHVkJSWEpEYWtZc1EwRkJRU3hEUVVGUGFVWXNXVUZCUVN4TFFVRnBRaXhsUVVGbE8xRkJSV2hGTEUxQlFVMHhSU3hEUVVGQkxFbEJRVk5JTEVOQlFVRXNSMEZCVlN4TFFVRkxhMFVzUTBGQlFUdFJRVU01UWl4SlFVRkpPVVFzUTBGQlFTeEhRVUZUTzFWQlExUTRRaXhEUVVGQkxFZEJRVk03VVVGRFowSXNhVUpCUVhwQ2FFTXNRMEZCUVN4SFFVTkdSU3hEUVVGQkxFZEJRVk5FTEVOQlFVRXNSMEZGVkN0Q0xFTkJRVUVzUjBGQlV5OUNMRU5CUVVFc1JVRkZXRlFzUTBGQlFTeERRVUZOSzBZc1owSkJRVUVzUTBGQmFVSXNTVUZCUVhwRExIVkNRVUZCTEVWQlFXdENiRVFzUTBGQlFTeERRVUZQTkVJc2IwSkJRVUVzUjBGQmRVSnZSQ3hQUVVGQkxFTkJRVkZ3Uml4RFFVRkJPMVZCUXpkRlFTeERRVUZCTEVOQlFWZHhSaXhMUVVGQkxFTkJRVTFaTEZOQlFVRXNSMEZCV1N3MlFrRkJOa0oyUml4RFFVRkJMRmxCUVd0Q09FSXNRMEZCUVN4TFFVTTFSWGhETEVOQlFVRXNRMEZCVjNGR0xFdEJRVUVzUTBGQlRXRXNhMEpCUVVFc1IwRkJjVUlzUjBGQlIyaEhMRU5CUVVFc1EwRkJUelJETEUxQlFVRXNRMEZCVDNGRUxFdEJRVUVzU1VGQlV6dFJRVUZCTEVWQlJYQkZPMDFCUVVFN1RVRkRiMElzWVVGQmFFSXZSaXhEUVVGQkxFTkJRVTlwUWl4SlFVRkJMRWxCUVhGQ2FrSXNRMEZCUVN4RFFVRlBaU3haUVVGQkxFbEJRM0pEYmtJc1EwRkJRU3hEUVVGTmIwY3NVMEZCUVN4SFFVRlphRWNzUTBGQlFTeERRVUZQWlN4WlFVRkJMRU5CUVdGcVFpeERRVUZCTEVWQlFWRkpMRU5CUVVFc1IwRkJWU3hIUVVGSGEwVXNRMEZCUVN4SFFVTjRReXhOUVVGbUwwUXNRMEZCUVN4SlFVRnJRa1FzUTBGQlFTeERRVUZMTEc5Q1FVRnZRbElzUTBGQlFTeE5RVVUxUWl4TlFVRm1VeXhEUVVGQkxFbEJRV3RDUkN4RFFVRkJMRU5CUVVzc2IwSkJRVzlDVWl4RFFVRkJMRWRCUXk5RFVTeERRVUZCTEVOQlFVc3NiMEpCUVc5Q1VpeERRVUZCTEVsQlJYWkNSU3hEUVVGQkxFTkJRVTgwUXl4TlFVRkJMRU5CUVU5MVJDeGhRVUZCTEVsQlFXbENia2NzUTBGQlFTeERRVUZQY1VVc1QwRkJRU3hKUVVONFEzWkZMRU5CUVVFc1EwRkJUV2xFTEZOQlFVRXNRMEZCVlM5RExFTkJRVUVzUTBGQlQyOUhMRkZCUVVFc1IwRkJWeXhSUVVGUkxGVkJRVlZzUnl4RFFVRkJMRU5CUVU4clFpeFRRVUZCTEVOQlF6ZEVPMGxCUVVFc1JVRkZTanRGUVVGQk8wVkJRMEVzVTBGQlUzRkRMRVZCUVVFN1NVRkZVQ3hOUVVGTmVFVXNRMEZCUVN4SFFVRlRSU3hEUVVGQkxFTkJRVTgwUXl4TlFVRkJMRU5CUVU5dVF5eFZRVUZCTzBsQlF6ZENMRWxCUVVsclF5eERRVUZCTEVsQlFYZENPMGxCUXpWQ0xFMUJRVTE2UXl4RFFVRkJMRWRCUVdWR0xFTkJRVUVzUTBGQlQyOUZMRTlCUVVFc1NVRkJWM0JGTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlQzZENMRTlCUVVFc1EwRkJVVU1zVDBGQlFTeEhRVUZWY2tVc1EwRkJRU3hEUVVGUGIwVXNUMEZCUVN4RFFVRlJWQ3hOUVVGQkxFTkJRVTlrTEUxQlFVRXNSMEZCVXpkRExFTkJRVUVzUTBGQlR6SkVMRTFCUVVFc1EwRkJUMlFzVFVGQlFUdEpRVU53U0N4SlFVRkpla01zUTBGQlFTeEhRVUZMU2l4RFFVRkJMRU5CUVU5VExGVkJRVUVzUTBGQlYwTXNSVUZCUVR0SlFVTXpRazRzUTBGQlFTeEhRVUZMYlVNc1EwRkJRU3hEUVVGclFtNURMRU5CUVVFN1NVRkRka0lzU1VGQlNVY3NRMEZCUVN4SFFVRnBRanRKUVVOeVFpeEpRVUZ2UWl4alFVRm9RbFFzUTBGQlFTeERRVUZQY1VJc1NVRkJRU3hGUVVGdlFqdE5RVU0zUWl4SlFVRkpaaXhEUVVGQkxFZEJRV3RDU2l4RFFVRkJMRU5CUVU4MFF5eE5RVUZCTEVOQlFVOVpMRWxCUVVFc1IwRkJUMlVzU1VGQlFTeERRVUZMUXl4SlFVRkJMRU5CUVV0MFJTeERRVUZCTEVkQlFXVkdMRU5CUVVFc1EwRkJUelJETEUxQlFVRXNRMEZCVDFjc1kwRkJRU3hKUVVGclFuWkVMRU5CUVVFc1EwRkJUM2xGTEZGQlFVRXNRMEZCVXpWQ0xFMUJRVUU3VFVGRGFFZzNReXhEUVVGQkxFTkJRVTgwUXl4TlFVRkJMRU5CUVU5NVJDeFJRVUZCTEVsQlFWbHlSeXhEUVVGQkxFTkJRVTgwUXl4TlFVRkJMRU5CUVU5NVJDeFJRVUZCTEVOQlFWTm9ReXhQUVVGQkxFbEJRVmRxUlN4RFFVRkJMRWRCUVd0Q1JpeERRVUZCTEV0QlEyaEdSU3hEUVVGQkxFZEJRV3RDUml4RFFVRkJPMDFCUlhCQ0xFdEJRVXNzU1VGQlNVRXNRMEZCUVN4SFFVRkpMRWRCUVVkQkxFTkJRVUVzUjBGQlNVVXNRMEZCUVN4RlFVRnBRa1lzUTBGQlFTeEpRVUZMTEVkQlEzQkRTaXhEUVVGQkxFTkJRVTluUWl4WlFVRkJMRWRCUTFSUUxFTkJRVUVzU1VGQmEwSlVMRU5CUVVFc1EwRkJUMmRDTEZsQlFVRXNRMEZCWVhkR0xFbEJRVUVzUTBGQlMzUkhMRU5CUVVFc1JVRkJVVVVzUTBGQlFTeEZRVUZIU2l4RFFVRkJMRU5CUVU4d1FpeFhRVUZCTEVsQlJ6ZEVha0lzUTBGQlFTeEpRVUZyUWl4SlFVRkpWQ3hEUVVGQkxFTkJRVTloTEdGQlFVRXNTVUZCYVVKWUxFTkJRVUVzUTBGQlR6SkdMRk5CUVVFc1IwRkJXU3hyUWtGQmEwSXNZVUZCWVRkR0xFTkJRVUVzUTBGQlR6QkNMRmRCUVVFc1QwRkJhMEl4UWl4RFFVRkJMRU5CUVU5aExHRkJRVUVzUjBGSGRFazdTVUZCUVR0SlFVTnZRaXhsUVVGb1FtSXNRMEZCUVN4RFFVRlBjVUlzU1VGQlFTeExRVVZRV2l4RFFVRkJMRWRCUkVWVUxFTkJRVUVzUTBGQlQydENMR05CUVVFc1IwRkRVV3hDTEVOQlFVRXNRMEZCVDJ0Q0xHTkJRVUVzUTBGQlpYTkdMRWxCUVVFc1EwRkJTM1JITEVOQlFVRXNSVUZCVVVZc1EwRkJRU3hEUVVGUE5rSXNXVUZCUVN4RlFVRmpOMElzUTBGQlFTeERRVUZQT0VJc1ZVRkJRU3hKUVVVdlJDeG5Ra0ZCWjBJNVFpeERRVUZCTEVOQlFVODJRaXhaUVVGQkxEUkNRVUZyUkRkQ0xFTkJRVUVzUTBGQlR6aENMRlZCUVVFc1kwRkhha1lzYTBKQlFXaENPVUlzUTBGQlFTeERRVUZQY1VJc1NVRkJRU3hMUVVWUVdpeERRVUZCTEVkQlJFVlVMRU5CUVVFc1EwRkJUMmxDTEdsQ1FVRkJMRWRCUTFGcVFpeERRVUZCTEVOQlFVOXBRaXhwUWtGQlFTeERRVUZyUW5WR0xFbEJRVUVzUTBGQlMzUkhMRU5CUVVFc1JVRkJVVVlzUTBGQlFTeERRVUZQWjBNc2IwSkJRVUVzU1VGRk4wTXNaMEpCUVdkQ2FFTXNRMEZCUVN4RFFVRlBaME1zYjBKQlFVRXNZMEZITlVNNVFpeERRVUZCTEVOQlFVOVRMRlZCUVVFc1EwRkJWelJDTEU5QlFVRXNSMEZCVlN4SlFVTTFRbXBETEVOQlFVRXNRMEZCUnpoRkxFOUJRVUVzUTBGQlVXaEdMRU5CUVVFN1RVRkRWeXhoUVVGb1Frb3NRMEZCUVN4RFFVRlBjVUlzU1VGQlFTeExRVU5VYWtJc1EwRkJRU3hEUVVGTlowY3NVMEZCUVN4SFFVRlpNMFlzUTBGQlFTeEpRVUZyUWl4TFFVVnNRaXhqUVVGb1FsUXNRMEZCUVN4RFFVRlBjVUlzU1VGQlFTeEpRVU5VYmtJc1EwRkJRU3hEUVVGUFV5eFZRVUZCTEVOQlFWYzBRaXhQUVVGQkxFTkJRVkZyUlN4SlFVRkJMRWxCUVZGeVJ5eERRVUZCTEVOQlFVMHlSaXhuUWtGQlFTeERRVUZwUWl4SlFVRkJla01zZFVKQlFVRXNSVUZCYTBKMFJDeERRVUZCTEVOQlFVOHdRaXhYUVVGQkxFZEJRM0JHTzBsQlFVRXNTVUZGYTBJc1lVRkJhRUl4UWl4RFFVRkJMRU5CUVU5eFFpeEpRVUZCTEVsQlExUmlMRU5CUVVFc1EwRkJTeXh2UWtGQmIwSkdMRU5CUVVFc1EwRkJSeXhIUVVWb1F6dEZRVUZCTzBWQlEwRXNVMEZCVTI5SExFVkJRVUU3U1VGRFVIaEhMRU5CUVVFc1EwRkJUelJETEUxQlFVRXNRMEZCVDI1RExGVkJRVUVzUjBGQllTeEpRVUZCWjBjc0swSkJRVUVzUlVGQk1FSjZSeXhEUVVGQkxFVkJRVkZCTEVOQlFVRXNRMEZCVHpCSExHTkJRVUVzUTBGQlpXcEhMRlZCUVVFc1JVRkJXVlFzUTBGQlFTeERRVUZQTkVNc1RVRkJRU3hEUVVGUGJrTXNWVUZCUVN4RlFVRlpPMDFCUTNaSVF5eEZRVUZCTEVWQlFVazdTVUZCUVR0SlFVVk9MRTFCUVUxYUxFTkJRVUVzUjBGQlUwVXNRMEZCUVN4RFFVRlBORU1zVFVGQlFTeERRVUZQYmtNc1ZVRkJRVHRKUVVNM1FpeExRVUZMV0N4RFFVRkJMRU5CUVU5WkxFVkJRVUVzUlVGQlNUdEpRVU5vUWl4SlFVRkpVaXhEUVVGQk8wbEJRM0ZDTEcxQ1FVRmtTaXhEUVVGQkxFTkJRVTlaTEVWQlFVRXNTVUZCYlVKV0xFTkJRVUVzUTBGQlR6SkdMRk5CUVVFc1MwRkRNVU42Uml4RFFVRkJMRWRCUVV0R0xFTkJRVUVzUTBGQlQxVXNSVUZCUVN4RFFVRkhhVWNzWVVGQlFTeERRVUZqTjBjc1EwRkJRU3hEUVVGUFdTeEZRVUZCTEVsQlJXcERVaXhEUVVGQkxFbEJRVEpDTEcxQ1FVRmtTaXhEUVVGQkxFTkJRVTlaTEVWQlFVRXNTMEZEZGtKU0xFTkJRVUVzUjBGQlN5eEpRVUZKTUVjc1VVRkJRU3hEUVVGVFppeG5Ra0ZCUVN4RFFVRnBRaTlHTEVOQlFVRXNRMEZCVDFrc1JVRkJRU3hMUVVWMlExSXNRMEZCUVN4TFFVTklRU3hEUVVGQkxFZEJRVXRLTEVOQlFVRXNRMEZCVDFrc1JVRkJRU3hIUVVWVVVpeERRVUZCTEVsQlFXOUNMRTFCUVdSQkxFTkJRVUVzUTBGQlJ6SkRMRTFCUVVFc1MwRkRWamRETEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlQybEZMR2xDUVVGQkxFbEJRVEJETEcxQ1FVRmtMMGNzUTBGQlFTeERRVUZQV1N4RlFVRkJMRWxCUVcxQ09FSXNTMEZCUVN4RFFVRk5ReXhQUVVGQkxFTkJRVkYyUXl4RFFVRkJMRXRCUVU5QkxFTkJRVUVzUTBGQlJ6SkRMRTFCUVVFc1IwRkJVeXhOUVVOMlJ6TkRMRU5CUVVFc1IwRkJTeXhKUVVGSlJpeERRVUZCTEVOQlFVOVZMRVZCUVVFc1EwRkJSMjFHTEdkQ1FVRkJMRU5CUVdsQ0wwWXNRMEZCUVN4RFFVRlBXU3hGUVVGQkxFbEJSWFpEVWl4RFFVRkJMRU5CUVVjeVF5eE5RVUZCTEVkQlFWTXNUVUZEWkRORExFTkJRVUVzUjBGQlMwRXNRMEZCUVN4RFFVRkhkME1zVFVGQlFTeERRVUZQTlVNc1EwRkJRU3hKUVVOVUxFbEJRVUZuU0N4WFFVRkJMRVZCUVdWb1NDeERRVUZCTEVWQlFVOHNWMEZCVnl4UFFVRlBSU3hEUVVGQkxFTkJRVTlWTEVWQlFVRXNSVUZGYkVRc1RVRkhTRGhDTEV0QlFVRXNRMEZCVFVNc1QwRkJRU3hEUVVGUmRrTXNRMEZCUVN4TFFVRnhRaXhOUVVGa1FTeERRVUZCTEVOQlFVY3lReXhOUVVGQkxFdEJRV016UXl4RFFVRkJMRWRCUVV0QkxFTkJRVUVzUTBGQlJ5eExRVU5zUkRaSExFMUJRVUVzUTBGQlQwTXNUVUZCUVN4RFFVRlBhRWdzUTBGQlFTeERRVUZQVXl4VlFVRkJMRVZCUVZrN1RVRkRMMEpETEVWQlFVRXNSVUZCUVZJN1NVRkJRU3hKUVVWR1FTeERRVUZCTEVkQlFVdHhReXhEUVVGQkxFTkJRV3RDY2tNc1EwRkJRU3hIUVVOMlFrRXNRMEZCUVN4RFFVRkhaMFlzVDBGQlFTeERRVUZSYUVZc1EwRkJRVHROUVVOWExHTkJRV2hDU2l4RFFVRkJMRU5CUVU5eFFpeEpRVUZCTEVsQlFYTkNja0lzUTBGQlFTeERRVUZQWXl4VFFVRkJMRWxCUTNSRFZpeERRVUZCTEVOQlFVMDJReXhUUVVGQkxFTkJRVlZETEVkQlFVRXNRMEZCU1d4RUxFTkJRVUVzUTBGQlQydERMR05CUVVFc1IwRkZOMEk1UWl4RFFVRkJMRU5CUVUwMlF5eFRRVUZCTEVOQlFWVkRMRWRCUVVFc1EwRkJTV3hFTEVOQlFVRXNRMEZCVHpSQ0xHRkJRVUVzUjBGQlowSTFRaXhEUVVGQkxFTkJRVTl4UWl4SlFVRkJMRWRCUTJ4RWFrSXNRMEZCUVN4RFFVRk5Oa01zVTBGQlFTeERRVUZWUXl4SFFVRkJMRU5CUVVsb1JDeERRVUZCTEVOQlFVOXBSaXhaUVVGQkxFdEJRV2xDYmtZc1EwRkJRU3hEUVVGUGIwTXNaVUZCUVN4SFFVRnJRbkJETEVOQlFVRXNRMEZCVDNGRExHRkJRVUVzUjBGRGVFUXNZMEZCYUVKeVF5eERRVUZCTEVOQlFVOXhRaXhKUVVGQkxFbEJRWE5DY2tJc1EwRkJRU3hEUVVGUGMwSXNZMEZCUVN4TFFVTjBRMnhDTEVOQlFVRXNRMEZCVFRaRExGTkJRVUVzUTBGQlZVTXNSMEZCUVN4RFFVRkpMRWRCUVVkc1JDeERRVUZCTEVOQlFVODBRaXhoUVVGQkxFZEJRV2RDTlVJc1EwRkJRU3hEUVVGUGNVSXNTVUZCUVN4aFFVTnlSRzFDTEVOQlFVRXNSMEZCY1VJc1IwRkRha0o0UXl4RFFVRkJMRU5CUVU5MVFpeHJRa0ZCUVN4SFFVRnhRaXhOUVVNNVFuWkNMRU5CUVVFc1EwRkJUM1ZDTEd0Q1FVRkJMRWRCUVhGQ0xFdEJSMW9zYTBKQlFXaENka0lzUTBGQlFTeERRVUZQY1VJc1NVRkJRU3hKUVVFd1FuSkNMRU5CUVVFc1EwRkJUMjlDTEcxQ1FVRkJMRWxCUXpGRGFFSXNRMEZCUVN4RFFVRk5Oa01zVTBGQlFTeERRVUZWUXl4SFFVRkJMRU5CUVVsc1JDeERRVUZCTEVOQlFVOXBReXgzUWtGQlFTeEhRVVY2UW1wRExFTkJRVUVzUTBGQlQyTXNVMEZCUVN4SlFVTlVWaXhEUVVGQkxFTkJRVTByUnl4blFrRkJRU3hEUVVGcFFpeFRRVUZUYUVVc1EwRkJRU3hIUVVVM1FtcEVMRU5CUVVFc1EwRkJUM0ZGTEU5QlFVRXNTVUZEVm01RkxFTkJRVUVzUTBGQlRUWkRMRk5CUVVFc1EwRkJWVU1zUjBGQlFTeERRVUZKYkVRc1EwRkJRU3hEUVVGUGJVTXNVMEZCUVN4RFFVTTNRanRKUVVGQkxFZEJSVW83UlVGQlFUdEZRVU5CTEZOQlFWTnBSaXhGUVVGQk8wbEJRMUFzVFVGQlRYQklMRU5CUVVFc1IwRkJVMFVzUTBGQlFTeERRVUZQTkVNc1RVRkJRU3hEUVVGUGJrTXNWVUZCUVR0SlFVTTNRaXhKUVVGSmEwTXNRMEZCUVN4SlFVRjNRanRKUVVNMVFpeEpRVUZKZWtNc1EwRkJRU3hIUVVGTFJpeERRVUZCTEVOQlFVOVRMRlZCUVVFc1EwRkJWME1zUlVGQlFUdEpRVU4yUWxJc1EwRkJRU3hMUVVOR1FTeERRVUZCTEVkQlFVdHhReXhEUVVGQkxFTkJRV3RDY2tNc1EwRkJRU3hIUVVOMlFrRXNRMEZCUVN4RFFVRkhaMFlzVDBGQlFTeERRVUZSYUVZc1EwRkJRVHROUVVOVVFTeERRVUZCTEVOQlFVMDJReXhUUVVGQkxFTkJRVlV5UXl4TlFVRkJMRU5CUVU4MVJpeERRVUZCTEVOQlFVOHJRaXhYUVVGQkxFZEJRemxDTTBJc1EwRkJRU3hEUVVGTk5rTXNVMEZCUVN4RFFVRlZNa01zVFVGQlFTeERRVUZQTlVZc1EwRkJRU3hEUVVGUE5FSXNZVUZCUVN4SFFVRm5RalZDTEVOQlFVRXNRMEZCVDNGQ0xFbEJRVUVzUjBGRGNrUnFRaXhEUVVGQkxFTkJRVTAyUXl4VFFVRkJMRU5CUVZVeVF5eE5RVUZCTEVOQlFVOHhSaXhEUVVGQkxFTkJRVTlwUml4WlFVRkJMRXRCUVdsQ2JrWXNRMEZCUVN4RFFVRlBiME1zWlVGQlFTeEhRVUZyUW5CRExFTkJRVUVzUTBGQlQzRkRMR0ZCUVVFc1IwRkRNMFZ5UXl4RFFVRkJMRU5CUVU5akxGTkJRVUVzU1VGRFZGWXNRMEZCUVN4RFFVRk5hVWdzYlVKQlFVRXNRMEZCYjBJc1UwRkJVMnhGTEVOQlFVRXNRMEZEY2tNN1NVRkJRU3hMUVVkQmFrUXNRMEZCUVN4RFFVRlBVeXhWUVVGQkxFTkJRVmMwUWl4UFFVRkJMRWxCUVZOeVF5eERRVUZCTEVOQlFVOVRMRlZCUVVFc1EwRkJWelJDTEU5QlFVRXNRMEZCVVRaRExFOUJRVUVzUTBGQlVXeEdMRU5CUVVFc1NVRkJVMEVzUTBGQlFTeERRVUZOSzBNc1UwRkJRU3hEUVVGVk1rTXNUVUZCUVN4SlFVRlZOVVlzUTBGQlFTeERRVUZQTWtJc2FVSkJRVUVzUTBGQmEwSXJSQ3hMUVVGQkxFTkJRVTBzVFVGRGNrazdSVUZCUVR0RlFVTkJjRVlzUTBGQlFTeERRVUZITEcxQ1FVRnRRanRKUVVOd1FpeExRVUZMU2l4RFFVRkJMRU5CUVU5VExGVkJRVUVzUzBGQlpWUXNRMEZCUVN4RFFVRlBVeXhWUVVGQkxFTkJRVmRETEVWQlFVRXNSVUZCU1R0SlFVTnFSQ3hOUVVGTldpeERRVUZCTEVkQlFWTkZMRU5CUVVFc1EwRkJUelJETEUxQlFVRXNRMEZCVDI1RExGVkJRVUU3U1VGRE4wSTdUVUZCU1VNc1JVRkJRU3hGUVVOR1VqdEpRVUZCTEVsQlEwVkdMRU5CUVVFc1EwRkJUMU1zVlVGQlFUdEpRVU5ZVUN4RFFVRkJMRWRCUVV0eFF5eERRVUZCTEVOQlFXdENja01zUTBGQlFTeEhRVU4yUWtFc1EwRkJRU3hEUVVGSFowWXNUMEZCUVN4RFFVRlJhRVlzUTBGQlFUdE5RVU5VUVN4RFFVRkJMRU5CUVUwMlF5eFRRVUZCTEVOQlFWVXlReXhOUVVGQkxFTkJRVTgxUml4RFFVRkJMRU5CUVU5dlF5eGxRVUZCTEVWQlFXbENjRU1zUTBGQlFTeERRVUZQY1VNc1lVRkJRU3hIUVVOMFJHcERMRU5CUVVFc1EwRkJUVFpETEZOQlFVRXNRMEZCVlVNc1IwRkJRU3hEUVVGSmFFUXNRMEZCUVN4RFFVRlBhVVlzV1VGQlFTeExRVUZwUW01R0xFTkJRVUVzUTBGQlQyOURMR1ZCUVVFc1IwRkJhMEp3UXl4RFFVRkJMRU5CUVU5eFF5eGhRVUZCTEVOQlFXTTdTVUZCUVN4RlFVTXhSanRGUVVGQkxFbEJSVW92UWl4RFFVRkJMRU5CUVVjc1VVRkJVVHRKUVVGQkxFTkJRMmRETEUxQlFYSkRTaXhEUVVGQkxFTkJRVTgwUXl4TlFVRkJMRU5CUVU5dVF5eFZRVUZCTEVOQlFWYzBSQ3hQUVVGQkxFZEJSVE5DSzBNc1EwRkJRU3hOUVVWQldpeERRVUZCTEVsQlEwRnNReXhEUVVGQkxFbEJRMEZLTEVOQlFVRXNSMEZEUmp0RlFVRkJMRWxCUlVZNVJDeERRVUZCTEVOQlFVY3NjVUpCUVhGQ08wbEJRVUVzUzBGRFZTeE5RVUZ5UWtvc1EwRkJRU3hEUVVGUE5FVXNVMEZCUVN4SlFVTm9RbFlzUTBGQlFTeEZRVU5HTzBWQlFVRXNTVUZGUmpsRUxFTkJRVUVzUTBGQlJ5eHRRa0ZCYlVJN1NVRkRjRUk0UkN4RFFVRkJMRVZCUVZFN1JVRkJRU3hKUVVWV09VUXNRMEZCUVN4RFFVRkhMSGRDUVVGM1FqdEpRVU42UW10RkxFTkJRVUVzU1VGRFFVb3NRMEZCUVN4RlFVRlJPMFZCUVVFc1NVRkZWamxFTEVOQlFVRXNRMEZCUnl4WFFVRlhPMGxCUTFvNFJ5eERRVUZCTEVWQlFWTTdSVUZCUVN4SlFVVllPVWNzUTBGQlFTeERRVUZITEd0Q1FVRnJRanRKUVVOdVFqdE5RVUZKVFN4RlFVRkJMRVZCUTBaYU8wbEJRVUVzU1VGRFJVVXNRMEZCUVN4RFFVRlBVeXhWUVVGQk8wbEJRMUJZTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hIUVVGTGVVTXNRMEZCUVN4RFFVRnJRbnBETEVOQlFVRXNSMEZEZGtKQkxFTkJRVUVzUTBGQlIyOUdMRTlCUVVFc1EwRkJVWEJHTEVOQlFVRXNTVUZCVTBFc1EwRkJRU3hEUVVGTmFVUXNVMEZCUVN4RFFVRlZMME1zUTBGQlFTeERRVUZQY1VVc1QwRkJRU3hIUVVGVkxGZEJRVmNzVDBGQlQzSkZMRU5CUVVFc1EwRkJUelJETEUxQlFVRXNRMEZCVDI1RExGVkJRVUVzUTBGQlYzZENMRk5CUVVFc1IwRkRiRWM3UlVGQlFTeEpRVVZHTjBJc1EwRkJRU3hEUVVGSExHVkJRV1U3U1VGRGFFSTRSQ3hEUVVGQkxFVkJRVkU3UlVGQlFTeEpRVVZXT1VRc1EwRkJRU3hEUVVGSExGTkJRVk1zUTBGQlEwNHNRMEZCUVN4RlFVRkpTU3hEUVVGQk8wbEJRMllzVFVGQlRVVXNRMEZCUVN4SFFVRlhSaXhEUVVGQkxFTkJRVVZuUkN4TlFVRkJPMDFCUTJJelF5eERRVUZCTEVkQlFVdG5ReXhEUVVGQkxFTkJRV3RDZGtNc1EwRkJRU3hEUVVGUFV5eFZRVUZCTEVOQlFWZERMRVZCUVVFN1NVRkRMME1zU1VGQlNWWXNRMEZCUVN4RFFVRlBORU1zVFVGQlFTeERRVUZQYmtNc1ZVRkJRU3hEUVVGWFF5eEZRVUZCTEVsQlFVMVdMRU5CUVVFc1EwRkJUelJETEUxQlFVRXNRMEZCVDI1RExGVkJRVUVzUTBGQlYwa3NWMEZCUVN4SlFVRmxUaXhEUVVGQkxFbEJRVTFCTEVOQlFVRXNRMEZCUjNORExFMUJRVUVzUjBGQlV5eE5RVUZOZWtNc1EwRkJRU3hEUVVGVE1rTXNVMEZCUVN4RFFVRlZjMFVzVVVGQlFTeERRVUZUY2tnc1EwRkJRU3hEUVVGUE5FTXNUVUZCUVN4RFFVRlBia01zVlVGQlFTeERRVUZYWlN4WFFVRkJMRWRCUVdNN1RVRkRjRXNzU1VGQlNYaENMRU5CUVVFc1EwRkJUM05JTEZWQlFVRXNTMEZCWlhSSUxFTkJRVUVzUTBGQlQzTklMRlZCUVVFc1EwRkJWME1zVFVGQlFTeEpRVUZWYmtnc1EwRkJRU3hMUVVGaFNpeERRVUZCTEVOQlFVOXpTQ3hWUVVGQkxFTkJRVmRETEUxQlFVRXNTVUZCVlhaSUxFTkJRVUVzUTBGQlQzTklMRlZCUVVFc1EwRkJWMFVzVFVGQlFTeEpRVUZWY0Vnc1EwRkJRU3hMUVVGaFNpeERRVUZCTEVOQlFVOXpTQ3hWUVVGQkxFTkJRVmRGTEUxQlFVRXNSMEZCVXp0TlFVTnVTeXhOUVVGTk1VZ3NRMEZCUVN4SFFVRlhVeXhEUVVGQkxFTkJRVWNzUjBGQlIzZERMRk5CUVVFc1EwRkJWWE5GTEZGQlFVRXNRMEZCVTNKSUxFTkJRVUVzUTBGQlR6UkRMRTFCUVVFc1EwRkJUMjVETEZWQlFVRXNRMEZCVjI5Q0xGZEJRVUU3VFVGRmFrVjJRaXhEUVVGQkxFVkJSR1VzVFVGQllsSXNRMEZCUVN4SFFVTkhMRzFDUVVWQkxHMUNRVVZRVXl4RFFVRkJMRU5CUVVjeVJTeFBRVUZCTEVOQlFWRndSaXhEUVVGQkxFbEJRVk5CTEVOQlFVRXNRMEZCVFdsRUxGTkJRVUVzUTBGQlZUQkZMRTFCUVVFc1EwRkJUM3BJTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlQyNURMRlZCUVVFc1EwRkJWMjlDTEZkQlFVRXNSVUZEZEVVN1NVRkJRVHRGUVVGQk8wVkJSVVlzVFVGaFRYVkdMRU5CUVVFc1IwRkJWVTBzUTBGQlFUdEpRVU5rTVVnc1EwRkJRU3hEUVVGUFZTeEZRVUZCTEVOQlFVZHhReXhUUVVGQkxFTkJRVlZETEVkQlFVRXNRMEZCU1doRUxFTkJRVUVzUTBGQlR6UkRMRTFCUVVFc1EwRkJUMjVETEZWQlFVRXNRMEZCVnpKQ0xIVkNRVUZCTzBsQlEycEVPMDFCUVVreFFpeEZRVUZCTEVWQlEwWmFPMGxCUVVFc1NVRkRSVVVzUTBGQlFTeERRVUZQVXl4VlFVRkJPMGxCUTFCWUxFTkJRVUVzUzBGRFJrRXNRMEZCUVN4SFFVRkxlVU1zUTBGQlFTeERRVUZyUW5wRExFTkJRVUVzUjBGRGRrSkJMRU5CUVVFc1EwRkJSMjlHTEU5QlFVRXNRMEZCVVhCR0xFTkJRVUVzU1VGQlUwRXNRMEZCUVN4RFFVRk5hVVFzVTBGQlFTeERRVUZWUXl4SFFVRkJMRU5CUVVsb1JDeERRVUZCTEVOQlFVODBReXhOUVVGQkxFTkJRVTl1UXl4VlFVRkJMRU5CUVZjeVFpeDFRa0ZCUVN4TFFVVnVSVGhGTEVOQlFVRXNSVUZCVXp0RlFVRkJPMFZCUlZoSUxFMUJRVUVzUTBGQlQwTXNUVUZCUVN4RFFVRlBhRWdzUTBGQlFTeERRVUZQVXl4VlFVRkJMRVZCUVZrN1NVRkRMMEpyU0N4TlFVRkJMRVZCZWtKaFFTeERRVUZCTzAxQlEySXpTQ3hEUVVGQkxFTkJRVTlWTEVWQlFVRXNRMEZCUjNGRExGTkJRVUVzUTBGQlZUSkRMRTFCUVVFc1EwRkJUekZHTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlQyNURMRlZCUVVFc1EwRkJWekpDTEhWQ1FVRkJPMDFCUTNCRU8xRkJRVWt4UWl4RlFVRkJMRVZCUTBaYU8wMUJRVUVzU1VGRFJVVXNRMEZCUVN4RFFVRlBVeXhWUVVGQk8wMUJRMUJZTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hIUVVGTGVVTXNRMEZCUVN4RFFVRnJRbnBETEVOQlFVRXNSMEZEZGtKQkxFTkJRVUVzUTBGQlIyOUdMRTlCUVVFc1EwRkJVWEJHTEVOQlFVRXNTVUZCVTBFc1EwRkJRU3hEUVVGTmFVUXNVMEZCUVN4RFFVRlZNa01zVFVGQlFTeERRVUZQTVVZc1EwRkJRU3hEUVVGUE5FTXNUVUZCUVN4RFFVRlBia01zVlVGQlFTeERRVUZYTWtJc2RVSkJRVUVzUzBGRmRFVnZSU3hEUVVGQkxFbEJRMEZzUXl4RFFVRkJMRWxCUTBGS0xFTkJRVUVzUlVGQlVUdEpRVUZCTzBsQlpWSjNSQ3hQUVVGQkxFVkJRVUZPTEVOQlFVRTdTVUZEUVZFc1RVRkJRU3hGUVVGQmRFUXNRMEZCUVR0SlFVTkJkVVFzVFVGQlFTeEZRVUZCTTBRc1EwRkJRVHRKUVVOQk5FUXNTVUZCUVN4RlFVRkJkRUlzUTBGQlFUdEpRVU5CZFVJc1QwRkJRU3hGUVVGQllqdEZRVUZCTEVWQlJVbzdRVUZCUVNKOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gUGFyYWxsYXg7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gUGFyYWxsYXgoYSkge1xuICBsZXQge1xuICAgIHN3aXBlcjogcixcbiAgICBleHRlbmRQYXJhbXM6IGUsXG4gICAgb246IHRcbiAgfSA9IGE7XG4gIGUoe1xuICAgIHBhcmFsbGF4OiB7XG4gICAgICBlbmFibGVkOiAhMVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGwgPSAoYSwgZSkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICAgIHJ0bDogdFxuICAgICAgICB9ID0gcixcbiAgICAgICAgbCA9IHQgPyAtMSA6IDEsXG4gICAgICAgIHMgPSBhLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXBhcmFsbGF4XCIpIHx8IFwiMFwiO1xuICAgICAgbGV0IHAgPSBhLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXhcIiksXG4gICAgICAgIGkgPSBhLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXlcIik7XG4gICAgICBjb25zdCBkID0gYS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZVwiKSxcbiAgICAgICAgbiA9IGEuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eVwiKSxcbiAgICAgICAgbyA9IGEuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgtcm90YXRlXCIpO1xuICAgICAgaWYgKHAgfHwgaSA/IChwID0gcCB8fCBcIjBcIiwgaSA9IGkgfHwgXCIwXCIpIDogci5pc0hvcml6b250YWwoKSA/IChwID0gcywgaSA9IFwiMFwiKSA6IChpID0gcywgcCA9IFwiMFwiKSwgcCA9IHAuaW5kZXhPZihcIiVcIikgPj0gMCA/IHBhcnNlSW50KHAsIDEwKSAqIGUgKiBsICsgXCIlXCIgOiBwICogZSAqIGwgKyBcInB4XCIsIGkgPSBpLmluZGV4T2YoXCIlXCIpID49IDAgPyBwYXJzZUludChpLCAxMCkgKiBlICsgXCIlXCIgOiBpICogZSArIFwicHhcIiwgbnVsbCAhPSBuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBuIC0gKG4gLSAxKSAqICgxIC0gTWF0aC5hYnMoZSkpO1xuICAgICAgICBhLnN0eWxlLm9wYWNpdHkgPSByO1xuICAgICAgfVxuICAgICAgbGV0IHggPSBgdHJhbnNsYXRlM2QoJHtwfSwgJHtpfSwgMHB4KWA7XG4gICAgICBpZiAobnVsbCAhPSBkKSB7XG4gICAgICAgIHggKz0gYCBzY2FsZSgke2QgLSAoZCAtIDEpICogKDEgLSBNYXRoLmFicyhlKSl9KWA7XG4gICAgICB9XG4gICAgICBpZiAobyAmJiBudWxsICE9IG8pIHtcbiAgICAgICAgeCArPSBgIHJvdGF0ZSgke28gKiBlICogLTF9ZGVnKWA7XG4gICAgICB9XG4gICAgICBhLnN0eWxlLnRyYW5zZm9ybSA9IHg7XG4gICAgfSxcbiAgICBzID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbDogYSxcbiAgICAgICAgc2xpZGVzOiBlLFxuICAgICAgICBwcm9ncmVzczogdCxcbiAgICAgICAgc25hcEdyaWQ6IHNcbiAgICAgIH0gPSByO1xuICAgICAgKDAsIF91dGlsc01pbi5lKShhLCBcIltkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV1cIikuZm9yRWFjaChhID0+IHtcbiAgICAgICAgbChhLCB0KTtcbiAgICAgIH0pLCBlLmZvckVhY2goKGEsIGUpID0+IHtcbiAgICAgICAgbGV0IHAgPSBhLnByb2dyZXNzO1xuICAgICAgICByLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgXCJhdXRvXCIgIT09IHIucGFyYW1zLnNsaWRlc1BlclZpZXcgJiYgKHAgKz0gTWF0aC5jZWlsKGUgLyAyKSAtIHQgKiAocy5sZW5ndGggLSAxKSksIHAgPSBNYXRoLm1pbihNYXRoLm1heChwLCAtMSksIDEpLCBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtcm90YXRlXVwiKS5mb3JFYWNoKGEgPT4ge1xuICAgICAgICAgIGwoYSwgcCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgdChcImJlZm9yZUluaXRcIiwgKCkgPT4ge1xuICAgIHIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgKHIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSAhMCwgci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gITApO1xuICB9KSwgdChcImluaXRcIiwgKCkgPT4ge1xuICAgIHIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgcygpO1xuICB9KSwgdChcInNldFRyYW5zbGF0ZVwiLCAoKSA9PiB7XG4gICAgci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCAmJiBzKCk7XG4gIH0pLCB0KFwic2V0VHJhbnNpdGlvblwiLCAoYSwgZSkgPT4ge1xuICAgIHIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgZnVuY3Rpb24gKGEpIHtcbiAgICAgIHZvaWQgMCA9PT0gYSAmJiAoYSA9IHIucGFyYW1zLnNwZWVkKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZWw6IGVcbiAgICAgIH0gPSByO1xuICAgICAgZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXVwiKS5mb3JFYWNoKHIgPT4ge1xuICAgICAgICBsZXQgZSA9IHBhcnNlSW50KHIuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgtZHVyYXRpb25cIiksIDEwKSB8fCBhO1xuICAgICAgICAwID09PSBhICYmIChlID0gMCksIHIuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2A7XG4gICAgICB9KTtcbiAgICB9KGUpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKUVlYSmhiR3hoZUNJc0ltRWlMQ0p6ZDJsd1pYSWlMQ0p5SWl3aVpYaDBaVzVrVUdGeVlXMXpJaXdpWlNJc0ltOXVJaXdpZENJc0luQmhjbUZzYkdGNElpd2laVzVoWW14bFpDSXNJbXdpTENKelpYUlVjbUZ1YzJadmNtMGlMQ0p5ZEd3aUxDSnpJaXdpWjJWMFFYUjBjbWxpZFhSbElpd2ljQ0lzSW1raUxDSmtJaXdpYmlJc0ltOGlMQ0pwYzBodmNtbDZiMjUwWVd3aUxDSnBibVJsZUU5bUlpd2ljR0Z5YzJWSmJuUWlMQ0pOWVhSb0lpd2lZV0p6SWl3aWMzUjViR1VpTENKdmNHRmphWFI1SWl3aWVDSXNJblJ5WVc1elptOXliU0lzSW5ObGRGUnlZVzV6YkdGMFpTSXNJbVZzSWl3aWMyeHBaR1Z6SWl3aWNISnZaM0psYzNNaUxDSnpibUZ3UjNKcFpDSXNJbVZzWlcxbGJuUkRhR2xzWkhKbGJpSXNJbVp2Y2tWaFkyZ2lMQ0p3WVhKaGJYTWlMQ0p6Ykdsa1pYTlFaWEpIY205MWNDSXNJbk5zYVdSbGMxQmxjbFpwWlhjaUxDSmpaV2xzSWl3aWJHVnVaM1JvSWl3aWJXbHVJaXdpYldGNElpd2ljWFZsY25sVFpXeGxZM1J2Y2tGc2JDSXNJbmRoZEdOb1UyeHBaR1Z6VUhKdlozSmxjM01pTENKdmNtbG5hVzVoYkZCaGNtRnRjeUlzSW5Od1pXVmtJaXdpZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1SWwwc0luTnZkWEpqWlhNaU9sc2lNQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzI1MWJHeGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVWQkxGTkJRVk5CTEZOQlFWTkRMRU5CUVVFN1JVRkRhRUk3U1VGQlNVTXNUVUZCUVN4RlFVTkdReXhEUVVGQk8wbEJRVTFETEZsQlFVRXNSVUZEVGtNc1EwRkJRVHRKUVVGWlF5eEZRVUZCTEVWQlExcERPMFZCUVVFc1NVRkRSVTRzUTBGQlFUdEZRVU5LU1N4RFFVRkJMRU5CUVdFN1NVRkRXRWNzVVVGQlFTeEZRVUZWTzAxQlExSkRMRTlCUVVFc1IwRkJVenRKUVVGQk8wVkJRVUU3UlVGSFlpeE5RVUZOUXl4RFFVRkJMRWRCUVdWRExFTkJRVU5XTEVOQlFVRXNSVUZCU1Vrc1EwRkJRVHROUVVONFFqdFZRVUZOVHl4SFFVRkJMRVZCUTBwTU8xRkJRVUVzU1VGRFJVb3NRMEZCUVR0UlFVTkZUeXhEUVVGQkxFZEJRVmxJTEVOQlFVRXNTVUZCVHl4SlFVRkpPMUZCUTNaQ1RTeERRVUZCTEVkQlFVbGFMRU5CUVVFc1EwRkJSMkVzV1VGQlFTeERRVUZoTERKQ1FVRXlRanROUVVOeVJDeEpRVUZKUXl4RFFVRkJMRWRCUVVsa0xFTkJRVUVzUTBGQlIyRXNXVUZCUVN4RFFVRmhPMUZCUTNCQ1JTeERRVUZCTEVkQlFVbG1MRU5CUVVFc1EwRkJSMkVzV1VGQlFTeERRVUZoTzAxQlEzaENMRTFCUVUxSExFTkJRVUVzUjBGQlVXaENMRU5CUVVFc1EwRkJSMkVzV1VGQlFTeERRVUZoTzFGQlEzaENTU3hEUVVGQkxFZEJRVlZxUWl4RFFVRkJMRU5CUVVkaExGbEJRVUVzUTBGQllUdFJRVU14UWtzc1EwRkJRU3hIUVVGVGJFSXNRMEZCUVN4RFFVRkhZU3haUVVGQkxFTkJRV0U3VFVGeFFpOUNMRWxCY0VKSlF5eERRVUZCTEVsQlFVdERMRU5CUVVFc1NVRkRVRVFzUTBGQlFTeEhRVUZKUVN4RFFVRkJMRWxCUVVzc1MwRkRWRU1zUTBGQlFTeEhRVUZKUVN4RFFVRkJMRWxCUVVzc1QwRkRRV0lzUTBGQlFTeERRVUZQYVVJc1dVRkJRU3hOUVVOb1Frd3NRMEZCUVN4SFFVRkpSaXhEUVVGQkxFVkJRMHBITEVOQlFVRXNSMEZCU1N4UlFVVktRU3hEUVVGQkxFZEJRVWxJTEVOQlFVRXNSVUZEU2tVc1EwRkJRU3hIUVVGSkxFMUJSMHBCTEVOQlFVRXNSMEZFUlVFc1EwRkJRU3hEUVVGRlRTeFBRVUZCTEVOQlFWRXNVVUZCVVN4SlFVTmlReXhSUVVGQkxFTkJRVk5RTEVOQlFVRXNSVUZCUnl4TlFVRk5WaXhEUVVGQkxFZEJRVmRMTEVOQlFVRXNSMEZCYUVNc1RVRkZSMHNzUTBGQlFTeEhRVUZKVml4RFFVRkJMRWRCUVZkTExFTkJRVUVzUjBGQmJFSXNUVUZIU2swc1EwRkJRU3hIUVVSRlFTeERRVUZCTEVOQlFVVkxMRTlCUVVFc1EwRkJVU3hSUVVGUkxFbEJRMkpETEZGQlFVRXNRMEZCVTA0c1EwRkJRU3hGUVVGSExFMUJRVTFZTEVOQlFVRXNSMEZCY2tJc1RVRkZSMWNzUTBGQlFTeEhRVUZKV0N4RFFVRkJMRWRCUVZBc1RVRkZSaXhSUVVGUFlTeERRVUZCTEVWQlFUWkRPMUZCUTNSRUxFMUJRVTFtTEVOQlFVRXNSMEZCYVVKbExFTkJRVUVzU1VGQlYwRXNRMEZCUVN4SFFVRlZMRTFCUVUwc1NVRkJTVXNzU1VGQlFTeERRVUZMUXl4SFFVRkJMRU5CUVVsdVFpeERRVUZCTzFGQlF5OUVTaXhEUVVGQkxFTkJRVWQzUWl4TFFVRkJMRU5CUVUxRExFOUJRVUVzUjBGQlZYWkNMRU5CUTNKQ08wMUJRVUU3VFVGRFFTeEpRVUZKZDBJc1EwRkJRU3hIUVVGWkxHVkJRV1ZhTEVOQlFVRXNTMEZCVFVNc1EwRkJRVHROUVVOeVF5eEpRVUZKTEZGQlFVOURMRU5CUVVFc1JVRkJlVU03VVVGRmJFUlZMRU5CUVVFc1NVRkJZU3hWUVVSUlZpeERRVUZCTEVsQlFWTkJMRU5CUVVFc1IwRkJVU3hOUVVGTkxFbEJRVWxOTEVsQlFVRXNRMEZCUzBNc1IwRkJRU3hEUVVGSmJrSXNRMEZCUVN4TFFVVXpSRHROUVVGQk8wMUJRMEVzU1VGQlNXTXNRMEZCUVN4WlFVRnBRa0VzUTBGQlFTeEZRVUV5UXp0UlFVVTVSRkVzUTBGQlFTeEpRVUZoTEZkQlJGTlNMRU5CUVVFc1IwRkJVMlFzUTBGQlFTeEpRVUZaTEU5QlJUZERPMDFCUVVFN1RVRkRRVW9zUTBGQlFTeERRVUZIZDBJc1MwRkJRU3hEUVVGTlJ5eFRRVUZCTEVkQlFWbEVMRU5CUVZNN1NVRkJRVHRKUVVVeFFtUXNRMEZCUVN4SFFVRmxaMElzUTBGQlFUdE5RVU51UWp0UlFVRk5ReXhGUVVGQkxFVkJRMG8zUWl4RFFVRkJPMUZCUVVVNFFpeE5RVUZCTEVWQlEwWXhRaXhEUVVGQk8xRkJRVTB5UWl4UlFVRkJMRVZCUTA1NlFpeERRVUZCTzFGQlFWRXdRaXhSUVVGQkxFVkJRMUp3UWp0TlFVRkJMRWxCUTBWV0xFTkJRVUU3VFVGRFNpeEpRVUZCSzBJc1YwRkJRU3hGUVVGblFtcERMRU5CUVVFc1JVRkJTU3cwU1VGQk5FbHJReXhQUVVGQkxFTkJRVkZzUXl4RFFVRkJPMUZCUTNSTFV5eERRVUZCTEVOQlFXRlVMRU5CUVVFc1JVRkJUMDBzUTBGQlFTeERRVUZUTzAxQlFVRXNTVUZGTDBKR0xFTkJRVUVzUTBGQlR6aENMRTlCUVVFc1EwRkJVU3hEUVVGRGJFTXNRMEZCUVN4RlFVRlRTU3hEUVVGQk8xRkJRM1pDTEVsQlFVbFZMRU5CUVVFc1IwRkJaMEprTEVOQlFVRXNRMEZCVVN0Q0xGRkJRVUU3VVVGRGVFSTNRaXhEUVVGQkxFTkJRVTlwUXl4TlFVRkJMRU5CUVU5RExHTkJRVUVzUjBGQmFVSXNTMEZCY1VNc1YwRkJhRU5zUXl4RFFVRkJMRU5CUVU5cFF5eE5RVUZCTEVOQlFVOUZMR0ZCUVVFc1MwRkRjRVIyUWl4RFFVRkJMRWxCUVdsQ1VTeEpRVUZCTEVOQlFVdG5RaXhKUVVGQkxFTkJRVXRzUXl4RFFVRkJMRWRCUVdFc1MwRkJTMFVzUTBGQlFTeEpRVUZaVFN4RFFVRkJMRU5CUVZNeVFpeE5RVUZCTEVkQlFWTXNTMEZGTjBWNlFpeERRVUZCTEVkQlFXZENVU3hKUVVGQkxFTkJRVXRyUWl4SFFVRkJMRU5CUVVsc1FpeEpRVUZCTEVOQlFVdHRRaXhIUVVGQkxFTkJRVWt6UWl4RFFVRkJMRWRCUVdkQ0xFbEJRVWtzU1VGRGRFUmtMRU5CUVVFc1EwRkJVVEJETEdkQ1FVRkJMRU5CUVdsQ0xESkxRVUV5UzFJc1QwRkJRU3hEUVVGUmJFTXNRMEZCUVR0VlFVTXhUVk1zUTBGQlFTeERRVUZoVkN4RFFVRkJMRVZCUVU5akxFTkJRVUVzUTBGQll6dFJRVUZCTEVWQlEyeERPMDFCUVVFc1JVRkRSanRKUVVGQk8wVkJaVXBTTEVOQlFVRXNRMEZCUnl4alFVRmpPMGxCUTFaS0xFTkJRVUVzUTBGQlQybERMRTFCUVVFc1EwRkJUelZDTEZGQlFVRXNRMEZCVTBNc1QwRkJRU3hMUVVNMVFrNHNRMEZCUVN4RFFVRlBhVU1zVFVGQlFTeERRVUZQVVN4dFFrRkJRU3hKUVVGelFpeEhRVU53UTNwRExFTkJRVUVzUTBGQlR6QkRMR05CUVVFc1EwRkJaVVFzYlVKQlFVRXNTVUZCYzBJc1JVRkJTVHRGUVVGQkxFbEJSV3hFY2tNc1EwRkJRU3hEUVVGSExGRkJRVkU3U1VGRFNrb3NRMEZCUVN4RFFVRlBhVU1zVFVGQlFTeERRVUZQTlVJc1VVRkJRU3hEUVVGVFF5eFBRVUZCTEVsQlF6VkNTU3hEUVVGQkxFVkJRV003UlVGQlFTeEpRVVZvUWs0c1EwRkJRU3hEUVVGSExHZENRVUZuUWp0SlFVTmFTaXhEUVVGQkxFTkJRVTlwUXl4TlFVRkJMRU5CUVU4MVFpeFJRVUZCTEVOQlFWTkRMRTlCUVVFc1NVRkROVUpKTEVOQlFVRXNSVUZCWXp0RlFVRkJMRWxCUldoQ1RpeERRVUZCTEVOQlFVY3NhVUpCUVdsQ0xFTkJRVU5PTEVOQlFVRXNSVUZCVTBrc1EwRkJRVHRKUVVOMlFrWXNRMEZCUVN4RFFVRlBhVU1zVFVGQlFTeERRVUZQTlVJc1VVRkJRU3hEUVVGVFF5eFBRVUZCTEVsQk0wSlNMRlZCUVZWU0xFTkJRVUU3VFVGQlFTeExRVU5pTEUxQlFXSkJMRU5CUVVFc1MwRkRSa0VzUTBGQlFTeEhRVUZYUlN4RFFVRkJMRU5CUVU5cFF5eE5RVUZCTEVOQlFVOVZMRXRCUVVFN1RVRkZNMEk3VVVGQlRXaENMRVZCUVVFc1JVRkRTbnBDTzAxQlFVRXNTVUZEUlVZc1EwRkJRVHROUVVOS1JTeERRVUZCTEVOQlFVZHpReXhuUWtGQlFTeERRVUZwUWl3MFNVRkJORWxTTEU5QlFVRXNRMEZCVVdoRExFTkJRVUU3VVVGRGRFc3NTVUZCU1VVc1EwRkJRU3hIUVVGdFFtbENMRkZCUVVFc1EwRkJVMjVDTEVOQlFVRXNRMEZCVjFjc1dVRkJRU3hEUVVGaExHdERRVUZyUXl4UFFVRlBZaXhEUVVGQk8xRkJRMmhHTEUxQlFXSkJMRU5CUVVFc1MwRkJaMEpKTEVOQlFVRXNSMEZCYlVJc1NVRkRka05HTEVOQlFVRXNRMEZCVjNOQ0xFdEJRVUVzUTBGQlRYTkNMR3RDUVVGQkxFZEJRWEZDTEVkQlFVY3hReXhEUVVGQkxFbEJRVzlDTzAxQlFVRXNSVUZGYWtVN1NVRkJRU3hEUVdkQ1JTeERRVUZqUVN4RFFVRkJMRU5CUVZNN1JVRkJRU3hGUVVVelFqdEJRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gU2Nyb2xsYmFyO1xudmFyIF9zc3JXaW5kb3dFc21NaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xudmFyIF9jcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5taW4ubWpzXCIpO1xuZnVuY3Rpb24gU2Nyb2xsYmFyKGwpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IHMsXG4gICAgZXh0ZW5kUGFyYW1zOiByLFxuICAgIG9uOiBhLFxuICAgIGVtaXQ6IGVcbiAgfSA9IGw7XG4gIGNvbnN0IHQgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5nKSgpO1xuICBsZXQgbyxcbiAgICBuLFxuICAgIGksXG4gICAgYyxcbiAgICBwID0gITEsXG4gICAgZCA9IG51bGwsXG4gICAgbSA9IG51bGw7XG4gIGZ1bmN0aW9uIGIoKSB7XG4gICAgaWYgKCFzLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgICBzY3JvbGxiYXI6IGwsXG4gICAgICAgIHJ0bFRyYW5zbGF0ZTogclxuICAgICAgfSA9IHMsXG4gICAgICB7XG4gICAgICAgIGRyYWdFbDogYSxcbiAgICAgICAgZWw6IGVcbiAgICAgIH0gPSBsLFxuICAgICAgdCA9IHMucGFyYW1zLnNjcm9sbGJhcixcbiAgICAgIG8gPSBzLnBhcmFtcy5sb29wID8gcy5wcm9ncmVzc0xvb3AgOiBzLnByb2dyZXNzO1xuICAgIGxldCBjID0gbixcbiAgICAgIHAgPSAoaSAtIG4pICogbztcbiAgICByID8gKHAgPSAtcCwgcCA+IDAgPyAoYyA9IG4gLSBwLCBwID0gMCkgOiAtcCArIG4gPiBpICYmIChjID0gaSArIHApKSA6IHAgPCAwID8gKGMgPSBuICsgcCwgcCA9IDApIDogcCArIG4gPiBpICYmIChjID0gaSAtIHApLCBzLmlzSG9yaXpvbnRhbCgpID8gKGEuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7cH1weCwgMCwgMClgLCBhLnN0eWxlLndpZHRoID0gYCR7Y31weGApIDogKGEuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwgJHtwfXB4LCAwKWAsIGEuc3R5bGUuaGVpZ2h0ID0gYCR7Y31weGApLCB0LmhpZGUgJiYgKGNsZWFyVGltZW91dChkKSwgZS5zdHlsZS5vcGFjaXR5ID0gMSwgZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZS5zdHlsZS5vcGFjaXR5ID0gMCwgZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjQwMG1zXCI7XG4gICAgfSwgMWUzKSk7XG4gIH1cbiAgZnVuY3Rpb24gdSgpIHtcbiAgICBpZiAoIXMucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICAgIHNjcm9sbGJhcjogbFxuICAgICAgfSA9IHMsXG4gICAgICB7XG4gICAgICAgIGRyYWdFbDogcixcbiAgICAgICAgZWw6IGFcbiAgICAgIH0gPSBsO1xuICAgIHIuc3R5bGUud2lkdGggPSBcIlwiLCByLnN0eWxlLmhlaWdodCA9IFwiXCIsIGkgPSBzLmlzSG9yaXpvbnRhbCgpID8gYS5vZmZzZXRXaWR0aCA6IGEub2Zmc2V0SGVpZ2h0LCBjID0gcy5zaXplIC8gKHMudmlydHVhbFNpemUgKyBzLnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgLSAocy5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzLnNuYXBHcmlkWzBdIDogMCkpLCBuID0gXCJhdXRvXCIgPT09IHMucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA/IGkgKiBjIDogcGFyc2VJbnQocy5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCksIHMuaXNIb3Jpem9udGFsKCkgPyByLnN0eWxlLndpZHRoID0gYCR7bn1weGAgOiByLnN0eWxlLmhlaWdodCA9IGAke259cHhgLCBhLnN0eWxlLmRpc3BsYXkgPSBjID49IDEgPyBcIm5vbmVcIiA6IFwiXCIsIHMucGFyYW1zLnNjcm9sbGJhci5oaWRlICYmIChhLnN0eWxlLm9wYWNpdHkgPSAwKSwgcy5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzLmVuYWJsZWQgJiYgbC5lbC5jbGFzc0xpc3Rbcy5pc0xvY2tlZCA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXShzLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgfVxuICBmdW5jdGlvbiBmKGwpIHtcbiAgICByZXR1cm4gcy5pc0hvcml6b250YWwoKSA/IGwuY2xpZW50WCA6IGwuY2xpZW50WTtcbiAgfVxuICBmdW5jdGlvbiBnKGwpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHNjcm9sbGJhcjogcixcbiAgICAgICAgcnRsVHJhbnNsYXRlOiBhXG4gICAgICB9ID0gcyxcbiAgICAgIHtcbiAgICAgICAgZWw6IGVcbiAgICAgIH0gPSByO1xuICAgIGxldCB0O1xuICAgIHQgPSAoZihsKSAtICgwLCBfdXRpbHNNaW4uYikoZSlbcy5pc0hvcml6b250YWwoKSA/IFwibGVmdFwiIDogXCJ0b3BcIl0gLSAobnVsbCAhPT0gbyA/IG8gOiBuIC8gMikpIC8gKGkgLSBuKSwgdCA9IE1hdGgubWF4KE1hdGgubWluKHQsIDEpLCAwKSwgYSAmJiAodCA9IDEgLSB0KTtcbiAgICBjb25zdCBjID0gcy5taW5UcmFuc2xhdGUoKSArIChzLm1heFRyYW5zbGF0ZSgpIC0gcy5taW5UcmFuc2xhdGUoKSkgKiB0O1xuICAgIHMudXBkYXRlUHJvZ3Jlc3MoYyksIHMuc2V0VHJhbnNsYXRlKGMpLCBzLnVwZGF0ZUFjdGl2ZUluZGV4KCksIHMudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGZ1bmN0aW9uIHkobCkge1xuICAgIGNvbnN0IHIgPSBzLnBhcmFtcy5zY3JvbGxiYXIsXG4gICAgICB7XG4gICAgICAgIHNjcm9sbGJhcjogYSxcbiAgICAgICAgd3JhcHBlckVsOiB0XG4gICAgICB9ID0gcyxcbiAgICAgIHtcbiAgICAgICAgZWw6IG4sXG4gICAgICAgIGRyYWdFbDogaVxuICAgICAgfSA9IGE7XG4gICAgcCA9ICEwLCBvID0gbC50YXJnZXQgPT09IGkgPyBmKGwpIC0gbC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcy5pc0hvcml6b250YWwoKSA/IFwibGVmdFwiIDogXCJ0b3BcIl0gOiBudWxsLCBsLnByZXZlbnREZWZhdWx0KCksIGwuc3RvcFByb3BhZ2F0aW9uKCksIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIxMDBtc1wiLCBpLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMTAwbXNcIiwgZyhsKSwgY2xlYXJUaW1lb3V0KG0pLCBuLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMG1zXCIsIHIuaGlkZSAmJiAobi5zdHlsZS5vcGFjaXR5ID0gMSksIHMucGFyYW1zLmNzc01vZGUgJiYgKHMud3JhcHBlckVsLnN0eWxlW1wic2Nyb2xsLXNuYXAtdHlwZVwiXSA9IFwibm9uZVwiKSwgZShcInNjcm9sbGJhckRyYWdTdGFydFwiLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBoKGwpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHNjcm9sbGJhcjogcixcbiAgICAgICAgd3JhcHBlckVsOiBhXG4gICAgICB9ID0gcyxcbiAgICAgIHtcbiAgICAgICAgZWw6IHQsXG4gICAgICAgIGRyYWdFbDogb1xuICAgICAgfSA9IHI7XG4gICAgcCAmJiAobC5wcmV2ZW50RGVmYXVsdCA/IGwucHJldmVudERlZmF1bHQoKSA6IGwucmV0dXJuVmFsdWUgPSAhMSwgZyhsKSwgYS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjBtc1wiLCB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMG1zXCIsIG8uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwbXNcIiwgZShcInNjcm9sbGJhckRyYWdNb3ZlXCIsIGwpKTtcbiAgfVxuICBmdW5jdGlvbiB2KGwpIHtcbiAgICBjb25zdCByID0gcy5wYXJhbXMuc2Nyb2xsYmFyLFxuICAgICAge1xuICAgICAgICBzY3JvbGxiYXI6IGEsXG4gICAgICAgIHdyYXBwZXJFbDogdFxuICAgICAgfSA9IHMsXG4gICAgICB7XG4gICAgICAgIGVsOiBvXG4gICAgICB9ID0gYTtcbiAgICBwICYmIChwID0gITEsIHMucGFyYW1zLmNzc01vZGUgJiYgKHMud3JhcHBlckVsLnN0eWxlW1wic2Nyb2xsLXNuYXAtdHlwZVwiXSA9IFwiXCIsIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCJcIiksIHIuaGlkZSAmJiAoY2xlYXJUaW1lb3V0KG0pLCBtID0gKDAsIF91dGlsc01pbi5uKSgoKSA9PiB7XG4gICAgICBvLnN0eWxlLm9wYWNpdHkgPSAwLCBvLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiNDAwbXNcIjtcbiAgICB9LCAxZTMpKSwgZShcInNjcm9sbGJhckRyYWdFbmRcIiwgbCksIHIuc25hcE9uUmVsZWFzZSAmJiBzLnNsaWRlVG9DbG9zZXN0KCkpO1xuICB9XG4gIGZ1bmN0aW9uIEQobCkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgc2Nyb2xsYmFyOiByLFxuICAgICAgICBwYXJhbXM6IGFcbiAgICAgIH0gPSBzLFxuICAgICAgZSA9IHIuZWw7XG4gICAgaWYgKCFlKSByZXR1cm47XG4gICAgY29uc3QgbyA9IGUsXG4gICAgICBuID0gISFhLnBhc3NpdmVMaXN0ZW5lcnMgJiYge1xuICAgICAgICBwYXNzaXZlOiAhMSxcbiAgICAgICAgY2FwdHVyZTogITFcbiAgICAgIH0sXG4gICAgICBpID0gISFhLnBhc3NpdmVMaXN0ZW5lcnMgJiYge1xuICAgICAgICBwYXNzaXZlOiAhMCxcbiAgICAgICAgY2FwdHVyZTogITFcbiAgICAgIH07XG4gICAgaWYgKCFvKSByZXR1cm47XG4gICAgY29uc3QgYyA9IFwib25cIiA9PT0gbCA/IFwiYWRkRXZlbnRMaXN0ZW5lclwiIDogXCJyZW1vdmVFdmVudExpc3RlbmVyXCI7XG4gICAgb1tjXShcInBvaW50ZXJkb3duXCIsIHksIG4pLCB0W2NdKFwicG9pbnRlcm1vdmVcIiwgaCwgbiksIHRbY10oXCJwb2ludGVydXBcIiwgdiwgaSk7XG4gIH1cbiAgZnVuY3Rpb24gQygpIHtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXI6IGwsXG4gICAgICBlbDogclxuICAgIH0gPSBzO1xuICAgIHMucGFyYW1zLnNjcm9sbGJhciA9ICgwLCBfY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZE1pbi5jKShzLCBzLm9yaWdpbmFsUGFyYW1zLnNjcm9sbGJhciwgcy5wYXJhbXMuc2Nyb2xsYmFyLCB7XG4gICAgICBlbDogXCJzd2lwZXItc2Nyb2xsYmFyXCJcbiAgICB9KTtcbiAgICBjb25zdCBhID0gcy5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGlmICghYS5lbCkgcmV0dXJuO1xuICAgIGxldCBlLCBvO1xuICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGEuZWwgJiYgcy5pc0VsZW1lbnQgJiYgKGUgPSBzLmVsLnF1ZXJ5U2VsZWN0b3IoYS5lbCkpLCBlIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIGEuZWwgPyBlIHx8IChlID0gYS5lbCkgOiBlID0gdC5xdWVyeVNlbGVjdG9yQWxsKGEuZWwpLCBzLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBhLmVsICYmIGUubGVuZ3RoID4gMSAmJiAxID09PSByLnF1ZXJ5U2VsZWN0b3JBbGwoYS5lbCkubGVuZ3RoICYmIChlID0gci5xdWVyeVNlbGVjdG9yKGEuZWwpKSwgZS5sZW5ndGggPiAwICYmIChlID0gZVswXSksIGUuY2xhc3NMaXN0LmFkZChzLmlzSG9yaXpvbnRhbCgpID8gYS5ob3Jpem9udGFsQ2xhc3MgOiBhLnZlcnRpY2FsQ2xhc3MpLCBlICYmIChvID0gZS5xdWVyeVNlbGVjdG9yKGAuJHtzLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfWApLCBvIHx8IChvID0gKDAsIF91dGlsc01pbi5jKShcImRpdlwiLCBzLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKSwgZS5hcHBlbmQobykpKSwgT2JqZWN0LmFzc2lnbihsLCB7XG4gICAgICBlbDogZSxcbiAgICAgIGRyYWdFbDogb1xuICAgIH0pLCBhLmRyYWdnYWJsZSAmJiBzLnBhcmFtcy5zY3JvbGxiYXIuZWwgJiYgcy5zY3JvbGxiYXIuZWwgJiYgRChcIm9uXCIpLCBlICYmIGUuY2xhc3NMaXN0W3MuZW5hYmxlZCA/IFwicmVtb3ZlXCIgOiBcImFkZFwiXShzLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgfVxuICBmdW5jdGlvbiBFKCkge1xuICAgIGNvbnN0IGwgPSBzLnBhcmFtcy5zY3JvbGxiYXIsXG4gICAgICByID0gcy5zY3JvbGxiYXIuZWw7XG4gICAgciAmJiByLmNsYXNzTGlzdC5yZW1vdmUocy5pc0hvcml6b250YWwoKSA/IGwuaG9yaXpvbnRhbENsYXNzIDogbC52ZXJ0aWNhbENsYXNzKSwgcy5wYXJhbXMuc2Nyb2xsYmFyLmVsICYmIHMuc2Nyb2xsYmFyLmVsICYmIEQoXCJvZmZcIik7XG4gIH1cbiAgcih7XG4gICAgc2Nyb2xsYmFyOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGRyYWdTaXplOiBcImF1dG9cIixcbiAgICAgIGhpZGU6ICExLFxuICAgICAgZHJhZ2dhYmxlOiAhMSxcbiAgICAgIHNuYXBPblJlbGVhc2U6ICEwLFxuICAgICAgbG9ja0NsYXNzOiBcInN3aXBlci1zY3JvbGxiYXItbG9ja1wiLFxuICAgICAgZHJhZ0NsYXNzOiBcInN3aXBlci1zY3JvbGxiYXItZHJhZ1wiLFxuICAgICAgc2Nyb2xsYmFyRGlzYWJsZWRDbGFzczogXCJzd2lwZXItc2Nyb2xsYmFyLWRpc2FibGVkXCIsXG4gICAgICBob3Jpem9udGFsQ2xhc3M6IFwic3dpcGVyLXNjcm9sbGJhci1ob3Jpem9udGFsXCIsXG4gICAgICB2ZXJ0aWNhbENsYXNzOiBcInN3aXBlci1zY3JvbGxiYXItdmVydGljYWxcIlxuICAgIH1cbiAgfSksIHMuc2Nyb2xsYmFyID0ge1xuICAgIGVsOiBudWxsLFxuICAgIGRyYWdFbDogbnVsbFxuICB9LCBhKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgITEgPT09IHMucGFyYW1zLnNjcm9sbGJhci5lbmFibGVkID8gdygpIDogKEMoKSwgdSgpLCBiKCkpO1xuICB9KSwgYShcInVwZGF0ZSByZXNpemUgb2JzZXJ2ZXJVcGRhdGUgbG9jayB1bmxvY2tcIiwgKCkgPT4ge1xuICAgIHUoKTtcbiAgfSksIGEoXCJzZXRUcmFuc2xhdGVcIiwgKCkgPT4ge1xuICAgIGIoKTtcbiAgfSksIGEoXCJzZXRUcmFuc2l0aW9uXCIsIChsLCByKSA9PiB7XG4gICAgIWZ1bmN0aW9uIChsKSB7XG4gICAgICBzLnBhcmFtcy5zY3JvbGxiYXIuZWwgJiYgcy5zY3JvbGxiYXIuZWwgJiYgKHMuc2Nyb2xsYmFyLmRyYWdFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtsfW1zYCk7XG4gICAgfShyKTtcbiAgfSksIGEoXCJlbmFibGUgZGlzYWJsZVwiLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWw6IGxcbiAgICB9ID0gcy5zY3JvbGxiYXI7XG4gICAgbCAmJiBsLmNsYXNzTGlzdFtzLmVuYWJsZWQgPyBcInJlbW92ZVwiIDogXCJhZGRcIl0ocy5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gIH0pLCBhKFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgRSgpO1xuICB9KTtcbiAgY29uc3QgdyA9ICgpID0+IHtcbiAgICBzLmVsLmNsYXNzTGlzdC5hZGQocy5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpLCBzLnNjcm9sbGJhci5lbCAmJiBzLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKHMucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSwgRSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHMuc2Nyb2xsYmFyLCB7XG4gICAgZW5hYmxlOiAoKSA9PiB7XG4gICAgICBzLmVsLmNsYXNzTGlzdC5yZW1vdmUocy5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpLCBzLnNjcm9sbGJhci5lbCAmJiBzLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QucmVtb3ZlKHMucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSwgQygpLCB1KCksIGIoKTtcbiAgICB9LFxuICAgIGRpc2FibGU6IHcsXG4gICAgdXBkYXRlU2l6ZTogdSxcbiAgICBzZXRUcmFuc2xhdGU6IGIsXG4gICAgaW5pdDogQyxcbiAgICBkZXN0cm95OiBFXG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpmZFhScGJITk5hVzRpTENKeVpYRjFhWEpsSWl3aVgyTnlaV0YwWlVWc1pXMWxiblJKWms1dmRFUmxabWx1WldSTmFXNGlMQ0pUWTNKdmJHeGlZWElpTENKc0lpd2ljM2RwY0dWeUlpd2ljeUlzSW1WNGRHVnVaRkJoY21GdGN5SXNJbklpTENKdmJpSXNJbUVpTENKbGJXbDBJaXdpWlNJc0luUWlMQ0puWlhSRWIyTjFiV1Z1ZENJc0ltOGlMQ0p1SWl3aWFTSXNJbU1pTENKd0lpd2laQ0lzSW0waUxDSmlJaXdpY0dGeVlXMXpJaXdpYzJOeWIyeHNZbUZ5SWl3aVpXd2lMQ0p5ZEd4VWNtRnVjMnhoZEdVaUxDSmtjbUZuUld3aUxDSnNiMjl3SWl3aWNISnZaM0psYzNOTWIyOXdJaXdpY0hKdlozSmxjM01pTENKcGMwaHZjbWw2YjI1MFlXd2lMQ0p6ZEhsc1pTSXNJblJ5WVc1elptOXliU0lzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpYUdsa1pTSXNJbU5zWldGeVZHbHRaVzkxZENJc0ltOXdZV05wZEhraUxDSnpaWFJVYVcxbGIzVjBJaXdpZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1SWl3aWRTSXNJbTltWm5ObGRGZHBaSFJvSWl3aWIyWm1jMlYwU0dWcFoyaDBJaXdpYzJsNlpTSXNJblpwY25SMVlXeFRhWHBsSWl3aWMyeHBaR1Z6VDJabWMyVjBRbVZtYjNKbElpd2lZMlZ1ZEdWeVpXUlRiR2xrWlhNaUxDSnpibUZ3UjNKcFpDSXNJbVJ5WVdkVGFYcGxJaXdpY0dGeWMyVkpiblFpTENKa2FYTndiR0Y1SWl3aWQyRjBZMmhQZG1WeVpteHZkeUlzSW1WdVlXSnNaV1FpTENKamJHRnpjMHhwYzNRaUxDSnBjMHh2WTJ0bFpDSXNJbXh2WTJ0RGJHRnpjeUlzSW1ZaUxDSmpiR2xsYm5SWUlpd2lZMnhwWlc1MFdTSXNJbWNpTENKbGJHVnRaVzUwVDJabWMyVjBJaXdpVFdGMGFDSXNJbTFoZUNJc0ltMXBiaUlzSW0xcGJsUnlZVzV6YkdGMFpTSXNJbTFoZUZSeVlXNXpiR0YwWlNJc0luVndaR0YwWlZCeWIyZHlaWE56SWl3aWMyVjBWSEpoYm5Oc1lYUmxJaXdpZFhCa1lYUmxRV04wYVhabFNXNWtaWGdpTENKMWNHUmhkR1ZUYkdsa1pYTkRiR0Z6YzJWeklpd2llU0lzSW5keVlYQndaWEpGYkNJc0luUmhjbWRsZENJc0ltZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ0lzSW5CeVpYWmxiblJFWldaaGRXeDBJaXdpYzNSdmNGQnliM0JoWjJGMGFXOXVJaXdpWTNOelRXOWtaU0lzSW1naUxDSnlaWFIxY201V1lXeDFaU0lzSW5ZaUxDSnVaWGgwVkdsamF5SXNJbk51WVhCUGJsSmxiR1ZoYzJVaUxDSnpiR2xrWlZSdlEyeHZjMlZ6ZENJc0lrUWlMQ0p3WVhOemFYWmxUR2x6ZEdWdVpYSnpJaXdpY0dGemMybDJaU0lzSW1OaGNIUjFjbVVpTENKRElpd2lZM0psWVhSbFJXeGxiV1Z1ZEVsbVRtOTBSR1ZtYVc1bFpDSXNJbTl5YVdkcGJtRnNVR0Z5WVcxeklpd2lhWE5GYkdWdFpXNTBJaXdpY1hWbGNubFRaV3hsWTNSdmNpSXNJbkYxWlhKNVUyVnNaV04wYjNKQmJHd2lMQ0oxYm1seGRXVk9ZWFpGYkdWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1Ga1pDSXNJbWh2Y21sNmIyNTBZV3hEYkdGemN5SXNJblpsY25ScFkyRnNRMnhoYzNNaUxDSmtjbUZuUTJ4aGMzTWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lZWEJ3Wlc1a0lpd2lUMkpxWldOMElpd2lZWE56YVdkdUlpd2laSEpoWjJkaFlteGxJaXdpUlNJc0luSmxiVzkyWlNJc0luTmpjbTlzYkdKaGNrUnBjMkZpYkdWa1EyeGhjM01pTENKM0lpd2laR2x6WVdKc1pTSXNJbVZ1WVdKc1pTSXNJblZ3WkdGMFpWTnBlbVVpTENKcGJtbDBJaXdpWkdWemRISnZlU0pkTENKemIzVnlZMlZ6SWpwYklqQWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdRVUZCYVVNc1NVRkJRVUVzVTBGQlFTeEhRVUZCUXl4UFFVRkJPMEZCUTNGRExFbEJRVUZETERaQ1FVRkJMRWRCUVVGRUxFOUJRVUU3UVVGSGRFVXNVMEZCVTBVc1ZVRkJWVU1zUTBGQlFUdEZRVU5xUWp0SlFVRkpReXhOUVVGQkxFVkJRMFpETEVOQlFVRTdTVUZCVFVNc1dVRkJRU3hGUVVOT1F5eERRVUZCTzBsQlFWbERMRVZCUVVFc1JVRkRXa01zUTBGQlFUdEpRVUZGUXl4SlFVRkJMRVZCUTBaRE8wVkJRVUVzU1VGRFJWSXNRMEZCUVR0RlFVTktMRTFCUVUxVExFTkJRVUVzUjBGQlZ5eEpRVUZCUXl4clFrRkJRVHRGUVVOcVFpeEpRVWRKUXl4RFFVRkJPMGxCUTBGRExFTkJRVUU3U1VGRFFVTXNRMEZCUVR0SlFVTkJReXhEUVVGQk8wbEJUa0ZETEVOQlFVRXNTVUZCV1R0SlFVTmFReXhEUVVGQkxFZEJRVlU3U1VGRFZrTXNRMEZCUVN4SFFVRmpPMFZCZFVKc1FpeFRRVUZUUXl4RlFVRkJPMGxCUTFBc1MwRkJTMmhDTEVOQlFVRXNRMEZCVDJsQ0xFMUJRVUVzUTBGQlQwTXNVMEZCUVN4RFFVRlZReXhGUVVGQkxFdEJRVTl1UWl4RFFVRkJMRU5CUVU5clFpeFRRVUZCTEVOQlFWVkRMRVZCUVVFc1JVRkJTVHRKUVVONlJEdFJRVUZOUkN4VFFVRkJMRVZCUTBwd1FpeERRVUZCTzFGQlEwRnpRaXhaUVVGQkxFVkJRV05zUWp0TlFVRkJMRWxCUTFwR0xFTkJRVUU3VFVGQlFUdFJRVU5GY1VJc1RVRkJRU3hGUVVOS2FrSXNRMEZCUVR0UlFVRk5aU3hGUVVGQkxFVkJRMDVpTzAxQlFVRXNTVUZEUlZJc1EwRkJRVHROUVVORlV5eERRVUZCTEVkQlFWTlFMRU5CUVVFc1EwRkJUMmxDTEUxQlFVRXNRMEZCVDBNc1UwRkJRVHROUVVOMlFsUXNRMEZCUVN4SFFVRlhWQ3hEUVVGQkxFTkJRVTlwUWl4TlFVRkJMRU5CUVU5TExFbEJRVUVzUjBGQlQzUkNMRU5CUVVFc1EwRkJUM1ZDTEZsQlFVRXNSMEZCWlhaQ0xFTkJRVUVzUTBGQlQzZENMRkZCUVVFN1NVRkRia1VzU1VGQlNWb3NRMEZCUVN4SFFVRlZSaXhEUVVGQk8wMUJRMVpITEVOQlFVRXNTVUZCVlVZc1EwRkJRU3hIUVVGWlJDeERRVUZCTEVsQlFWbEVMRU5CUVVFN1NVRkRiRU5RTEVOQlFVRXNTVUZEUmxjc1EwRkJRU3hKUVVGVlFTeERRVUZCTEVWQlEwNUJMRU5CUVVFc1IwRkJVeXhMUVVOWVJDeERRVUZCTEVkQlFWVkdMRU5CUVVFc1IwRkJWMGNzUTBGQlFTeEZRVU55UWtFc1EwRkJRU3hIUVVGVExFMUJRME5CTEVOQlFVRXNSMEZCVTBnc1EwRkJRU3hIUVVGWFF5eERRVUZCTEV0QlF6bENReXhEUVVGQkxFZEJRVlZFTEVOQlFVRXNSMEZCV1VVc1EwRkJRU3hMUVVWbVFTeERRVUZCTEVkQlFWTXNTMEZEYkVKRUxFTkJRVUVzUjBGQlZVWXNRMEZCUVN4SFFVRlhSeXhEUVVGQkxFVkJRM0pDUVN4RFFVRkJMRWRCUVZNc1MwRkRRVUVzUTBGQlFTeEhRVUZUU0N4RFFVRkJMRWRCUVZkRExFTkJRVUVzUzBGRE4wSkRMRU5CUVVFc1IwRkJWVVFzUTBGQlFTeEhRVUZaUlN4RFFVRkJMRWRCUlhCQ1lpeERRVUZCTEVOQlFVOTVRaXhaUVVGQkxFMUJRMVJ5UWl4RFFVRkJMRU5CUVU5elFpeExRVUZCTEVOQlFVMURMRk5CUVVFc1IwRkJXU3hsUVVGbFpDeERRVUZCTEdGQlEzaERWQ3hEUVVGQkxFTkJRVTl6UWl4TFFVRkJMRU5CUVUxRkxFdEJRVUVzUjBGQlVTeEhRVUZIYUVJc1EwRkJRU3hUUVVWNFFsSXNRMEZCUVN4RFFVRlBjMElzUzBGQlFTeERRVUZOUXl4VFFVRkJMRWRCUVZrc2IwSkJRVzlDWkN4RFFVRkJMRlZCUXpkRFZDeERRVUZCTEVOQlFVOXpRaXhMUVVGQkxFTkJRVTFITEUxQlFVRXNSMEZCVXl4SFFVRkhha0lzUTBGQlFTeFBRVVYyUWt3c1EwRkJRU3hEUVVGUGRVSXNTVUZCUVN4TFFVTlVReXhaUVVGQkxFTkJRV0ZxUWl4RFFVRkJMRWRCUTJKU0xFTkJRVUVzUTBGQlIyOUNMRXRCUVVFc1EwRkJUVTBzVDBGQlFTeEhRVUZWTEVkQlEyNUNiRUlzUTBGQlFTeEhRVUZWYlVJc1ZVRkJRU3hEUVVGWE8wMUJRMjVDTTBJc1EwRkJRU3hEUVVGSGIwSXNTMEZCUVN4RFFVRk5UU3hQUVVGQkxFZEJRVlVzUjBGRGJrSXhRaXhEUVVGQkxFTkJRVWR2UWl4TFFVRkJMRU5CUVUxUkxHdENRVUZCTEVkQlFYRkNMRTlCUVU4N1NVRkJRU3hIUVVOd1F5eExRVVZRTzBWQlFVRTdSVUZMUVN4VFFVRlRReXhGUVVGQk8wbEJRMUFzUzBGQlMyNURMRU5CUVVFc1EwRkJUMmxDTEUxQlFVRXNRMEZCVDBNc1UwRkJRU3hEUVVGVlF5eEZRVUZCTEV0QlFVOXVRaXhEUVVGQkxFTkJRVTlyUWl4VFFVRkJMRU5CUVZWRExFVkJRVUVzUlVGQlNUdEpRVU42UkR0UlFVRk5SQ3hUUVVGQkxFVkJRMHB3UWp0TlFVRkJMRWxCUTBWRkxFTkJRVUU3VFVGQlFUdFJRVU5GY1VJc1RVRkJRU3hGUVVOS2JrSXNRMEZCUVR0UlFVRk5hVUlzUlVGQlFTeEZRVU5PWmp0TlFVRkJMRWxCUTBWT0xFTkJRVUU3U1VGRFNra3NRMEZCUVN4RFFVRlBkMElzUzBGQlFTeERRVUZOUlN4TFFVRkJMRWRCUVZFc1NVRkRja0l4UWl4RFFVRkJMRU5CUVU5M1FpeExRVUZCTEVOQlFVMUhMRTFCUVVFc1IwRkJVeXhKUVVOMFFteENMRU5CUVVFc1IwRkJXVmdzUTBGQlFTeERRVUZQZVVJc1dVRkJRU3hMUVVGcFFuSkNMRU5CUVVFc1EwRkJSMmRETEZkQlFVRXNSMEZCWTJoRExFTkJRVUVzUTBGQlIybERMRmxCUVVFc1JVRkRlRVI2UWl4RFFVRkJMRWRCUVZWYUxFTkJRVUVzUTBGQlQzTkRMRWxCUVVFc1NVRkJVWFJETEVOQlFVRXNRMEZCVDNWRExGZEJRVUVzUjBGQlkzWkRMRU5CUVVFc1EwRkJUMmxDTEUxQlFVRXNRMEZCVDNWQ0xHdENRVUZCTEVsQlFYTkNlRU1zUTBGQlFTeERRVUZQYVVJc1RVRkJRU3hEUVVGUGQwSXNZMEZCUVN4SFFVRnBRbnBETEVOQlFVRXNRMEZCVHpCRExGRkJRVUVzUTBGQlV5eExRVUZMTEV0QlJYQkphRU1zUTBGQlFTeEhRVVIxUXl4WFFVRnlRMVlzUTBGQlFTeERRVUZQYVVJc1RVRkJRU3hEUVVGUFF5eFRRVUZCTEVOQlFWVjVRaXhSUVVGQkxFZEJRMlpvUXl4RFFVRkJMRWRCUVZsRExFTkJRVUVzUjBGRldtZERMRkZCUVVFc1EwRkJVelZETEVOQlFVRXNRMEZCVDJsQ0xFMUJRVUVzUTBGQlQwTXNVMEZCUVN4RFFVRlZlVUlzVVVGQlFTeEZRVUZWTEV0QlJYQkVNME1zUTBGQlFTeERRVUZQZVVJc1dVRkJRU3hMUVVOVWRrSXNRMEZCUVN4RFFVRlBkMElzUzBGQlFTeERRVUZOUlN4TFFVRkJMRWRCUVZFc1IwRkJSMnhDTEVOQlFVRXNUMEZGZUVKU0xFTkJRVUVzUTBGQlQzZENMRXRCUVVFc1EwRkJUVWNzVFVGQlFTeEhRVUZUTEVkQlFVZHVRaXhEUVVGQkxFMUJSM3BDVGl4RFFVRkJMRU5CUVVkelFpeExRVUZCTEVOQlFVMXRRaXhQUVVGQkxFZEJSRkJxUXl4RFFVRkJMRWxCUVZjc1NVRkRUU3hUUVVWQkxFbEJSV3BDV2l4RFFVRkJMRU5CUVU5cFFpeE5RVUZCTEVOQlFVOURMRk5CUVVFc1EwRkJWVmtzU1VGQlFTeExRVU14UWpGQ0xFTkJRVUVzUTBGQlIzTkNMRXRCUVVFc1EwRkJUVTBzVDBGQlFTeEhRVUZWTEVsQlJXcENhRU1zUTBGQlFTeERRVUZQYVVJc1RVRkJRU3hEUVVGUE5rSXNZVUZCUVN4SlFVRnBRamxETEVOQlFVRXNRMEZCVHl0RExFOUJRVUVzU1VGRGVFTnFSQ3hEUVVGQkxFTkJRVlZ4UWl4RlFVRkJMRU5CUVVjMlFpeFRRVUZCTEVOQlFWVm9SQ3hEUVVGQkxFTkJRVTlwUkN4UlFVRkJMRWRCUVZjc1VVRkJVU3hWUVVGVmFrUXNRMEZCUVN4RFFVRlBhVUlzVFVGQlFTeERRVUZQUXl4VFFVRkJMRU5CUVZWblF5eFRRVUZCTEVOQlJYWkdPMFZCUVVFN1JVRkRRU3hUUVVGVFF5eEZRVUZ0UW5KRUxFTkJRVUU3U1VGRE1VSXNUMEZCVDBVc1EwRkJRU3hEUVVGUGVVSXNXVUZCUVN4TFFVRnBRak5DTEVOQlFVRXNRMEZCUlhORUxFOUJRVUVzUjBGQlZYUkVMRU5CUVVFc1EwRkJSWFZFTEU5QlF5OURPMFZCUVVFN1JVRkRRU3hUUVVGVFF5eEZRVUZuUW5oRUxFTkJRVUU3U1VGRGRrSTdVVUZCVFc5Q0xGTkJRVUVzUlVGRFNtaENMRU5CUVVFN1VVRkRRV3RDTEZsQlFVRXNSVUZCWTJoQ08wMUJRVUVzU1VGRFdrb3NRMEZCUVR0TlFVRkJPMUZCUTBWdFFpeEZRVUZCTEVWQlEwcGlPMDFCUVVFc1NVRkRSVW9zUTBGQlFUdEpRVU5LTEVsQlFVbExMRU5CUVVFN1NVRkRTa0VzUTBGQlFTeEpRVUZwUWpSRExFTkJRVUVzUTBGQmJVSnlSQ3hEUVVGQkxFbEJRVXNzU1VGQlFYbEVMRmRCUVVFc1JVRkJZMnBFTEVOQlFVRXNSVUZCU1U0c1EwRkJRU3hEUVVGUGVVSXNXVUZCUVN4TFFVRnBRaXhUUVVGVExGVkJRVEpDTEZOQlFXcENhRUlzUTBGQlFTeEhRVUYzUWtFc1EwRkJRU3hIUVVGbFF5eERRVUZCTEVkQlFWY3NUMEZCVDBNc1EwRkJRU3hIUVVGWlJDeERRVUZCTEVkQlF6TkxTQ3hEUVVGQkxFZEJRV2RDYVVRc1NVRkJRU3hEUVVGTFF5eEhRVUZCTEVOQlFVbEVMRWxCUVVFc1EwRkJTMFVzUjBGQlFTeERRVUZKYmtRc1EwRkJRU3hGUVVGbExFbEJRVWtzU1VGRGFrUklMRU5CUVVFc1MwRkRSa2NzUTBGQlFTeEhRVUZuUWl4SlFVRkpRU3hEUVVGQk8wbEJSWFJDTEUxQlFVMUxMRU5CUVVFc1IwRkJWMW9zUTBGQlFTeERRVUZQTWtRc1dVRkJRU3hOUVVGclFqTkVMRU5CUVVFc1EwRkJUelJFTEZsQlFVRXNTMEZCYVVJMVJDeERRVUZCTEVOQlFVOHlSQ3haUVVGQkxFMUJRV3RDY0VRc1EwRkJRVHRKUVVNelJsQXNRMEZCUVN4RFFVRlBOa1FzWTBGQlFTeERRVUZsYWtRc1EwRkJRU3hIUVVOMFFsb3NRMEZCUVN4RFFVRlBPRVFzV1VGQlFTeERRVUZoYkVRc1EwRkJRU3hIUVVOd1Fsb3NRMEZCUVN4RFFVRlBLMFFzYVVKQlFVRXNTVUZEVUM5RUxFTkJRVUVzUTBGQlQyZEZMRzFDUVVGQkxFVkJRMVE3UlVGQlFUdEZRVU5CTEZOQlFWTkRMRVZCUVZsdVJTeERRVUZCTzBsQlEyNUNMRTFCUVUxSkxFTkJRVUVzUjBGQlUwWXNRMEZCUVN4RFFVRlBhVUlzVFVGQlFTeERRVUZQUXl4VFFVRkJPMDFCUVVFN1VVRkRka0pCTEZOQlFVRXNSVUZEU21Rc1EwRkJRVHRSUVVGVE9FUXNVMEZCUVN4RlFVTlVNMFE3VFVGQlFTeEpRVU5GVUN4RFFVRkJPMDFCUVVFN1VVRkRSVzFDTEVWQlFVRXNSVUZEU2xRc1EwRkJRVHRSUVVGRlZ5eE5RVUZCTEVWQlEwWldPMDFCUVVFc1NVRkRSVkFzUTBGQlFUdEpRVU5LVXl4RFFVRkJMRWxCUVZrc1IwRkRXa29zUTBGQlFTeEhRVUZsV0N4RFFVRkJMRU5CUVVWeFJTeE5RVUZCTEV0QlFWZDRSQ3hEUVVGQkxFZEJRVk4zUXl4RFFVRkJMRU5CUVcxQ2NrUXNRMEZCUVN4SlFVRkxRU3hEUVVGQkxFTkJRVVZ4UlN4TlFVRkJMRU5CUVU5RExIRkNRVUZCTEVkQlFYZENjRVVzUTBGQlFTeERRVUZQZVVJc1dVRkJRU3hMUVVGcFFpeFRRVUZUTEZOQlFWTXNUVUZEZUVrelFpeERRVUZCTEVOQlFVVjFSU3hqUVVGQkxFbEJRMFoyUlN4RFFVRkJMRU5CUVVWM1JTeGxRVUZCTEVsQlEwWXZSQ3hEUVVGQkxFTkJRVlZ0UWl4TFFVRkJMRU5CUVUxUkxHdENRVUZCTEVkQlFYRkNMRk5CUTNKRGRrSXNRMEZCUVN4RFFVRlBaU3hMUVVGQkxFTkJRVTFSTEd0Q1FVRkJMRWRCUVhGQ0xGTkJRMnhEYjBJc1EwRkJRU3hEUVVGblFuaEVMRU5CUVVFc1IwRkRhRUpwUXl4WlFVRkJMRU5CUVdGb1FpeERRVUZCTEVkQlEySk1MRU5CUVVFc1EwRkJSMmRDTEV0QlFVRXNRMEZCVFZFc2EwSkJRVUVzUjBGQmNVSXNUMEZETVVKb1F5eERRVUZCTEVOQlFVODBRaXhKUVVGQkxFdEJRMVJ3UWl4RFFVRkJMRU5CUVVkblFpeExRVUZCTEVOQlFVMU5MRTlCUVVFc1IwRkJWU3hKUVVWcVFtaERMRU5CUVVFc1EwRkJUMmxDTEUxQlFVRXNRMEZCVDNORUxFOUJRVUVzUzBGRGFFSjJSU3hEUVVGQkxFTkJRVTlyUlN4VFFVRkJMRU5CUVZWNFF5eExRVUZCTEVOQlFVMHNjMEpCUVhOQ0xGTkJSUzlEY0VJc1EwRkJRU3hEUVVGTExITkNRVUZ6UWxJc1EwRkJRU3hEUVVNM1FqdEZRVUZCTzBWQlEwRXNVMEZCVXpCRkxFVkJRVmN4UlN4RFFVRkJPMGxCUTJ4Q08xRkJRVTF2UWl4VFFVRkJMRVZCUTBwb1FpeERRVUZCTzFGQlFWTm5SU3hUUVVGQkxFVkJRMVE1UkR0TlFVRkJMRWxCUTBWS0xFTkJRVUU3VFVGQlFUdFJRVU5GYlVJc1JVRkJRU3hGUVVOS1dpeERRVUZCTzFGQlFVVmpMRTFCUVVFc1JVRkRSbG83VFVGQlFTeEpRVU5GVUN4RFFVRkJPMGxCUTBOWExFTkJRVUVzUzBGRFJHWXNRMEZCUVN4RFFVRkZkVVVzWTBGQlFTeEhRVUZuUW5aRkxFTkJRVUVzUTBGQlJYVkZMR05CUVVFc1MwRkJjMEoyUlN4RFFVRkJMRU5CUVVVeVJTeFhRVUZCTEVsQlFXTXNSMEZET1VSdVFpeERRVUZCTEVOQlFXZENlRVFzUTBGQlFTeEhRVU5vUWswc1EwRkJRU3hEUVVGVmMwSXNTMEZCUVN4RFFVRk5VU3hyUWtGQlFTeEhRVUZ4UWl4UFFVTnlRek5DTEVOQlFVRXNRMEZCUjIxQ0xFdEJRVUVzUTBGQlRWRXNhMEpCUVVFc1IwRkJjVUlzVDBGRE9VSjZRaXhEUVVGQkxFTkJRVTlwUWl4TFFVRkJMRU5CUVUxUkxHdENRVUZCTEVkQlFYRkNMRTlCUTJ4RE5VSXNRMEZCUVN4RFFVRkxMSEZDUVVGeFFsSXNRMEZCUVN4RlFVTTFRanRGUVVGQk8wVkJRMEVzVTBGQlV6UkZMRVZCUVZVMVJTeERRVUZCTzBsQlEycENMRTFCUVUxSkxFTkJRVUVzUjBGQlUwWXNRMEZCUVN4RFFVRlBhVUlzVFVGQlFTeERRVUZQUXl4VFFVRkJPMDFCUVVFN1VVRkRka0pCTEZOQlFVRXNSVUZEU21Rc1EwRkJRVHRSUVVGVE9FUXNVMEZCUVN4RlFVTlVNMFE3VFVGQlFTeEpRVU5GVUN4RFFVRkJPMDFCUVVFN1VVRkRSVzFDTEVWQlFVRXNSVUZEU2xZN1RVRkJRU3hKUVVORlRDeERRVUZCTzBsQlEwTlRMRU5CUVVFc1MwRkRURUVzUTBGQlFTeEpRVUZaTEVkQlExSmlMRU5CUVVFc1EwRkJUMmxDTEUxQlFVRXNRMEZCVDNORUxFOUJRVUVzUzBGRGFFSjJSU3hEUVVGQkxFTkJRVTlyUlN4VFFVRkJMRU5CUVZWNFF5eExRVUZCTEVOQlFVMHNjMEpCUVhOQ0xFbEJRemREYmtJc1EwRkJRU3hEUVVGVmJVSXNTMEZCUVN4RFFVRk5VU3hyUWtGQlFTeEhRVUZ4UWl4TFFVVnVRMmhETEVOQlFVRXNRMEZCVHpSQ0xFbEJRVUVzUzBGRFZFTXNXVUZCUVN4RFFVRmhhRUlzUTBGQlFTeEhRVU5pUVN4RFFVRkJMRWRCUVdNc1NVRkJRVFJFTEZkQlFVRXNSVUZCVXp0TlFVTnlRbXhGTEVOQlFVRXNRMEZCUjJsQ0xFdEJRVUVzUTBGQlRVMHNUMEZCUVN4SFFVRlZMRWRCUTI1Q2RrSXNRMEZCUVN4RFFVRkhhVUlzUzBGQlFTeERRVUZOVVN4clFrRkJRU3hIUVVGeFFpeFBRVUZQTzBsQlFVRXNSMEZEY0VNc1QwRkZURFZDTEVOQlFVRXNRMEZCU3l4dlFrRkJiMEpTTEVOQlFVRXNSMEZEY2tKSkxFTkJRVUVzUTBGQlR6QkZMR0ZCUVVFc1NVRkRWRFZGTEVOQlFVRXNRMEZCVHpaRkxHTkJRVUVzUjBGRldEdEZRVUZCTzBWQlEwRXNVMEZCVTBNc1JVRkJUMmhHTEVOQlFVRTdTVUZEWkR0UlFVRk5iMElzVTBGQlFTeEZRVU5LYUVJc1EwRkJRVHRSUVVGVFpTeE5RVUZCTEVWQlExUmlPMDFCUVVFc1NVRkRSVW9zUTBGQlFUdE5RVU5GVFN4RFFVRkJMRWRCUVV0S0xFTkJRVUVzUTBGQlZXbENMRVZCUVVFN1NVRkRja0lzUzBGQlMySXNRMEZCUVN4RlFVRkpPMGxCUTFRc1RVRkJUVWNzUTBGQlFTeEhRVUZUU0N4RFFVRkJPMDFCUTFSSkxFTkJRVUVzUzBGQmFVSk9MRU5CUVVFc1EwRkJUekpGTEdkQ1FVRkJMRWxCUVcxQ08xRkJReTlEUXl4UFFVRkJMRWRCUVZNN1VVRkRWRU1zVDBGQlFTeEhRVUZUTzAxQlFVRTdUVUZGVEhSRkxFTkJRVUVzUzBGQmEwSlFMRU5CUVVFc1EwRkJUekpGTEdkQ1FVRkJMRWxCUVcxQ08xRkJRMmhFUXl4UFFVRkJMRWRCUVZNN1VVRkRWRU1zVDBGQlFTeEhRVUZUTzAxQlFVRTdTVUZGV0N4TFFVRkxlRVVzUTBGQlFTeEZRVUZSTzBsQlEySXNUVUZCVFVjc1EwRkJRU3hIUVVGNVFpeFRRVUZZWkN4RFFVRkJMRWRCUVd0Q0xIRkNRVUZ4UWp0SlFVTXpSRmNzUTBGQlFTeERRVUZQUnl4RFFVRkJMRVZCUVdFc1pVRkJaWEZFTEVOQlFVRXNSVUZCWVhaRUxFTkJRVUVzUjBGRGFFUklMRU5CUVVFc1EwRkJVMHNzUTBGQlFTeEZRVUZoTEdWQlFXVTBSQ3hEUVVGQkxFVkJRVms1UkN4RFFVRkJMRWRCUTJwRVNDeERRVUZCTEVOQlFWTkxMRU5CUVVFc1JVRkJZU3hoUVVGaE9FUXNRMEZCUVN4RlFVRlhMMFFzUTBGQlFTeERRVU5vUkR0RlFVRkJPMFZCVTBFc1UwRkJVM1ZGTEVWQlFVRTdTVUZEVUR0TlFVRk5hRVVzVTBGQlFTeEZRVU5LY0VJc1EwRkJRVHROUVVOQmNVSXNSVUZCUVN4RlFVRkpha0k3U1VGQlFTeEpRVU5HUml4RFFVRkJPMGxCUTBwQkxFTkJRVUVzUTBGQlQybENMRTFCUVVFc1EwRkJUME1zVTBGQlFTeEhRVUZaTEVsQlFVRnBSU3dyUWtGQlFTeEZRVUV3UW01R0xFTkJRVUVzUlVGQlVVRXNRMEZCUVN4RFFVRlBiMFlzWTBGQlFTeERRVUZsYkVVc1UwRkJRU3hGUVVGWGJFSXNRMEZCUVN4RFFVRlBhVUlzVFVGQlFTeERRVUZQUXl4VFFVRkJMRVZCUVZjN1RVRkRjRWhETEVWQlFVRXNSVUZCU1R0SlFVRkJPMGxCUlU0c1RVRkJUV1lzUTBGQlFTeEhRVUZUU2l4RFFVRkJMRU5CUVU5cFFpeE5RVUZCTEVOQlFVOURMRk5CUVVFN1NVRkROMElzUzBGQlMyUXNRMEZCUVN4RFFVRlBaU3hGUVVGQkxFVkJRVWs3U1VGRGFFSXNTVUZCU1dJc1EwRkJRU3hGUVdOQlJ5eERRVUZCTzBsQlluRkNMRzFDUVVGa1RDeERRVUZCTEVOQlFVOWxMRVZCUVVFc1NVRkJiVUp1UWl4RFFVRkJMRU5CUVU5eFJpeFRRVUZCTEV0QlF6RkRMMFVzUTBGQlFTeEhRVUZMVGl4RFFVRkJMRU5CUVU5dFFpeEZRVUZCTEVOQlFVZHRSU3hoUVVGQkxFTkJRV05zUml4RFFVRkJMRU5CUVU5bExFVkJRVUVzU1VGRmFrTmlMRU5CUVVFc1NVRkJNa0lzYlVKQlFXUkdMRU5CUVVFc1EwRkJUMlVzUlVGQlFTeEhRVVZpWWl4RFFVRkJMRXRCUTFaQkxFTkJRVUVzUjBGQlMwWXNRMEZCUVN4RFFVRlBaU3hGUVVGQkxFbEJSbHBpTEVOQlFVRXNSMEZCUzBNc1EwRkJRU3hEUVVGVFowWXNaMEpCUVVFc1EwRkJhVUp1Uml4RFFVRkJMRU5CUVU5bExFVkJRVUVzUjBGSmNFTnVRaXhEUVVGQkxFTkJRVTlwUWl4TlFVRkJMRU5CUVU5MVJTeHBRa0ZCUVN4SlFVRXdReXh0UWtGQlpIQkdMRU5CUVVFc1EwRkJUMlVzUlVGQlFTeEpRVUZ0UW1Jc1EwRkJRU3hEUVVGSGJVWXNUVUZCUVN4SFFVRlRMRXRCUVhGRUxFMUJRV2hFZGtZc1EwRkJRU3hEUVVGVGNVWXNaMEpCUVVFc1EwRkJhVUp1Uml4RFFVRkJMRU5CUVU5bExFVkJRVUVzUlVGQlNYTkZMRTFCUVVFc1MwRkROVWh1Uml4RFFVRkJMRWRCUVV0S0xFTkJRVUVzUTBGQlUyOUdMR0ZCUVVFc1EwRkJZMnhHTEVOQlFVRXNRMEZCVDJVc1JVRkJRU3hKUVVWcVEySXNRMEZCUVN4RFFVRkhiVVlzVFVGQlFTeEhRVUZUTEUxQlFVZHVSaXhEUVVGQkxFZEJRVXRCTEVOQlFVRXNRMEZCUnl4TFFVTXpRa0VzUTBGQlFTeERRVUZITUVNc1UwRkJRU3hEUVVGVk1FTXNSMEZCUVN4RFFVRkpNVVlzUTBGQlFTeERRVUZQZVVJc1dVRkJRU3hMUVVGcFFuSkNMRU5CUVVFc1EwRkJUM1ZHTEdWQlFVRXNSMEZCYTBKMlJpeERRVUZCTEVOQlFVOTNSaXhoUVVGQkxFZEJSWEpGZEVZc1EwRkJRU3hMUVVOR1J5eERRVUZCTEVkQlFWTklMRU5CUVVFc1EwRkJSMmRHTEdGQlFVRXNRMEZCWXl4SlFVRkpkRVlzUTBGQlFTeERRVUZQYVVJc1RVRkJRU3hEUVVGUFF5eFRRVUZCTEVOQlFWVXlSU3hUUVVGQkxFdEJRMnBFY0VZc1EwRkJRU3hMUVVOSVFTeERRVUZCTEVkQlFWTXNTVUZCUVhGR0xGZEJRVUVzUlVGQll5eFBRVUZQT1VZc1EwRkJRU3hEUVVGUGFVSXNUVUZCUVN4RFFVRlBReXhUUVVGQkxFTkJRVlV5UlN4VFFVRkJMRWRCUTNSRWRrWXNRMEZCUVN4RFFVRkhlVVlzVFVGQlFTeERRVUZQZEVZc1EwRkJRU3hMUVVka2RVWXNUVUZCUVN4RFFVRlBReXhOUVVGQkxFTkJRVTl1Unl4RFFVRkJMRVZCUVZjN1RVRkRka0p4UWl4RlFVRkJMRVZCUVVGaUxFTkJRVUU3VFVGRFFXVXNUVUZCUVN4RlFVRkJXanRKUVVGQkxFbEJSVVZNTEVOQlFVRXNRMEZCVHpoR0xGTkJRVUVzU1VFelEwNXNSeXhEUVVGQkxFTkJRVTlwUWl4TlFVRkJMRU5CUVU5RExGTkJRVUVzUTBGQlZVTXNSVUZCUVN4SlFVRlBia0lzUTBGQlFTeERRVUZQYTBJc1UwRkJRU3hEUVVGVlF5eEZRVUZCTEVsQlEzSkVNa1FzUTBGQlFTeERRVUZQTEU5Qk5rTkllRVVzUTBGQlFTeEpRVU5HUVN4RFFVRkJMRU5CUVVjd1F5eFRRVUZCTEVOQlFWVm9SQ3hEUVVGQkxFTkJRVThyUXl4UFFVRkJMRWRCUVZVc1YwRkJWeXhQUVVGUEwwTXNRMEZCUVN4RFFVRlBhVUlzVFVGQlFTeERRVUZQUXl4VFFVRkJMRU5CUVZWblF5eFRRVUZCTEVOQlJUVkZPMFZCUVVFN1JVRkRRU3hUUVVGVGFVUXNSVUZCUVR0SlFVTlFMRTFCUVUxeVJ5eERRVUZCTEVkQlFWTkZMRU5CUVVFc1EwRkJUMmxDTEUxQlFVRXNRMEZCVDBNc1UwRkJRVHROUVVOMlFtaENMRU5CUVVFc1IwRkJTMFlzUTBGQlFTeERRVUZQYTBJc1UwRkJRU3hEUVVGVlF5eEZRVUZCTzBsQlEzaENha0lzUTBGQlFTeEpRVU5HUVN4RFFVRkJMRU5CUVVjNFF5eFRRVUZCTEVOQlFWVnZSQ3hOUVVGQkxFTkJRVTl3Unl4RFFVRkJMRU5CUVU5NVFpeFpRVUZCTEV0QlFXbENNMElzUTBGQlFTeERRVUZQTmtZc1pVRkJRU3hIUVVGclFqZEdMRU5CUVVFc1EwRkJUemhHTEdGQlFVRXNSMEZzUkhwRk5VWXNRMEZCUVN4RFFVRlBhVUlzVFVGQlFTeERRVUZQUXl4VFFVRkJMRU5CUVZWRExFVkJRVUVzU1VGQlQyNUNMRU5CUVVFc1EwRkJUMnRDTEZOQlFVRXNRMEZCVlVNc1JVRkJRU3hKUVVOeVJESkVMRU5CUVVFc1EwRkJUeXhOUVc5RVZEdEZRVUZCTzBWQmJsSkJOVVVzUTBGQlFTeERRVUZoTzBsQlExaG5RaXhUUVVGQkxFVkJRVmM3VFVGRFZFTXNSVUZCUVN4RlFVRkpPMDFCUTBwM1FpeFJRVUZCTEVWQlFWVTdUVUZEVm1Jc1NVRkJRU3hIUVVGTk8wMUJRMDV2UlN4VFFVRkJMRWRCUVZjN1RVRkRXSFJDTEdGQlFVRXNSMEZCWlR0TlFVTm1NVUlzVTBGQlFTeEZRVUZYTzAxQlExZ3lReXhUUVVGQkxFVkJRVmM3VFVGRFdGRXNjMEpCUVVFc1JVRkJkMEk3VFVGRGVFSldMR1ZCUVVFc1JVRkJhVUk3VFVGRGFrSkRMR0ZCUVVFc1JVRkJaVHRKUVVGQk8wVkJRVUVzU1VGSGJrSTFSaXhEUVVGQkxFTkJRVTlyUWl4VFFVRkJMRWRCUVZrN1NVRkRha0pETEVWQlFVRXNSVUZCU1R0SlFVTktSU3hOUVVGQkxFVkJRVkU3UlVGQlFTeEhRVzlSVm1wQ0xFTkJRVUVzUTBGQlJ5eFJRVUZSTzBsQlFVRXNRMEZESzBJc1RVRkJjRU5LTEVOQlFVRXNRMEZCVDJsQ0xFMUJRVUVzUTBGQlQwTXNVMEZCUVN4RFFVRlZOa0lzVDBGQlFTeEhRVVV4UW5WRUxFTkJRVUVzVFVGRlFYQkNMRU5CUVVFc1NVRkRRUzlETEVOQlFVRXNTVUZEUVc1Q0xFTkJRVUVzUjBGRFJqdEZRVUZCTEVsQlJVWmFMRU5CUVVFc1EwRkJSeXcwUTBGQk5FTTdTVUZETjBNclFpeERRVUZCTEVWQlFWazdSVUZCUVN4SlFVVmtMMElzUTBGQlFTeERRVUZITEdkQ1FVRm5RanRKUVVOcVFsa3NRMEZCUVN4RlFVRmpPMFZCUVVFc1NVRkZhRUphTEVOQlFVRXNRMEZCUnl4cFFrRkJhVUlzUTBGQlEwNHNRMEZCUVN4RlFVRkpTU3hEUVVGQk8wbEJRVUVzUTBGMFQzcENMRlZCUVhWQ1NpeERRVUZCTzAxQlEyaENSU3hEUVVGQkxFTkJRVTlwUWl4TlFVRkJMRU5CUVU5RExGTkJRVUVzUTBGQlZVTXNSVUZCUVN4SlFVRlBia0lzUTBGQlFTeERRVUZQYTBJc1UwRkJRU3hEUVVGVlF5eEZRVUZCTEV0QlEzSkVia0lzUTBGQlFTeERRVUZQYTBJc1UwRkJRU3hEUVVGVlJ5eE5RVUZCTEVOQlFVOUxMRXRCUVVFc1EwRkJUVkVzYTBKQlFVRXNSMEZCY1VJc1IwRkJSM0JETEVOQlFVRXNTMEZEZUVRN1NVRkJRU3hEUVc5UFJTeERRVUZqU1N4RFFVRkJMRU5CUVZNN1JVRkJRU3hKUVVWNlFrVXNRMEZCUVN4RFFVRkhMR3RDUVVGclFqdEpRVU51UWp0TlFVRk5aU3hGUVVGQkxFVkJRMHB5UWp0SlFVRkJMRWxCUTBWRkxFTkJRVUVzUTBGQlQydENMRk5CUVVFN1NVRkRVSEJDTEVOQlFVRXNTVUZEUmtFc1EwRkJRU3hEUVVGSGEwUXNVMEZCUVN4RFFVRlZhRVFzUTBGQlFTeERRVUZQSzBNc1QwRkJRU3hIUVVGVkxGZEJRVmNzVDBGQlR5OURMRU5CUVVFc1EwRkJUMmxDTEUxQlFVRXNRMEZCVDBNc1UwRkJRU3hEUVVGVlowTXNVMEZCUVN4RFFVTXhSVHRGUVVGQkxFbEJSVVk1UXl4RFFVRkJMRU5CUVVjc1YwRkJWenRKUVVOYUswWXNRMEZCUVN4RlFVRlRPMFZCUVVFN1JVRkZXQ3hOUVZOTlJ5eERRVUZCTEVkQlFWVkRMRU5CUVVFN1NVRkRaSFpITEVOQlFVRXNRMEZCVDIxQ0xFVkJRVUVzUTBGQlJ6WkNMRk5CUVVFc1EwRkJWVEJETEVkQlFVRXNRMEZCU1RGR0xFTkJRVUVzUTBGQlQybENMRTFCUVVFc1EwRkJUME1zVTBGQlFTeERRVUZWYlVZc2MwSkJRVUVzUjBGRE5VTnlSeXhEUVVGQkxFTkJRVTlyUWl4VFFVRkJMRU5CUVZWRExFVkJRVUVzU1VGRGJrSnVRaXhEUVVGQkxFTkJRVTlyUWl4VFFVRkJMRU5CUVZWRExFVkJRVUVzUTBGQlJ6WkNMRk5CUVVFc1EwRkJWVEJETEVkQlFVRXNRMEZCU1RGR0xFTkJRVUVzUTBGQlQybENMRTFCUVVFc1EwRkJUME1zVTBGQlFTeERRVUZWYlVZc2MwSkJRVUVzUjBGRk5VUkdMRU5CUVVFc1JVRkJVenRGUVVGQk8wVkJSVmhJTEUxQlFVRXNRMEZCVDBNc1RVRkJRU3hEUVVGUGFrY3NRMEZCUVN4RFFVRlBhMElzVTBGQlFTeEZRVUZYTzBsQlF6bENjMFlzVFVGQlFTeEZRV3BDWVVFc1EwRkJRVHROUVVOaWVFY3NRMEZCUVN4RFFVRlBiVUlzUlVGQlFTeERRVUZITmtJc1UwRkJRU3hEUVVGVmIwUXNUVUZCUVN4RFFVRlBjRWNzUTBGQlFTeERRVUZQYVVJc1RVRkJRU3hEUVVGUFF5eFRRVUZCTEVOQlFWVnRSaXh6UWtGQlFTeEhRVU12UTNKSExFTkJRVUVzUTBGQlQydENMRk5CUVVFc1EwRkJWVU1zUlVGQlFTeEpRVU51UW01Q0xFTkJRVUVzUTBGQlQydENMRk5CUVVFc1EwRkJWVU1zUlVGQlFTeERRVUZITmtJc1UwRkJRU3hEUVVGVmIwUXNUVUZCUVN4RFFVRlBjRWNzUTBGQlFTeERRVUZQYVVJc1RVRkJRU3hEUVVGUFF5eFRRVUZCTEVOQlFWVnRSaXh6UWtGQlFTeEhRVVV2Ukc1Q0xFTkJRVUVzU1VGRFFTOURMRU5CUVVFc1NVRkRRVzVDTEVOQlFVRXNSVUZCWXp0SlFVRkJPMGxCVjJSMVJpeFBRVUZCTEVWQlFVRkVMRU5CUVVFN1NVRkRRVWNzVlVGQlFTeEZRVUZCZEVVc1EwRkJRVHRKUVVOQk1rSXNXVUZCUVN4RlFVRkJPVU1zUTBGQlFUdEpRVU5CTUVZc1NVRkJRU3hGUVVGQmVFSXNRMEZCUVR0SlFVTkJlVUlzVDBGQlFTeEZRVUZCVWp0RlFVRkJMRVZCUlVvN1FVRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBUaHVtYjtcbnZhciBfc3NyV2luZG93RXNtTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5taW4ubWpzXCIpO1xudmFyIF91dGlsc01pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvdXRpbHMubWluLm1qc1wiKTtcbmZ1bmN0aW9uIFRodW1iKGUpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IHMsXG4gICAgZXh0ZW5kUGFyYW1zOiBpLFxuICAgIG9uOiB0XG4gIH0gPSBlO1xuICBpKHtcbiAgICB0aHVtYnM6IHtcbiAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgIG11bHRpcGxlQWN0aXZlVGh1bWJzOiAhMCxcbiAgICAgIGF1dG9TY3JvbGxPZmZzZXQ6IDAsXG4gICAgICBzbGlkZVRodW1iQWN0aXZlQ2xhc3M6IFwic3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZVwiLFxuICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6IFwic3dpcGVyLXRodW1ic1wiXG4gICAgfVxuICB9KTtcbiAgbGV0IHIgPSAhMSxcbiAgICBhID0gITE7XG4gIGZ1bmN0aW9uIGwoKSB7XG4gICAgY29uc3QgZSA9IHMudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIWUgfHwgZS5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCBpID0gZS5jbGlja2VkSW5kZXgsXG4gICAgICB0ID0gZS5jbGlja2VkU2xpZGU7XG4gICAgaWYgKHQgJiYgdC5jbGFzc0xpc3QuY29udGFpbnMocy5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICBpZiAobnVsbCA9PSBpKSByZXR1cm47XG4gICAgbGV0IHI7XG4gICAgciA9IGUucGFyYW1zLmxvb3AgPyBwYXJzZUludChlLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSwgMTApIDogaSwgcy5wYXJhbXMubG9vcCA/IHMuc2xpZGVUb0xvb3AocikgOiBzLnNsaWRlVG8ocik7XG4gIH1cbiAgZnVuY3Rpb24gbigpIHtcbiAgICBjb25zdCB7XG4gICAgICB0aHVtYnM6IGVcbiAgICB9ID0gcy5wYXJhbXM7XG4gICAgaWYgKHIpIHJldHVybiAhMTtcbiAgICByID0gITA7XG4gICAgY29uc3QgaSA9IHMuY29uc3RydWN0b3I7XG4gICAgaWYgKGUuc3dpcGVyIGluc3RhbmNlb2YgaSkgcy50aHVtYnMuc3dpcGVyID0gZS5zd2lwZXIsIE9iamVjdC5hc3NpZ24ocy50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6ICExXG4gICAgfSksIE9iamVjdC5hc3NpZ24ocy50aHVtYnMuc3dpcGVyLnBhcmFtcywge1xuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITAsXG4gICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiAhMVxuICAgIH0pLCBzLnRodW1icy5zd2lwZXIudXBkYXRlKCk7ZWxzZSBpZiAoKDAsIF91dGlsc01pbi5qKShlLnN3aXBlcikpIHtcbiAgICAgIGNvbnN0IHQgPSBPYmplY3QuYXNzaWduKHt9LCBlLnN3aXBlcik7XG4gICAgICBPYmplY3QuYXNzaWduKHQsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITAsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6ICExXG4gICAgICB9KSwgcy50aHVtYnMuc3dpcGVyID0gbmV3IGkodCksIGEgPSAhMDtcbiAgICB9XG4gICAgcmV0dXJuIHMudGh1bWJzLnN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKHMucGFyYW1zLnRodW1icy50aHVtYnNDb250YWluZXJDbGFzcyksIHMudGh1bWJzLnN3aXBlci5vbihcInRhcFwiLCBsKSwgITA7XG4gIH1cbiAgZnVuY3Rpb24gZChlKSB7XG4gICAgY29uc3QgaSA9IHMudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIWkgfHwgaS5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCB0ID0gXCJhdXRvXCIgPT09IGkucGFyYW1zLnNsaWRlc1BlclZpZXcgPyBpLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBpLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGxldCByID0gMTtcbiAgICBjb25zdCBhID0gcy5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcbiAgICBpZiAocy5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXMucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIChyID0gcy5wYXJhbXMuc2xpZGVzUGVyVmlldyksIHMucGFyYW1zLnRodW1icy5tdWx0aXBsZUFjdGl2ZVRodW1icyB8fCAociA9IDEpLCByID0gTWF0aC5mbG9vcihyKSwgaS5zbGlkZXMuZm9yRWFjaChlID0+IGUuY2xhc3NMaXN0LnJlbW92ZShhKSksIGkucGFyYW1zLmxvb3AgfHwgaS5wYXJhbXMudmlydHVhbCAmJiBpLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIGZvciAobGV0IGUgPSAwOyBlIDwgcjsgZSArPSAxKSAoMCwgX3V0aWxzTWluLmUpKGkuc2xpZGVzRWwsIGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3MucmVhbEluZGV4ICsgZX1cIl1gKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgZS5jbGFzc0xpc3QuYWRkKGEpO1xuICAgIH0pO2Vsc2UgZm9yIChsZXQgZSA9IDA7IGUgPCByOyBlICs9IDEpIGkuc2xpZGVzW3MucmVhbEluZGV4ICsgZV0gJiYgaS5zbGlkZXNbcy5yZWFsSW5kZXggKyBlXS5jbGFzc0xpc3QuYWRkKGEpO1xuICAgIGNvbnN0IGwgPSBzLnBhcmFtcy50aHVtYnMuYXV0b1Njcm9sbE9mZnNldCxcbiAgICAgIG4gPSBsICYmICFpLnBhcmFtcy5sb29wO1xuICAgIGlmIChzLnJlYWxJbmRleCAhPT0gaS5yZWFsSW5kZXggfHwgbikge1xuICAgICAgY29uc3QgciA9IGkuYWN0aXZlSW5kZXg7XG4gICAgICBsZXQgYSwgZDtcbiAgICAgIGlmIChpLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIGNvbnN0IGUgPSBpLnNsaWRlcy5maWx0ZXIoZSA9PiBlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpID09PSBgJHtzLnJlYWxJbmRleH1gKVswXTtcbiAgICAgICAgYSA9IGkuc2xpZGVzLmluZGV4T2YoZSksIGQgPSBzLmFjdGl2ZUluZGV4ID4gcy5wcmV2aW91c0luZGV4ID8gXCJuZXh0XCIgOiBcInByZXZcIjtcbiAgICAgIH0gZWxzZSBhID0gcy5yZWFsSW5kZXgsIGQgPSBhID4gcy5wcmV2aW91c0luZGV4ID8gXCJuZXh0XCIgOiBcInByZXZcIjtcbiAgICAgIG4gJiYgKGEgKz0gXCJuZXh0XCIgPT09IGQgPyBsIDogLTEgKiBsKSwgaS52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiBpLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YoYSkgPCAwICYmIChpLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IGEgPSBhID4gciA/IGEgLSBNYXRoLmZsb29yKHQgLyAyKSArIDEgOiBhICsgTWF0aC5mbG9vcih0IC8gMikgLSAxIDogYSA+IHIgJiYgaS5wYXJhbXMuc2xpZGVzUGVyR3JvdXAsIGkuc2xpZGVUbyhhLCBlID8gMCA6IHZvaWQgMCkpO1xuICAgIH1cbiAgfVxuICBzLnRodW1icyA9IHtcbiAgICBzd2lwZXI6IG51bGxcbiAgfSwgdChcImJlZm9yZUluaXRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRodW1iczogZVxuICAgIH0gPSBzLnBhcmFtcztcbiAgICBpZiAoZSAmJiBlLnN3aXBlcikgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuc3dpcGVyIHx8IGUuc3dpcGVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGkgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5nKSgpLFxuICAgICAgICB0ID0gKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHQgPSBcInN0cmluZ1wiID09IHR5cGVvZiBlLnN3aXBlciA/IGkucXVlcnlTZWxlY3RvcihlLnN3aXBlcikgOiBlLnN3aXBlcjtcbiAgICAgICAgICBpZiAodCAmJiB0LnN3aXBlcikgZS5zd2lwZXIgPSB0LnN3aXBlciwgbigpLCBkKCEwKTtlbHNlIGlmICh0KSB7XG4gICAgICAgICAgICBjb25zdCBpID0gciA9PiB7XG4gICAgICAgICAgICAgIGUuc3dpcGVyID0gci5kZXRhaWxbMF0sIHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImluaXRcIiwgaSksIG4oKSwgZCghMCksIGUuc3dpcGVyLnVwZGF0ZSgpLCBzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHQuYWRkRXZlbnRMaXN0ZW5lcihcImluaXRcIiwgaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9LFxuICAgICAgICByID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChzLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIHQoKSB8fCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocik7XG4gICAgICAgIH07XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocik7XG4gICAgfSBlbHNlIG4oKSwgZCghMCk7XG4gIH0pLCB0KFwic2xpZGVDaGFuZ2UgdXBkYXRlIHJlc2l6ZSBvYnNlcnZlclVwZGF0ZVwiLCAoKSA9PiB7XG4gICAgZCgpO1xuICB9KSwgdChcInNldFRyYW5zaXRpb25cIiwgKGUsIGkpID0+IHtcbiAgICBjb25zdCB0ID0gcy50aHVtYnMuc3dpcGVyO1xuICAgIHQgJiYgIXQuZGVzdHJveWVkICYmIHQuc2V0VHJhbnNpdGlvbihpKTtcbiAgfSksIHQoXCJiZWZvcmVEZXN0cm95XCIsICgpID0+IHtcbiAgICBjb25zdCBlID0gcy50aHVtYnMuc3dpcGVyO1xuICAgIGUgJiYgIWUuZGVzdHJveWVkICYmIGEgJiYgZS5kZXN0cm95KCk7XG4gIH0pLCBPYmplY3QuYXNzaWduKHMudGh1bWJzLCB7XG4gICAgaW5pdDogbixcbiAgICB1cGRhdGU6IGRcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZkWFJwYkhOTmFXNGlMQ0p5WlhGMWFYSmxJaXdpVkdoMWJXSWlMQ0psSWl3aWMzZHBjR1Z5SWl3aWN5SXNJbVY0ZEdWdVpGQmhjbUZ0Y3lJc0lta2lMQ0p2YmlJc0luUWlMQ0owYUhWdFluTWlMQ0p0ZFd4MGFYQnNaVUZqZEdsMlpWUm9kVzFpY3lJc0ltRjFkRzlUWTNKdmJHeFBabVp6WlhRaUxDSnpiR2xrWlZSb2RXMWlRV04wYVhabFEyeGhjM01pTENKMGFIVnRZbk5EYjI1MFlXbHVaWEpEYkdGemN5SXNJbklpTENKaElpd2liQ0lzSW1SbGMzUnliM2xsWkNJc0ltTnNhV05yWldSSmJtUmxlQ0lzSW1Oc2FXTnJaV1JUYkdsa1pTSXNJbU5zWVhOelRHbHpkQ0lzSW1OdmJuUmhhVzV6SWl3aWNHRnlZVzF6SWl3aWJHOXZjQ0lzSW5CaGNuTmxTVzUwSWl3aVoyVjBRWFIwY21saWRYUmxJaXdpYzJ4cFpHVlViMHh2YjNBaUxDSnpiR2xrWlZSdklpd2liaUlzSW1OdmJuTjBjblZqZEc5eUlpd2lUMkpxWldOMElpd2lZWE56YVdkdUlpd2liM0pwWjJsdVlXeFFZWEpoYlhNaUxDSjNZWFJqYUZOc2FXUmxjMUJ5YjJkeVpYTnpJaXdpYzJ4cFpHVlViME5zYVdOclpXUlRiR2xrWlNJc0luVndaR0YwWlNJc0ltbHpUMkpxWldOMElpd2laV3dpTENKaFpHUWlMQ0prSWl3aWMyeHBaR1Z6VUdWeVZtbGxkeUlzSW5Oc2FXUmxjMUJsY2xacFpYZEVlVzVoYldsaklpd2lZMlZ1ZEdWeVpXUlRiR2xrWlhNaUxDSk5ZWFJvSWl3aVpteHZiM0lpTENKemJHbGtaWE1pTENKbWIzSkZZV05vSWl3aWNtVnRiM1psSWl3aWRtbHlkSFZoYkNJc0ltVnVZV0pzWldRaUxDSmxiR1Z0Wlc1MFEyaHBiR1J5Wlc0aUxDSnpiR2xrWlhORmJDSXNJbkpsWVd4SmJtUmxlQ0lzSW1GamRHbDJaVWx1WkdWNElpd2labWxzZEdWeUlpd2lhVzVrWlhoUFppSXNJbkJ5WlhacGIzVnpTVzVrWlhnaUxDSjJhWE5wWW14bFUyeHBaR1Z6U1c1a1pYaGxjeUlzSW5Oc2FXUmxjMUJsY2tkeWIzVndJaXdpU0ZSTlRFVnNaVzFsYm5RaUxDSm5aWFJFYjJOMWJXVnVkQ0lzSW1kbGRGUm9kVzFpYzBWc1pXMWxiblJCYm1SSmJtbDBJaXdpY1hWbGNubFRaV3hsWTNSdmNpSXNJbVJsZEdGcGJDSXNJbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElpTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aWQyRjBZMmhHYjNKVWFIVnRZbk5VYjBGd2NHVmhjaUlzSW5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTSXNJbk5sZEZSeVlXNXphWFJwYjI0aUxDSmtaWE4wY205NUlpd2lhVzVwZENKZExDSnpiM1Z5WTJWeklqcGJJakFpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQmFVTXNTVUZCUVVFc1UwRkJRU3hIUVVGQlF5eFBRVUZCTzBGQlIycERMRk5CUVZORExFMUJRVTFETEVOQlFVRTdSVUZEWWp0SlFVRkpReXhOUVVGQkxFVkJRMFpETEVOQlFVRTdTVUZCVFVNc1dVRkJRU3hGUVVOT1F5eERRVUZCTzBsQlFWbERMRVZCUVVFc1JVRkRXa003UlVGQlFTeEpRVU5GVGl4RFFVRkJPMFZCUTBwSkxFTkJRVUVzUTBGQllUdEpRVU5ZUnl4TlFVRkJMRVZCUVZFN1RVRkRUazRzVFVGQlFTeEZRVUZSTzAxQlExSlBMRzlDUVVGQkxFZEJRWE5DTzAxQlEzUkNReXhuUWtGQlFTeEZRVUZyUWp0TlFVTnNRa01zY1VKQlFVRXNSVUZCZFVJN1RVRkRka0pETEc5Q1FVRkJMRVZCUVhOQ08wbEJRVUU3UlVGQlFUdEZRVWN4UWl4SlFVRkpReXhEUVVGQkxFbEJRV003U1VGRFpFTXNRMEZCUVN4SlFVRm5RanRGUVVsd1FpeFRRVUZUUXl4RlFVRkJPMGxCUTFBc1RVRkJUV1FzUTBGQlFTeEhRVUZsUlN4RFFVRkJMRU5CUVU5TExFMUJRVUVzUTBGQlQwNHNUVUZCUVR0SlFVTnVReXhMUVVGTFJDeERRVUZCTEVsQlFXZENRU3hEUVVGQkxFTkJRV0ZsTEZOQlFVRXNSVUZCVnp0SlFVTTNReXhOUVVGTldDeERRVUZCTEVkQlFXVktMRU5CUVVFc1EwRkJZV2RDTEZsQlFVRTdUVUZETlVKV0xFTkJRVUVzUjBGQlpVNHNRMEZCUVN4RFFVRmhhVUlzV1VGQlFUdEpRVU5zUXl4SlFVRkpXQ3hEUVVGQkxFbEJRV2RDUVN4RFFVRkJMRU5CUVdGWkxGTkJRVUVzUTBGQlZVTXNVVUZCUVN4RFFVRlRha0lzUTBGQlFTeERRVUZQYTBJc1RVRkJRU3hEUVVGUFlpeE5RVUZCTEVOQlFVOUhMSEZDUVVGQkxFZEJRWGRDTzBsQlEycEhMRWxCUVVrc1VVRkJUMDRzUTBGQlFTeEZRVUYxUkR0SlFVTnNSU3hKUVVGSlVTeERRVUZCTzBsQlJVWkJMRU5CUVVFc1IwRkVSVm9zUTBGQlFTeERRVUZoYjBJc1RVRkJRU3hEUVVGUFF5eEpRVUZCTEVkQlExQkRMRkZCUVVFc1EwRkJVM1JDTEVOQlFVRXNRMEZCWVdsQ0xGbEJRVUVzUTBGQllVMHNXVUZCUVN4RFFVRmhMRFJDUVVFMFFpeE5RVVUxUlc1Q0xFTkJRVUVzUlVGRllrWXNRMEZCUVN4RFFVRlBhMElzVFVGQlFTeERRVUZQUXl4SlFVRkJMRWRCUTJoQ2JrSXNRMEZCUVN4RFFVRlBjMElzVjBGQlFTeERRVUZaV2l4RFFVRkJMRWxCUlc1Q1ZpeERRVUZCTEVOQlFVOTFRaXhQUVVGQkxFTkJRVkZpTEVOQlFVRXNRMEZGYmtJN1JVRkJRVHRGUVVOQkxGTkJRVk5qTEVWQlFVRTdTVUZEVUR0TlFVTkZia0lzVFVGQlFTeEZRVUZSVUR0SlFVRkJMRWxCUTA1RkxFTkJRVUVzUTBGQlQydENMRTFCUVVFN1NVRkRXQ3hKUVVGSlVpeERRVUZCTEVWQlFXRXNVVUZCVHp0SlFVTjRRa0VzUTBGQlFTeEpRVUZqTzBsQlEyUXNUVUZCVFZJc1EwRkJRU3hIUVVGalJpeERRVUZCTEVOQlFVOTVRaXhYUVVGQk8wbEJRek5DTEVsQlFVa3pRaXhEUVVGQkxFTkJRV0ZETEUxQlFVRXNXVUZCYTBKSExFTkJRVUVzUlVGRGFrTkdMRU5CUVVFc1EwRkJUMHNzVFVGQlFTeERRVUZQVGl4TlFVRkJMRWRCUVZORUxFTkJRVUVzUTBGQllVTXNUVUZCUVN4RlFVTndRekpDTEUxQlFVRXNRMEZCVDBNc1RVRkJRU3hEUVVGUE0wSXNRMEZCUVN4RFFVRlBTeXhOUVVGQkxFTkJRVTlPTEUxQlFVRXNRMEZCVHpaQ0xHTkJRVUVzUlVGQlowSTdUVUZEYWtSRExHMUNRVUZCTEVkQlFYRkNPMDFCUTNKQ1F5eHRRa0ZCUVN4SFFVRnhRanRKUVVGQkxFbEJSWFpDU2l4TlFVRkJMRU5CUVU5RExFMUJRVUVzUTBGQlR6TkNMRU5CUVVFc1EwRkJUMHNzVFVGQlFTeERRVUZQVGl4TlFVRkJMRU5CUVU5dFFpeE5RVUZCTEVWQlFWRTdUVUZEZWtOWExHMUNRVUZCTEVkQlFYRkNPMDFCUTNKQ1F5eHRRa0ZCUVN4SFFVRnhRanRKUVVGQkxFbEJSWFpDT1VJc1EwRkJRU3hEUVVGUFN5eE5RVUZCTEVOQlFVOU9MRTFCUVVFc1EwRkJUMmRETEUxQlFVRXNVVUZEYUVJc1NVRkJTU3hKUVVGQlF5eFhRVUZCTEVWQlFWTnNReXhEUVVGQkxFTkJRV0ZETEUxQlFVRXNSMEZCVXp0TlFVTjRReXhOUVVGTlN5eERRVUZCTEVkQlFYRkNjMElzVFVGQlFTeERRVUZQUXl4TlFVRkJMRU5CUVU4c1EwRkJReXhIUVVGSE4wSXNRMEZCUVN4RFFVRmhReXhOUVVGQk8wMUJRekZFTWtJc1RVRkJRU3hEUVVGUFF5eE5RVUZCTEVOQlFVOTJRaXhEUVVGQkxFVkJRVzlDTzFGQlEyaERlVUlzYlVKQlFVRXNSMEZCY1VJN1VVRkRja0pETEcxQ1FVRkJMRWRCUVhGQ08wMUJRVUVzU1VGRmRrSTVRaXhEUVVGQkxFTkJRVTlMTEUxQlFVRXNRMEZCVDA0c1RVRkJRU3hIUVVGVExFbEJRVWxITEVOQlFVRXNRMEZCV1VVc1EwRkJRU3hIUVVOMlEwOHNRMEZCUVN4SlFVRm5RaXhEUVVOc1FqdEpRVUZCTzBsQlIwRXNUMEZHUVZnc1EwRkJRU3hEUVVGUFN5eE5RVUZCTEVOQlFVOU9MRTFCUVVFc1EwRkJUMnRETEVWQlFVRXNRMEZCUjJwQ0xGTkJRVUVzUTBGQlZXdENMRWRCUVVFc1EwRkJTV3hETEVOQlFVRXNRMEZCVDJ0Q0xFMUJRVUVzUTBGQlQySXNUVUZCUVN4RFFVRlBTU3h2UWtGQlFTeEhRVU16UkZRc1EwRkJRU3hEUVVGUFN5eE5RVUZCTEVOQlFVOU9MRTFCUVVFc1EwRkJUMGtzUlVGQlFTeERRVUZITEU5QlFVOVRMRU5CUVVFc1NVRkRlRUlzUTBGRFZEdEZRVUZCTzBWQlEwRXNVMEZCVTNWQ0xFVkJRVTl5UXl4RFFVRkJPMGxCUTJRc1RVRkJUVWtzUTBGQlFTeEhRVUZsUml4RFFVRkJMRU5CUVU5TExFMUJRVUVzUTBGQlQwNHNUVUZCUVR0SlFVTnVReXhMUVVGTFJ5eERRVUZCTEVsQlFXZENRU3hEUVVGQkxFTkJRV0ZYTEZOQlFVRXNSVUZCVnp0SlFVTTNReXhOUVVGTlZDeERRVUZCTEVkQlFYTkVMRmRCUVhSRFJpeERRVUZCTEVOQlFXRm5RaXhOUVVGQkxFTkJRVTlyUWl4aFFVRkJMRWRCUVRKQ2JFTXNRMEZCUVN4RFFVRmhiVU1zYjBKQlFVRXNTMEZCZVVKdVF5eERRVUZCTEVOQlFXRm5RaXhOUVVGQkxFTkJRVTlyUWl4aFFVRkJPMGxCUnk5SUxFbEJRVWt4UWl4RFFVRkJMRWRCUVcxQ08wbEJRM1pDTEUxQlFVMURMRU5CUVVFc1IwRkJiVUpZTEVOQlFVRXNRMEZCVDJ0Q0xFMUJRVUVzUTBGQlQySXNUVUZCUVN4RFFVRlBSeXh4UWtGQlFUdEpRVk01UXl4SlFWSkpVaXhEUVVGQkxFTkJRVTlyUWl4TlFVRkJMRU5CUVU5clFpeGhRVUZCTEVkQlFXZENMRTFCUVUxd1F5eERRVUZCTEVOQlFVOXJRaXhOUVVGQkxFTkJRVTl2UWl4alFVRkJMRXRCUTNCRU5VSXNRMEZCUVN4SFFVRnRRbFlzUTBGQlFTeERRVUZQYTBJc1RVRkJRU3hEUVVGUGEwSXNZVUZCUVN4SFFVVTVRbkJETEVOQlFVRXNRMEZCVDJ0Q0xFMUJRVUVzUTBGQlQySXNUVUZCUVN4RFFVRlBReXh2UWtGQlFTeExRVU40UWtrc1EwRkJRU3hIUVVGdFFpeEpRVVZ5UWtFc1EwRkJRU3hIUVVGdFFqWkNMRWxCUVVFc1EwRkJTME1zUzBGQlFTeERRVUZOT1VJc1EwRkJRU3hIUVVNNVFsSXNRMEZCUVN4RFFVRmhkVU1zVFVGQlFTeERRVUZQUXl4UFFVRkJMRU5CUVZFMVF5eERRVUZCTEVsQlFWZEJMRU5CUVVFc1EwRkJVV3RDTEZOQlFVRXNRMEZCVlRKQ0xFMUJRVUVzUTBGQlQyaERMRU5CUVVFc1NVRkROVVJVTEVOQlFVRXNRMEZCWVdkQ0xFMUJRVUVzUTBGQlQwTXNTVUZCUVN4SlFVRlJha0lzUTBGQlFTeERRVUZoWjBJc1RVRkJRU3hEUVVGUE1FSXNUMEZCUVN4SlFVRlhNVU1zUTBGQlFTeERRVUZoWjBJc1RVRkJRU3hEUVVGUE1FSXNUMEZCUVN4RFFVRlJReXhQUVVGQkxFVkJRM3BHTEV0QlFVc3NTVUZCU1M5RExFTkJRVUVzUjBGQlNTeEhRVUZIUVN4RFFVRkJMRWRCUVVsWkxFTkJRVUVzUlVGQmEwSmFMRU5CUVVFc1NVRkJTeXhIUVVONlF5eEpRVUZCWjBRc1YwRkJRU3hGUVVGblFqVkRMRU5CUVVFc1EwRkJZVFpETEZGQlFVRXNSVUZCVlN3MlFrRkJOa0l2UXl4RFFVRkJMRU5CUVU5blJDeFRRVUZCTEVkQlFWbHNSQ3hEUVVGQkxFMUJRVTgwUXl4UFFVRkJMRU5CUVZFMVF5eERRVUZCTzAxQlEzQkhRU3hEUVVGQkxFTkJRVkZyUWl4VFFVRkJMRU5CUVZWclFpeEhRVUZCTEVOQlFVbDJRaXhEUVVGQkxFTkJRV2xDTzBsQlFVRXNVVUZKTTBNc1MwRkJTeXhKUVVGSllpeERRVUZCTEVkQlFVa3NSMEZCUjBFc1EwRkJRU3hIUVVGSldTeERRVUZCTEVWQlFXdENXaXhEUVVGQkxFbEJRVXNzUjBGRGNrTkpMRU5CUVVFc1EwRkJZWFZETEUxQlFVRXNRMEZCVDNwRExFTkJRVUVzUTBGQlQyZEVMRk5CUVVFc1IwRkJXV3hFTEVOQlFVRXNTMEZEZWtOSkxFTkJRVUVzUTBGQllYVkRMRTFCUVVFc1EwRkJUM3BETEVOQlFVRXNRMEZCVDJkRUxGTkJRVUVzUjBGQldXeEVMRU5CUVVFc1JVRkJSMnRDTEZOQlFVRXNRMEZCVld0Q0xFZEJRVUVzUTBGQlNYWkNMRU5CUVVFN1NVRkpPVVFzVFVGQlRVTXNRMEZCUVN4SFFVRnRRbG9zUTBGQlFTeERRVUZQYTBJc1RVRkJRU3hEUVVGUFlpeE5RVUZCTEVOQlFVOUZMR2RDUVVGQk8wMUJRM2hEYVVJc1EwRkJRU3hIUVVGWldpeERRVUZCTEV0QlFYRkNWaXhEUVVGQkxFTkJRV0ZuUWl4TlFVRkJMRU5CUVU5RExFbEJRVUU3U1VGRE0wUXNTVUZCU1c1Q0xFTkJRVUVzUTBGQlQyZEVMRk5CUVVFc1MwRkJZemxETEVOQlFVRXNRMEZCWVRoRExGTkJRVUVzU1VGQllYaENMRU5CUVVFc1JVRkJWenROUVVNMVJDeE5RVUZOWkN4RFFVRkJMRWRCUVhGQ1VpeERRVUZCTEVOQlFXRXJReXhYUVVGQk8wMUJRM2hETEVsQlFVbDBReXhEUVVGQkxFVkJRMEYzUWl4RFFVRkJPMDFCUTBvc1NVRkJTV3BETEVOQlFVRXNRMEZCWVdkQ0xFMUJRVUVzUTBGQlQwTXNTVUZCUVN4RlFVRk5PMUZCUXpWQ0xFMUJRVTF5UWl4RFFVRkJMRWRCUVdsQ1NTeERRVUZCTEVOQlFXRjFReXhOUVVGQkxFTkJRVTlUTEUxQlFVRXNRMEZCVDNCRUxFTkJRVUVzU1VGQlYwRXNRMEZCUVN4RFFVRlJkVUlzV1VGQlFTeERRVUZoTEN0Q1FVRXJRaXhIUVVGSGNrSXNRMEZCUVN4RFFVRlBaMFFzVTBGQlFTeEpRVUZoTzFGQlEzaEpja01zUTBGQlFTeEhRVUZwUWxRc1EwRkJRU3hEUVVGaGRVTXNUVUZCUVN4RFFVRlBWU3hQUVVGQkxFTkJRVkZ5UkN4RFFVRkJMRWRCUXpkRGNVTXNRMEZCUVN4SFFVRlpia01zUTBGQlFTeERRVUZQYVVRc1YwRkJRU3hIUVVGamFrUXNRMEZCUVN4RFFVRlBiMFFzWVVGQlFTeEhRVUZuUWl4VFFVRlRMRTFCUTI1Rk8wMUJRVUVzVDBGRFJYcERMRU5CUVVFc1IwRkJhVUpZTEVOQlFVRXNRMEZCVDJkRUxGTkJRVUVzUlVGRGVFSmlMRU5CUVVFc1IwRkJXWGhDTEVOQlFVRXNSMEZCYVVKWUxFTkJRVUVzUTBGQlQyOUVMR0ZCUVVFc1IwRkJaMElzVTBGQlV6dE5RVVV6UkRWQ0xFTkJRVUVzUzBGRFJtSXNRMEZCUVN4SlFVRm5ReXhYUVVGa2QwSXNRMEZCUVN4SFFVRjFRblpDTEVOQlFVRXNTVUZCYjBJc1NVRkJTVUVzUTBGQlFTeEhRVVV2UkZZc1EwRkJRU3hEUVVGaGJVUXNiMEpCUVVFc1NVRkJkMEp1UkN4RFFVRkJMRU5CUVdGdFJDeHZRa0ZCUVN4RFFVRnhRa1lzVDBGQlFTeERRVUZSZUVNc1EwRkJRU3hKUVVGclFpeE5RVU12UmxRc1EwRkJRU3hEUVVGaFowSXNUVUZCUVN4RFFVRlBiMElzWTBGQlFTeEhRVVZ3UWpOQ0xFTkJRVUVzUjBGRVJVRXNRMEZCUVN4SFFVRnBRa1FzUTBGQlFTeEhRVU5HUXl4RFFVRkJMRWRCUVdsQ05FSXNTVUZCUVN4RFFVRkxReXhMUVVGQkxFTkJRVTF3UXl4RFFVRkJMRWRCUVdkQ0xFdEJRVXNzU1VGRmFrUlBMRU5CUVVFc1IwRkJhVUkwUWl4SlFVRkJMRU5CUVV0RExFdEJRVUVzUTBGQlRYQkRMRU5CUVVFc1IwRkJaMElzUzBGQlN5eEpRVVV6UkU4c1EwRkJRU3hIUVVGcFFrUXNRMEZCUVN4SlFVRnpRbElzUTBGQlFTeERRVUZoWjBJc1RVRkJRU3hEUVVGUGIwTXNZMEZCUVN4RlFVTjBSWEJFTEVOQlFVRXNRMEZCWVhGQ0xFOUJRVUVzUTBGQlVWb3NRMEZCUVN4RlFVRm5RbUlzUTBGQlFTeEhRVUZWTEZOQlFVa3NSMEZGZGtRN1NVRkJRVHRGUVVOR08wVkJPVWRCUlN4RFFVRkJMRU5CUVU5TExFMUJRVUVzUjBGQlV6dEpRVU5rVGl4TlFVRkJMRVZCUVZFN1JVRkJRU3hIUVRoSFZrc3NRMEZCUVN4RFFVRkhMR05CUVdNN1NVRkRaanROUVVGTlF5eE5RVUZCTEVWQlEwcFFPMGxCUVVFc1NVRkRSVVVzUTBGQlFTeERRVUZQYTBJc1RVRkJRVHRKUVVOWUxFbEJRVXR3UWl4RFFVRkJMRWxCUVZkQkxFTkJRVUVzUTBGQlQwTXNUVUZCUVN4RlFVTjJRaXhKUVVFMlFpeHRRa0ZCYkVKRUxFTkJRVUVzUTBGQlQwTXNUVUZCUVN4SlFVRjFRa1FzUTBGQlFTeERRVUZQUXl4TlFVRkJMRmxCUVd0Q2QwUXNWMEZCUVN4RlFVRmhPMDFCUXpkRkxFMUJRVTF5UkN4RFFVRkJMRWRCUVZjc1NVRkJRWE5FTEd0Q1FVRkJPMUZCUTFod1JDeERRVUZCTEVkQlFUQkNjVVFzUTBGQlFUdFZRVU01UWl4TlFVRk5ja1FzUTBGQlFTeEhRVUY1UXl4dFFrRkJiRUpPTEVOQlFVRXNRMEZCVDBNc1RVRkJRU3hIUVVGelFrY3NRMEZCUVN4RFFVRlRkMFFzWVVGQlFTeERRVUZqTlVRc1EwRkJRU3hEUVVGUFF5eE5RVUZCTEVsQlFWVkVMRU5CUVVFc1EwRkJUME1zVFVGQlFUdFZRVU42Unl4SlFVRkpTeXhEUVVGQkxFbEJRV2xDUVN4RFFVRkJMRU5CUVdOTUxFMUJRVUVzUlVGRGFrTkVMRU5CUVVFc1EwRkJUME1zVFVGQlFTeEhRVUZUU3l4RFFVRkJMRU5CUVdOTUxFMUJRVUVzUlVGRE9VSjVRaXhEUVVGQkxFbEJRMEZYTEVOQlFVRXNSVUZCVHl4UlFVTkdMRWxCUVVrdlFpeERRVUZCTEVWQlFXVTdXVUZEZUVJc1RVRkJUVVlzUTBGQlFTeEhRVUZwUWxFc1EwRkJRVHRqUVVOeVFsb3NRMEZCUVN4RFFVRlBReXhOUVVGQkxFZEJRVk5YTEVOQlFVRXNRMEZCUldsRUxFMUJRVUVzUTBGQlR5eEpRVU42UW5aRUxFTkJRVUVzUTBGQlkzZEVMRzFDUVVGQkxFTkJRVzlDTEZGQlFWRXhSQ3hEUVVGQkxFZEJRekZEYzBJc1EwRkJRU3hKUVVOQlZ5eERRVUZCTEVWQlFVOHNTVUZEVUhKRExFTkJRVUVzUTBGQlQwTXNUVUZCUVN4RFFVRlBaME1zVFVGQlFTeEpRVU5rTDBJc1EwRkJRU3hEUVVGUEswSXNUVUZCUVN4RlFVRlJPMWxCUVVFN1dVRkZha0l6UWl4RFFVRkJMRU5CUVdONVJDeG5Ra0ZCUVN4RFFVRnBRaXhSUVVGUk0wUXNRMEZCUVN4RFFVTjZRenRWUVVGQk8xVkJRMEVzVDBGQlQwVXNRMEZCWVR0UlFVRkJPMUZCUldoQ1RTeERRVUZCTEVkQlFYbENiMFFzUTBGQlFUdFZRVU0zUWl4SlFVRkpPVVFzUTBGQlFTeERRVUZQWVN4VFFVRkJMRVZCUVZjN1ZVRkRRVlFzUTBGQlFTeE5RVVZ3UWpKRUxIRkNRVUZCTEVOQlFYTkNja1FzUTBGQlFTeERRVU40UWp0UlFVRkJPMDFCUlVaeFJDeHhRa0ZCUVN4RFFVRnpRbkpFTEVOQlFVRXNRMEZEZUVJN1NVRkJRU3hQUVVORll5eERRVUZCTEVsQlEwRlhMRU5CUVVFc1JVRkJUeXhGUVVOVU8wVkJRVUVzU1VGRlJpOUNMRU5CUVVFc1EwRkJSeXcwUTBGQk5FTTdTVUZETjBNclFpeERRVUZCTEVWQlFWRTdSVUZCUVN4SlFVVldMMElzUTBGQlFTeERRVUZITEdsQ1FVRnBRaXhEUVVGRFRpeERRVUZCTEVWQlFVbEpMRU5CUVVFN1NVRkRka0lzVFVGQlRVVXNRMEZCUVN4SFFVRmxTaXhEUVVGQkxFTkJRVTlMTEUxQlFVRXNRMEZCVDA0c1RVRkJRVHRKUVVNNVFrc3NRMEZCUVN4TFFVRm5Ra0VzUTBGQlFTeERRVUZoVXl4VFFVRkJMRWxCUTJ4RFZDeERRVUZCTEVOQlFXRTBSQ3hoUVVGQkxFTkJRV001UkN4RFFVRkJMRU5CUVZNN1JVRkJRU3hKUVVWMFEwVXNRMEZCUVN4RFFVRkhMR2xDUVVGcFFqdEpRVU5zUWl4TlFVRk5UaXhEUVVGQkxFZEJRV1ZGTEVOQlFVRXNRMEZCVDBzc1RVRkJRU3hEUVVGUFRpeE5RVUZCTzBsQlF6bENSQ3hEUVVGQkxFdEJRV2RDUVN4RFFVRkJMRU5CUVdGbExGTkJRVUVzU1VGRE9VSkdMRU5CUVVFc1NVRkRSbUlzUTBGQlFTeERRVUZoYlVVc1QwRkJRU3hGUVVObU8wVkJRVUVzU1VGRlJuWkRMRTFCUVVFc1EwRkJUME1zVFVGQlFTeERRVUZQTTBJc1EwRkJRU3hEUVVGUFN5eE5RVUZCTEVWQlFWRTdTVUZETTBJMlJDeEpRVUZCTEVWQlFVRXhReXhEUVVGQk8wbEJRMEZQTEUxQlFVRXNSVUZCUVVrN1JVRkJRU3hGUVVWS08wRkJRVUVpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gVmlydHVhbDtcbnZhciBfc3NyV2luZG93RXNtTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5taW4ubWpzXCIpO1xudmFyIF91dGlsc01pbiA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvdXRpbHMubWluLm1qc1wiKTtcbmZ1bmN0aW9uIFZpcnR1YWwoZSkge1xuICBsZXQgcyxcbiAgICB7XG4gICAgICBzd2lwZXI6IHIsXG4gICAgICBleHRlbmRQYXJhbXM6IHQsXG4gICAgICBvbjogaSxcbiAgICAgIGVtaXQ6IGxcbiAgICB9ID0gZTtcbiAgdCh7XG4gICAgdmlydHVhbDoge1xuICAgICAgZW5hYmxlZDogITEsXG4gICAgICBzbGlkZXM6IFtdLFxuICAgICAgY2FjaGU6ICEwLFxuICAgICAgcmVuZGVyU2xpZGU6IG51bGwsXG4gICAgICByZW5kZXJFeHRlcm5hbDogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsVXBkYXRlOiAhMCxcbiAgICAgIGFkZFNsaWRlc0JlZm9yZTogMCxcbiAgICAgIGFkZFNsaWRlc0FmdGVyOiAwXG4gICAgfVxuICB9KTtcbiAgY29uc3QgYSA9ICgwLCBfc3NyV2luZG93RXNtTWluLmcpKCk7XG4gIHIudmlydHVhbCA9IHtcbiAgICBjYWNoZToge30sXG4gICAgZnJvbTogdm9pZCAwLFxuICAgIHRvOiB2b2lkIDAsXG4gICAgc2xpZGVzOiBbXSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgc2xpZGVzR3JpZDogW11cbiAgfTtcbiAgY29uc3QgZCA9IGEuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZnVuY3Rpb24gbihlLCBzKSB7XG4gICAgY29uc3QgdCA9IHIucGFyYW1zLnZpcnR1YWw7XG4gICAgaWYgKHQuY2FjaGUgJiYgci52aXJ0dWFsLmNhY2hlW3NdKSByZXR1cm4gci52aXJ0dWFsLmNhY2hlW3NdO1xuICAgIGxldCBpO1xuICAgIHJldHVybiB0LnJlbmRlclNsaWRlID8gKGkgPSB0LnJlbmRlclNsaWRlLmNhbGwociwgZSwgcyksIFwic3RyaW5nXCIgPT0gdHlwZW9mIGkgJiYgKGQuaW5uZXJIVE1MID0gaSwgaSA9IGQuY2hpbGRyZW5bMF0pKSA6IGkgPSByLmlzRWxlbWVudCA/ICgwLCBfdXRpbHNNaW4uYykoXCJzd2lwZXItc2xpZGVcIikgOiAoMCwgX3V0aWxzTWluLmMpKFwiZGl2XCIsIHIucGFyYW1zLnNsaWRlQ2xhc3MpLCBpLnNldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIsIHMpLCB0LnJlbmRlclNsaWRlIHx8IChpLmlubmVySFRNTCA9IGUpLCB0LmNhY2hlICYmIChyLnZpcnR1YWwuY2FjaGVbc10gPSBpKSwgaTtcbiAgfVxuICBmdW5jdGlvbiBvKGUpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IHMsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiB0LFxuICAgICAgICBjZW50ZXJlZFNsaWRlczogaSxcbiAgICAgICAgbG9vcDogYVxuICAgICAgfSA9IHIucGFyYW1zLFxuICAgICAge1xuICAgICAgICBhZGRTbGlkZXNCZWZvcmU6IGQsXG4gICAgICAgIGFkZFNsaWRlc0FmdGVyOiBvXG4gICAgICB9ID0gci5wYXJhbXMudmlydHVhbCxcbiAgICAgIHtcbiAgICAgICAgZnJvbTogYyxcbiAgICAgICAgdG86IHUsXG4gICAgICAgIHNsaWRlczogcCxcbiAgICAgICAgc2xpZGVzR3JpZDogZixcbiAgICAgICAgb2Zmc2V0OiBoXG4gICAgICB9ID0gci52aXJ0dWFsO1xuICAgIHIucGFyYW1zLmNzc01vZGUgfHwgci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIGNvbnN0IG0gPSByLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgbGV0IHYsIGcsIEU7XG4gICAgdiA9IHIucnRsVHJhbnNsYXRlID8gXCJyaWdodFwiIDogci5pc0hvcml6b250YWwoKSA/IFwibGVmdFwiIDogXCJ0b3BcIiwgaSA/IChnID0gTWF0aC5mbG9vcihzIC8gMikgKyB0ICsgbywgRSA9IE1hdGguZmxvb3IocyAvIDIpICsgdCArIGQpIDogKGcgPSBzICsgKHQgLSAxKSArIG8sIEUgPSAoYSA/IHMgOiB0KSArIGQpO1xuICAgIGxldCBTID0gbSAtIEUsXG4gICAgICB4ID0gbSArIGc7XG4gICAgYSB8fCAoUyA9IE1hdGgubWF4KFMsIDApLCB4ID0gTWF0aC5taW4oeCwgcC5sZW5ndGggLSAxKSk7XG4gICAgbGV0IHcgPSAoci5zbGlkZXNHcmlkW1NdIHx8IDApIC0gKHIuc2xpZGVzR3JpZFswXSB8fCAwKTtcbiAgICBmdW5jdGlvbiBBKCkge1xuICAgICAgci51cGRhdGVTbGlkZXMoKSwgci51cGRhdGVQcm9ncmVzcygpLCByLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgbChcInZpcnR1YWxVcGRhdGVcIik7XG4gICAgfVxuICAgIGlmIChhICYmIG0gPj0gRSA/IChTIC09IEUsIGkgfHwgKHcgKz0gci5zbGlkZXNHcmlkWzBdKSkgOiBhICYmIG0gPCBFICYmIChTID0gLUUsIGkgJiYgKHcgKz0gci5zbGlkZXNHcmlkWzBdKSksIE9iamVjdC5hc3NpZ24oci52aXJ0dWFsLCB7XG4gICAgICBmcm9tOiBTLFxuICAgICAgdG86IHgsXG4gICAgICBvZmZzZXQ6IHcsXG4gICAgICBzbGlkZXNHcmlkOiByLnNsaWRlc0dyaWQsXG4gICAgICBzbGlkZXNCZWZvcmU6IEUsXG4gICAgICBzbGlkZXNBZnRlcjogZ1xuICAgIH0pLCBjID09PSBTICYmIHUgPT09IHggJiYgIWUpIHJldHVybiByLnNsaWRlc0dyaWQgIT09IGYgJiYgdyAhPT0gaCAmJiByLnNsaWRlcy5mb3JFYWNoKGUgPT4ge1xuICAgICAgZS5zdHlsZVt2XSA9IHcgLSBNYXRoLmFicyhyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpKSArIFwicHhcIjtcbiAgICB9KSwgci51cGRhdGVQcm9ncmVzcygpLCB2b2lkIGwoXCJ2aXJ0dWFsVXBkYXRlXCIpO1xuICAgIGlmIChyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsKSByZXR1cm4gci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbC5jYWxsKHIsIHtcbiAgICAgIG9mZnNldDogdyxcbiAgICAgIGZyb206IFMsXG4gICAgICB0bzogeCxcbiAgICAgIHNsaWRlczogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGZvciAobGV0IHMgPSBTOyBzIDw9IHg7IHMgKz0gMSkgZS5wdXNoKHBbc10pO1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH0oKVxuICAgIH0pLCB2b2lkIChyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsVXBkYXRlID8gQSgpIDogbChcInZpcnR1YWxVcGRhdGVcIikpO1xuICAgIGNvbnN0IGIgPSBbXSxcbiAgICAgIE0gPSBbXSxcbiAgICAgIHkgPSBlID0+IHtcbiAgICAgICAgbGV0IHMgPSBlO1xuICAgICAgICByZXR1cm4gZSA8IDAgPyBzID0gcC5sZW5ndGggKyBlIDogcyA+PSBwLmxlbmd0aCAmJiAocyAtPSBwLmxlbmd0aCksIHM7XG4gICAgICB9O1xuICAgIGlmIChlKSByLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3IucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgZS5yZW1vdmUoKTtcbiAgICB9KTtlbHNlIGZvciAobGV0IGUgPSBjOyBlIDw9IHU7IGUgKz0gMSkgaWYgKGUgPCBTIHx8IGUgPiB4KSB7XG4gICAgICBjb25zdCBzID0geShlKTtcbiAgICAgIHIuc2xpZGVzRWwucXVlcnlTZWxlY3RvckFsbChgLiR7ci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N9XCJdLCBzd2lwZXItc2xpZGVbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N9XCJdYCkuZm9yRWFjaChlID0+IHtcbiAgICAgICAgZS5yZW1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBQID0gYSA/IC1wLmxlbmd0aCA6IDAsXG4gICAgICBDID0gYSA/IDIgKiBwLmxlbmd0aCA6IHAubGVuZ3RoO1xuICAgIGZvciAobGV0IHMgPSBQOyBzIDwgQzsgcyArPSAxKSBpZiAocyA+PSBTICYmIHMgPD0geCkge1xuICAgICAgY29uc3QgciA9IHkocyk7XG4gICAgICB2b2lkIDAgPT09IHUgfHwgZSA/IE0ucHVzaChyKSA6IChzID4gdSAmJiBNLnB1c2gociksIHMgPCBjICYmIGIucHVzaChyKSk7XG4gICAgfVxuICAgIGlmIChNLmZvckVhY2goZSA9PiB7XG4gICAgICByLnNsaWRlc0VsLmFwcGVuZChuKHBbZV0sIGUpKTtcbiAgICB9KSwgYSkgZm9yIChsZXQgZSA9IGIubGVuZ3RoIC0gMTsgZSA+PSAwOyBlIC09IDEpIHtcbiAgICAgIGNvbnN0IHMgPSBiW2VdO1xuICAgICAgci5zbGlkZXNFbC5wcmVwZW5kKG4ocFtzXSwgcykpO1xuICAgIH0gZWxzZSBiLnNvcnQoKGUsIHMpID0+IHMgLSBlKSwgYi5mb3JFYWNoKGUgPT4ge1xuICAgICAgci5zbGlkZXNFbC5wcmVwZW5kKG4ocFtlXSwgZSkpO1xuICAgIH0pO1xuICAgICgwLCBfdXRpbHNNaW4uZSkoci5zbGlkZXNFbCwgXCIuc3dpcGVyLXNsaWRlLCBzd2lwZXItc2xpZGVcIikuZm9yRWFjaChlID0+IHtcbiAgICAgIGUuc3R5bGVbdl0gPSB3IC0gTWF0aC5hYnMoci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKSkgKyBcInB4XCI7XG4gICAgfSksIEEoKTtcbiAgfVxuICBpKFwiYmVmb3JlSW5pdFwiLCAoKSA9PiB7XG4gICAgaWYgKCFyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICBsZXQgZTtcbiAgICBpZiAodm9pZCAwID09PSByLnBhc3NlZFBhcmFtcy52aXJ0dWFsLnNsaWRlcykge1xuICAgICAgY29uc3QgcyA9IFsuLi5yLnNsaWRlc0VsLmNoaWxkcmVuXS5maWx0ZXIoZSA9PiBlLm1hdGNoZXMoYC4ke3IucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSk7XG4gICAgICBzICYmIHMubGVuZ3RoICYmIChyLnZpcnR1YWwuc2xpZGVzID0gWy4uLnNdLCBlID0gITAsIHMuZm9yRWFjaCgoZSwgcykgPT4ge1xuICAgICAgICBlLnNldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIsIHMpLCByLnZpcnR1YWwuY2FjaGVbc10gPSBlLCBlLnJlbW92ZSgpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgICBlIHx8IChyLnZpcnR1YWwuc2xpZGVzID0gci5wYXJhbXMudmlydHVhbC5zbGlkZXMpLCByLmNsYXNzTmFtZXMucHVzaChgJHtyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXZpcnR1YWxgKSwgci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9ICEwLCByLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSAhMCwgci5wYXJhbXMuaW5pdGlhbFNsaWRlIHx8IG8oKTtcbiAgfSksIGkoXCJzZXRUcmFuc2xhdGVcIiwgKCkgPT4ge1xuICAgIHIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiAoci5wYXJhbXMuY3NzTW9kZSAmJiAhci5faW1tZWRpYXRlVmlydHVhbCA/IChjbGVhclRpbWVvdXQocyksIHMgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIG8oKTtcbiAgICB9LCAxMDApKSA6IG8oKSk7XG4gIH0pLCBpKFwiaW5pdCB1cGRhdGUgcmVzaXplXCIsICgpID0+IHtcbiAgICByLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgci5wYXJhbXMuY3NzTW9kZSAmJiAoMCwgX3V0aWxzTWluLnMpKHIud3JhcHBlckVsLCBcIi0tc3dpcGVyLXZpcnR1YWwtc2l6ZVwiLCBgJHtyLnZpcnR1YWxTaXplfXB4YCk7XG4gIH0pLCBPYmplY3QuYXNzaWduKHIudmlydHVhbCwge1xuICAgIGFwcGVuZFNsaWRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgXCJsZW5ndGhcIiBpbiBlKSBmb3IgKGxldCBzID0gMDsgcyA8IGUubGVuZ3RoOyBzICs9IDEpIGVbc10gJiYgci52aXJ0dWFsLnNsaWRlcy5wdXNoKGVbc10pO2Vsc2Ugci52aXJ0dWFsLnNsaWRlcy5wdXNoKGUpO1xuICAgICAgbyghMCk7XG4gICAgfSxcbiAgICBwcmVwZW5kU2xpZGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBzID0gci5hY3RpdmVJbmRleDtcbiAgICAgIGxldCB0ID0gcyArIDEsXG4gICAgICAgIGkgPSAxO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBlLmxlbmd0aDsgcyArPSAxKSBlW3NdICYmIHIudmlydHVhbC5zbGlkZXMudW5zaGlmdChlW3NdKTtcbiAgICAgICAgdCA9IHMgKyBlLmxlbmd0aCwgaSA9IGUubGVuZ3RoO1xuICAgICAgfSBlbHNlIHIudmlydHVhbC5zbGlkZXMudW5zaGlmdChlKTtcbiAgICAgIGlmIChyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIGNvbnN0IGUgPSByLnZpcnR1YWwuY2FjaGUsXG4gICAgICAgICAgcyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKHIgPT4ge1xuICAgICAgICAgIGNvbnN0IHQgPSBlW3JdLFxuICAgICAgICAgICAgbCA9IHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIik7XG4gICAgICAgICAgbCAmJiB0LnNldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIsIHBhcnNlSW50KGwsIDEwKSArIGkpLCBzW3BhcnNlSW50KHIsIDEwKSArIGldID0gdDtcbiAgICAgICAgfSksIHIudmlydHVhbC5jYWNoZSA9IHM7XG4gICAgICB9XG4gICAgICBvKCEwKSwgci5zbGlkZVRvKHQsIDApO1xuICAgIH0sXG4gICAgcmVtb3ZlU2xpZGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAobnVsbCA9PSBlKSByZXR1cm47XG4gICAgICBsZXQgcyA9IHIuYWN0aXZlSW5kZXg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkgZm9yIChsZXQgdCA9IGUubGVuZ3RoIC0gMTsgdCA+PSAwOyB0IC09IDEpIHIudmlydHVhbC5zbGlkZXMuc3BsaWNlKGVbdF0sIDEpLCByLnBhcmFtcy52aXJ0dWFsLmNhY2hlICYmIGRlbGV0ZSByLnZpcnR1YWwuY2FjaGVbZVt0XV0sIGVbdF0gPCBzICYmIChzIC09IDEpLCBzID0gTWF0aC5tYXgocywgMCk7ZWxzZSByLnZpcnR1YWwuc2xpZGVzLnNwbGljZShlLCAxKSwgci5wYXJhbXMudmlydHVhbC5jYWNoZSAmJiBkZWxldGUgci52aXJ0dWFsLmNhY2hlW2VdLCBlIDwgcyAmJiAocyAtPSAxKSwgcyA9IE1hdGgubWF4KHMsIDApO1xuICAgICAgbyghMCksIHIuc2xpZGVUbyhzLCAwKTtcbiAgICB9LFxuICAgIHJlbW92ZUFsbFNsaWRlczogZnVuY3Rpb24gKCkge1xuICAgICAgci52aXJ0dWFsLnNsaWRlcyA9IFtdLCByLnBhcmFtcy52aXJ0dWFsLmNhY2hlICYmIChyLnZpcnR1YWwuY2FjaGUgPSB7fSksIG8oITApLCByLnNsaWRlVG8oMCwgMCk7XG4gICAgfSxcbiAgICB1cGRhdGU6IG9cbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZkWFJwYkhOTmFXNGlMQ0p5WlhGMWFYSmxJaXdpVm1seWRIVmhiQ0lzSW1VaUxDSnpJaXdpYzNkcGNHVnlJaXdpY2lJc0ltVjRkR1Z1WkZCaGNtRnRjeUlzSW5RaUxDSnZiaUlzSW1raUxDSmxiV2wwSWl3aWJDSXNJblpwY25SMVlXd2lMQ0psYm1GaWJHVmtJaXdpYzJ4cFpHVnpJaXdpWTJGamFHVWlMQ0p5Wlc1a1pYSlRiR2xrWlNJc0luSmxibVJsY2tWNGRHVnlibUZzSWl3aWNtVnVaR1Z5UlhoMFpYSnVZV3hWY0dSaGRHVWlMQ0poWkdSVGJHbGtaWE5DWldadmNtVWlMQ0poWkdSVGJHbGtaWE5CWm5SbGNpSXNJbUVpTENKblpYUkViMk4xYldWdWRDSXNJbVp5YjIwaUxDSjBieUlzSW05bVpuTmxkQ0lzSW5Oc2FXUmxjMGR5YVdRaUxDSmtJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbTRpTENKd1lYSmhiWE1pTENKallXeHNJaXdpYVc1dVpYSklWRTFNSWl3aVkyaHBiR1J5Wlc0aUxDSnBjMFZzWlcxbGJuUWlMQ0p6Ykdsa1pVTnNZWE56SWl3aWMyVjBRWFIwY21saWRYUmxJaXdpYnlJc0luTnNhV1JsYzFCbGNsWnBaWGNpTENKemJHbGtaWE5RWlhKSGNtOTFjQ0lzSW1ObGJuUmxjbVZrVTJ4cFpHVnpJaXdpYkc5dmNDSXNJbU1pTENKMUlpd2ljQ0lzSW1ZaUxDSm9JaXdpWTNOelRXOWtaU0lzSW5Wd1pHRjBaVUZqZEdsMlpVbHVaR1Y0SWl3aWJTSXNJbUZqZEdsMlpVbHVaR1Y0SWl3aWRpSXNJbWNpTENKRklpd2ljblJzVkhKaGJuTnNZWFJsSWl3aWFYTkliM0pwZW05dWRHRnNJaXdpVFdGMGFDSXNJbVpzYjI5eUlpd2lVeUlzSW5naUxDSnRZWGdpTENKdGFXNGlMQ0pzWlc1bmRHZ2lMQ0ozSWl3aVFTSXNJblZ3WkdGMFpWTnNhV1JsY3lJc0luVndaR0YwWlZCeWIyZHlaWE56SWl3aWRYQmtZWFJsVTJ4cFpHVnpRMnhoYzNObGN5SXNJazlpYW1WamRDSXNJbUZ6YzJsbmJpSXNJbk5zYVdSbGMwSmxabTl5WlNJc0luTnNhV1JsYzBGbWRHVnlJaXdpWm05eVJXRmphQ0lzSW5OMGVXeGxJaXdpWVdKeklpd2lZM056VDNabGNtWnNiM2RCWkdwMWMzUnRaVzUwSWl3aWNIVnphQ0lzSW1JaUxDSk5JaXdpZVNJc0luTnNhV1JsYzBWc0lpd2ljWFZsY25sVFpXeGxZM1J2Y2tGc2JDSXNJbkpsYlc5MlpTSXNJbEFpTENKRElpd2lZWEJ3Wlc1a0lpd2ljSEpsY0dWdVpDSXNJbk52Y25RaUxDSmxiR1Z0Wlc1MFEyaHBiR1J5Wlc0aUxDSndZWE56WldSUVlYSmhiWE1pTENKbWFXeDBaWElpTENKdFlYUmphR1Z6SWl3aVkyeGhjM05PWVcxbGN5SXNJbU52Ym5SaGFXNWxjazF2WkdsbWFXVnlRMnhoYzNNaUxDSjNZWFJqYUZOc2FXUmxjMUJ5YjJkeVpYTnpJaXdpYjNKcFoybHVZV3hRWVhKaGJYTWlMQ0pwYm1sMGFXRnNVMnhwWkdVaUxDSmZhVzF0WldScFlYUmxWbWx5ZEhWaGJDSXNJbU5zWldGeVZHbHRaVzkxZENJc0luTmxkRlJwYldWdmRYUWlMQ0p6WlhSRFUxTlFjbTl3WlhKMGVTSXNJbmR5WVhCd1pYSkZiQ0lzSW5acGNuUjFZV3hUYVhwbElpd2lZWEJ3Wlc1a1UyeHBaR1VpTENKd2NtVndaVzVrVTJ4cFpHVWlMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lMQ0oxYm5Ob2FXWjBJaXdpYTJWNWN5SXNJbWRsZEVGMGRISnBZblYwWlNJc0luQmhjbk5sU1c1MElpd2ljMnhwWkdWVWJ5SXNJbkpsYlc5MlpWTnNhV1JsSWl3aWMzQnNhV05sSWl3aWNtVnRiM1psUVd4c1UyeHBaR1Z6SWl3aWRYQmtZWFJsSWwwc0luTnZkWEpqWlhNaU9sc2lNQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzI1MWJHeGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVGcFF5eEpRVUZCUVN4VFFVRkJMRWRCUVVGRExFOUJRVUU3UVVGSGFrTXNVMEZCVTBNc1VVRkJVVU1zUTBGQlFUdEZRVU5tTEVsQmEwSkpReXhEUVVGQk8wbEJRVUU3VFVGc1FrRkRMRTFCUVVFc1JVRkRSa01zUTBGQlFUdE5RVUZOUXl4WlFVRkJMRVZCUTA1RExFTkJRVUU3VFVGQldVTXNSVUZCUVN4RlFVTmFReXhEUVVGQk8wMUJRVVZETEVsQlFVRXNSVUZEUmtNN1NVRkJRU3hKUVVORlZDeERRVUZCTzBWQlEwcExMRU5CUVVFc1EwRkJZVHRKUVVOWVN5eFBRVUZCTEVWQlFWTTdUVUZEVUVNc1QwRkJRU3hIUVVGVE8wMUJRMVJETEUxQlFVRXNSVUZCVVR0TlFVTlNReXhMUVVGQkxFZEJRVTg3VFVGRFVFTXNWMEZCUVN4RlFVRmhPMDFCUTJKRExHTkJRVUVzUlVGQlowSTdUVUZEYUVKRExHOUNRVUZCTEVkQlFYTkNPMDFCUTNSQ1F5eGxRVUZCTEVWQlFXbENPMDFCUTJwQ1F5eGpRVUZCTEVWQlFXZENPMGxCUVVFN1JVRkJRVHRGUVVsd1FpeE5RVUZOUXl4RFFVRkJMRWRCUVZjc1NVRkJRVU1zYTBKQlFVRTdSVUZEYWtKcVFpeERRVUZCTEVOQlFVOVBMRTlCUVVFc1IwRkJWVHRKUVVObVJ5eExRVUZCTEVWQlFVOHNRMEZCUXp0SlFVTlNVU3hKUVVGQkxFOUJRVTA3U1VGRFRrTXNSVUZCUVN4UFFVRkpPMGxCUTBwV0xFMUJRVUVzUlVGQlVUdEpRVU5TVnl4TlFVRkJMRVZCUVZFN1NVRkRVa01zVlVGQlFTeEZRVUZaTzBWQlFVRTdSVUZGWkN4TlFVRk5ReXhEUVVGQkxFZEJRVlZPTEVOQlFVRXNRMEZCVTA4c1lVRkJRU3hEUVVGak8wVkJRM1pETEZOQlFWTkRMRVZCUVZrelFpeERRVUZCTEVWQlFVOURMRU5CUVVFN1NVRkRNVUlzVFVGQlRVa3NRMEZCUVN4SFFVRlRSaXhEUVVGQkxFTkJRVTk1UWl4TlFVRkJMRU5CUVU5c1FpeFBRVUZCTzBsQlF6ZENMRWxCUVVsTUxFTkJRVUVzUTBGQlQxRXNTMEZCUVN4SlFVRlRWaXhEUVVGQkxFTkJRVTlQTEU5QlFVRXNRMEZCVVVjc1MwRkJRU3hEUVVGTldpeERRVUZCTEVkQlEzWkRMRTlCUVU5RkxFTkJRVUVzUTBGQlQwOHNUMEZCUVN4RFFVRlJSeXhMUVVGQkxFTkJRVTFhTEVOQlFVRTdTVUZIT1VJc1NVRkJTVTBzUTBGQlFUdEpRV2xDU2l4UFFXaENTVVlzUTBGQlFTeERRVUZQVXl4WFFVRkJMRWxCUTFSUUxFTkJRVUVzUjBGQlZVWXNRMEZCUVN4RFFVRlBVeXhYUVVGQkxFTkJRVmxsTEVsQlFVRXNRMEZCU3pGQ0xFTkJRVUVzUlVGQlVVZ3NRMEZCUVN4RlFVRlBReXhEUVVGQkxFZEJRekZDTEcxQ1FVRmFUU3hEUVVGQkxFdEJRMVJyUWl4RFFVRkJMRU5CUVZGTExGTkJRVUVzUjBGQldYWkNMRU5CUVVFc1JVRkRjRUpCTEVOQlFVRXNSMEZCVld0Q0xFTkJRVUVzUTBGQlVVMHNVVUZCUVN4RFFVRlRMRTlCUnpkQ2VFSXNRMEZCUVN4SFFVUlRTaXhEUVVGQkxFTkJRVTgyUWl4VFFVRkJMRWRCUTA0c1NVRkJRVTRzVjBGQlFTeEZRVUZqTEd0Q1FVVmtMRWxCUVVGQkxGZEJRVUVzUlVGQll5eFBRVUZQZGtJc1EwRkJRU3hEUVVGUGVVSXNUVUZCUVN4RFFVRlBTeXhWUVVGQkxFZEJSUzlETVVJc1EwRkJRU3hEUVVGUk1rSXNXVUZCUVN4RFFVRmhMREpDUVVFeVFtcERMRU5CUVVFc1IwRkRNME5KTEVOQlFVRXNRMEZCVDFNc1YwRkJRU3hMUVVOV1VDeERRVUZCTEVOQlFWRjFRaXhUUVVGQkxFZEJRVms1UWl4RFFVRkJMRWRCUld4Q1N5eERRVUZCTEVOQlFVOVJMRXRCUVVFc1MwRkJUMVlzUTBGQlFTeERRVUZQVHl4UFFVRkJMRU5CUVZGSExFdEJRVUVzUTBGQlRWb3NRMEZCUVN4SlFVRlRUU3hEUVVGQkxFZEJRM3BEUVN4RFFVTlVPMFZCUVVFN1JVRkRRU3hUUVVGVE5FSXNSVUZCVDI1RExFTkJRVUU3U1VGRFpEdFJRVUZOYjBNc1lVRkJRU3hGUVVOS2JrTXNRMEZCUVR0UlFVRmhiME1zWTBGQlFTeEZRVU5pYUVNc1EwRkJRVHRSUVVGamFVTXNZMEZCUVN4RlFVTmtMMElzUTBGQlFUdFJRVU5CWjBNc1NVRkJRU3hGUVVGTmNFSTdUVUZCUVN4SlFVTkthRUlzUTBGQlFTeERRVUZQZVVJc1RVRkJRVHROUVVGQk8xRkJRMHhZTEdWQlFVRXNSVUZEU2xFc1EwRkJRVHRSUVVGbFVDeGpRVUZCTEVWQlEyWnBRanROUVVGQkxFbEJRMFZvUXl4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXNRaXhQUVVGQk8wMUJRVUU3VVVGRmFFSlhMRWxCUVVFc1JVRkJUVzFDTEVOQlFVRTdVVUZEVG14Q0xFVkJRVUVzUlVGQlNXMUNMRU5CUVVFN1VVRkJWVGRDTEUxQlFVRXNSVUZEWkRoQ0xFTkJRVUU3VVVGRFFXeENMRlZCUVVFc1JVRkJXVzFDTEVOQlFVRTdVVUZEV25CQ0xFMUJRVUVzUlVGQlVYRkNPMDFCUVVFc1NVRkRUbnBETEVOQlFVRXNRMEZCVDA4c1QwRkJRVHRKUVVOT1VDeERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlwUWl4UFFVRkJMRWxCUTJwQ01VTXNRMEZCUVN4RFFVRlBNa01zYVVKQlFVRTdTVUZGVkN4TlFVRk5ReXhEUVVGQkxFZEJRV00xUXl4RFFVRkJMRU5CUVU4MlF5eFhRVUZCTEVsQlFXVTdTVUZETVVNc1NVRkJTVU1zUTBGQlFTeEZRVVZCUXl4RFFVRkJMRVZCUTBGRExFTkJRVUU3U1VGR2NVSkdMRU5CUVVFc1IwRkJja0k1UXl4RFFVRkJMRU5CUVU5cFJDeFpRVUZCTEVkQlFUSkNMRlZCUVRCQ2FrUXNRMEZCUVN4RFFVRlBhMFFzV1VGQlFTeExRVUZwUWl4VFFVRlRMRTlCUnpkR09VTXNRMEZCUVN4SlFVTkdNa01zUTBGQlFTeEhRVUZqU1N4SlFVRkJMRU5CUVV0RExFdEJRVUVzUTBGQlRYUkVMRU5CUVVFc1IwRkJaMElzUzBGQlMwa3NRMEZCUVN4SFFVRnBRamhDTEVOQlFVRXNSVUZETDBSblFpeERRVUZCTEVkQlFXVkhMRWxCUVVFc1EwRkJTME1zUzBGQlFTeERRVUZOZEVRc1EwRkJRU3hIUVVGblFpeExRVUZMU1N4RFFVRkJMRWRCUVdsQ2IwSXNRMEZCUVN4TFFVVm9SWGxDTEVOQlFVRXNSMEZCWTJwRUxFTkJRVUVzU1VGQmFVSkpMRU5CUVVFc1IwRkJhVUlzUzBGQlN6aENMRU5CUVVFc1JVRkRja1JuUWl4RFFVRkJMRWxCUVdkQ2FFTXNRMEZCUVN4SFFVRlRiRUlzUTBGQlFTeEhRVUZuUWtrc1EwRkJRU3hKUVVGclFtOUNMRU5CUVVFN1NVRkZOMFFzU1VGQlNTdENMRU5CUVVFc1IwRkJUMVFzUTBGQlFTeEhRVUZqU1N4RFFVRkJPMDFCUTNKQ1RTeERRVUZCTEVkQlFVdFdMRU5CUVVFc1IwRkJZMGNzUTBGQlFUdEpRVU5zUWk5Q0xFTkJRVUVzUzBGRFNIRkRMRU5CUVVFc1IwRkJUMFlzU1VGQlFTeERRVUZMU1N4SFFVRkJMRU5CUVVsR0xFTkJRVUVzUlVGQlRTeEpRVU4wUWtNc1EwRkJRU3hIUVVGTFNDeEpRVUZCTEVOQlFVdExMRWRCUVVFc1EwRkJTVVlzUTBGQlFTeEZRVUZKWml4RFFVRkJMRU5CUVU5clFpeE5RVUZCTEVkQlFWTTdTVUZGY0VNc1NVRkJTVU1zUTBGQlFTeEpRVUZWTVVRc1EwRkJRU3hEUVVGUGNVSXNWVUZCUVN4RFFVRlhaME1zUTBGQlFTeExRVUZUTEUxQlFVMXlSQ3hEUVVGQkxFTkJRVTl4UWl4VlFVRkJMRU5CUVZjc1RVRkJUVHRKUVdkQ2RrVXNVMEZCVTNORExFVkJRVUU3VFVGRFVETkVMRU5CUVVFc1EwRkJUelJFTEZsQlFVRXNTVUZEVURWRUxFTkJRVUVzUTBGQlR6WkVMR05CUVVFc1NVRkRVRGRFTEVOQlFVRXNRMEZCVHpoRUxHMUNRVUZCTEVsQlExQjRSQ3hEUVVGQkxFTkJRVXNzWjBKQlExQTdTVUZCUVR0SlFVTkJMRWxCY2tKSlZTeERRVUZCTEVsQlFWVTBRaXhEUVVGQkxFbEJRV1ZKTEVOQlFVRXNTVUZETTBKTExFTkJRVUVzU1VGQlVVd3NRMEZCUVN4RlFVTklOVU1zUTBGQlFTeExRVUZuUW5ORUxFTkJRVUVzU1VGQlZURkVMRU5CUVVFc1EwRkJUM0ZDTEZWQlFVRXNRMEZCVnl4UFFVTjRRMHdzUTBGQlFTeEpRVUZWTkVJc1EwRkJRU3hIUVVGalNTeERRVUZCTEV0QlEycERTeXhEUVVGQkxFbEJRVkZNTEVOQlFVRXNSVUZEU2pWRExFTkJRVUVzUzBGQlowSnpSQ3hEUVVGQkxFbEJRVlV4UkN4RFFVRkJMRU5CUVU5eFFpeFZRVUZCTEVOQlFWY3NUVUZGYkVRd1F5eE5RVUZCTEVOQlFVOURMRTFCUVVFc1EwRkJUMmhGTEVOQlFVRXNRMEZCVDA4c1QwRkJRU3hGUVVGVE8wMUJRelZDVnl4SlFVRkJMRVZCUVVGdFF5eERRVUZCTzAxQlEwRnNReXhGUVVGQkxFVkJRVUZ0UXl4RFFVRkJPMDFCUTBGc1F5eE5RVUZCTEVWQlFVRnpReXhEUVVGQk8wMUJRMEZ5UXl4VlFVRkJMRVZCUVZseVFpeERRVUZCTEVOQlFVOXhRaXhWUVVGQk8wMUJRMjVDTkVNc1dVRkJRU3hGUVVGQmFrSXNRMEZCUVR0TlFVTkJhMElzVjBGQlFTeEZRVUZCYmtJN1NVRkJRU3hKUVZGRlZpeERRVUZCTEV0QlFXbENaMElzUTBGQlFTeEpRVUZSWml4RFFVRkJMRXRCUVdWblFpeERRVUZCTEV0QlFVOTZSQ3hEUVVGQkxFVkJVV3BFTEU5QlVFbEhMRU5CUVVFc1EwRkJUM0ZDTEZWQlFVRXNTMEZCWlcxQ0xFTkJRVUVzU1VGQmMwSnJRaXhEUVVGQkxFdEJRVmRxUWl4RFFVRkJMRWxCUTNwRWVrTXNRMEZCUVN4RFFVRlBVeXhOUVVGQkxFTkJRVTh3UkN4UFFVRkJMRU5CUVZGMFJTeERRVUZCTzAxQlEzQkNRU3hEUVVGQkxFTkJRVkYxUlN4TFFVRkJMRU5CUVUxMFFpeERRVUZCTEVsQlFXbENXU3hEUVVGQkxFZEJRVk5RTEVsQlFVRXNRMEZCUzJ0Q0xFZEJRVUVzUTBGQlNYSkZMRU5CUVVFc1EwRkJUM05GTEhGQ1FVRkJMRTFCUVRWQ0xFbEJRWGRFTzBsQlFVRXNTVUZIZUVaMFJTeERRVUZCTEVOQlFVODJSQ3hqUVVGQkxGTkJRMUIyUkN4RFFVRkJMRU5CUVVzN1NVRkhVQ3hKUVVGSlRpeERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlzUWl4UFFVRkJMRU5CUVZGTExHTkJRVUVzUlVGclFuaENMRTlCYWtKQldpeERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlzUWl4UFFVRkJMRU5CUVZGTExHTkJRVUVzUTBGQlpXTXNTVUZCUVN4RFFVRkxNVUlzUTBGQlFTeEZRVUZSTzAxQlEyaEViMElzVFVGQlFTeEZRVUZCYzBNc1EwRkJRVHROUVVOQmVFTXNTVUZCUVN4RlFVRkJiVU1zUTBGQlFUdE5RVU5CYkVNc1JVRkJRU3hGUVVGQmJVTXNRMEZCUVR0TlFVTkJOME1zVFVGQlFTeEZRVUZSTzFGQlEwNHNUVUZCVFZvc1EwRkJRU3hIUVVGcFFqdFJRVU4yUWl4TFFVRkxMRWxCUVVsRExFTkJRVUVzUjBGQlNYVkVMRU5CUVVFc1JVRkJUWFpFTEVOQlFVRXNTVUZCUzNkRUxFTkJRVUVzUlVGQlNYaEVMRU5CUVVFc1NVRkJTeXhIUVVNdlFrUXNRMEZCUVN4RFFVRmxNRVVzU1VGQlFTeERRVUZMYUVNc1EwRkJRU3hEUVVGUGVrTXNRMEZCUVR0UlFVVTNRaXhQUVVGUFJDeERRVU5VTzAxQlFVRXNRMEZPVVR0SlFVRkJMRlZCVVU1SExFTkJRVUVzUTBGQlQzbENMRTFCUVVFc1EwRkJUMnhDTEU5QlFVRXNRMEZCVVUwc2IwSkJRVUVzUjBGRGVFSTRReXhEUVVGQkxFdEJSVUZ5UkN4RFFVRkJMRU5CUVVzN1NVRkpWQ3hOUVVGTmEwVXNRMEZCUVN4SFFVRnBRanROUVVOcVFrTXNRMEZCUVN4SFFVRm5RanROUVVOb1FrTXNRMEZCUVN4SFFVRm5RamRGTEVOQlFVRTdVVUZEY0VJc1NVRkJTVU1zUTBGQlFTeEhRVUZoUkN4RFFVRkJPMUZCVDJwQ0xFOUJUa2xCTEVOQlFVRXNSMEZCVVN4SlFVTldReXhEUVVGQkxFZEJRV0Y1UXl4RFFVRkJMRU5CUVU5clFpeE5RVUZCTEVkQlFWTTFSQ3hEUVVGQkxFZEJRM0JDUXl4RFFVRkJMRWxCUVdONVF5eERRVUZCTEVOQlFVOXJRaXhOUVVGQkxFdEJSVGxDTTBRc1EwRkJRU3hKUVVFd1FubERMRU5CUVVFc1EwRkJUMnRDTEUxQlFVRXNSMEZGTlVJelJDeERRVUZWTzAxQlFVRTdTVUZGYmtJc1NVRkJTVVFzUTBGQlFTeEZRVU5HUnl4RFFVRkJMRU5CUVU4eVJTeFJRVUZCTEVOQlFWTkRMR2RDUVVGQkxFTkJRV2xDTEVsQlFVazFSU3hEUVVGQkxFTkJRVTk1UWl4TlFVRkJMRU5CUVU5TExGVkJRVUVzYTBKQlFUUkNjVU1zVDBGQlFTeERRVUZSZEVVc1EwRkJRVHROUVVOeVJrRXNRMEZCUVN4RFFVRlJaMFlzVFVGQlFTeEZRVUZSTzBsQlFVRXNVVUZIYkVJc1MwRkJTeXhKUVVGSmFFWXNRMEZCUVN4SFFVRkpkME1zUTBGQlFTeEZRVUZqZUVNc1EwRkJRU3hKUVVGTGVVTXNRMEZCUVN4RlFVRlpla01zUTBGQlFTeEpRVUZMTEVkQlF5OURMRWxCUVVsQkxFTkJRVUVzUjBGQlNYZEVMRU5CUVVFc1NVRkJVWGhFTEVOQlFVRXNSMEZCU1hsRUxFTkJRVUVzUlVGQlNUdE5RVU4wUWl4TlFVRk5lRVFzUTBGQlFTeEhRVUZoTkVVc1EwRkJRU3hEUVVGak4wVXNRMEZCUVR0TlFVTnFRMGNzUTBGQlFTeERRVUZQTWtVc1VVRkJRU3hEUVVGVFF5eG5Ra0ZCUVN4RFFVRnBRaXhKUVVGSk5VVXNRMEZCUVN4RFFVRlBlVUlzVFVGQlFTeERRVUZQU3l4VlFVRkJMRFpDUVVGMVEyaERMRU5CUVVFc05rTkJRWFZFUVN4RFFVRkJMRTFCUVdkQ2NVVXNUMEZCUVN4RFFVRlJkRVVzUTBGQlFUdFJRVU4yUzBFc1EwRkJRU3hEUVVGUlowWXNUVUZCUVN4RlFVRlJPMDFCUVVFc1JVRkZjRUk3U1VGQlFUdEpRVWRLTEUxQlFVMURMRU5CUVVFc1IwRkJWemxFTEVOQlFVRXNTVUZCVlhWQ0xFTkJRVUVzUTBGQlQydENMRTFCUVVFc1IwRkJVenROUVVOeVEzTkNMRU5CUVVFc1IwRkJVeTlFTEVOQlFVRXNSMEZCZVVJc1NVRkJhRUoxUWl4RFFVRkJMRU5CUVU5clFpeE5RVUZCTEVkQlFXRnNRaXhEUVVGQkxFTkJRVTlyUWl4TlFVRkJPMGxCUTI1RUxFdEJRVXNzU1VGQlNUTkVMRU5CUVVFc1IwRkJTV2RHTEVOQlFVRXNSVUZCVldoR0xFTkJRVUVzUjBGQlNXbEdMRU5CUVVFc1JVRkJVV3BHTEVOQlFVRXNTVUZCU3l4SFFVTjBReXhKUVVGSlFTeERRVUZCTEVsQlFVdDFSQ3hEUVVGQkxFbEJRVkYyUkN4RFFVRkJMRWxCUVV0M1JDeERRVUZCTEVWQlFVazdUVUZEZUVJc1RVRkJUWFJFTEVOQlFVRXNSMEZCWVRCRkxFTkJRVUVzUTBGQll6VkZMRU5CUVVFN1RVRkJRU3hMUVVOUUxFMUJRV1ozUXl4RFFVRkJMRWxCUVRoQ2VrTXNRMEZCUVN4SFFVTjJRelJGTEVOQlFVRXNRMEZCWTBZc1NVRkJRU3hEUVVGTGRrVXNRMEZCUVN4TFFVVm1SaXhEUVVGQkxFZEJRVWwzUXl4RFFVRkJMRWxCUVZsdFF5eERRVUZCTEVOQlFXTkdMRWxCUVVFc1EwRkJTM1pGTEVOQlFVRXNSMEZEYmtOR0xFTkJRVUVzUjBGQlNYVkRMRU5CUVVFc1NVRkJZMjFETEVOQlFVRXNRMEZCWlVRc1NVRkJRU3hEUVVGTGRrVXNRMEZCUVN4RlFVVTVRenRKUVVGQk8wbEJTMFlzU1VGSVFYbEZMRU5CUVVFc1EwRkJZMDRzVDBGQlFTeERRVUZSZEVVc1EwRkJRVHROUVVOd1FrY3NRMEZCUVN4RFFVRlBNa1VzVVVGQlFTeERRVUZUU3l4TlFVRkJMRU5CUVU5NFJDeERRVUZCTEVOQlFWbGxMRU5CUVVFc1EwRkJUekZETEVOQlFVRXNSMEZCVVVFc1EwRkJRU3hGUVVGUE8wbEJRVUVzU1VGRmRrUnRRaXhEUVVGQkxFVkJRMFlzUzBGQlN5eEpRVUZKYmtJc1EwRkJRU3hIUVVGSk1rVXNRMEZCUVN4RFFVRmxaaXhOUVVGQkxFZEJRVk1zUjBGQlJ6VkVMRU5CUVVFc1NVRkJTeXhIUVVGSFFTeERRVUZCTEVsQlFVc3NSMEZCUnp0TlFVTjBSQ3hOUVVGTlF5eERRVUZCTEVkQlFWRXdSU3hEUVVGQkxFTkJRV1V6UlN4RFFVRkJPMDFCUXpkQ1J5eERRVUZCTEVOQlFVOHlSU3hSUVVGQkxFTkJRVk5OTEU5QlFVRXNRMEZCVVhwRUxFTkJRVUVzUTBGQldXVXNRMEZCUVN4RFFVRlBla01zUTBGQlFTeEhRVUZSUVN4RFFVRkJMRVZCUTNKRU8wbEJRVUVzVDBGRlFUQkZMRU5CUVVFc1EwRkJaVlVzU1VGQlFTeERRVUZMTEVOQlFVTnlSaXhEUVVGQkxFVkJRVWRETEVOQlFVRXNTMEZCVFVFc1EwRkJRU3hIUVVGSlJDeERRVUZCTEVkQlEyeERNa1VzUTBGQlFTeERRVUZsVEN4UFFVRkJMRU5CUVZGMFJTeERRVUZCTzAxQlEzSkNSeXhEUVVGQkxFTkJRVTh5UlN4UlFVRkJMRU5CUVZOTkxFOUJRVUVzUTBGQlVYcEVMRU5CUVVFc1EwRkJXV1VzUTBGQlFTeERRVUZQTVVNc1EwRkJRU3hIUVVGUlFTeERRVUZCTEVWQlFVODdTVUZCUVR0SlFVYzVSQ3hKUVVGQmMwWXNWMEZCUVN4RlFVRm5RbTVHTEVOQlFVRXNRMEZCVHpKRkxGRkJRVUVzUlVGQlZTd3JRa0ZCSzBKU0xFOUJRVUVzUTBGQlVYUkZMRU5CUVVFN1RVRkRkRVZCTEVOQlFVRXNRMEZCVVhWRkxFdEJRVUVzUTBGQlRYUkNMRU5CUVVFc1NVRkJhVUpaTEVOQlFVRXNSMEZCVTFBc1NVRkJRU3hEUVVGTGEwSXNSMEZCUVN4RFFVRkpja1VzUTBGQlFTeERRVUZQYzBVc2NVSkJRVUVzVFVGQk5VSXNTVUZCZDBRN1NVRkJRU3hKUVVWMFJsZ3NRMEZCUVN4RlFVTkdPMFZCUVVFN1JVRjFSVUYyUkN4RFFVRkJMRU5CUVVjc1kwRkJZenRKUVVObUxFdEJRVXRLTEVOQlFVRXNRMEZCVDNsQ0xFMUJRVUVzUTBGQlQyeENMRTlCUVVFc1EwRkJVVU1zVDBGQlFTeEZRVUZUTzBsQlEzQkRMRWxCUVVsWUxFTkJRVUU3U1VGRFNpeFRRVUZyUkN4TlFVRjJRMGNzUTBGQlFTeERRVUZQYjBZc1dVRkJRU3hEUVVGaE4wVXNUMEZCUVN4RFFVRlJSU3hOUVVGQkxFVkJRWGRDTzAxQlF6ZEVMRTFCUVUxWUxFTkJRVUVzUjBGQlV5eEpRVUZKUlN4RFFVRkJMRU5CUVU4eVJTeFJRVUZCTEVOQlFWTXZReXhSUVVGQkxFVkJRVlY1UkN4TlFVRkJMRU5CUVU5NFJpeERRVUZCTEVsQlFVMUJMRU5CUVVFc1EwRkJSM2xHTEU5QlFVRXNRMEZCVVN4SlFVRkpkRVlzUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUFN5eFZRVUZCTzAxQlEyNUdhRU1zUTBGQlFTeEpRVUZWUVN4RFFVRkJMRU5CUVU4eVJDeE5RVUZCTEV0QlEyNUNla1FzUTBGQlFTeERRVUZQVHl4UFFVRkJMRU5CUVZGRkxFMUJRVUVzUjBGQlV5eEpRVUZKV0N4RFFVRkJMRWRCUXpWQ1JDeERRVUZCTEVsQlFXOUNMRWRCUTNCQ1F5eERRVUZCTEVOQlFVOXhSU3hQUVVGQkxFTkJRVkVzUTBGQlEzUkZMRU5CUVVFc1JVRkJVME1zUTBGQlFUdFJRVU4yUWtRc1EwRkJRU3hEUVVGUmEwTXNXVUZCUVN4RFFVRmhMREpDUVVFeVFtcERMRU5CUVVFc1IwRkRhRVJGTEVOQlFVRXNRMEZCVDA4c1QwRkJRU3hEUVVGUlJ5eExRVUZCTEVOQlFVMWFMRU5CUVVFc1NVRkJZMFFzUTBGQlFTeEZRVU51UTBFc1EwRkJRU3hEUVVGUlowWXNUVUZCUVN4RlFVRlJPMDFCUVVFc1IwRkhkRUk3U1VGQlFUdEpRVU5MYUVZc1EwRkJRU3hMUVVOSVJ5eERRVUZCTEVOQlFVOVBMRTlCUVVFc1EwRkJVVVVzVFVGQlFTeEhRVUZUVkN4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXNRaXhQUVVGQkxFTkJRVkZGTEUxQlFVRXNSMEZGYUVSVUxFTkJRVUVzUTBGQlQzVkdMRlZCUVVFc1EwRkJWMmhDTEVsQlFVRXNRMEZCU3l4SFFVRkhka1VzUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUEswUXNjMEpCUVVFc1dVRkRlRU40Uml4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOW5SU3h0UWtGQlFTeEpRVUZ6UWl4SFFVTndRM3BHTEVOQlFVRXNRMEZCVHpCR0xHTkJRVUVzUTBGQlpVUXNiVUpCUVVFc1NVRkJjMElzUjBGRGRrTjZSaXhEUVVGQkxFTkJRVTk1UWl4TlFVRkJMRU5CUVU5clJTeFpRVUZCTEVsQlEycENNMFFzUTBGQlFTeEZRVU5HTzBWQlFVRXNTVUZGUmpWQ0xFTkJRVUVzUTBGQlJ5eG5Ra0ZCWjBJN1NVRkRXa29zUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUGJFSXNUMEZCUVN4RFFVRlJReXhQUVVGQkxFdEJRM1pDVWl4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXBRaXhQUVVGQkxFdEJRVmt4UXl4RFFVRkJMRU5CUVU4MFJpeHBRa0ZCUVN4SlFVTnVRME1zV1VGQlFTeERRVUZoTDBZc1EwRkJRU3hIUVVOaVFTeERRVUZCTEVkQlFXbENaMGNzVlVGQlFTeERRVUZYTzAxQlF6RkNPVVFzUTBGQlFTeEZRVUZSTzBsQlFVRXNSMEZEVUN4UlFVVklRU3hEUVVGQkxFZEJRMFk3UlVGQlFTeEpRVVZHTlVJc1EwRkJRU3hEUVVGSExITkNRVUZ6UWp0SlFVTnNRa29zUTBGQlFTeERRVUZQZVVJc1RVRkJRU3hEUVVGUGJFSXNUMEZCUVN4RFFVRlJReXhQUVVGQkxFbEJRM1pDVWl4RFFVRkJMRU5CUVU5NVFpeE5RVUZCTEVOQlFVOXBRaXhQUVVGQkxFbEJRMmhDTEVsQlFVRnhSQ3hYUVVGQkxFVkJRV1V2Uml4RFFVRkJMRU5CUVU5blJ5eFRRVUZCTEVWQlFWY3NlVUpCUVhsQ0xFZEJRVWRvUnl4RFFVRkJMRU5CUVU5cFJ5eFhRVUZCTEV0QlEzUkZPMFZCUVVFc1NVRkZSbXhETEUxQlFVRXNRMEZCVDBNc1RVRkJRU3hEUVVGUGFFVXNRMEZCUVN4RFFVRlBUeXhQUVVGQkxFVkJRVk03U1VGRE5VSXlSaXhYUVVGQkxFVkJha2hHTEZOQlFVRkJMRU5CUVhGQ2NrY3NRMEZCUVR0TlFVTnVRaXhKUVVGelFpeHRRa0ZCV0VFc1EwRkJRU3hKUVVGMVFpeFpRVUZaUVN4RFFVRkJMRVZCUXpWRExFdEJRVXNzU1VGQlNVTXNRMEZCUVN4SFFVRkpMRWRCUVVkQkxFTkJRVUVzUjBGQlNVUXNRMEZCUVN4RFFVRlBORVFzVFVGQlFTeEZRVUZSTTBRc1EwRkJRU3hKUVVGTExFZEJRMnhEUkN4RFFVRkJMRU5CUVU5RExFTkJRVUVzUzBGQlNVVXNRMEZCUVN4RFFVRlBUeXhQUVVGQkxFTkJRVkZGTEUxQlFVRXNRMEZCVHpoRUxFbEJRVUVzUTBGQlN6RkZMRU5CUVVFc1EwRkJUME1zUTBGQlFTeFJRVWR1UkVVc1EwRkJRU3hEUVVGUFR5eFBRVUZCTEVOQlFWRkZMRTFCUVVFc1EwRkJUemhFTEVsQlFVRXNRMEZCU3pGRkxFTkJRVUU3VFVGRk4wSnRReXhEUVVGQkxFVkJRVThzUlVGRFZEdEpRVUZCTzBsQmVVZEZiVVVzV1VGQlFTeEZRWGhIUml4VFFVRkJRU3hEUVVGelFuUkhMRU5CUVVFN1RVRkRjRUlzVFVGQlRVTXNRMEZCUVN4SFFVRmpSU3hEUVVGQkxFTkJRVTgyUXl4WFFVRkJPMDFCUXpOQ0xFbEJRVWt6UXl4RFFVRkJMRWRCUVdsQ1NpeERRVUZCTEVkQlFXTTdVVUZETDBKTkxFTkJRVUVzUjBGQmIwSTdUVUZEZUVJc1NVRkJTV2RITEV0QlFVRXNRMEZCVFVNc1QwRkJRU3hEUVVGUmVFY3NRMEZCUVN4SFFVRlRPMUZCUTNwQ0xFdEJRVXNzU1VGQlNVTXNRMEZCUVN4SFFVRkpMRWRCUVVkQkxFTkJRVUVzUjBGQlNVUXNRMEZCUVN4RFFVRlBORVFzVFVGQlFTeEZRVUZSTTBRc1EwRkJRU3hKUVVGTExFZEJRMnhEUkN4RFFVRkJMRU5CUVU5RExFTkJRVUVzUzBGQlNVVXNRMEZCUVN4RFFVRlBUeXhQUVVGQkxFTkJRVkZGTEUxQlFVRXNRMEZCVHpaR0xFOUJRVUVzUTBGQlVYcEhMRU5CUVVFc1EwRkJUME1zUTBGQlFUdFJRVVYwUkVrc1EwRkJRU3hIUVVGcFFrb3NRMEZCUVN4SFFVRmpSQ3hEUVVGQkxFTkJRVTgwUkN4TlFVRkJMRVZCUTNSRGNrUXNRMEZCUVN4SFFVRnZRbEFzUTBGQlFTeERRVUZQTkVRc1RVRkROMEk3VFVGQlFTeFBRVU5GZWtRc1EwRkJRU3hEUVVGUFR5eFBRVUZCTEVOQlFWRkZMRTFCUVVFc1EwRkJUelpHTEU5QlFVRXNRMEZCVVhwSExFTkJRVUU3VFVGRmFFTXNTVUZCU1Vjc1EwRkJRU3hEUVVGUGVVSXNUVUZCUVN4RFFVRlBiRUlzVDBGQlFTeERRVUZSUnl4TFFVRkJMRVZCUVU4N1VVRkRMMElzVFVGQlRXSXNRMEZCUVN4SFFVRlJSeXhEUVVGQkxFTkJRVTlQTEU5QlFVRXNRMEZCVVVjc1MwRkJRVHRWUVVOMlFsb3NRMEZCUVN4SFFVRlhMRU5CUVVNN1VVRkRiRUpwUlN4TlFVRkJMRU5CUVU5M1F5eEpRVUZCTEVOQlFVc3hSeXhEUVVGQkxFVkJRVTl6UlN4UFFVRkJMRU5CUVZGdVJTeERRVUZCTzFWQlEzcENMRTFCUVUxRkxFTkJRVUVzUjBGQlYwd3NRMEZCUVN4RFFVRk5SeXhEUVVGQk8xbEJRMnBDVFN4RFFVRkJMRWRCUVdkQ1NpeERRVUZCTEVOQlFWTnpSeXhaUVVGQkxFTkJRV0U3VlVGRGVFTnNSeXhEUVVGQkxFbEJRMFpLTEVOQlFVRXNRMEZCVXpaQ0xGbEJRVUVzUTBGQllTd3lRa0ZCTWtJd1JTeFJRVUZCTEVOQlFWTnVSeXhEUVVGQkxFVkJRV1VzVFVGQlRVWXNRMEZCUVN4SFFVVnFSazRzUTBGQlFTeERRVUZUTWtjc1VVRkJRU3hEUVVGVGVrY3NRMEZCUVN4RlFVRmhMRTFCUVUxSkxFTkJRVUVzU1VGQmNVSkdMRU5CUVZFN1VVRkJRU3hKUVVWd1JVWXNRMEZCUVN4RFFVRlBUeXhQUVVGQkxFTkJRVkZITEV0QlFVRXNSMEZCVVZvc1EwRkRla0k3VFVGQlFUdE5RVU5CYTBNc1EwRkJRU3hGUVVGUExFbEJRMUJvUXl4RFFVRkJMRU5CUVU4d1J5eFBRVUZCTEVOQlFWRjRSeXhEUVVGQkxFVkJRV2RDTEVWQlEycERPMGxCUVVFN1NVRTJSVVY1Unl4WFFVRkJMRVZCTlVWR0xGTkJRVUZCTEVOQlFYRkNPVWNzUTBGQlFUdE5RVU51UWl4SlFVRkpMRkZCUVU5QkxFTkJRVUVzUlVGQmVVUTdUVUZEY0VVc1NVRkJTVU1zUTBGQlFTeEhRVUZqUlN4RFFVRkJMRU5CUVU4MlF5eFhRVUZCTzAxQlEzcENMRWxCUVVsMVJDeExRVUZCTEVOQlFVMURMRTlCUVVFc1EwRkJVWGhITEVOQlFVRXNSMEZEYUVJc1MwRkJTeXhKUVVGSlN5eERRVUZCTEVkQlFVbE1MRU5CUVVFc1EwRkJZelJFTEUxQlFVRXNSMEZCVXl4SFFVRkhka1FzUTBGQlFTeEpRVUZMTEVkQlFVZEJMRU5CUVVFc1NVRkJTeXhIUVVOc1JFWXNRMEZCUVN4RFFVRlBUeXhQUVVGQkxFTkJRVkZGTEUxQlFVRXNRMEZCVDIxSExFMUJRVUVzUTBGQlR5OUhMRU5CUVVFc1EwRkJZMHNzUTBGQlFTeEhRVUZKTEVsQlF6TkRSaXhEUVVGQkxFTkJRVTk1UWl4TlFVRkJMRU5CUVU5c1FpeFBRVUZCTEVOQlFWRkhMRXRCUVVFc1YwRkRha0pXTEVOQlFVRXNRMEZCVDA4c1QwRkJRU3hEUVVGUlJ5eExRVUZCTEVOQlFVMWlMRU5CUVVFc1EwRkJZMHNzUTBGQlFTeEpRVVY0UTB3c1EwRkJRU3hEUVVGalN5eERRVUZCTEVsQlFVdEtMRU5CUVVFc1MwRkJZVUVzUTBGQlFTeEpRVUZsTEVsQlEyNUVRU3hEUVVGQkxFZEJRV054UkN4SlFVRkJMRU5CUVV0SkxFZEJRVUVzUTBGQlNYcEVMRU5CUVVFc1JVRkJZU3hSUVVkMFEwVXNRMEZCUVN4RFFVRlBUeXhQUVVGQkxFTkJRVkZGTEUxQlFVRXNRMEZCVDIxSExFMUJRVUVzUTBGQlR5OUhMRU5CUVVFc1JVRkJaU3hKUVVONFEwY3NRMEZCUVN4RFFVRlBlVUlzVFVGQlFTeERRVUZQYkVJc1QwRkJRU3hEUVVGUlJ5eExRVUZCTEZkQlEycENWaXhEUVVGQkxFTkJRVTlQTEU5QlFVRXNRMEZCVVVjc1MwRkJRU3hEUVVGTllpeERRVUZCTEVkQlJURkNRU3hEUVVGQkxFZEJRV2RDUXl4RFFVRkJMRXRCUVdGQkxFTkJRVUVzU1VGQlpTeEpRVU5vUkVFc1EwRkJRU3hIUVVGamNVUXNTVUZCUVN4RFFVRkxTU3hIUVVGQkxFTkJRVWw2UkN4RFFVRkJMRVZCUVdFN1RVRkZkRU5yUXl4RFFVRkJMRVZCUVU4c1NVRkRVR2hETEVOQlFVRXNRMEZCVHpCSExFOUJRVUVzUTBGQlVUVkhMRU5CUVVFc1JVRkJZU3hGUVVNNVFqdEpRVUZCTzBsQmRVUkZLMGNzWlVGQlFTeEZRWFJFUml4VFFVRkJRU3hEUVVGQk8wMUJRMFUzUnl4RFFVRkJMRU5CUVU5UExFOUJRVUVzUTBGQlVVVXNUVUZCUVN4SFFVRlRMRWxCUTNCQ1ZDeERRVUZCTEVOQlFVOTVRaXhOUVVGQkxFTkJRVTlzUWl4UFFVRkJMRU5CUVZGSExFdEJRVUVzUzBGRGVFSldMRU5CUVVFc1EwRkJUMDhzVDBGQlFTeERRVUZSUnl4TFFVRkJMRWRCUVZFc1EwRkJReXhKUVVVeFFuTkNMRU5CUVVFc1JVRkJUeXhKUVVOUWFFTXNRMEZCUVN4RFFVRlBNRWNzVDBGQlFTeERRVUZSTEVkQlFVY3NSVUZEY0VJN1NVRkJRVHRKUVdkRVJVa3NUVUZCUVN4RlFVRkJPVVU3UlVGQlFTeEZRVVZLTzBGQlFVRWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBab29tO1xudmFyIF9zc3JXaW5kb3dFc21NaW4gPSByZXF1aXJlKFwiLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1pbi5tanNcIik7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gWm9vbShlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiB0LFxuICAgIGV4dGVuZFBhcmFtczogaSxcbiAgICBvbjogYSxcbiAgICBlbWl0OiByXG4gIH0gPSBlO1xuICBjb25zdCBzID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKTtcbiAgaSh7XG4gICAgem9vbToge1xuICAgICAgZW5hYmxlZDogITEsXG4gICAgICBtYXhSYXRpbzogMyxcbiAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgdG9nZ2xlOiAhMCxcbiAgICAgIGNvbnRhaW5lckNsYXNzOiBcInN3aXBlci16b29tLWNvbnRhaW5lclwiLFxuICAgICAgem9vbWVkU2xpZGVDbGFzczogXCJzd2lwZXItc2xpZGUtem9vbWVkXCJcbiAgICB9XG4gIH0pLCB0Lnpvb20gPSB7XG4gICAgZW5hYmxlZDogITFcbiAgfTtcbiAgbGV0IG8sXG4gICAgbixcbiAgICBsID0gMSxcbiAgICBtID0gITE7XG4gIGNvbnN0IGMgPSBbXSxcbiAgICBkID0ge1xuICAgICAgb3JpZ2luWDogMCxcbiAgICAgIG9yaWdpblk6IDAsXG4gICAgICBzbGlkZUVsOiB2b2lkIDAsXG4gICAgICBzbGlkZVdpZHRoOiB2b2lkIDAsXG4gICAgICBzbGlkZUhlaWdodDogdm9pZCAwLFxuICAgICAgaW1hZ2VFbDogdm9pZCAwLFxuICAgICAgaW1hZ2VXcmFwRWw6IHZvaWQgMCxcbiAgICAgIG1heFJhdGlvOiAzXG4gICAgfSxcbiAgICB1ID0ge1xuICAgICAgaXNUb3VjaGVkOiB2b2lkIDAsXG4gICAgICBpc01vdmVkOiB2b2lkIDAsXG4gICAgICBjdXJyZW50WDogdm9pZCAwLFxuICAgICAgY3VycmVudFk6IHZvaWQgMCxcbiAgICAgIG1pblg6IHZvaWQgMCxcbiAgICAgIG1pblk6IHZvaWQgMCxcbiAgICAgIG1heFg6IHZvaWQgMCxcbiAgICAgIG1heFk6IHZvaWQgMCxcbiAgICAgIHdpZHRoOiB2b2lkIDAsXG4gICAgICBoZWlnaHQ6IHZvaWQgMCxcbiAgICAgIHN0YXJ0WDogdm9pZCAwLFxuICAgICAgc3RhcnRZOiB2b2lkIDAsXG4gICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9XG4gICAgfSxcbiAgICBwID0ge1xuICAgICAgeDogdm9pZCAwLFxuICAgICAgeTogdm9pZCAwLFxuICAgICAgcHJldlBvc2l0aW9uWDogdm9pZCAwLFxuICAgICAgcHJldlBvc2l0aW9uWTogdm9pZCAwLFxuICAgICAgcHJldlRpbWU6IHZvaWQgMFxuICAgIH07XG4gIGxldCBnID0gMTtcbiAgZnVuY3Rpb24gaCgpIHtcbiAgICBpZiAoYy5sZW5ndGggPCAyKSByZXR1cm4gMTtcbiAgICBjb25zdCBlID0gY1swXS5wYWdlWCxcbiAgICAgIHQgPSBjWzBdLnBhZ2VZLFxuICAgICAgaSA9IGNbMV0ucGFnZVgsXG4gICAgICBhID0gY1sxXS5wYWdlWTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KChpIC0gZSkgKiogMiArIChhIC0gdCkgKiogMik7XG4gIH1cbiAgZnVuY3Rpb24gRShlKSB7XG4gICAgY29uc3QgaSA9IHQuaXNFbGVtZW50ID8gXCJzd2lwZXItc2xpZGVcIiA6IGAuJHt0LnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gICAgcmV0dXJuICEhZS50YXJnZXQubWF0Y2hlcyhpKSB8fCB0LnNsaWRlcy5maWx0ZXIodCA9PiB0LmNvbnRhaW5zKGUudGFyZ2V0KSkubGVuZ3RoID4gMDtcbiAgfVxuICBmdW5jdGlvbiB2KGUpIHtcbiAgICBpZiAoXCJtb3VzZVwiID09PSBlLnBvaW50ZXJUeXBlICYmIGMuc3BsaWNlKDAsIGMubGVuZ3RoKSwgIUUoZSkpIHJldHVybjtcbiAgICBjb25zdCBpID0gdC5wYXJhbXMuem9vbTtcbiAgICBpZiAobyA9ICExLCBuID0gITEsIGMucHVzaChlKSwgIShjLmxlbmd0aCA8IDIpKSB7XG4gICAgICBpZiAobyA9ICEwLCBkLnNjYWxlU3RhcnQgPSBoKCksICFkLnNsaWRlRWwpIHtcbiAgICAgICAgZC5zbGlkZUVsID0gZS50YXJnZXQuY2xvc2VzdChgLiR7dC5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApLCBkLnNsaWRlRWwgfHwgKGQuc2xpZGVFbCA9IHQuc2xpZGVzW3QuYWN0aXZlSW5kZXhdKTtcbiAgICAgICAgbGV0IGEgPSBkLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7aS5jb250YWluZXJDbGFzc31gKTtcbiAgICAgICAgaWYgKGEgJiYgKGEgPSBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0XCIpWzBdKSwgZC5pbWFnZUVsID0gYSwgZC5pbWFnZVdyYXBFbCA9IGEgPyAoMCwgX3V0aWxzTWluLmEpKGQuaW1hZ2VFbCwgYC4ke2kuY29udGFpbmVyQ2xhc3N9YClbMF0gOiB2b2lkIDAsICFkLmltYWdlV3JhcEVsKSByZXR1cm4gdm9pZCAoZC5pbWFnZUVsID0gdm9pZCAwKTtcbiAgICAgICAgZC5tYXhSYXRpbyA9IGQuaW1hZ2VXcmFwRWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItem9vbVwiKSB8fCBpLm1heFJhdGlvO1xuICAgICAgfVxuICAgICAgaWYgKGQuaW1hZ2VFbCkge1xuICAgICAgICBjb25zdCBbZSwgdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGMubGVuZ3RoIDwgMikgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IG51bGwsXG4gICAgICAgICAgICB5OiBudWxsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBlID0gZC5pbWFnZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIHJldHVybiBbKGNbMF0ucGFnZVggKyAoY1sxXS5wYWdlWCAtIGNbMF0ucGFnZVgpIC8gMiAtIGUueCkgLyBsLCAoY1swXS5wYWdlWSArIChjWzFdLnBhZ2VZIC0gY1swXS5wYWdlWSkgLyAyIC0gZS55KSAvIGxdO1xuICAgICAgICB9KCk7XG4gICAgICAgIGQub3JpZ2luWCA9IGUsIGQub3JpZ2luWSA9IHQsIGQuaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjBtc1wiO1xuICAgICAgfVxuICAgICAgbSA9ICEwO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBmKGUpIHtcbiAgICBpZiAoIUUoZSkpIHJldHVybjtcbiAgICBjb25zdCBpID0gdC5wYXJhbXMuem9vbSxcbiAgICAgIGEgPSB0Lnpvb20sXG4gICAgICByID0gYy5maW5kSW5kZXgodCA9PiB0LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQpO1xuICAgIHIgPj0gMCAmJiAoY1tyXSA9IGUpLCBjLmxlbmd0aCA8IDIgfHwgKG4gPSAhMCwgZC5zY2FsZU1vdmUgPSBoKCksIGQuaW1hZ2VFbCAmJiAoYS5zY2FsZSA9IGQuc2NhbGVNb3ZlIC8gZC5zY2FsZVN0YXJ0ICogbCwgYS5zY2FsZSA+IGQubWF4UmF0aW8gJiYgKGEuc2NhbGUgPSBkLm1heFJhdGlvIC0gMSArIChhLnNjYWxlIC0gZC5tYXhSYXRpbyArIDEpICoqIC41KSwgYS5zY2FsZSA8IGkubWluUmF0aW8gJiYgKGEuc2NhbGUgPSBpLm1pblJhdGlvICsgMSAtIChpLm1pblJhdGlvIC0gYS5zY2FsZSArIDEpICoqIC41KSwgZC5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHthLnNjYWxlfSlgKSk7XG4gIH1cbiAgZnVuY3Rpb24geChlKSB7XG4gICAgaWYgKCFFKGUpKSByZXR1cm47XG4gICAgaWYgKFwibW91c2VcIiA9PT0gZS5wb2ludGVyVHlwZSAmJiBcInBvaW50ZXJvdXRcIiA9PT0gZS50eXBlKSByZXR1cm47XG4gICAgY29uc3QgaSA9IHQucGFyYW1zLnpvb20sXG4gICAgICBhID0gdC56b29tLFxuICAgICAgciA9IGMuZmluZEluZGV4KHQgPT4gdC5wb2ludGVySWQgPT09IGUucG9pbnRlcklkKTtcbiAgICByID49IDAgJiYgYy5zcGxpY2UociwgMSksIG8gJiYgbiAmJiAobyA9ICExLCBuID0gITEsIGQuaW1hZ2VFbCAmJiAoYS5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKGEuc2NhbGUsIGQubWF4UmF0aW8pLCBpLm1pblJhdGlvKSwgZC5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3QucGFyYW1zLnNwZWVkfW1zYCwgZC5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHthLnNjYWxlfSlgLCBsID0gYS5zY2FsZSwgbSA9ICExLCBhLnNjYWxlID4gMSAmJiBkLnNsaWRlRWwgPyBkLnNsaWRlRWwuY2xhc3NMaXN0LmFkZChgJHtpLnpvb21lZFNsaWRlQ2xhc3N9YCkgOiBhLnNjYWxlIDw9IDEgJiYgZC5zbGlkZUVsICYmIGQuc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGAke2kuem9vbWVkU2xpZGVDbGFzc31gKSwgMSA9PT0gYS5zY2FsZSAmJiAoZC5vcmlnaW5YID0gMCwgZC5vcmlnaW5ZID0gMCwgZC5zbGlkZUVsID0gdm9pZCAwKSkpO1xuICB9XG4gIGZ1bmN0aW9uIFgoZSkge1xuICAgIGlmICghRShlKSB8fCAhZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnN0IGkgPSBgLiR7dC5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzc31gO1xuICAgICAgcmV0dXJuICEhZS50YXJnZXQubWF0Y2hlcyhpKSB8fCBbLi4udC5ob3N0RWwucXVlcnlTZWxlY3RvckFsbChpKV0uZmlsdGVyKHQgPT4gdC5jb250YWlucyhlLnRhcmdldCkpLmxlbmd0aCA+IDA7XG4gICAgfShlKSkgcmV0dXJuO1xuICAgIGNvbnN0IGkgPSB0Lnpvb207XG4gICAgaWYgKCFkLmltYWdlRWwpIHJldHVybjtcbiAgICBpZiAoIXUuaXNUb3VjaGVkIHx8ICFkLnNsaWRlRWwpIHJldHVybjtcbiAgICB1LmlzTW92ZWQgfHwgKHUud2lkdGggPSBkLmltYWdlRWwub2Zmc2V0V2lkdGgsIHUuaGVpZ2h0ID0gZC5pbWFnZUVsLm9mZnNldEhlaWdodCwgdS5zdGFydFggPSAoMCwgX3V0aWxzTWluLmgpKGQuaW1hZ2VXcmFwRWwsIFwieFwiKSB8fCAwLCB1LnN0YXJ0WSA9ICgwLCBfdXRpbHNNaW4uaCkoZC5pbWFnZVdyYXBFbCwgXCJ5XCIpIHx8IDAsIGQuc2xpZGVXaWR0aCA9IGQuc2xpZGVFbC5vZmZzZXRXaWR0aCwgZC5zbGlkZUhlaWdodCA9IGQuc2xpZGVFbC5vZmZzZXRIZWlnaHQsIGQuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwbXNcIik7XG4gICAgY29uc3QgYSA9IHUud2lkdGggKiBpLnNjYWxlLFxuICAgICAgciA9IHUuaGVpZ2h0ICogaS5zY2FsZTtcbiAgICBpZiAoYSA8IGQuc2xpZGVXaWR0aCAmJiByIDwgZC5zbGlkZUhlaWdodCkgcmV0dXJuO1xuICAgIHUubWluWCA9IE1hdGgubWluKGQuc2xpZGVXaWR0aCAvIDIgLSBhIC8gMiwgMCksIHUubWF4WCA9IC11Lm1pblgsIHUubWluWSA9IE1hdGgubWluKGQuc2xpZGVIZWlnaHQgLyAyIC0gciAvIDIsIDApLCB1Lm1heFkgPSAtdS5taW5ZLCB1LnRvdWNoZXNDdXJyZW50LnggPSBjLmxlbmd0aCA+IDAgPyBjWzBdLnBhZ2VYIDogZS5wYWdlWCwgdS50b3VjaGVzQ3VycmVudC55ID0gYy5sZW5ndGggPiAwID8gY1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgaWYgKE1hdGgubWF4KE1hdGguYWJzKHUudG91Y2hlc0N1cnJlbnQueCAtIHUudG91Y2hlc1N0YXJ0LngpLCBNYXRoLmFicyh1LnRvdWNoZXNDdXJyZW50LnkgLSB1LnRvdWNoZXNTdGFydC55KSkgPiA1ICYmICh0LmFsbG93Q2xpY2sgPSAhMSksICF1LmlzTW92ZWQgJiYgIW0pIHtcbiAgICAgIGlmICh0LmlzSG9yaXpvbnRhbCgpICYmIChNYXRoLmZsb29yKHUubWluWCkgPT09IE1hdGguZmxvb3IodS5zdGFydFgpICYmIHUudG91Y2hlc0N1cnJlbnQueCA8IHUudG91Y2hlc1N0YXJ0LnggfHwgTWF0aC5mbG9vcih1Lm1heFgpID09PSBNYXRoLmZsb29yKHUuc3RhcnRYKSAmJiB1LnRvdWNoZXNDdXJyZW50LnggPiB1LnRvdWNoZXNTdGFydC54KSkgcmV0dXJuIHZvaWQgKHUuaXNUb3VjaGVkID0gITEpO1xuICAgICAgaWYgKCF0LmlzSG9yaXpvbnRhbCgpICYmIChNYXRoLmZsb29yKHUubWluWSkgPT09IE1hdGguZmxvb3IodS5zdGFydFkpICYmIHUudG91Y2hlc0N1cnJlbnQueSA8IHUudG91Y2hlc1N0YXJ0LnkgfHwgTWF0aC5mbG9vcih1Lm1heFkpID09PSBNYXRoLmZsb29yKHUuc3RhcnRZKSAmJiB1LnRvdWNoZXNDdXJyZW50LnkgPiB1LnRvdWNoZXNTdGFydC55KSkgcmV0dXJuIHZvaWQgKHUuaXNUb3VjaGVkID0gITEpO1xuICAgIH1cbiAgICBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpLCB1LmlzTW92ZWQgPSAhMDtcbiAgICBjb25zdCBzID0gKGkuc2NhbGUgLSBsKSAvIChkLm1heFJhdGlvIC0gdC5wYXJhbXMuem9vbS5taW5SYXRpbyksXG4gICAgICB7XG4gICAgICAgIG9yaWdpblg6IG8sXG4gICAgICAgIG9yaWdpblk6IG5cbiAgICAgIH0gPSBkO1xuICAgIHUuY3VycmVudFggPSB1LnRvdWNoZXNDdXJyZW50LnggLSB1LnRvdWNoZXNTdGFydC54ICsgdS5zdGFydFggKyBzICogKHUud2lkdGggLSAyICogbyksIHUuY3VycmVudFkgPSB1LnRvdWNoZXNDdXJyZW50LnkgLSB1LnRvdWNoZXNTdGFydC55ICsgdS5zdGFydFkgKyBzICogKHUuaGVpZ2h0IC0gMiAqIG4pLCB1LmN1cnJlbnRYIDwgdS5taW5YICYmICh1LmN1cnJlbnRYID0gdS5taW5YICsgMSAtICh1Lm1pblggLSB1LmN1cnJlbnRYICsgMSkgKiogLjgpLCB1LmN1cnJlbnRYID4gdS5tYXhYICYmICh1LmN1cnJlbnRYID0gdS5tYXhYIC0gMSArICh1LmN1cnJlbnRYIC0gdS5tYXhYICsgMSkgKiogLjgpLCB1LmN1cnJlbnRZIDwgdS5taW5ZICYmICh1LmN1cnJlbnRZID0gdS5taW5ZICsgMSAtICh1Lm1pblkgLSB1LmN1cnJlbnRZICsgMSkgKiogLjgpLCB1LmN1cnJlbnRZID4gdS5tYXhZICYmICh1LmN1cnJlbnRZID0gdS5tYXhZIC0gMSArICh1LmN1cnJlbnRZIC0gdS5tYXhZICsgMSkgKiogLjgpLCBwLnByZXZQb3NpdGlvblggfHwgKHAucHJldlBvc2l0aW9uWCA9IHUudG91Y2hlc0N1cnJlbnQueCksIHAucHJldlBvc2l0aW9uWSB8fCAocC5wcmV2UG9zaXRpb25ZID0gdS50b3VjaGVzQ3VycmVudC55KSwgcC5wcmV2VGltZSB8fCAocC5wcmV2VGltZSA9IERhdGUubm93KCkpLCBwLnggPSAodS50b3VjaGVzQ3VycmVudC54IC0gcC5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gcC5wcmV2VGltZSkgLyAyLCBwLnkgPSAodS50b3VjaGVzQ3VycmVudC55IC0gcC5wcmV2UG9zaXRpb25ZKSAvIChEYXRlLm5vdygpIC0gcC5wcmV2VGltZSkgLyAyLCBNYXRoLmFicyh1LnRvdWNoZXNDdXJyZW50LnggLSBwLnByZXZQb3NpdGlvblgpIDwgMiAmJiAocC54ID0gMCksIE1hdGguYWJzKHUudG91Y2hlc0N1cnJlbnQueSAtIHAucHJldlBvc2l0aW9uWSkgPCAyICYmIChwLnkgPSAwKSwgcC5wcmV2UG9zaXRpb25YID0gdS50b3VjaGVzQ3VycmVudC54LCBwLnByZXZQb3NpdGlvblkgPSB1LnRvdWNoZXNDdXJyZW50LnksIHAucHJldlRpbWUgPSBEYXRlLm5vdygpLCBkLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3UuY3VycmVudFh9cHgsICR7dS5jdXJyZW50WX1weCwwKWA7XG4gIH1cbiAgZnVuY3Rpb24gWSgpIHtcbiAgICBjb25zdCBlID0gdC56b29tO1xuICAgIGQuc2xpZGVFbCAmJiB0LmFjdGl2ZUluZGV4ICE9PSB0LnNsaWRlcy5pbmRleE9mKGQuc2xpZGVFbCkgJiYgKGQuaW1hZ2VFbCAmJiAoZC5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpXCIpLCBkLmltYWdlV3JhcEVsICYmIChkLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMCwwLDApXCIpLCBkLnNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShgJHt0LnBhcmFtcy56b29tLnpvb21lZFNsaWRlQ2xhc3N9YCksIGUuc2NhbGUgPSAxLCBsID0gMSwgZC5zbGlkZUVsID0gdm9pZCAwLCBkLmltYWdlRWwgPSB2b2lkIDAsIGQuaW1hZ2VXcmFwRWwgPSB2b2lkIDAsIGQub3JpZ2luWCA9IDAsIGQub3JpZ2luWSA9IDApO1xuICB9XG4gIGZ1bmN0aW9uIHkoZSkge1xuICAgIGNvbnN0IGkgPSB0Lnpvb20sXG4gICAgICBhID0gdC5wYXJhbXMuem9vbTtcbiAgICBpZiAoIWQuc2xpZGVFbCkge1xuICAgICAgZSAmJiBlLnRhcmdldCAmJiAoZC5zbGlkZUVsID0gZS50YXJnZXQuY2xvc2VzdChgLiR7dC5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSwgZC5zbGlkZUVsIHx8ICh0LnBhcmFtcy52aXJ0dWFsICYmIHQucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiB0LnZpcnR1YWwgPyBkLnNsaWRlRWwgPSAoMCwgX3V0aWxzTWluLmUpKHQuc2xpZGVzRWwsIGAuJHt0LnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApWzBdIDogZC5zbGlkZUVsID0gdC5zbGlkZXNbdC5hY3RpdmVJbmRleF0pO1xuICAgICAgbGV0IGkgPSBkLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7YS5jb250YWluZXJDbGFzc31gKTtcbiAgICAgIGkgJiYgKGkgPSBpLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0XCIpWzBdKSwgZC5pbWFnZUVsID0gaSwgZC5pbWFnZVdyYXBFbCA9IGkgPyAoMCwgX3V0aWxzTWluLmEpKGQuaW1hZ2VFbCwgYC4ke2EuY29udGFpbmVyQ2xhc3N9YClbMF0gOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmICghZC5pbWFnZUVsIHx8ICFkLmltYWdlV3JhcEVsKSByZXR1cm47XG4gICAgbGV0IHIsIG8sIG4sIG0sIGMsIHAsIGcsIGgsIEUsIHYsIGYsIHgsIFgsIFksIHksIHosIEMsIHc7XG4gICAgdC5wYXJhbXMuY3NzTW9kZSAmJiAodC53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiLCB0LndyYXBwZXJFbC5zdHlsZS50b3VjaEFjdGlvbiA9IFwibm9uZVwiKSwgZC5zbGlkZUVsLmNsYXNzTGlzdC5hZGQoYCR7YS56b29tZWRTbGlkZUNsYXNzfWApLCB2b2lkIDAgPT09IHUudG91Y2hlc1N0YXJ0LnggJiYgZSA/IChyID0gZS5wYWdlWCwgbyA9IGUucGFnZVkpIDogKHIgPSB1LnRvdWNoZXNTdGFydC54LCBvID0gdS50b3VjaGVzU3RhcnQueSk7XG4gICAgY29uc3QgTSA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGUgPyBlIDogbnVsbDtcbiAgICAxID09PSBsICYmIE0gJiYgKHIgPSB2b2lkIDAsIG8gPSB2b2lkIDApLCBpLnNjYWxlID0gTSB8fCBkLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXpvb21cIikgfHwgYS5tYXhSYXRpbywgbCA9IE0gfHwgZC5pbWFnZVdyYXBFbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci16b29tXCIpIHx8IGEubWF4UmF0aW8sICFlIHx8IDEgPT09IGwgJiYgTSA/IChnID0gMCwgaCA9IDApIDogKEMgPSBkLnNsaWRlRWwub2Zmc2V0V2lkdGgsIHcgPSBkLnNsaWRlRWwub2Zmc2V0SGVpZ2h0LCBuID0gKDAsIF91dGlsc01pbi5iKShkLnNsaWRlRWwpLmxlZnQgKyBzLnNjcm9sbFgsIG0gPSAoMCwgX3V0aWxzTWluLmIpKGQuc2xpZGVFbCkudG9wICsgcy5zY3JvbGxZLCBjID0gbiArIEMgLyAyIC0gciwgcCA9IG0gKyB3IC8gMiAtIG8sIEUgPSBkLmltYWdlRWwub2Zmc2V0V2lkdGgsIHYgPSBkLmltYWdlRWwub2Zmc2V0SGVpZ2h0LCBmID0gRSAqIGkuc2NhbGUsIHggPSB2ICogaS5zY2FsZSwgWCA9IE1hdGgubWluKEMgLyAyIC0gZiAvIDIsIDApLCBZID0gTWF0aC5taW4odyAvIDIgLSB4IC8gMiwgMCksIHkgPSAtWCwgeiA9IC1ZLCBnID0gYyAqIGkuc2NhbGUsIGggPSBwICogaS5zY2FsZSwgZyA8IFggJiYgKGcgPSBYKSwgZyA+IHkgJiYgKGcgPSB5KSwgaCA8IFkgJiYgKGggPSBZKSwgaCA+IHogJiYgKGggPSB6KSksIE0gJiYgMSA9PT0gaS5zY2FsZSAmJiAoZC5vcmlnaW5YID0gMCwgZC5vcmlnaW5ZID0gMCksIGQuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIzMDBtc1wiLCBkLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke2d9cHgsICR7aH1weCwwKWAsIGQuaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjMwMG1zXCIsIGQuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7aS5zY2FsZX0pYDtcbiAgfVxuICBmdW5jdGlvbiB6KCkge1xuICAgIGNvbnN0IGUgPSB0Lnpvb20sXG4gICAgICBpID0gdC5wYXJhbXMuem9vbTtcbiAgICBpZiAoIWQuc2xpZGVFbCkge1xuICAgICAgdC5wYXJhbXMudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgdC52aXJ0dWFsID8gZC5zbGlkZUVsID0gKDAsIF91dGlsc01pbi5lKSh0LnNsaWRlc0VsLCBgLiR7dC5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKVswXSA6IGQuc2xpZGVFbCA9IHQuc2xpZGVzW3QuYWN0aXZlSW5kZXhdO1xuICAgICAgbGV0IGUgPSBkLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7aS5jb250YWluZXJDbGFzc31gKTtcbiAgICAgIGUgJiYgKGUgPSBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0XCIpWzBdKSwgZC5pbWFnZUVsID0gZSwgZC5pbWFnZVdyYXBFbCA9IGUgPyAoMCwgX3V0aWxzTWluLmEpKGQuaW1hZ2VFbCwgYC4ke2kuY29udGFpbmVyQ2xhc3N9YClbMF0gOiB2b2lkIDA7XG4gICAgfVxuICAgIGQuaW1hZ2VFbCAmJiBkLmltYWdlV3JhcEVsICYmICh0LnBhcmFtcy5jc3NNb2RlICYmICh0LndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9IFwiXCIsIHQud3JhcHBlckVsLnN0eWxlLnRvdWNoQWN0aW9uID0gXCJcIiksIGUuc2NhbGUgPSAxLCBsID0gMSwgZC5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjMwMG1zXCIsIGQuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZCgwLDAsMClcIiwgZC5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMzAwbXNcIiwgZC5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpXCIsIGQuc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGAke2kuem9vbWVkU2xpZGVDbGFzc31gKSwgZC5zbGlkZUVsID0gdm9pZCAwLCBkLm9yaWdpblggPSAwLCBkLm9yaWdpblkgPSAwKTtcbiAgfVxuICBmdW5jdGlvbiBDKGUpIHtcbiAgICBjb25zdCBpID0gdC56b29tO1xuICAgIGkuc2NhbGUgJiYgMSAhPT0gaS5zY2FsZSA/IHooKSA6IHkoZSk7XG4gIH1cbiAgZnVuY3Rpb24gdygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyOiAhIXQucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgJiYge1xuICAgICAgICBwYXNzaXZlOiAhMCxcbiAgICAgICAgY2FwdHVyZTogITFcbiAgICAgIH0sXG4gICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlOiAhdC5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyB8fCB7XG4gICAgICAgIHBhc3NpdmU6ICExLFxuICAgICAgICBjYXB0dXJlOiAhMFxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gTSgpIHtcbiAgICBjb25zdCBlID0gdC56b29tO1xuICAgIGlmIChlLmVuYWJsZWQpIHJldHVybjtcbiAgICBlLmVuYWJsZWQgPSAhMDtcbiAgICBjb25zdCB7XG4gICAgICBwYXNzaXZlTGlzdGVuZXI6IGksXG4gICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlOiBhXG4gICAgfSA9IHcoKTtcbiAgICB0LndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdiwgaSksIHQud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBmLCBhKSwgW1wicG9pbnRlcnVwXCIsIFwicG9pbnRlcmNhbmNlbFwiLCBcInBvaW50ZXJvdXRcIl0uZm9yRWFjaChlID0+IHtcbiAgICAgIHQud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoZSwgeCwgaSk7XG4gICAgfSksIHQud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBYLCBhKTtcbiAgfVxuICBmdW5jdGlvbiBXKCkge1xuICAgIGNvbnN0IGUgPSB0Lnpvb207XG4gICAgaWYgKCFlLmVuYWJsZWQpIHJldHVybjtcbiAgICBlLmVuYWJsZWQgPSAhMTtcbiAgICBjb25zdCB7XG4gICAgICBwYXNzaXZlTGlzdGVuZXI6IGksXG4gICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlOiBhXG4gICAgfSA9IHcoKTtcbiAgICB0LndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdiwgaSksIHQud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBmLCBhKSwgW1wicG9pbnRlcnVwXCIsIFwicG9pbnRlcmNhbmNlbFwiLCBcInBvaW50ZXJvdXRcIl0uZm9yRWFjaChlID0+IHtcbiAgICAgIHQud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSwgeCwgaSk7XG4gICAgfSksIHQud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBYLCBhKTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodC56b29tLCBcInNjYWxlXCIsIHtcbiAgICBnZXQ6ICgpID0+IGcsXG4gICAgc2V0KGUpIHtcbiAgICAgIGlmIChnICE9PSBlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBkLmltYWdlRWwsXG4gICAgICAgICAgaSA9IGQuc2xpZGVFbDtcbiAgICAgICAgcihcInpvb21DaGFuZ2VcIiwgZSwgdCwgaSk7XG4gICAgICB9XG4gICAgICBnID0gZTtcbiAgICB9XG4gIH0pLCBhKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgdC5wYXJhbXMuem9vbS5lbmFibGVkICYmIE0oKTtcbiAgfSksIGEoXCJkZXN0cm95XCIsICgpID0+IHtcbiAgICBXKCk7XG4gIH0pLCBhKFwidG91Y2hTdGFydFwiLCAoZSwgaSkgPT4ge1xuICAgIHQuem9vbS5lbmFibGVkICYmIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBpID0gdC5kZXZpY2U7XG4gICAgICBpZiAoIWQuaW1hZ2VFbCkgcmV0dXJuO1xuICAgICAgaWYgKHUuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICBpLmFuZHJvaWQgJiYgZS5jYW5jZWxhYmxlICYmIGUucHJldmVudERlZmF1bHQoKSwgdS5pc1RvdWNoZWQgPSAhMDtcbiAgICAgIGNvbnN0IGEgPSBjLmxlbmd0aCA+IDAgPyBjWzBdIDogZTtcbiAgICAgIHUudG91Y2hlc1N0YXJ0LnggPSBhLnBhZ2VYLCB1LnRvdWNoZXNTdGFydC55ID0gYS5wYWdlWTtcbiAgICB9KGkpO1xuICB9KSwgYShcInRvdWNoRW5kXCIsIChlLCBpKSA9PiB7XG4gICAgdC56b29tLmVuYWJsZWQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZSA9IHQuem9vbTtcbiAgICAgIGlmICghZC5pbWFnZUVsKSByZXR1cm47XG4gICAgICBpZiAoIXUuaXNUb3VjaGVkIHx8ICF1LmlzTW92ZWQpIHJldHVybiB1LmlzVG91Y2hlZCA9ICExLCB2b2lkICh1LmlzTW92ZWQgPSAhMSk7XG4gICAgICB1LmlzVG91Y2hlZCA9ICExLCB1LmlzTW92ZWQgPSAhMTtcbiAgICAgIGxldCBpID0gMzAwLFxuICAgICAgICBhID0gMzAwO1xuICAgICAgY29uc3QgciA9IHAueCAqIGksXG4gICAgICAgIHMgPSB1LmN1cnJlbnRYICsgcixcbiAgICAgICAgbyA9IHAueSAqIGEsXG4gICAgICAgIG4gPSB1LmN1cnJlbnRZICsgbztcbiAgICAgIDAgIT09IHAueCAmJiAoaSA9IE1hdGguYWJzKChzIC0gdS5jdXJyZW50WCkgLyBwLngpKSwgMCAhPT0gcC55ICYmIChhID0gTWF0aC5hYnMoKG4gLSB1LmN1cnJlbnRZKSAvIHAueSkpO1xuICAgICAgY29uc3QgbCA9IE1hdGgubWF4KGksIGEpO1xuICAgICAgdS5jdXJyZW50WCA9IHMsIHUuY3VycmVudFkgPSBuO1xuICAgICAgY29uc3QgbSA9IHUud2lkdGggKiBlLnNjYWxlLFxuICAgICAgICBjID0gdS5oZWlnaHQgKiBlLnNjYWxlO1xuICAgICAgdS5taW5YID0gTWF0aC5taW4oZC5zbGlkZVdpZHRoIC8gMiAtIG0gLyAyLCAwKSwgdS5tYXhYID0gLXUubWluWCwgdS5taW5ZID0gTWF0aC5taW4oZC5zbGlkZUhlaWdodCAvIDIgLSBjIC8gMiwgMCksIHUubWF4WSA9IC11Lm1pblksIHUuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbih1LmN1cnJlbnRYLCB1Lm1heFgpLCB1Lm1pblgpLCB1LmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4odS5jdXJyZW50WSwgdS5tYXhZKSwgdS5taW5ZKSwgZC5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtsfW1zYCwgZC5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt1LmN1cnJlbnRYfXB4LCAke3UuY3VycmVudFl9cHgsMClgO1xuICAgIH0oKTtcbiAgfSksIGEoXCJkb3VibGVUYXBcIiwgKGUsIGkpID0+IHtcbiAgICAhdC5hbmltYXRpbmcgJiYgdC5wYXJhbXMuem9vbS5lbmFibGVkICYmIHQuem9vbS5lbmFibGVkICYmIHQucGFyYW1zLnpvb20udG9nZ2xlICYmIEMoaSk7XG4gIH0pLCBhKFwidHJhbnNpdGlvbkVuZFwiLCAoKSA9PiB7XG4gICAgdC56b29tLmVuYWJsZWQgJiYgdC5wYXJhbXMuem9vbS5lbmFibGVkICYmIFkoKTtcbiAgfSksIGEoXCJzbGlkZUNoYW5nZVwiLCAoKSA9PiB7XG4gICAgdC56b29tLmVuYWJsZWQgJiYgdC5wYXJhbXMuem9vbS5lbmFibGVkICYmIHQucGFyYW1zLmNzc01vZGUgJiYgWSgpO1xuICB9KSwgT2JqZWN0LmFzc2lnbih0Lnpvb20sIHtcbiAgICBlbmFibGU6IE0sXG4gICAgZGlzYWJsZTogVyxcbiAgICBpbjogeSxcbiAgICBvdXQ6IHosXG4gICAgdG9nZ2xlOiBDXG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpmZFhScGJITk5hVzRpTENKeVpYRjFhWEpsSWl3aVdtOXZiU0lzSW1VaUxDSnpkMmx3WlhJaUxDSjBJaXdpWlhoMFpXNWtVR0Z5WVcxeklpd2lhU0lzSW05dUlpd2lZU0lzSW1WdGFYUWlMQ0p5SWl3aWN5SXNJbWRsZEZkcGJtUnZkeUlzSW5wdmIyMGlMQ0psYm1GaWJHVmtJaXdpYldGNFVtRjBhVzhpTENKdGFXNVNZWFJwYnlJc0luUnZaMmRzWlNJc0ltTnZiblJoYVc1bGNrTnNZWE56SWl3aWVtOXZiV1ZrVTJ4cFpHVkRiR0Z6Y3lJc0ltOGlMQ0p1SWl3aWJDSXNJbTBpTENKaklpd2laQ0lzSW05eWFXZHBibGdpTENKdmNtbG5hVzVaSWl3aWMyeHBaR1ZGYkNJc0luTnNhV1JsVjJsa2RHZ2lMQ0p6Ykdsa1pVaGxhV2RvZENJc0ltbHRZV2RsUld3aUxDSnBiV0ZuWlZkeVlYQkZiQ0lzSW5VaUxDSnBjMVJ2ZFdOb1pXUWlMQ0pwYzAxdmRtVmtJaXdpWTNWeWNtVnVkRmdpTENKamRYSnlaVzUwV1NJc0ltMXBibGdpTENKdGFXNVpJaXdpYldGNFdDSXNJbTFoZUZraUxDSjNhV1IwYUNJc0ltaGxhV2RvZENJc0luTjBZWEowV0NJc0luTjBZWEowV1NJc0luUnZkV05vWlhOVGRHRnlkQ0lzSW5SdmRXTm9aWE5EZFhKeVpXNTBJaXdpY0NJc0luZ2lMQ0o1SWl3aWNISmxkbEJ2YzJsMGFXOXVXQ0lzSW5CeVpYWlFiM05wZEdsdmJsa2lMQ0p3Y21WMlZHbHRaU0lzSW1jaUxDSm9JaXdpYkdWdVozUm9JaXdpY0dGblpWZ2lMQ0p3WVdkbFdTSXNJazFoZEdnaUxDSnpjWEowSWl3aVJTSXNJbWx6Uld4bGJXVnVkQ0lzSW5CaGNtRnRjeUlzSW5Oc2FXUmxRMnhoYzNNaUxDSjBZWEpuWlhRaUxDSnRZWFJqYUdWeklpd2ljMnhwWkdWeklpd2labWxzZEdWeUlpd2lZMjl1ZEdGcGJuTWlMQ0oySWl3aWNHOXBiblJsY2xSNWNHVWlMQ0p6Y0d4cFkyVWlMQ0p3ZFhOb0lpd2ljMk5oYkdWVGRHRnlkQ0lzSW1Oc2IzTmxjM1FpTENKaFkzUnBkbVZKYm1SbGVDSXNJbkYxWlhKNVUyVnNaV04wYjNJaUxDSnhkV1Z5ZVZObGJHVmpkRzl5UVd4c0lpd2laV3hsYldWdWRGQmhjbVZ1ZEhNaUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKblpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUWlMQ0p6ZEhsc1pTSXNJblJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiaUlzSW1ZaUxDSm1hVzVrU1c1a1pYZ2lMQ0p3YjJsdWRHVnlTV1FpTENKelkyRnNaVTF2ZG1VaUxDSnpZMkZzWlNJc0luUnlZVzV6Wm05eWJTSXNJblI1Y0dVaUxDSnRZWGdpTENKdGFXNGlMQ0p6Y0dWbFpDSXNJbU5zWVhOelRHbHpkQ0lzSW1Ga1pDSXNJbkpsYlc5MlpTSXNJbGdpTENKb2IzTjBSV3dpTENKdlptWnpaWFJYYVdSMGFDSXNJbTltWm5ObGRFaGxhV2RvZENJc0ltZGxkRlJ5WVc1emJHRjBaU0lzSW1GaWN5SXNJbUZzYkc5M1EyeHBZMnNpTENKcGMwaHZjbWw2YjI1MFlXd2lMQ0ptYkc5dmNpSXNJbU5oYm1ObGJHRmliR1VpTENKd2NtVjJaVzUwUkdWbVlYVnNkQ0lzSW5OMGIzQlFjbTl3WVdkaGRHbHZiaUlzSWtSaGRHVWlMQ0p1YjNjaUxDSlpJaXdpYVc1a1pYaFBaaUlzSW5acGNuUjFZV3dpTENKbGJHVnRaVzUwUTJocGJHUnlaVzRpTENKemJHbGtaWE5GYkNJc0luTnNhV1JsUVdOMGFYWmxRMnhoYzNNaUxDSjZJaXdpUXlJc0luY2lMQ0pqYzNOTmIyUmxJaXdpZDNKaGNIQmxja1ZzSWl3aWIzWmxjbVpzYjNjaUxDSjBiM1ZqYUVGamRHbHZiaUlzSWswaUxDSmxiR1Z0Wlc1MFQyWm1jMlYwSWl3aWJHVm1kQ0lzSW5OamNtOXNiRmdpTENKMGIzQWlMQ0p6WTNKdmJHeFpJaXdpY0dGemMybDJaVXhwYzNSbGJtVnlJaXdpY0dGemMybDJaVXhwYzNSbGJtVnljeUlzSW5CaGMzTnBkbVVpTENKallYQjBkWEpsSWl3aVlXTjBhWFpsVEdsemRHVnVaWEpYYVhSb1EyRndkSFZ5WlNJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSm1iM0pGWVdOb0lpd2lWeUlzSW5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJaUxDSlBZbXBsWTNRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltZGxkQ0lzSW5ObGRDSXNJbVJsZG1salpTSXNJbUZ1WkhKdmFXUWlMQ0poYm1sdFlYUnBibWNpTENKaGMzTnBaMjRpTENKbGJtRmliR1VpTENKa2FYTmhZbXhsSWl3aWFXNGlMQ0p2ZFhRaVhTd2ljMjkxY21ObGN5STZXeUl3SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQlFTdENMRWxCUVVGQkxGTkJRVUVzUjBGQlFVTXNUMEZCUVR0QlFVY3ZRaXhUUVVGVFF5eExRVUZMUXl4RFFVRkJPMFZCUTFvN1NVRkJTVU1zVFVGQlFTeEZRVU5HUXl4RFFVRkJPMGxCUVUxRExGbEJRVUVzUlVGRFRrTXNRMEZCUVR0SlFVRlpReXhGUVVGQkxFVkJRMXBETEVOQlFVRTdTVUZCUlVNc1NVRkJRU3hGUVVOR1F6dEZRVUZCTEVsQlEwVlNMRU5CUVVFN1JVRkRTaXhOUVVGTlV5eERRVUZCTEVkQlFWTXNTVUZCUVVNc2EwSkJRVUU3UlVGRFprNHNRMEZCUVN4RFFVRmhPMGxCUTFoUExFbEJRVUVzUlVGQlRUdE5RVU5LUXl4UFFVRkJMRWRCUVZNN1RVRkRWRU1zVVVGQlFTeEZRVUZWTzAxQlExWkRMRkZCUVVFc1JVRkJWVHROUVVOV1F5eE5RVUZCTEVkQlFWRTdUVUZEVWtNc1kwRkJRU3hGUVVGblFqdE5RVU5vUWtNc1owSkJRVUVzUlVGQmEwSTdTVUZCUVR0RlFVRkJMRWxCUjNSQ1ppeERRVUZCTEVOQlFVOVRMRWxCUVVFc1IwRkJUenRKUVVOYVF5eFBRVUZCTEVkQlFWTTdSVUZCUVR0RlFVVllMRWxCUlVsTkxFTkJRVUU3U1VGRFFVTXNRMEZCUVR0SlFVaEJReXhEUVVGQkxFZEJRV1U3U1VGRFprTXNRMEZCUVN4SlFVRlpPMFZCUjJoQ0xFMUJRVTFETEVOQlFVRXNSMEZCVlR0SlFVTldReXhEUVVGQkxFZEJRVlU3VFVGRFpFTXNUMEZCUVN4RlFVRlRPMDFCUTFSRExFOUJRVUVzUlVGQlV6dE5RVU5VUXl4UFFVRkJMRTlCUVZNN1RVRkRWRU1zVlVGQlFTeFBRVUZaTzAxQlExcERMRmRCUVVFc1QwRkJZVHROUVVOaVF5eFBRVUZCTEU5QlFWTTdUVUZEVkVNc1YwRkJRU3hQUVVGaE8wMUJRMkpxUWl4UlFVRkJMRVZCUVZVN1NVRkJRVHRKUVVWT2EwSXNRMEZCUVN4SFFVRlJPMDFCUTFwRExGTkJRVUVzVDBGQlZ6dE5RVU5ZUXl4UFFVRkJMRTlCUVZNN1RVRkRWRU1zVVVGQlFTeFBRVUZWTzAxQlExWkRMRkZCUVVFc1QwRkJWVHROUVVOV1F5eEpRVUZCTEU5QlFVMDdUVUZEVGtNc1NVRkJRU3hQUVVGTk8wMUJRMDVETEVsQlFVRXNUMEZCVFR0TlFVTk9ReXhKUVVGQkxFOUJRVTA3VFVGRFRrTXNTMEZCUVN4UFFVRlBPMDFCUTFCRExFMUJRVUVzVDBGQlVUdE5RVU5TUXl4TlFVRkJMRTlCUVZFN1RVRkRVa01zVFVGQlFTeFBRVUZSTzAxQlExSkRMRmxCUVVFc1JVRkJZeXhEUVVGRE8wMUJRMlpETEdOQlFVRXNSVUZCWjBJc1EwRkJRenRKUVVGQk8wbEJSV0pETEVOQlFVRXNSMEZCVnp0TlFVTm1ReXhEUVVGQkxFOUJRVWM3VFVGRFNFTXNRMEZCUVN4UFFVRkhPMDFCUTBoRExHRkJRVUVzVDBGQlpUdE5RVU5tUXl4aFFVRkJMRTlCUVdVN1RVRkRaa01zVVVGQlFTeFBRVUZWTzBsQlFVRTdSVUZGV2l4SlFVRkpReXhEUVVGQkxFZEJRVkU3UlVGaldpeFRRVUZUUXl4RlFVRkJPMGxCUTFBc1NVRkJTUzlDTEVOQlFVRXNRMEZCVVdkRExFMUJRVUVzUjBGQlV5eEhRVUZITEU5QlFVODdTVUZETDBJc1RVRkJUWFJFTEVOQlFVRXNSMEZCUzNOQ0xFTkJRVUVzUTBGQlVTeEhRVUZIYVVNc1MwRkJRVHROUVVOb1FuSkVMRU5CUVVFc1IwRkJTMjlDTEVOQlFVRXNRMEZCVVN4SFFVRkhhME1zUzBGQlFUdE5RVU5vUW5CRUxFTkJRVUVzUjBGQlMydENMRU5CUVVFc1EwRkJVU3hIUVVGSGFVTXNTMEZCUVR0TlFVTm9RbXBFTEVOQlFVRXNSMEZCUzJkQ0xFTkJRVUVzUTBGQlVTeEhRVUZIYTBNc1MwRkJRVHRKUVVWMFFpeFBRVVJwUWtNc1NVRkJRU3hEUVVGTFF5eEpRVUZCTEVWQlFVMTBSQ3hEUVVGQkxFZEJRVXRLTEVOQlFVRXNTMEZCVHl4TFFVRkxUU3hEUVVGQkxFZEJRVXRLTEVOQlFVRXNTMEZCVHl4RlFVVXpSRHRGUVVGQk8wVkJXVUVzVTBGQlUzbEVMRVZCUVdsQ00wUXNRMEZCUVR0SlFVTjRRaXhOUVVGTlNTeERRVUZCTEVkQlNFTkdMRU5CUVVFc1EwRkJUekJFTEZOQlFVRXNSMEZCV1N4cFFrRkJhVUlzU1VGQlNURkVMRU5CUVVFc1EwRkJUekpFTEUxQlFVRXNRMEZCVDBNc1ZVRkJRVHRKUVVrM1JDeFRRVUZKT1VRc1EwRkJRU3hEUVVGRkswUXNUVUZCUVN4RFFVRlBReXhQUVVGQkxFTkJRVkUxUkN4RFFVRkJMRXRCUTJwQ1JpeERRVUZCTEVOQlFVOHJSQ3hOUVVGQkxFTkJRVTlETEUxQlFVRXNRMEZCVDJoRkxFTkJRVUVzU1VGQlYwRXNRMEZCUVN4RFFVRlJhVVVzVVVGQlFTeERRVUZUYmtVc1EwRkJRU3hEUVVGRkswUXNUVUZCUVN4SFFVRlRWQ3hOUVVGQkxFZEJRVk1zUTBGRk0wVTdSVUZCUVR0RlFWTkJMRk5CUVZOakxFVkJRV1Z3UlN4RFFVRkJPMGxCU1hSQ0xFbEJTSE5DTEZsQlFXeENRU3hEUVVGQkxFTkJRVVZ4UlN4WFFVRkJMRWxCUTBvdlF5eERRVUZCTEVOQlFWRm5SQ3hOUVVGQkxFTkJRVThzUjBGQlIyaEVMRU5CUVVFc1EwRkJVV2RETEUxQlFVRXNTVUZGZGtKTExFTkJRVUVzUTBGQmFVSXpSQ3hEUVVGQkxFZEJRVWs3U1VGRE1VSXNUVUZCVFVrc1EwRkJRU3hIUVVGVFJpeERRVUZCTEVOQlFVOHlSQ3hOUVVGQkxFTkJRVTlzUkN4SlFVRkJPMGxCU1RkQ0xFbEJTRUZQTEVOQlFVRXNTVUZCY1VJc1IwRkRja0pETEVOQlFVRXNTVUZCYlVJc1IwRkRia0pITEVOQlFVRXNRMEZCVVdsRUxFbEJRVUVzUTBGQlMzWkZMRU5CUVVFc1MwRkRWSE5DTEVOQlFVRXNRMEZCVVdkRExFMUJRVUVzUjBGQlV5eEpRVUZ5UWp0TlFVdEJMRWxCUmtGd1F5eERRVUZCTEVsQlFYRkNMRWRCUTNKQ1N5eERRVUZCTEVOQlFWRnBSQ3hWUVVGQkxFZEJRV0Z1UWl4RFFVRkJMRXRCUTJoQ09VSXNRMEZCUVN4RFFVRlJSeXhQUVVGQkxFVkJRVk03VVVGRGNFSklMRU5CUVVFc1EwRkJVVWNzVDBGQlFTeEhRVUZWTVVJc1EwRkJRU3hEUVVGRkswUXNUVUZCUVN4RFFVRlBWU3hQUVVGQkxFTkJRVkVzU1VGQlNYWkZMRU5CUVVFc1EwRkJUekpFTEUxQlFVRXNRMEZCVDBNc1ZVRkJRU3h0UWtGRGFFUjJReXhEUVVGQkxFTkJRVkZITEU5QlFVRXNTMEZCVTBnc1EwRkJRU3hEUVVGUlJ5eFBRVUZCTEVkQlFWVjRRaXhEUVVGQkxFTkJRVThyUkN4TlFVRkJMRU5CUVU4dlJDeERRVUZCTEVOQlFVOTNSU3hYUVVGQk8xRkJRemRFTEVsQlFVbHdSU3hEUVVGQkxFZEJRVlZwUWl4RFFVRkJMRU5CUVZGSExFOUJRVUVzUTBGQlVXbEVMR0ZCUVVFc1EwRkJZeXhKUVVGSmRrVXNRMEZCUVN4RFFVRlBXU3hqUVVGQk8xRkJWWFpFTEVsQlZFbFdMRU5CUVVFc1MwRkRSa0VzUTBGQlFTeEhRVUZWUVN4RFFVRkJMRU5CUVZGelJTeG5Ra0ZCUVN4RFFVRnBRaXhyUkVGQmEwUXNTMEZGZGtaeVJDeERRVUZCTEVOQlFWRk5MRTlCUVVFc1IwRkJWWFpDTEVOQlFVRXNSVUZGYUVKcFFpeERRVUZCTEVOQlFWRlBMRmRCUVVFc1IwRkVUbmhDTEVOQlFVRXNSMEZEYjBJc1NVRkJRWFZGTEZkQlFVRXNSVUZCWlhSRUxFTkJRVUVzUTBGQlVVMHNUMEZCUVN4RlFVRlRMRWxCUVVsNlFpeERRVUZCTEVOQlFVOVpMR05CUVVFc1NVRkJhMElzVlVGRk4wUXNTVUZGYmtKUExFTkJRVUVzUTBGQlVVOHNWMEZCUVN4RlFVVllMR0ZCUkVGUUxFTkJRVUVzUTBGQlVVMHNUMEZCUVN4UlFVRlZPMUZCUjNCQ1RpeERRVUZCTEVOQlFWRldMRkZCUVVFc1IwRkJWMVVzUTBGQlFTeERRVUZSVHl4WFFVRkJMRU5CUVZsblJDeFpRVUZCTEVOQlFXRXNkVUpCUVhWQ01VVXNRMEZCUVN4RFFVRlBVeXhSUVVOd1JqdE5RVUZCTzAxQlEwRXNTVUZCU1ZVc1EwRkJRU3hEUVVGUlRTeFBRVUZCTEVWQlFWTTdVVUZEYmtJc1QwRkJUemRDTEVOQlFVRXNSVUZCVTBVc1EwRkJRU3hKUVRORWNFSTdWVUZEUlN4SlFVRkpiMElzUTBGQlFTeERRVUZSWjBNc1RVRkJRU3hIUVVGVExFZEJRVWNzVDBGQlR6dFpRVU0zUWxBc1EwRkJRU3hGUVVGSE8xbEJRMGhETEVOQlFVRXNSVUZCUnp0VlFVRkJPMVZCUlV3c1RVRkJUV2hFTEVOQlFVRXNSMEZCVFhWQ0xFTkJRVUVzUTBGQlVVMHNUMEZCUVN4RFFVRlJhMFFzY1VKQlFVRTdWVUZETlVJc1QwRkJUeXhGUVVGRmVrUXNRMEZCUVN4RFFVRlJMRWRCUVVkcFF5eExRVUZCTEVsQlFWTnFReXhEUVVGQkxFTkJRVkVzUjBGQlIybERMRXRCUVVFc1IwRkJVV3BETEVOQlFVRXNRMEZCVVN4SFFVRkhhVU1zUzBGQlFTeEpRVUZUTEVsQlFVbDJSQ3hEUVVGQkxFTkJRVWtyUXl4RFFVRkJMRWxCUVVzelFpeERRVUZCTEVkQlFXVkZMRU5CUVVFc1EwRkJVU3hIUVVGSGEwTXNTMEZCUVN4SlFVRlRiRU1zUTBGQlFTeERRVUZSTEVkQlFVZHJReXhMUVVGQkxFZEJRVkZzUXl4RFFVRkJMRU5CUVZFc1IwRkJSMnRETEV0QlFVRXNTVUZCVXl4SlFVRkplRVFzUTBGQlFTeERRVUZKWjBRc1EwRkJRU3hKUVVGTE5VSXNRMEZCUVN4RFFVTXhTenRSUVVGQkxFTkJiMFFyUWp0UlFVTXpRa2NzUTBGQlFTeERRVUZSUXl4UFFVRkJMRWRCUVZWNFFpeERRVUZCTEVWQlEyeENkVUlzUTBGQlFTeERRVUZSUlN4UFFVRkJMRWRCUVZWMlFpeERRVUZCTEVWQlEyeENjVUlzUTBGQlFTeERRVUZSVFN4UFFVRkJMRU5CUVZGdFJDeExRVUZCTEVOQlFVMURMR3RDUVVGQkxFZEJRWEZDTEV0QlF6ZERPMDFCUVVFN1RVRkRRVFZFTEVOQlFVRXNTVUZCV1N4RFFUVkNXanRKUVVGQk8wVkJOa0pHTzBWQlEwRXNVMEZCVXpaRUxFVkJRV2RDYkVZc1EwRkJRVHRKUVVOMlFpeExRVUZMTWtRc1EwRkJRU3hEUVVGcFFqTkVMRU5CUVVFc1IwRkJTVHRKUVVNeFFpeE5RVUZOU1N4RFFVRkJMRWRCUVZOR0xFTkJRVUVzUTBGQlR6SkVMRTFCUVVFc1EwRkJUMnhFTEVsQlFVRTdUVUZEZGtKTUxFTkJRVUVzUjBGQlQwb3NRMEZCUVN4RFFVRlBVeXhKUVVGQk8wMUJRMlJJTEVOQlFVRXNSMEZCWldNc1EwRkJRU3hEUVVGUk5rUXNVMEZCUVN4RFFVRlZha1lzUTBGQlFTeEpRVUZaUVN4RFFVRkJMRU5CUVZOclJpeFRRVUZCTEV0QlFXTndSaXhEUVVGQkxFTkJRVVZ2Uml4VFFVRkJPMGxCUTNoRk5VVXNRMEZCUVN4SlFVRm5RaXhOUVVGSFl5eERRVUZCTEVOQlFWRmtMRU5CUVVFc1NVRkJaMEpTTEVOQlFVRXNSMEZETTBOelFpeERRVUZCTEVOQlFWRm5ReXhOUVVGQkxFZEJRVk1zVFVGSGNrSnVReXhEUVVGQkxFbEJRVzFDTEVkQlEyNUNTU3hEUVVGQkxFTkJRVkU0UkN4VFFVRkJMRWRCUVZsb1F5eERRVUZCTEVsQlEyWTVRaXhEUVVGQkxFTkJRVkZOTEU5QlFVRXNTMEZIWW5aQ0xFTkJRVUVzUTBGQlMyZEdMRXRCUVVFc1IwRkJVUzlFTEVOQlFVRXNRMEZCVVRoRUxGTkJRVUVzUjBGQldUbEVMRU5CUVVFc1EwRkJVV2xFTEZWQlFVRXNSMEZCWVhCRUxFTkJRVUVzUlVGRGJFUmtMRU5CUVVFc1EwRkJTMmRHTEV0QlFVRXNSMEZCVVM5RUxFTkJRVUVzUTBGQlVWWXNVVUZCUVN4TFFVTjJRbEFzUTBGQlFTeERRVUZMWjBZc1MwRkJRU3hIUVVGUkwwUXNRMEZCUVN4RFFVRlJWaXhSUVVGQkxFZEJRVmNzUzBGQlMxQXNRMEZCUVN4RFFVRkxaMFlzUzBGQlFTeEhRVUZSTDBRc1EwRkJRU3hEUVVGUlZpeFJRVUZCTEVkQlFWY3NUVUZCVFN4TFFVVjZSVkFzUTBGQlFTeERRVUZMWjBZc1MwRkJRU3hIUVVGUmJFWXNRMEZCUVN4RFFVRlBWU3hSUVVGQkxFdEJRM1JDVWl4RFFVRkJMRU5CUVV0blJpeExRVUZCTEVkQlFWRnNSaXhEUVVGQkxFTkJRVTlWTEZGQlFVRXNSMEZCVnl4TFFVRkxWaXhEUVVGQkxFTkJRVTlWTEZGQlFVRXNSMEZCVjFJc1EwRkJRU3hEUVVGTFowWXNTMEZCUVN4SFFVRlJMRTFCUVUwc1MwRkZNMFV2UkN4RFFVRkJMRU5CUVZGTkxFOUJRVUVzUTBGQlVXMUVMRXRCUVVFc1EwRkJUVThzVTBGQlFTeEhRVUZaTERSQ1FVRTBRbXBHTEVOQlFVRXNRMEZCUzJkR0xFdEJRVUVzUzBGRGNrVTdSVUZCUVR0RlFVTkJMRk5CUVZOMlF5eEZRVUZoTDBNc1EwRkJRVHRKUVVOd1FpeExRVUZMTWtRc1EwRkJRU3hEUVVGcFFqTkVMRU5CUVVFc1IwRkJTVHRKUVVNeFFpeEpRVUZ6UWl4WlFVRnNRa0VzUTBGQlFTeERRVUZGY1VVc1YwRkJRU3hKUVVGelF5eHBRa0ZCV0hKRkxFTkJRVUVzUTBGQlJYZEdMRWxCUVVFc1JVRkJkVUk3U1VGRE1VUXNUVUZCVFhCR0xFTkJRVUVzUjBGQlUwWXNRMEZCUVN4RFFVRlBNa1FzVFVGQlFTeERRVUZQYkVRc1NVRkJRVHROUVVOMlFrd3NRMEZCUVN4SFFVRlBTaXhEUVVGQkxFTkJRVTlUTEVsQlFVRTdUVUZEWkVnc1EwRkJRU3hIUVVGbFl5eERRVUZCTEVOQlFWRTJSQ3hUUVVGQkxFTkJRVlZxUml4RFFVRkJMRWxCUVZsQkxFTkJRVUVzUTBGQlUydEdMRk5CUVVFc1MwRkJZM0JHTEVOQlFVRXNRMEZCUlc5R0xGTkJRVUU3U1VGRGVFVTFSU3hEUVVGQkxFbEJRV2RDTEV0QlFVZGpMRU5CUVVFc1EwRkJVV2RFTEUxQlFVRXNRMEZCVHpsRUxFTkJRVUVzUlVGQll5eEpRVU12UTFVc1EwRkJRU3hKUVVGMVFrTXNRMEZCUVN4TFFVYzFRa1FzUTBGQlFTeEpRVUZ4UWl4SFFVTnlRa01zUTBGQlFTeEpRVUZ0UWl4SFFVTmtTU3hEUVVGQkxFTkJRVkZOTEU5QlFVRXNTMEZEWW5aQ0xFTkJRVUVzUTBGQlMyZEdMRXRCUVVFc1IwRkJVVGRDTEVsQlFVRXNRMEZCUzJkRExFZEJRVUVzUTBGQlNXaERMRWxCUVVFc1EwRkJTMmxETEVkQlFVRXNRMEZCU1hCR0xFTkJRVUVzUTBGQlMyZEdMRXRCUVVFc1JVRkJUeTlFTEVOQlFVRXNRMEZCVVZZc1VVRkJRU3hIUVVGWFZDeERRVUZCTEVOQlFVOVZMRkZCUVVFc1IwRkRja1ZUTEVOQlFVRXNRMEZCVVUwc1QwRkJRU3hEUVVGUmJVUXNTMEZCUVN4RFFVRk5ReXhyUWtGQlFTeEhRVUZ4UWl4SFFVRkhMMFVzUTBGQlFTeERRVUZQTWtRc1RVRkJRU3hEUVVGUE9FSXNTMEZCUVN4TlFVTTFSSEJGTEVOQlFVRXNRMEZCVVUwc1QwRkJRU3hEUVVGUmJVUXNTMEZCUVN4RFFVRk5UeXhUUVVGQkxFZEJRVmtzTkVKQlFUUkNha1lzUTBGQlFTeERRVUZMWjBZc1MwRkJRU3hMUVVOdVJXeEZMRU5CUVVFc1IwRkJaV1FzUTBGQlFTeERRVUZMWjBZc1MwRkJRU3hGUVVOd1FtcEZMRU5CUVVFc1NVRkJXU3hIUVVOU1ppeERRVUZCTEVOQlFVdG5SaXhMUVVGQkxFZEJRVkVzUzBGQlN5OUVMRU5CUVVFc1EwRkJVVWNzVDBGQlFTeEhRVU0xUWtnc1EwRkJRU3hEUVVGUlJ5eFBRVUZCTEVOQlFWRnJSU3hUUVVGQkxFTkJRVlZETEVkQlFVRXNRMEZCU1N4SFFVRkhla1lzUTBGQlFTeERRVUZQWVN4blFrRkJRU3hOUVVNdlFsZ3NRMEZCUVN4RFFVRkxaMFlzUzBGQlFTeEpRVUZUTEV0QlFVc3ZSQ3hEUVVGQkxFTkJRVkZITEU5QlFVRXNTVUZEY0VOSUxFTkJRVUVzUTBGQlVVY3NUMEZCUVN4RFFVRlJhMFVzVTBGQlFTeERRVUZWUlN4TlFVRkJMRU5CUVU4c1IwRkJSekZHTEVOQlFVRXNRMEZCVDJFc1owSkJRVUVzUzBGRk1VSXNUVUZCWmxnc1EwRkJRU3hEUVVGTFowWXNTMEZCUVN4TFFVTlFMMFFzUTBGQlFTeERRVUZSUXl4UFFVRkJMRWRCUVZVc1IwRkRiRUpFTEVOQlFVRXNRMEZCVVVVc1QwRkJRU3hIUVVGVkxFZEJRMnhDUml4RFFVRkJMRU5CUVZGSExFOUJRVUVzVVVGQlZTeEpRVVYwUWp0RlFVRkJPMFZCVjBFc1UwRkJVM0ZGTEVWQlFWa3ZSaXhEUVVGQk8wbEJRMjVDTEV0QlFVc3lSQ3hEUVVGQkxFTkJRV2xDTTBRc1EwRkJRU3hOUVdoSWVFSXNWVUZCYTBOQkxFTkJRVUU3VFVGRGFFTXNUVUZCVFVrc1EwRkJRU3hIUVVGWExFbEJRVWxHTEVOQlFVRXNRMEZCVHpKRUxFMUJRVUVzUTBGQlQyeEVMRWxCUVVFc1EwRkJTMHNzWTBGQlFUdE5RVU40UXl4VFFVRkphRUlzUTBGQlFTeERRVUZGSzBRc1RVRkJRU3hEUVVGUFF5eFBRVUZCTEVOQlFWRTFSQ3hEUVVGQkxFdEJRMnBDTEVsQlFVbEdMRU5CUVVFc1EwRkJUemhHTEUxQlFVRXNRMEZCVDNCQ0xHZENRVUZCTEVOQlFXbENlRVVzUTBGQlFTeEhRVUZYT0VRc1RVRkJRU3hEUVVGUGFFVXNRMEZCUVN4SlFVRmxRU3hEUVVGQkxFTkJRVmxwUlN4UlFVRkJMRU5CUVZOdVJTeERRVUZCTEVOQlFVVXJSQ3hOUVVGQkxFZEJRVk5VTEUxQlFVRXNSMEZCVXl4RFFVVnVTRHRKUVVGQkxFTkJNa2NyUWl4RFFVRjVRblJFTEVOQlFVRXNSMEZCU1R0SlFVTXhSQ3hOUVVGTlNTeERRVUZCTEVkQlFVOUdMRU5CUVVFc1EwRkJUMU1zU1VGQlFUdEpRVU53UWl4TFFVRkxXU3hEUVVGQkxFTkJRVkZOTEU5QlFVRXNSVUZCVXp0SlFVTjBRaXhMUVVGTFJTeERRVUZCTEVOQlFVMURMRk5CUVVFc1MwRkJZMVFzUTBGQlFTeERRVUZSUnl4UFFVRkJMRVZCUVZNN1NVRkRja05MTEVOQlFVRXNRMEZCVFVVc1QwRkJRU3hMUVVOVVJpeERRVUZCTEVOQlFVMVRMRXRCUVVFc1IwRkJVV3BDTEVOQlFVRXNRMEZCVVUwc1QwRkJRU3hEUVVGUmIwVXNWMEZCUVN4RlFVTTVRbXhGTEVOQlFVRXNRMEZCVFZVc1RVRkJRU3hIUVVGVGJFSXNRMEZCUVN4RFFVRlJUU3hQUVVGQkxFTkJRVkZ4UlN4WlFVRkJMRVZCUXk5Q2JrVXNRMEZCUVN4RFFVRk5WeXhOUVVGQkxFZEJRVk1zU1VGQlFYbEVMRmRCUVVFc1JVRkJZVFZGTEVOQlFVRXNRMEZCVVU4c1YwRkJRU3hGUVVGaExGRkJRVkVzUjBGRGVrUkRMRU5CUVVFc1EwRkJUVmtzVFVGQlFTeEhRVUZUTEVsQlFVRjNSQ3hYUVVGQkxFVkJRV0UxUlN4RFFVRkJMRU5CUVZGUExGZEJRVUVzUlVGQllTeFJRVUZSTEVkQlEzcEVVQ3hEUVVGQkxFTkJRVkZKTEZWQlFVRXNSMEZCWVVvc1EwRkJRU3hEUVVGUlJ5eFBRVUZCTEVOQlFWRjFSU3hYUVVGQkxFVkJRM0pETVVVc1EwRkJRU3hEUVVGUlN5eFhRVUZCTEVkQlFXTk1MRU5CUVVFc1EwRkJVVWNzVDBGQlFTeERRVUZSZDBVc1dVRkJRU3hGUVVOMFF6TkZMRU5CUVVFc1EwRkJVVThzVjBGQlFTeERRVUZaYTBRc1MwRkJRU3hEUVVGTlF5eHJRa0ZCUVN4SFFVRnhRanRKUVVkcVJDeE5RVUZOTTBVc1EwRkJRU3hIUVVGamVVSXNRMEZCUVN4RFFVRk5VeXhMUVVGQkxFZEJRVkZ3UXl4RFFVRkJMRU5CUVV0clJpeExRVUZCTzAxQlEycERPVVVzUTBGQlFTeEhRVUZsZFVJc1EwRkJRU3hEUVVGTlZTeE5RVUZCTEVkQlFWTnlReXhEUVVGQkxFTkJRVXRyUml4TFFVRkJPMGxCUTNwRExFbEJRVWxvUml4RFFVRkJMRWRCUVdOcFFpeERRVUZCTEVOQlFWRkpMRlZCUVVFc1NVRkJZMjVDTEVOQlFVRXNSMEZCWldVc1EwRkJRU3hEUVVGUlN5eFhRVUZCTEVWQlFXRTdTVUZETlVWSExFTkJRVUVzUTBGQlRVc3NTVUZCUVN4SFFVRlBjVUlzU1VGQlFTeERRVUZMYVVNc1IwRkJRU3hEUVVGSmJrVXNRMEZCUVN4RFFVRlJTU3hWUVVGQkxFZEJRV0VzU1VGQlNYSkNMRU5CUVVFc1IwRkJZeXhIUVVGSExFbEJRMmhGZVVJc1EwRkJRU3hEUVVGTlR5eEpRVUZCTEVsQlFWRlFMRU5CUVVFc1EwRkJUVXNzU1VGQlFTeEZRVU53UWt3c1EwRkJRU3hEUVVGTlRTeEpRVUZCTEVkQlFVOXZRaXhKUVVGQkxFTkJRVXRwUXl4SFFVRkJMRU5CUVVsdVJTeERRVUZCTEVOQlFWRkxMRmRCUVVFc1IwRkJZeXhKUVVGSmNFSXNRMEZCUVN4SFFVRmxMRWRCUVVjc1NVRkRiRVYxUWl4RFFVRkJMRU5CUVUxUkxFbEJRVUVzU1VGQlVWSXNRMEZCUVN4RFFVRk5UU3hKUVVGQkxFVkJRM0JDVGl4RFFVRkJMRU5CUVUxakxHTkJRVUVzUTBGQlpVVXNRMEZCUVN4SFFVRkpla0lzUTBGQlFTeERRVUZSWjBNc1RVRkJRU3hIUVVGVExFbEJRVWxvUXl4RFFVRkJMRU5CUVZFc1IwRkJSMmxETEV0QlFVRXNSMEZCVVhaRUxFTkJRVUVzUTBGQlJYVkVMRXRCUVVFc1JVRkRia1Y0UWl4RFFVRkJMRU5CUVUxakxHTkJRVUVzUTBGQlpVY3NRMEZCUVN4SFFVRkpNVUlzUTBGQlFTeERRVUZSWjBNc1RVRkJRU3hIUVVGVExFbEJRVWxvUXl4RFFVRkJMRU5CUVZFc1IwRkJSMnRETEV0QlFVRXNSMEZCVVhoRUxFTkJRVUVzUTBGQlJYZEVMRXRCUVVFN1NVRkxia1VzU1VGS2IwSkRMRWxCUVVFc1EwRkJTMmRETEVkQlFVRXNRMEZCU1doRExFbEJRVUVzUTBGQlN6SkRMRWRCUVVFc1EwRkJTWEpGTEVOQlFVRXNRMEZCVFdNc1kwRkJRU3hEUVVGbFJTeERRVUZCTEVkQlFVbG9RaXhEUVVGQkxFTkJRVTFoTEZsQlFVRXNRMEZCWVVjc1EwRkJRU3hIUVVGSlZTeEpRVUZCTEVOQlFVc3lReXhIUVVGQkxFTkJRVWx5UlN4RFFVRkJMRU5CUVUxakxHTkJRVUVzUTBGQlpVY3NRMEZCUVN4SFFVRkpha0lzUTBGQlFTeERRVUZOWVN4WlFVRkJMRU5CUVdGSkxFTkJRVUVzUzBGRGVrZ3NUVUZEYUVJNVF5eERRVUZCTEVOQlFVOXRSeXhWUVVGQkxFbEJRV0VzUzBGRmFrSjBSU3hEUVVGQkxFTkJRVTFGTEU5QlFVRXNTMEZCV1Zvc1EwRkJRU3hGUVVGWE8wMUJRMmhETEVsQlFVbHVRaXhEUVVGQkxFTkJRVTl2Unl4WlFVRkJMRTlCUVcxQ04wTXNTVUZCUVN4RFFVRkxPRU1zUzBGQlFTeERRVUZOZUVVc1EwRkJRU3hEUVVGTlN5eEpRVUZCTEUxQlFWVnhRaXhKUVVGQkxFTkJRVXM0UXl4TFFVRkJMRU5CUVUxNFJTeERRVUZCTEVOQlFVMVhMRTFCUVVFc1MwRkJWMWdzUTBGQlFTeERRVUZOWXl4alFVRkJMRU5CUVdWRkxFTkJRVUVzUjBGQlNXaENMRU5CUVVFc1EwRkJUV0VzV1VGQlFTeERRVUZoUnl4RFFVRkJMRWxCUVV0VkxFbEJRVUVzUTBGQlN6aERMRXRCUVVFc1EwRkJUWGhGTEVOQlFVRXNRMEZCVFU4c1NVRkJRU3hOUVVGVmJVSXNTVUZCUVN4RFFVRkxPRU1zUzBGQlFTeERRVUZOZUVVc1EwRkJRU3hEUVVGTlZ5eE5RVUZCTEV0QlFWZFlMRU5CUVVFc1EwRkJUV01zWTBGQlFTeERRVUZsUlN4RFFVRkJMRWRCUVVsb1FpeERRVUZCTEVOQlFVMWhMRmxCUVVFc1EwRkJZVWNzUTBGQlFTeEhRVVYyVHl4aFFVUkJhRUlzUTBGQlFTeERRVUZOUXl4VFFVRkJMRWxCUVZrN1RVRkhjRUlzUzBGQlN6bENMRU5CUVVFc1EwRkJUMjlITEZsQlFVRXNUMEZCYlVJM1F5eEpRVUZCTEVOQlFVczRReXhMUVVGQkxFTkJRVTE0UlN4RFFVRkJMRU5CUVUxTkxFbEJRVUVzVFVGQlZXOUNMRWxCUVVFc1EwRkJTemhETEV0QlFVRXNRMEZCVFhoRkxFTkJRVUVzUTBGQlRWa3NUVUZCUVN4TFFVRlhXaXhEUVVGQkxFTkJRVTFqTEdOQlFVRXNRMEZCWlVjc1EwRkJRU3hIUVVGSmFrSXNRMEZCUVN4RFFVRk5ZU3haUVVGQkxFTkJRV0ZKTEVOQlFVRXNTVUZCUzFNc1NVRkJRU3hEUVVGTE9FTXNTMEZCUVN4RFFVRk5lRVVzUTBGQlFTeERRVUZOVVN4SlFVRkJMRTFCUVZWclFpeEpRVUZCTEVOQlFVczRReXhMUVVGQkxFTkJRVTE0UlN4RFFVRkJMRU5CUVUxWkxFMUJRVUVzUzBGQlYxb3NRMEZCUVN4RFFVRk5ZeXhqUVVGQkxFTkJRV1ZITEVOQlFVRXNSMEZCU1dwQ0xFTkJRVUVzUTBGQlRXRXNXVUZCUVN4RFFVRmhTU3hEUVVGQkxFZEJSWGhQTEdGQlJFRnFRaXhEUVVGQkxFTkJRVTFETEZOQlFVRXNTVUZCV1N4RlFVZDBRanRKUVVGQk8wbEJRMGxvUXl4RFFVRkJMRU5CUVVWM1J5eFZRVUZCTEVsQlEwcDRSeXhEUVVGQkxFTkJRVVY1Unl4alFVRkJMRWxCUlVwNlJ5eERRVUZCTEVOQlFVVXdSeXhsUVVGQkxFbEJRMFl6UlN4RFFVRkJMRU5CUVUxRkxFOUJRVUVzU1VGQlZUdEpRVU5vUWl4TlFVRk5lRUlzUTBGQlFTeEpRVUZqVEN4RFFVRkJMRU5CUVV0clJpeExRVUZCTEVkQlFWRnNSU3hEUVVGQkxFdEJRV2xDUnl4RFFVRkJMRU5CUVZGV0xGRkJRVUVzUjBGQlYxZ3NRMEZCUVN4RFFVRlBNa1FzVFVGQlFTeERRVUZQYkVRc1NVRkJRU3hEUVVGTFJ5eFJRVUZCTzAxQlFVRTdVVUZEYkVaVkxFOUJRVUVzUlVGRFNrNHNRMEZCUVR0UlFVRlBUeXhQUVVGQkxFVkJRMUJPTzAxQlFVRXNTVUZEUlVrc1EwRkJRVHRKUVVOS1VTeERRVUZCTEVOQlFVMUhMRkZCUVVFc1IwRkJWMGdzUTBGQlFTeERRVUZOWXl4alFVRkJMRU5CUVdWRkxFTkJRVUVzUjBGQlNXaENMRU5CUVVFc1EwRkJUV0VzV1VGQlFTeERRVUZoUnl4RFFVRkJMRWRCUVVsb1FpeERRVUZCTEVOQlFVMVhMRTFCUVVFc1IwRkJVMnBETEVOQlFVRXNTVUZCWTNOQ0xFTkJRVUVzUTBGQlRWTXNTMEZCUVN4SFFVRnJRaXhKUVVGV2RFSXNRMEZCUVN4SFFVTTFSMkVzUTBGQlFTeERRVUZOU1N4UlFVRkJMRWRCUVZkS0xFTkJRVUVzUTBGQlRXTXNZMEZCUVN4RFFVRmxSeXhEUVVGQkxFZEJRVWxxUWl4RFFVRkJMRU5CUVUxaExGbEJRVUVzUTBGQllVa3NRMEZCUVN4SFFVRkpha0lzUTBGQlFTeERRVUZOV1N4TlFVRkJMRWRCUVZOc1F5eERRVUZCTEVsQlFXTnpRaXhEUVVGQkxFTkJRVTFWTEUxQlFVRXNSMEZCYlVJc1NVRkJWblJDTEVOQlFVRXNSMEZEZWtkWkxFTkJRVUVzUTBGQlRVY3NVVUZCUVN4SFFVRlhTQ3hEUVVGQkxFTkJRVTFMTEVsQlFVRXNTMEZEZWtKTUxFTkJRVUVzUTBGQlRVY3NVVUZCUVN4SFFVRlhTQ3hEUVVGQkxFTkJRVTFMTEVsQlFVRXNSMEZCVHl4TFFVRkxUQ3hEUVVGQkxFTkJRVTFMTEVsQlFVRXNSMEZCVDB3c1EwRkJRU3hEUVVGTlJ5eFJRVUZCTEVkQlFWY3NUVUZCVFN4TFFVVnlSVWdzUTBGQlFTeERRVUZOUnl4UlFVRkJMRWRCUVZkSUxFTkJRVUVzUTBGQlRVOHNTVUZCUVN4TFFVTjZRbEFzUTBGQlFTeERRVUZOUnl4UlFVRkJMRWRCUVZkSUxFTkJRVUVzUTBGQlRVOHNTVUZCUVN4SFFVRlBMRXRCUVV0UUxFTkJRVUVzUTBGQlRVY3NVVUZCUVN4SFFVRlhTQ3hEUVVGQkxFTkJRVTFQTEVsQlFVRXNSMEZCVHl4TlFVRk5MRXRCUlhKRlVDeERRVUZCTEVOQlFVMUpMRkZCUVVFc1IwRkJWMG9zUTBGQlFTeERRVUZOVFN4SlFVRkJMRXRCUTNwQ1RpeERRVUZCTEVOQlFVMUpMRkZCUVVFc1IwRkJWMG9zUTBGQlFTeERRVUZOVFN4SlFVRkJMRWRCUVU4c1MwRkJTMDRzUTBGQlFTeERRVUZOVFN4SlFVRkJMRWRCUVU5T0xFTkJRVUVzUTBGQlRVa3NVVUZCUVN4SFFVRlhMRTFCUVUwc1MwRkZja1ZLTEVOQlFVRXNRMEZCVFVrc1VVRkJRU3hIUVVGWFNpeERRVUZCTEVOQlFVMVJMRWxCUVVFc1MwRkRla0pTTEVOQlFVRXNRMEZCVFVrc1VVRkJRU3hIUVVGWFNpeERRVUZCTEVOQlFVMVJMRWxCUVVFc1IwRkJUeXhMUVVGTFVpeERRVUZCTEVOQlFVMUpMRkZCUVVFc1IwRkJWMG9zUTBGQlFTeERRVUZOVVN4SlFVRkJMRWRCUVU4c1RVRkJUU3hMUVVsd1JVOHNRMEZCUVN4RFFVRlRSeXhoUVVGQkxFdEJRV1ZJTEVOQlFVRXNRMEZCVTBjc1lVRkJRU3hIUVVGblFteENMRU5CUVVFc1EwRkJUV01zWTBGQlFTeERRVUZsUlN4RFFVRkJMRWRCUTNSRlJDeERRVUZCTEVOQlFWTkpMR0ZCUVVFc1MwRkJaVW9zUTBGQlFTeERRVUZUU1N4aFFVRkJMRWRCUVdkQ2JrSXNRMEZCUVN4RFFVRk5ZeXhqUVVGQkxFTkJRV1ZITEVOQlFVRXNSMEZEZEVWR0xFTkJRVUVzUTBGQlUwc3NVVUZCUVN4TFFVRlZUQ3hEUVVGQkxFTkJRVk5MTEZGQlFVRXNSMEZCVjNkRUxFbEJRVUVzUTBGQlMwTXNSMEZCUVN4TFFVTnFSRGxFTEVOQlFVRXNRMEZCVTBNc1EwRkJRU3hKUVVGTGFFSXNRMEZCUVN4RFFVRk5ZeXhqUVVGQkxFTkJRV1ZGTEVOQlFVRXNSMEZCU1VRc1EwRkJRU3hEUVVGVFJ5eGhRVUZCTEV0QlFXdENNRVFzU1VGQlFTeERRVUZMUXl4SFFVRkJMRXRCUVZFNVJDeERRVUZCTEVOQlFWTkxMRkZCUVVFc1NVRkJXU3hIUVVOd1Iwd3NRMEZCUVN4RFFVRlRSU3hEUVVGQkxFbEJRVXRxUWl4RFFVRkJMRU5CUVUxakxHTkJRVUVzUTBGQlpVY3NRMEZCUVN4SFFVRkpSaXhEUVVGQkxFTkJRVk5KTEdGQlFVRXNTMEZCYTBKNVJDeEpRVUZCTEVOQlFVdERMRWRCUVVFc1MwRkJVVGxFTEVOQlFVRXNRMEZCVTBzc1VVRkJRU3hKUVVGWkxFZEJRMmhIVFN4SlFVRkJMRU5CUVVzeVF5eEhRVUZCTEVOQlFVbHlSU3hEUVVGQkxFTkJRVTFqTEdOQlFVRXNRMEZCWlVVc1EwRkJRU3hIUVVGSlJDeERRVUZCTEVOQlFWTkhMR0ZCUVVFc1NVRkJhVUlzVFVGQlIwZ3NRMEZCUVN4RFFVRlRReXhEUVVGQkxFZEJRVWtzU1VGRE5VVlZMRWxCUVVFc1EwRkJTekpETEVkQlFVRXNRMEZCU1hKRkxFTkJRVUVzUTBGQlRXTXNZMEZCUVN4RFFVRmxSeXhEUVVGQkxFZEJRVWxHTEVOQlFVRXNRMEZCVTBrc1lVRkJRU3hKUVVGcFFpeE5RVUZIU2l4RFFVRkJMRU5CUVZORkxFTkJRVUVzUjBGQlNTeEpRVU5vUmtZc1EwRkJRU3hEUVVGVFJ5eGhRVUZCTEVkQlFXZENiRUlzUTBGQlFTeERRVUZOWXl4alFVRkJMRU5CUVdWRkxFTkJRVUVzUlVGRE9VTkVMRU5CUVVFc1EwRkJVMGtzWVVGQlFTeEhRVUZuUW01Q0xFTkJRVUVzUTBGQlRXTXNZMEZCUVN4RFFVRmxSeXhEUVVGQkxFVkJRemxEUml4RFFVRkJMRU5CUVZOTExGRkJRVUVzUjBGQlYzZEVMRWxCUVVFc1EwRkJTME1zUjBGQlFTeEpRVU42UW5KR0xFTkJRVUVzUTBGQlVVOHNWMEZCUVN4RFFVRlphMFFzUzBGQlFTeERRVUZOVHl4VFFVRkJMRWRCUVZrc1pVRkJaWGhFTEVOQlFVRXNRMEZCVFVjc1VVRkJRU3hQUVVGbFNDeERRVUZCTEVOQlFVMUpMRkZCUVVFc1QwRkRiRVk3UlVGQlFUdEZRVzlEUVN4VFFVRlRNRVVzUlVGQlFUdEpRVU5RTEUxQlFVMDNSeXhEUVVGQkxFZEJRVTlGTEVOQlFVRXNRMEZCVDFNc1NVRkJRVHRKUVVOb1Fsa3NRMEZCUVN4RFFVRlJSeXhQUVVGQkxFbEJRVmQ0UWl4RFFVRkJMRU5CUVU5M1JTeFhRVUZCTEV0QlFXZENlRVVzUTBGQlFTeERRVUZQSzBRc1RVRkJRU3hEUVVGUE5rTXNUMEZCUVN4RFFVRlJka1lzUTBGQlFTeERRVUZSUnl4UFFVRkJMRTFCUTNSRlNDeERRVUZCTEVOQlFWRk5MRTlCUVVFc1MwRkRWazRzUTBGQlFTeERRVUZSVFN4UFFVRkJMRU5CUVZGdFJDeExRVUZCTEVOQlFVMVBMRk5CUVVFc1IwRkJXU3huUTBGRmFFTm9SU3hEUVVGQkxFTkJRVkZQTEZkQlFVRXNTMEZEVmxBc1EwRkJRU3hEUVVGUlR5eFhRVUZCTEVOQlFWbHJSQ3hMUVVGQkxFTkJRVTFQTEZOQlFVRXNSMEZCV1N4MVFrRkZlRU5vUlN4RFFVRkJMRU5CUVZGSExFOUJRVUVzUTBGQlVXdEZMRk5CUVVFc1EwRkJWVVVzVFVGQlFTeERRVUZQTEVkQlFVYzFSaXhEUVVGQkxFTkJRVTh5UkN4TlFVRkJMRU5CUVU5c1JDeEpRVUZCTEVOQlFVdE5MR2RDUVVGQkxFdEJRM1pFYWtJc1EwRkJRU3hEUVVGTGMwWXNTMEZCUVN4SFFVRlJMRWRCUTJKc1JTeERRVUZCTEVkQlFXVXNSMEZEWmtjc1EwRkJRU3hEUVVGUlJ5eFBRVUZCTEZGQlFWVXNSMEZEYkVKSUxFTkJRVUVzUTBGQlVVMHNUMEZCUVN4UlFVRlZMRWRCUTJ4Q1RpeERRVUZCTEVOQlFWRlBMRmRCUVVFc1VVRkJZeXhIUVVOMFFsQXNRMEZCUVN4RFFVRlJReXhQUVVGQkxFZEJRVlVzUjBGRGJFSkVMRU5CUVVFc1EwRkJVVVVzVDBGQlFTeEhRVUZWTEVWQlJYUkNPMFZCUVVFN1JVRkRRU3hUUVVGVGRVSXNSVUZCVDJoRUxFTkJRVUU3U1VGRFpDeE5RVUZOU1N4RFFVRkJMRWRCUVU5R0xFTkJRVUVzUTBGQlQxTXNTVUZCUVR0TlFVTmtUQ3hEUVVGQkxFZEJRVk5LTEVOQlFVRXNRMEZCVHpKRUxFMUJRVUVzUTBGQlQyeEVMRWxCUVVFN1NVRkROMElzUzBGQlMxa3NRMEZCUVN4RFFVRlJSeXhQUVVGQkxFVkJRVk03VFVGRGFFSXhRaXhEUVVGQkxFbEJRVXRCTEVOQlFVRXNRMEZCUlN0RUxFMUJRVUVzUzBGRFZIaERMRU5CUVVFc1EwRkJVVWNzVDBGQlFTeEhRVUZWTVVJc1EwRkJRU3hEUVVGRkswUXNUVUZCUVN4RFFVRlBWU3hQUVVGQkxFTkJRVkVzU1VGQlNYWkZMRU5CUVVFc1EwRkJUekpFTEUxQlFVRXNRMEZCVDBNc1ZVRkJRU3h2UWtGRmJFUjJReXhEUVVGQkxFTkJRVkZITEU5QlFVRXNTMEZEVUhoQ0xFTkJRVUVzUTBGQlR6SkVMRTFCUVVFc1EwRkJUMnRFTEU5QlFVRXNTVUZCVnpkSExFTkJRVUVzUTBGQlR6SkVMRTFCUVVFc1EwRkJUMnRFTEU5QlFVRXNRMEZCVVc1SExFOUJRVUVzU1VGQlYxWXNRMEZCUVN4RFFVRlBOa2NzVDBGQlFTeEhRVU51UlhoR0xFTkJRVUVzUTBGQlVVY3NUMEZCUVN4SFFVRlZMRWxCUVVGelJpeFhRVUZCTEVWQlFXZENPVWNzUTBGQlFTeERRVUZQSzBjc1VVRkJRU3hGUVVGVkxFbEJRVWt2Unl4RFFVRkJMRU5CUVU4eVJDeE5RVUZCTEVOQlFVOXhSQ3huUWtGQlFTeEpRVUZ2UWl4TFFVVjZSak5HTEVOQlFVRXNRMEZCVVVjc1QwRkJRU3hIUVVGVmVFSXNRMEZCUVN4RFFVRlBLMFFzVFVGQlFTeERRVUZQTDBRc1EwRkJRU3hEUVVGUGQwVXNWMEZCUVR0TlFVY3pReXhKUVVGSmRFVXNRMEZCUVN4SFFVRlZiVUlzUTBGQlFTeERRVUZSUnl4UFFVRkJMRU5CUVZGcFJDeGhRVUZCTEVOQlFXTXNTVUZCU1hKRkxFTkJRVUVzUTBGQlQxVXNZMEZCUVR0TlFVTnVSRm9zUTBGQlFTeExRVU5HUVN4RFFVRkJMRWRCUVZWQkxFTkJRVUVzUTBGQlVYZEZMR2RDUVVGQkxFTkJRV2xDTEd0RVFVRnJSQ3hMUVVWMlJuSkVMRU5CUVVFc1EwRkJVVTBzVDBGQlFTeEhRVUZWZWtJc1EwRkJRU3hGUVVWb1FtMUNMRU5CUVVFc1EwRkJVVThzVjBGQlFTeEhRVVJPTVVJc1EwRkJRU3hIUVVOdlFpeEpRVUZCZVVVc1YwRkJRU3hGUVVGbGRFUXNRMEZCUVN4RFFVRlJUU3hQUVVGQkxFVkJRVk1zU1VGQlNYWkNMRU5CUVVFc1EwRkJUMVVzWTBGQlFTeEpRVUZyUWl4VlFVVTNSQ3hEUVVVeFFqdEpRVUZCTzBsQlEwRXNTMEZCUzA4c1EwRkJRU3hEUVVGUlRTeFBRVUZCTEV0QlFWbE9MRU5CUVVFc1EwRkJVVThzVjBGQlFTeEZRVUZoTzBsQlRUbERMRWxCUVVsMFFpeERRVUZCTEVWQlEwRlZMRU5CUVVFc1JVRkRRVU1zUTBGQlFTeEZRVU5CUlN4RFFVRkJMRVZCUTBGRExFTkJRVUVzUlVGRFFYZENMRU5CUVVFc1JVRkRRVTBzUTBGQlFTeEZRVU5CUXl4RFFVRkJMRVZCUTBGTkxFTkJRVUVzUlVGRFFWTXNRMEZCUVN4RlFVTkJZeXhEUVVGQkxFVkJRMEZ1UXl4RFFVRkJMRVZCUTBGblJDeERRVUZCTEVWQlEwRmpMRU5CUVVFc1JVRkRRVGRFTEVOQlFVRXNSVUZEUVcxRkxFTkJRVUVzUlVGRFFVTXNRMEZCUVN4RlFVTkJReXhEUVVGQk8wbEJkRUpCYmtnc1EwRkJRU3hEUVVGUE1rUXNUVUZCUVN4RFFVRlBlVVFzVDBGQlFTeExRVU5vUW5CSUxFTkJRVUVzUTBGQlQzRklMRk5CUVVFc1EwRkJWWFpETEV0QlFVRXNRMEZCVFhkRExGRkJRVUVzUjBGQlZ5eFZRVU5zUTNSSUxFTkJRVUVzUTBGQlQzRklMRk5CUVVFc1EwRkJWWFpETEV0QlFVRXNRMEZCVFhsRExGZEJRVUVzUjBGQll5eFRRVVYyUTJ4SExFTkJRVUVzUTBGQlVVY3NUMEZCUVN4RFFVRlJhMFVzVTBGQlFTeERRVUZWUXl4SFFVRkJMRU5CUVVrc1IwRkJSM1pHTEVOQlFVRXNRMEZCVDFjc1owSkJRVUVzVlVGdFFrb3NUVUZCZWtKakxFTkJRVUVzUTBGQlRXRXNXVUZCUVN4RFFVRmhSeXhEUVVGQkxFbEJRWEZDTDBNc1EwRkJRU3hKUVVOcVJGRXNRMEZCUVN4SFFVRlRVaXhEUVVGQkxFTkJRVVYxUkN4TFFVRkJMRVZCUTFoeVF5eERRVUZCTEVkQlFWTnNRaXhEUVVGQkxFTkJRVVYzUkN4TFFVRkJMRXRCUlZob1JDeERRVUZCTEVkQlFWTjFRaXhEUVVGQkxFTkJRVTFoTEZsQlFVRXNRMEZCWVVjc1EwRkJRU3hGUVVNMVFqZENMRU5CUVVFc1IwRkJVMkVzUTBGQlFTeERRVUZOWVN4WlFVRkJMRU5CUVdGSkxFTkJRVUU3U1VGRk9VSXNUVUZCVFRCRkxFTkJRVUVzUjBGQk9FSXNiVUpCUVU0eFNDeERRVUZCTEVkQlFXbENRU3hEUVVGQkxFZEJRVWs3U1VGRE9VSXNUVUZCYWtKdlFpeERRVUZCTEVsQlFYTkNjMGNzUTBGQlFTeExRVU40UW14SUxFTkJRVUVzVVVGQlV5eEhRVU5VVlN4RFFVRkJMRkZCUVZNc1NVRkZXR1FzUTBGQlFTeERRVUZMYTBZc1MwRkJRU3hIUVVGUmIwTXNRMEZCUVN4SlFVRnJRbTVITEVOQlFVRXNRMEZCVVU4c1YwRkJRU3hEUVVGWlowUXNXVUZCUVN4RFFVRmhMSFZDUVVGMVFuaEZMRU5CUVVFc1EwRkJUMDhzVVVGQlFTeEZRVU01Ums4c1EwRkJRU3hIUVVGbGMwY3NRMEZCUVN4SlFVRnJRbTVITEVOQlFVRXNRMEZCVVU4c1YwRkJRU3hEUVVGWlowUXNXVUZCUVN4RFFVRmhMSFZDUVVGMVFuaEZMRU5CUVVFc1EwRkJUMDhzVVVGQlFTeEhRVU0xUm1Jc1EwRkJRU3hKUVVGM1FpeE5RVUZxUW05Q0xFTkJRVUVzU1VGQmMwSnpSeXhEUVVGQkxFbEJPRUl2UW5SRkxFTkJRVUVzUjBGQllTeEhRVU5pUXl4RFFVRkJMRWRCUVdFc1RVRTVRbUlyUkN4RFFVRkJMRWRCUVdFM1JpeERRVUZCTEVOQlFWRkhMRTlCUVVFc1EwRkJVWFZGTEZkQlFVRXNSVUZETjBKdlFpeERRVUZCTEVkQlFXTTVSaXhEUVVGQkxFTkJRVkZITEU5QlFVRXNRMEZCVVhkRkxGbEJRVUVzUlVGRE9VSXZSU3hEUVVGQkxFZEJRVlVzU1VGQlFYZEhMRmRCUVVFc1JVRkJZM0JITEVOQlFVRXNRMEZCVVVjc1QwRkJRU3hGUVVGVGEwY3NTVUZCUVN4SFFVRlBia2dzUTBGQlFTeERRVUZQYjBnc1QwRkJRU3hGUVVOMlJIaEhMRU5CUVVFc1IwRkJWU3hKUVVGQmMwY3NWMEZCUVN4RlFVRmpjRWNzUTBGQlFTeERRVUZSUnl4UFFVRkJMRVZCUVZOdlJ5eEhRVUZCTEVkQlFVMXlTQ3hEUVVGQkxFTkJRVTl6U0N4UFFVRkJMRVZCUTNSRWVrY3NRMEZCUVN4SFFVRlJTQ3hEUVVGQkxFZEJRVlZwUnl4RFFVRkJMRWRCUVdFc1NVRkJTVFZITEVOQlFVRXNSVUZEYmtOelF5eERRVUZCTEVkQlFWRjZRaXhEUVVGQkxFZEJRVlZuUnl4RFFVRkJMRWRCUVdNc1NVRkJTVzVITEVOQlFVRXNSVUZEY0VONVF5eERRVUZCTEVkQlFXRndReXhEUVVGQkxFTkJRVkZOTEU5QlFVRXNRMEZCVVc5RkxGZEJRVUVzUlVGRE4wSTNRaXhEUVVGQkxFZEJRV00zUXl4RFFVRkJMRU5CUVZGTkxFOUJRVUVzUTBGQlVYRkZMRmxCUVVFc1JVRkRPVUpvUWl4RFFVRkJMRWRCUVdOMlFpeERRVUZCTEVkQlFXRjJSQ3hEUVVGQkxFTkJRVXRyUml4TFFVRkJMRVZCUTJoRGRrTXNRMEZCUVN4SFFVRmxjVUlzUTBGQlFTeEhRVUZqYUVVc1EwRkJRU3hEUVVGTGEwWXNTMEZCUVN4RlFVTnNRMU1zUTBGQlFTeEhRVUZuUW5SRExFbEJRVUVzUTBGQlMybERMRWRCUVVFc1EwRkJTVEJDTEVOQlFVRXNSMEZCWVN4SlFVRkpiRU1zUTBGQlFTeEhRVUZqTEVkQlFVY3NTVUZETTBReVFpeERRVUZCTEVkQlFXZENjRVFzU1VGQlFTeERRVUZMYVVNc1IwRkJRU3hEUVVGSk1rSXNRMEZCUVN4SFFVRmpMRWxCUVVsMFJTeERRVUZCTEVkQlFXVXNSMEZCUnl4SlFVTTNSRU1zUTBGQlFTeEpRVUZwUWl0RExFTkJRVUVzUlVGRGFrSnZRaXhEUVVGQkxFbEJRV2xDVGl4RFFVRkJMRVZCUTJwQ2VrUXNRMEZCUVN4SFFVRmhPVUlzUTBGQlFTeEhRVUZSYkVJc1EwRkJRU3hEUVVGTGEwWXNTMEZCUVN4RlFVTXhRbXBETEVOQlFVRXNSMEZCWVZBc1EwRkJRU3hIUVVGUk1VTXNRMEZCUVN4RFFVRkxhMFlzUzBGQlFTeEZRVU4wUW14RExFTkJRVUVzUjBGQllUSkRMRU5CUVVFc1MwRkRaak5ETEVOQlFVRXNSMEZCWVRKRExFTkJRVUVzUjBGRldETkRMRU5CUVVFc1IwRkJZVW9zUTBGQlFTeExRVU5tU1N4RFFVRkJMRWRCUVdGS0xFTkJRVUVzUjBGRldFc3NRMEZCUVN4SFFVRmhkMFFzUTBGQlFTeExRVU5tZUVRc1EwRkJRU3hIUVVGaGQwUXNRMEZCUVN4SFFVVlllRVFzUTBGQlFTeEhRVUZoT0VRc1EwRkJRU3hMUVVObU9VUXNRMEZCUVN4SFFVRmhPRVFzUTBGQlFTeEpRVTFpVHl4RFFVRkJMRWxCUVdsRExFMUJRV1owU0N4RFFVRkJMRU5CUVV0clJpeExRVUZCTEV0QlEzcENMMFFzUTBGQlFTeERRVUZSUXl4UFFVRkJMRWRCUVZVc1IwRkRiRUpFTEVOQlFVRXNRMEZCVVVVc1QwRkJRU3hIUVVGVkxFbEJSWEJDUml4RFFVRkJMRU5CUVZGUExGZEJRVUVzUTBGQldXdEVMRXRCUVVFc1EwRkJUVU1zYTBKQlFVRXNSMEZCY1VJc1UwRkRMME14UkN4RFFVRkJMRU5CUVZGUExGZEJRVUVzUTBGQldXdEVMRXRCUVVFc1EwRkJUVThzVTBGQlFTeEhRVUZaTEdWQlFXVnVReXhEUVVGQkxFOUJRV2xDUXl4RFFVRkJMRk5CUTNSRk9VSXNRMEZCUVN4RFFVRlJUU3hQUVVGQkxFTkJRVkZ0UkN4TFFVRkJMRU5CUVUxRExHdENRVUZCTEVkQlFYRkNMRk5CUXpORE1VUXNRMEZCUVN4RFFVRlJUU3hQUVVGQkxFTkJRVkZ0UkN4TFFVRkJMRU5CUVUxUExGTkJRVUVzUjBGQldTdzBRa0ZCTkVKdVJpeERRVUZCTEVOQlFVdHJSaXhMUVVGQkxFZEJRM0pGTzBWQlFVRTdSVUZEUVN4VFFVRlROa0lzUlVGQlFUdEpRVU5RTEUxQlFVMXVTQ3hEUVVGQkxFZEJRVTlGTEVOQlFVRXNRMEZCVDFNc1NVRkJRVHROUVVOa1VDeERRVUZCTEVkQlFWTkdMRU5CUVVFc1EwRkJUekpFTEUxQlFVRXNRMEZCVDJ4RUxFbEJRVUU3U1VGRE4wSXNTMEZCUzFrc1EwRkJRU3hEUVVGUlJ5eFBRVUZCTEVWQlFWTTdUVUZEYUVKNFFpeERRVUZCTEVOQlFVOHlSQ3hOUVVGQkxFTkJRVTlyUkN4UFFVRkJMRWxCUVZjM1J5eERRVUZCTEVOQlFVOHlSQ3hOUVVGQkxFTkJRVTlyUkN4UFFVRkJMRU5CUVZGdVJ5eFBRVUZCTEVsQlFWZFdMRU5CUVVFc1EwRkJUelpITEU5QlFVRXNSMEZEYmtWNFJpeERRVUZCTEVOQlFWRkhMRTlCUVVFc1IwRkJWU3hKUVVGQmMwWXNWMEZCUVN4RlFVRm5RamxITEVOQlFVRXNRMEZCVHl0SExGRkJRVUVzUlVGQlZTeEpRVUZKTDBjc1EwRkJRU3hEUVVGUE1rUXNUVUZCUVN4RFFVRlBjVVFzWjBKQlFVRXNTVUZCYjBJc1MwRkZla1l6Uml4RFFVRkJMRU5CUVZGSExFOUJRVUVzUjBGQlZYaENMRU5CUVVFc1EwRkJUeXRFTEUxQlFVRXNRMEZCVHk5RUxFTkJRVUVzUTBGQlQzZEZMRmRCUVVFN1RVRkZla01zU1VGQlNURkZMRU5CUVVFc1IwRkJWWFZDTEVOQlFVRXNRMEZCVVVjc1QwRkJRU3hEUVVGUmFVUXNZVUZCUVN4RFFVRmpMRWxCUVVsMlJTeERRVUZCTEVOQlFVOVpMR05CUVVFN1RVRkRia1JvUWl4RFFVRkJMRXRCUTBaQkxFTkJRVUVzUjBGQlZVRXNRMEZCUVN4RFFVRlJORVVzWjBKQlFVRXNRMEZCYVVJc2EwUkJRV3RFTEV0QlJYWkdja1FzUTBGQlFTeERRVUZSVFN4UFFVRkJMRWRCUVZVM1FpeERRVUZCTEVWQlJXaENkVUlzUTBGQlFTeERRVUZSVHl4WFFVRkJMRWRCUkU0NVFpeERRVUZCTEVkQlEyOUNMRWxCUVVFMlJTeFhRVUZCTEVWQlFXVjBSQ3hEUVVGQkxFTkJRVkZOTEU5QlFVRXNSVUZCVXl4SlFVRkpla0lzUTBGQlFTeERRVUZQV1N4alFVRkJMRWxCUVd0Q0xGVkJSVGRFTEVOQlJURkNPMGxCUVVFN1NVRkRTMDhzUTBGQlFTeERRVUZSVFN4UFFVRkJMRWxCUVZsT0xFTkJRVUVzUTBGQlVVOHNWMEZCUVN4TFFVTTNRalZDTEVOQlFVRXNRMEZCVHpKRUxFMUJRVUVzUTBGQlQzbEVMRTlCUVVFc1MwRkRhRUp3U0N4RFFVRkJMRU5CUVU5eFNDeFRRVUZCTEVOQlFWVjJReXhMUVVGQkxFTkJRVTEzUXl4UlFVRkJMRWRCUVZjc1NVRkRiRU4wU0N4RFFVRkJMRU5CUVU5eFNDeFRRVUZCTEVOQlFWVjJReXhMUVVGQkxFTkJRVTE1UXl4WFFVRkJMRWRCUVdNc1MwRkZka042U0N4RFFVRkJMRU5CUVV0elJpeExRVUZCTEVkQlFWRXNSMEZEWW14RkxFTkJRVUVzUjBGQlpTeEhRVU5tUnl4RFFVRkJMRU5CUVZGUExGZEJRVUVzUTBGQldXdEVMRXRCUVVFc1EwRkJUVU1zYTBKQlFVRXNSMEZCY1VJc1UwRkRMME14UkN4RFFVRkJMRU5CUVZGUExGZEJRVUVzUTBGQldXdEVMRXRCUVVFc1EwRkJUVThzVTBGQlFTeEhRVUZaTEhOQ1FVTjBRMmhGTEVOQlFVRXNRMEZCVVUwc1QwRkJRU3hEUVVGUmJVUXNTMEZCUVN4RFFVRk5ReXhyUWtGQlFTeEhRVUZ4UWl4VFFVTXpRekZFTEVOQlFVRXNRMEZCVVUwc1QwRkJRU3hEUVVGUmJVUXNTMEZCUVN4RFFVRk5UeXhUUVVGQkxFZEJRVmtzSzBKQlEyeERhRVVzUTBGQlFTeERRVUZSUnl4UFFVRkJMRU5CUVZGclJTeFRRVUZCTEVOQlFWVkZMRTFCUVVFc1EwRkJUeXhIUVVGSE1VWXNRMEZCUVN4RFFVRlBZU3huUWtGQlFTeExRVU16UTAwc1EwRkJRU3hEUVVGUlJ5eFBRVUZCTEZGQlFWVXNSMEZEYkVKSUxFTkJRVUVzUTBGQlVVTXNUMEZCUVN4SFFVRlZMRWRCUTJ4Q1JDeERRVUZCTEVOQlFWRkZMRTlCUVVFc1IwRkJWU3hGUVVOd1FqdEZRVUZCTzBWQlIwRXNVMEZCVXpKR0xFVkJRVmR3U0N4RFFVRkJPMGxCUTJ4Q0xFMUJRVTFKTEVOQlFVRXNSMEZCVDBZc1EwRkJRU3hEUVVGUFV5eEpRVUZCTzBsQlEyaENVQ3hEUVVGQkxFTkJRVXRyUml4TFFVRkJMRWxCUVhkQ0xFMUJRV1pzUml4RFFVRkJMRU5CUVV0clJpeExRVUZCTEVkQlJYSkNOa0lzUTBGQlFTeExRVWRCYmtVc1EwRkJRU3hEUVVGUGFFUXNRMEZCUVN4RFFVVllPMFZCUVVFN1JVRkRRU3hUUVVGVGNVZ3NSVUZCUVR0SlFWTlFMRTlCUVU4N1RVRkRURmNzWlVGQlFTeEpRVlJ6UWpsSUxFTkJRVUVzUTBGQlR6SkVMRTFCUVVFc1EwRkJUMjlGTEdkQ1FVRkJMRWxCUVcxQ08xRkJRM1pFUXl4UFFVRkJMRWRCUVZNN1VVRkRWRU1zVDBGQlFTeEhRVUZUTzAxQlFVRTdUVUZSVkVNc2VVSkJRVUVzUjBGT1owTnNTU3hEUVVGQkxFTkJRVTh5UkN4TlFVRkJMRU5CUVU5dlJTeG5Ra0ZCUVN4SlFVRnRRanRSUVVOcVJVTXNUMEZCUVN4SFFVRlRPMUZCUTFSRExFOUJRVUVzUjBGQlV6dE5RVUZCTzBsQlFVRXNRMEZOWWp0RlFVRkJPMFZCUjBFc1UwRkJVMVFzUlVGQlFUdEpRVU5RTEUxQlFVMHhTQ3hEUVVGQkxFZEJRVTlGTEVOQlFVRXNRMEZCVDFNc1NVRkJRVHRKUVVOd1FpeEpRVUZKV0N4RFFVRkJMRU5CUVV0WkxFOUJRVUVzUlVGQlV6dEpRVU5zUWxvc1EwRkJRU3hEUVVGTFdTeFBRVUZCTEVsQlFWVTdTVUZEWmp0TlFVRk5iMGdzWlVGQlFTeEZRVU5LTlVnc1EwRkJRVHROUVVGbFowa3NlVUpCUVVFc1JVRkRaamxJTzBsQlFVRXNTVUZEUlN0SExFTkJRVUU3U1VGSFNtNUlMRU5CUVVFc1EwRkJUM0ZJTEZOQlFVRXNRMEZCVldNc1owSkJRVUVzUTBGQmFVSXNaVUZCWldwRkxFTkJRVUVzUlVGQlowSm9SU3hEUVVGQkxFZEJRMnBGUml4RFFVRkJMRU5CUVU5eFNDeFRRVUZCTEVOQlFWVmpMR2RDUVVGQkxFTkJRV2xDTEdWQlFXVnVSQ3hEUVVGQkxFVkJRV2xDTlVVc1EwRkJRU3hIUVVOc1JTeERRVUZETEdGQlFXRXNhVUpCUVdsQ0xHTkJRV05uU1N4UFFVRkJMRU5CUVZGMFNTeERRVUZCTzAxQlEyNUVSU3hEUVVGQkxFTkJRVTl4U0N4VFFVRkJMRU5CUVZWakxHZENRVUZCTEVOQlFXbENja2tzUTBGQlFTeEZRVUZYSzBNc1EwRkJRU3hGUVVGak0wTXNRMEZCUVN4RFFVRm5RanRKUVVGQkxFbEJTVGRGUml4RFFVRkJMRU5CUVU5eFNDeFRRVUZCTEVOQlFWVmpMR2RDUVVGQkxFTkJRV2xDTEdWQlFXVjBReXhEUVVGQkxFVkJRV0Y2Uml4RFFVRkJMRU5CUTJoRk8wVkJRVUU3UlVGRFFTeFRRVUZUYVVrc1JVRkJRVHRKUVVOUUxFMUJRVTEyU1N4RFFVRkJMRWRCUVU5RkxFTkJRVUVzUTBGQlQxTXNTVUZCUVR0SlFVTndRaXhMUVVGTFdDeERRVUZCTEVOQlFVdFpMRTlCUVVFc1JVRkJVenRKUVVOdVFsb3NRMEZCUVN4RFFVRkxXU3hQUVVGQkxFbEJRVlU3U1VGRFpqdE5RVUZOYjBnc1pVRkJRU3hGUVVOS05VZ3NRMEZCUVR0TlFVRmxaMGtzZVVKQlFVRXNSVUZEWmpsSU8wbEJRVUVzU1VGRFJTdEhMRU5CUVVFN1NVRkhTbTVJTEVOQlFVRXNRMEZCVDNGSUxGTkJRVUVzUTBGQlZXbENMRzFDUVVGQkxFTkJRVzlDTEdWQlFXVndSU3hEUVVGQkxFVkJRV2RDYUVVc1EwRkJRU3hIUVVOd1JVWXNRMEZCUVN4RFFVRlBjVWdzVTBGQlFTeERRVUZWYVVJc2JVSkJRVUVzUTBGQmIwSXNaVUZCWlhSRUxFTkJRVUVzUlVGQmFVSTFSU3hEUVVGQkxFZEJRM0pGTEVOQlFVTXNZVUZCWVN4cFFrRkJhVUlzWTBGQlkyZEpMRTlCUVVFc1EwRkJVWFJKTEVOQlFVRTdUVUZEYmtSRkxFTkJRVUVzUTBGQlQzRklMRk5CUVVFc1EwRkJWV2xDTEcxQ1FVRkJMRU5CUVc5Q2VFa3NRMEZCUVN4RlFVRlhLME1zUTBGQlFTeEZRVUZqTTBNc1EwRkJRU3hEUVVGblFqdEpRVUZCTEVsQlNXaEdSaXhEUVVGQkxFTkJRVTl4U0N4VFFVRkJMRU5CUVZWcFFpeHRRa0ZCUVN4RFFVRnZRaXhsUVVGbGVrTXNRMEZCUVN4RlFVRmhla1lzUTBGQlFTeERRVU51UlR0RlFVRkJPMFZCZEdWQmJVa3NUVUZCUVN4RFFVRlBReXhqUVVGQkxFTkJRV1Y0U1N4RFFVRkJMRU5CUVU5VExFbEJRVUVzUlVGQlRTeFRRVUZUTzBsQlF6RkRaMGtzUjBGQlFTeEZRVUZIUVN4RFFVRkJMRXRCUTAxMlJpeERRVUZCTzBsQlJWUjNSaXhKUVVGSk5Va3NRMEZCUVR0TlFVTkdMRWxCUVVsdlJDeERRVUZCTEV0QlFWVndSQ3hEUVVGQkxFVkJRVTg3VVVGRGJrSXNUVUZCVFVVc1EwRkJRU3hIUVVGVmNVSXNRMEZCUVN4RFFVRlJUU3hQUVVGQk8xVkJRMnhDZWtJc1EwRkJRU3hIUVVGVmJVSXNRMEZCUVN4RFFVRlJSeXhQUVVGQk8xRkJRM2hDYkVJc1EwRkJRU3hEUVVGTExHTkJRV05TTEVOQlFVRXNSVUZCVDBVc1EwRkJRU3hGUVVGVFJTeERRVUZCTEVOQlEzSkRPMDFCUVVFN1RVRkRRV2RFTEVOQlFVRXNSMEZCVVhCRUxFTkJRMVk3U1VGQlFUdEZRVUZCTEVsQk5HUkdUU3hEUVVGQkxFTkJRVWNzVVVGQlVUdEpRVU5NU2l4RFFVRkJMRU5CUVU4eVJDeE5RVUZCTEVOQlFVOXNSQ3hKUVVGQkxFTkJRVXRETEU5QlFVRXNTVUZEY2tJNFJ5eERRVUZCTEVWQlEwWTdSVUZCUVN4SlFVVkdjRWdzUTBGQlFTeERRVUZITEZkQlFWYzdTVUZEV21sSkxFTkJRVUVzUlVGQlV6dEZRVUZCTEVsQlJWaHFTU3hEUVVGQkxFTkJRVWNzWTBGQll5eERRVUZEVGl4RFFVRkJMRVZCUVVsSkxFTkJRVUU3U1VGRFprWXNRMEZCUVN4RFFVRlBVeXhKUVVGQkxFTkJRVXRETEU5QlFVRXNTVUZ3VjI1Q0xGVkJRWE5DV2l4RFFVRkJPMDFCUTNCQ0xFMUJRVTFKTEVOQlFVRXNSMEZCVTBZc1EwRkJRU3hEUVVGUE1ra3NUVUZCUVR0TlFVTjBRaXhMUVVGTGRFZ3NRMEZCUVN4RFFVRlJUU3hQUVVGQkxFVkJRVk03VFVGRGRFSXNTVUZCU1VVc1EwRkJRU3hEUVVGTlF5eFRRVUZCTEVWQlFWYzdUVUZEYWtJMVFpeERRVUZCTEVOQlFVOHdTU3hQUVVGQkxFbEJRVmM1U1N4RFFVRkJMRU5CUVVWM1J5eFZRVUZCTEVsQlFWbDRSeXhEUVVGQkxFTkJRVVY1Unl4alFVRkJMRWxCUTNSRE1VVXNRMEZCUVN4RFFVRk5ReXhUUVVGQkxFbEJRVms3VFVGRGJFSXNUVUZCVFRGQ0xFTkJRVUVzUjBGQlVXZENMRU5CUVVFc1EwRkJVV2RETEUxQlFVRXNSMEZCVXl4SlFVRkphRU1zUTBGQlFTeERRVUZSTEV0QlFVdDBRaXhEUVVGQk8wMUJRMmhFSzBJc1EwRkJRU3hEUVVGTllTeFpRVUZCTEVOQlFXRkhMRU5CUVVFc1IwRkJTWHBETEVOQlFVRXNRMEZCVFdsRUxFdEJRVUVzUlVGRE4wSjRRaXhEUVVGQkxFTkJRVTFoTEZsQlFVRXNRMEZCWVVrc1EwRkJRU3hIUVVGSk1VTXNRMEZCUVN4RFFVRk5hMFFzUzBGREwwSTdTVUZCUVN4RFFUUldSU3hEUVVGaGNFUXNRMEZCUVN4RFFVRkZPMFZCUVVFc1NVRkZha0pGTEVOQlFVRXNRMEZCUnl4WlFVRlpMRU5CUVVOT0xFTkJRVUVzUlVGQlNVa3NRMEZCUVR0SlFVTmlSaXhEUVVGQkxFTkJRVTlUTEVsQlFVRXNRMEZCUzBNc1QwRkJRU3hKUVd4U2JrSTdUVUZEUlN4TlFVRk5XaXhEUVVGQkxFZEJRVTlGTEVOQlFVRXNRMEZCVDFNc1NVRkJRVHROUVVOd1FpeExRVUZMV1N4RFFVRkJMRU5CUVZGTkxFOUJRVUVzUlVGQlV6dE5RVU4wUWl4TFFVRkxSU3hEUVVGQkxFTkJRVTFETEZOQlFVRXNTMEZCWTBRc1EwRkJRU3hEUVVGTlJTeFBRVUZCTEVWQlJ6ZENMRTlCUmtGR0xFTkJRVUVzUTBGQlRVTXNVMEZCUVN4SlFVRlpMRk5CUTJ4Q1JDeERRVUZCTEVOQlFVMUZMRTlCUVVFc1NVRkJWVHROUVVkc1FrWXNRMEZCUVN4RFFVRk5ReXhUUVVGQkxFbEJRVmtzUjBGRGJFSkVMRU5CUVVFc1EwRkJUVVVzVDBGQlFTeEpRVUZWTzAxQlEyaENMRWxCUVVrM1FpeERRVUZCTEVkQlFXOUNPMUZCUTNCQ1JTeERRVUZCTEVkQlFXOUNPMDFCUTNoQ0xFMUJRVTFGTEVOQlFVRXNSMEZCYjBKelF5eERRVUZCTEVOQlFWTkRMRU5CUVVFc1IwRkJTVE5ETEVOQlFVRTdVVUZEYWtOTExFTkJRVUVzUjBGQlpYTkNMRU5CUVVFc1EwRkJUVWNzVVVGQlFTeEhRVUZYTVVJc1EwRkJRVHRSUVVOb1ExVXNRMEZCUVN4SFFVRnZRalJDTEVOQlFVRXNRMEZCVTBVc1EwRkJRU3hIUVVGSk1VTXNRMEZCUVR0UlFVTnFRMkVzUTBGQlFTeEhRVUZsV1N4RFFVRkJMRU5CUVUxSkxGRkJRVUVzUjBGQlYycENMRU5CUVVFN1RVRkhia0lzVFVGQlpqUkNMRU5CUVVFc1EwRkJVME1zUTBGQlFTeExRVUZUTTBNc1EwRkJRU3hIUVVGdlFuRkVMRWxCUVVFc1EwRkJTekpETEVkQlFVRXNSVUZCU3pOR0xFTkJRVUVzUjBGQlpYTkNMRU5CUVVFc1EwRkJUVWNzVVVGQlFTeEpRVUZaV1N4RFFVRkJMRU5CUVZORExFTkJRVUVzU1VGRE0wVXNUVUZCWmtRc1EwRkJRU3hEUVVGVFJTeERRVUZCTEV0QlFWTXhReXhEUVVGQkxFZEJRVzlDYlVRc1NVRkJRU3hEUVVGTE1rTXNSMEZCUVN4RlFVRkxha1lzUTBGQlFTeEhRVUZsV1N4RFFVRkJMRU5CUVUxSkxGRkJRVUVzU1VGQldWY3NRMEZCUVN4RFFVRlRSU3hEUVVGQk8wMUJRemxHTEUxQlFVMDFRaXhEUVVGQkxFZEJRVzFDY1VNc1NVRkJRU3hEUVVGTFowTXNSMEZCUVN4RFFVRkpja1lzUTBGQlFTeEZRVUZ0UWtVc1EwRkJRVHROUVVOeVJIbENMRU5CUVVFc1EwRkJUVWNzVVVGQlFTeEhRVUZYZWtJc1EwRkJRU3hGUVVOcVFuTkNMRU5CUVVFc1EwRkJUVWtzVVVGQlFTeEhRVUZYYUVJc1EwRkJRVHROUVVWcVFpeE5RVUZOUlN4RFFVRkJMRWRCUVdOVkxFTkJRVUVzUTBGQlRWTXNTMEZCUVN4SFFVRlJlRU1zUTBGQlFTeERRVUZMYzBZc1MwRkJRVHRSUVVOcVEyaEZMRU5CUVVFc1IwRkJaVk1zUTBGQlFTeERRVUZOVlN4TlFVRkJMRWRCUVZONlF5eERRVUZCTEVOQlFVdHpSaXhMUVVGQk8wMUJRM3BEZGtRc1EwRkJRU3hEUVVGTlN5eEpRVUZCTEVkQlFVOXhRaXhKUVVGQkxFTkJRVXRwUXl4SFFVRkJMRU5CUVVsdVJTeERRVUZCTEVOQlFWRkpMRlZCUVVFc1IwRkJZU3hKUVVGSlRpeERRVUZCTEVkQlFXTXNSMEZCUnl4SlFVTm9SVlVzUTBGQlFTeERRVUZOVHl4SlFVRkJMRWxCUVZGUUxFTkJRVUVzUTBGQlRVc3NTVUZCUVN4RlFVTndRa3dzUTBGQlFTeERRVUZOVFN4SlFVRkJMRWRCUVU5dlFpeEpRVUZCTEVOQlFVdHBReXhIUVVGQkxFTkJRVWx1UlN4RFFVRkJMRU5CUVZGTExGZEJRVUVzUjBGQll5eEpRVUZKVGl4RFFVRkJMRWRCUVdVc1IwRkJSeXhKUVVOc1JWTXNRMEZCUVN4RFFVRk5VU3hKUVVGQkxFbEJRVkZTTEVOQlFVRXNRMEZCVFUwc1NVRkJRU3hGUVVOd1FrNHNRMEZCUVN4RFFVRk5SeXhSUVVGQkxFZEJRVmQxUWl4SlFVRkJMRU5CUVV0blF5eEhRVUZCTEVOQlFVbG9ReXhKUVVGQkxFTkJRVXRwUXl4SFFVRkJMRU5CUVVrelJDeERRVUZCTEVOQlFVMUhMRkZCUVVFc1JVRkJWVWdzUTBGQlFTeERRVUZOVHl4SlFVRkJMRWRCUVU5UUxFTkJRVUVzUTBGQlRVc3NTVUZCUVN4SFFVTjBSVXdzUTBGQlFTeERRVUZOU1N4UlFVRkJMRWRCUVZkelFpeEpRVUZCTEVOQlFVdG5ReXhIUVVGQkxFTkJRVWxvUXl4SlFVRkJMRU5CUVV0cFF5eEhRVUZCTEVOQlFVa3pSQ3hEUVVGQkxFTkJRVTFKTEZGQlFVRXNSVUZCVlVvc1EwRkJRU3hEUVVGTlVTeEpRVUZCTEVkQlFVOVNMRU5CUVVFc1EwRkJUVTBzU1VGQlFTeEhRVU4wUldRc1EwRkJRU3hEUVVGUlR5eFhRVUZCTEVOQlFWbHJSQ3hMUVVGQkxFTkJRVTFETEd0Q1FVRkJMRWRCUVhGQ0xFZEJRVWMzUkN4RFFVRkJMRTFCUTJ4RVJ5eERRVUZCTEVOQlFWRlBMRmRCUVVFc1EwRkJXV3RFTEV0QlFVRXNRMEZCVFU4c1UwRkJRU3hIUVVGWkxHVkJRV1Y0UkN4RFFVRkJMRU5CUVUxSExGRkJRVUVzVDBGQlpVZ3NRMEZCUVN4RFFVRk5TU3hSUVVGQkxFOUJRMnhHTzBsQlFVRXNRMEZwVUVVc1JVRkJXVHRGUVVGQkxFbEJSV1EzUWl4RFFVRkJMRU5CUVVjc1lVRkJZU3hEUVVGRFRpeERRVUZCTEVWQlFVbEpMRU5CUVVFN1NVRkJRU3hEUVVOa1JpeERRVUZCTEVOQlFVODJTU3hUUVVGQkxFbEJRV0UzU1N4RFFVRkJMRU5CUVU4eVJDeE5RVUZCTEVOQlFVOXNSQ3hKUVVGQkxFTkJRVXRETEU5QlFVRXNTVUZCVjFZc1EwRkJRU3hEUVVGUFV5eEpRVUZCTEVOQlFVdERMRTlCUVVFc1NVRkJWMVlzUTBGQlFTeERRVUZQTWtRc1RVRkJRU3hEUVVGUGJFUXNTVUZCUVN4RFFVRkxTU3hOUVVGQkxFbEJReTlHY1Vjc1EwRkJRU3hEUVVGWGFFZ3NRMEZCUVN4RFFVTmlPMFZCUVVFc1NVRkZSa1VzUTBGQlFTeERRVUZITEdsQ1FVRnBRanRKUVVOa1NpeERRVUZCTEVOQlFVOVRMRWxCUVVFc1EwRkJTME1zVDBGQlFTeEpRVUZYVml4RFFVRkJMRU5CUVU4eVJDeE5RVUZCTEVOQlFVOXNSQ3hKUVVGQkxFTkJRVXRETEU5QlFVRXNTVUZETlVOcFJ5eERRVUZCTEVWQlEwWTdSVUZCUVN4SlFVVkdka2NzUTBGQlFTeERRVUZITEdWQlFXVTdTVUZEV2tvc1EwRkJRU3hEUVVGUFV5eEpRVUZCTEVOQlFVdERMRTlCUVVFc1NVRkJWMVlzUTBGQlFTeERRVUZQTWtRc1RVRkJRU3hEUVVGUGJFUXNTVUZCUVN4RFFVRkxReXhQUVVGQkxFbEJRVmRXTEVOQlFVRXNRMEZCVHpKRUxFMUJRVUVzUTBGQlQzbEVMRTlCUVVFc1NVRkRja1ZVTEVOQlFVRXNSVUZEUmp0RlFVRkJMRWxCUlVZMFFpeE5RVUZCTEVOQlFVOVBMRTFCUVVFc1EwRkJUemxKTEVOQlFVRXNRMEZCVDFNc1NVRkJRU3hGUVVGTk8wbEJRM3BDYzBrc1RVRkJRU3hGUVVGQmRrSXNRMEZCUVR0SlFVTkJkMElzVDBGQlFTeEZRVUZCV0N4RFFVRkJPMGxCUTBGWkxFVkJRVUVzUlVGQlNXNUhMRU5CUVVFN1NVRkRTbTlITEVkQlFVRXNSVUZCUzJwRExFTkJRVUU3U1VGRFRIQkhMRTFCUVVFc1JVRkJVWEZITzBWQlFVRXNSVUZGV2p0QlFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmMgPSBjbGFzc2VzVG9TZWxlY3RvcjtcbmZ1bmN0aW9uIGNsYXNzZXNUb1NlbGVjdG9yKGUpIHtcbiAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IFwiXCIpLCBgLiR7ZS50cmltKCkucmVwbGFjZSgvKFtcXC46IStcXC9dKS9nLCBcIlxcXFwkMVwiKS5yZXBsYWNlKC8gL2csIFwiLlwiKX1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpqYkdGemMyVnpWRzlUWld4bFkzUnZjaUlzSW1VaUxDSjBjbWx0SWl3aWNtVndiR0ZqWlNKZExDSnpiM1Z5WTJWeklqcGJJakFpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYU3dpYldGd2NHbHVaM01pT2lJN096czdPenRCUVVGQkxGTkJRVk5CTEd0Q1FVRnJRa01zUTBGQlFUdEZRVWw2UWl4WlFVaG5RaXhOUVVGYVFTeERRVUZCTEV0QlEwWkJMRU5CUVVFc1IwRkJWU3hMUVVWTUxFbEJRVWxCTEVOQlFVRXNRMEZCVVVNc1NVRkJRU3hIUVVGUFF5eFBRVUZCTEVOQlFWRXNaMEpCUVdkQ0xGRkJRMnBFUVN4UFFVRkJMRU5CUVZFc1RVRkJUU3hOUVVOcVFqdEJRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZDtcbnZhciBfdXRpbHNNaW4gPSByZXF1aXJlKFwiLi91dGlscy5taW4ubWpzXCIpO1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChlLCB0LCBuLCBhKSB7XG4gIHJldHVybiBlLnBhcmFtcy5jcmVhdGVFbGVtZW50cyAmJiBPYmplY3Qua2V5cyhhKS5mb3JFYWNoKGwgPT4ge1xuICAgIGlmICghbltsXSAmJiAhMCA9PT0gbi5hdXRvKSB7XG4gICAgICBsZXQgciA9ICgwLCBfdXRpbHNNaW4uZSkoZS5lbCwgYC4ke2FbbF19YClbMF07XG4gICAgICByIHx8IChyID0gKDAsIF91dGlsc01pbi5jKShcImRpdlwiLCBhW2xdKSwgci5jbGFzc05hbWUgPSBhW2xdLCBlLmVsLmFwcGVuZChyKSksIG5bbF0gPSByLCB0W2xdID0gcjtcbiAgICB9XG4gIH0pLCBuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpqY21WaGRHVkZiR1Z0Wlc1MFNXWk9iM1JFWldacGJtVmtJaXdpWlNJc0luUWlMQ0p1SWl3aVlTSXNJbkJoY21GdGN5SXNJbU55WldGMFpVVnNaVzFsYm5Seklpd2lUMkpxWldOMElpd2lhMlY1Y3lJc0ltWnZja1ZoWTJnaUxDSnNJaXdpWVhWMGJ5SXNJbklpTENKbGJHVnRaVzUwUTJocGJHUnlaVzRpTENKbGJDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSmpiR0Z6YzA1aGJXVWlMQ0poY0hCbGJtUWlYU3dpYzI5MWNtTmxjeUk2V3lJd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJiblZzYkYwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJSVUVzVTBGQlUwRXNNRUpCUVRCQ1F5eERRVUZCTEVWQlFWRkRMRU5CUVVFc1JVRkJaMEpETEVOQlFVRXNSVUZCVVVNc1EwRkJRVHRGUVdWcVJTeFBRV1JKU0N4RFFVRkJMRU5CUVU5SkxFMUJRVUVzUTBGQlQwTXNZMEZCUVN4SlFVTm9Ra01zVFVGQlFTeERRVUZQUXl4SlFVRkJMRU5CUVV0S0xFTkJRVUVzUlVGQldVc3NUMEZCUVN4RFFVRlJReXhEUVVGQk8wbEJRemxDTEV0QlFVdFFMRU5CUVVFc1EwRkJUMDhzUTBGQlFTeE5RVUYzUWl4TlFVRm9RbEFzUTBGQlFTeERRVUZQVVN4SlFVRkJMRVZCUVdVN1RVRkRlRU1zU1VGQlNVTXNRMEZCUVN4SFFVRlZMRWxCUVVGRExGZEJRVUVzUlVGQlowSmFMRU5CUVVFc1EwRkJUMkVzUlVGQlFTeEZRVUZKTEVsQlFVbFdMRU5CUVVFc1EwRkJWMDBzUTBGQlFTeExRVUZSTzAxQlF6TkVSU3hEUVVGQkxFdEJRMGhCTEVOQlFVRXNSMEZCVlN4SlFVRkJSeXhYUVVGQkxFVkJRV01zVDBGQlQxZ3NRMEZCUVN4RFFVRlhUU3hEUVVGQkxFbEJRekZEUlN4RFFVRkJMRU5CUVZGSkxGTkJRVUVzUjBGQldWb3NRMEZCUVN4RFFVRlhUU3hEUVVGQkxFZEJReTlDVkN4RFFVRkJMRU5CUVU5aExFVkJRVUVzUTBGQlIwY3NUVUZCUVN4RFFVRlBUQ3hEUVVGQkxFbEJSVzVDVkN4RFFVRkJMRU5CUVU5UExFTkJRVUVzU1VGQlQwVXNRMEZCUVN4RlFVTmtWaXhEUVVGQkxFTkJRV1ZSTEVOQlFVRXNTVUZCVDBVc1EwRkRlRUk3U1VGQlFUdEZRVUZCTEVsQlIwZFVMRU5CUTFRN1FVRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmMgPSBjcmVhdGVTaGFkb3c7XG52YXIgX3V0aWxzTWluID0gcmVxdWlyZShcIi4vdXRpbHMubWluLm1qc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyhlLCB0LCByKSB7XG4gIGNvbnN0IHMgPSBgc3dpcGVyLXNsaWRlLXNoYWRvdyR7ciA/IGAtJHtyfWAgOiBcIlwifSR7ZSA/IGAgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke2V9YCA6IFwiXCJ9YCxcbiAgICBhID0gKDAsIF91dGlsc01pbi5rKSh0KTtcbiAgbGV0IGkgPSBhLnF1ZXJ5U2VsZWN0b3IoYC4ke3Muc3BsaXQoXCIgXCIpLmpvaW4oXCIuXCIpfWApO1xuICByZXR1cm4gaSB8fCAoaSA9ICgwLCBfdXRpbHNNaW4uYykoXCJkaXZcIiwgcy5zcGxpdChcIiBcIikpLCBhLmFwcGVuZChpKSksIGk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmpjbVZoZEdWVGFHRmtiM2NpTENKbElpd2lkQ0lzSW5JaUxDSnpJaXdpWVNJc0ltZGxkRk5zYVdSbFZISmhibk5tYjNKdFJXd2lMQ0pwSWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW5Od2JHbDBJaXdpYW05cGJpSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSmhjSEJsYm1RaVhTd2ljMjkxY21ObGN5STZXeUl3SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQlJVRXNVMEZCVTBFc1lVRkJZVU1zUTBGQlFTeEZRVUZSUXl4RFFVRkJMRVZCUVZORExFTkJRVUU3UlVGRGNrTXNUVUZCVFVNc1EwRkJRU3hIUVVGakxITkNRVUZ6UWtRc1EwRkJRU3hIUVVGUExFbEJRVWxCTEVOQlFVRXNTMEZCVXl4TFFVRkxSaXhEUVVGQkxFZEJRVk1zZDBKQlFYZENRU3hEUVVGQkxFdEJRVmM3U1VGRGVrZEpMRU5CUVVFc1IwRkJhMElzU1VGQlFVTXNWMEZCUVN4RlFVRnZRa29zUTBGQlFUdEZRVU0xUXl4SlFVRkpTeXhEUVVGQkxFZEJRVmRHTEVOQlFVRXNRMEZCWjBKSExHRkJRVUVzUTBGQll5eEpRVUZKU2l4RFFVRkJMRU5CUVZsTExFdEJRVUVzUTBGQlRTeExRVUZMUXl4SlFVRkJMRU5CUVVzN1JVRkxOMFVzVDBGS1MwZ3NRMEZCUVN4TFFVTklRU3hEUVVGQkxFZEJRVmNzU1VGQlFVa3NWMEZCUVN4RlFVRmpMRTlCUVU5UUxFTkJRVUVzUTBGQldVc3NTMEZCUVN4RFFVRk5MRTlCUTJ4RVNpeERRVUZCTEVOQlFXZENUeXhOUVVGQkxFTkJRVTlNTEVOQlFVRXNTVUZGYkVKQkxFTkJRMVE3UVVGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZSA9IGVmZmVjdEluaXQ7XG5mdW5jdGlvbiBlZmZlY3RJbml0KGUpIHtcbiAgY29uc3Qge1xuICAgIGVmZmVjdDogcyxcbiAgICBzd2lwZXI6IGEsXG4gICAgb246IHQsXG4gICAgc2V0VHJhbnNsYXRlOiByLFxuICAgIHNldFRyYW5zaXRpb246IGksXG4gICAgb3ZlcndyaXRlUGFyYW1zOiBuLFxuICAgIHBlcnNwZWN0aXZlOiBvLFxuICAgIHJlY3JlYXRlU2hhZG93czogZixcbiAgICBnZXRFZmZlY3RQYXJhbXM6IGxcbiAgfSA9IGU7XG4gIGxldCBjO1xuICB0KFwiYmVmb3JlSW5pdFwiLCAoKSA9PiB7XG4gICAgaWYgKGEucGFyYW1zLmVmZmVjdCAhPT0gcykgcmV0dXJuO1xuICAgIGEuY2xhc3NOYW1lcy5wdXNoKGAke2EucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtzfWApLCBvICYmIG8oKSAmJiBhLmNsYXNzTmFtZXMucHVzaChgJHthLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG4gICAgY29uc3QgZSA9IG4gPyBuKCkgOiB7fTtcbiAgICBPYmplY3QuYXNzaWduKGEucGFyYW1zLCBlKSwgT2JqZWN0LmFzc2lnbihhLm9yaWdpbmFsUGFyYW1zLCBlKTtcbiAgfSksIHQoXCJzZXRUcmFuc2xhdGVcIiwgKCkgPT4ge1xuICAgIGEucGFyYW1zLmVmZmVjdCA9PT0gcyAmJiByKCk7XG4gIH0pLCB0KFwic2V0VHJhbnNpdGlvblwiLCAoZSwgdCkgPT4ge1xuICAgIGEucGFyYW1zLmVmZmVjdCA9PT0gcyAmJiBpKHQpO1xuICB9KSwgdChcInRyYW5zaXRpb25FbmRcIiwgKCkgPT4ge1xuICAgIGlmIChhLnBhcmFtcy5lZmZlY3QgPT09IHMgJiYgZikge1xuICAgICAgaWYgKCFsIHx8ICFsKCkuc2xpZGVTaGFkb3dzKSByZXR1cm47XG4gICAgICBhLnNsaWRlcy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIikuZm9yRWFjaChlID0+IGUucmVtb3ZlKCkpO1xuICAgICAgfSksIGYoKTtcbiAgICB9XG4gIH0pLCB0KFwidmlydHVhbFVwZGF0ZVwiLCAoKSA9PiB7XG4gICAgYS5wYXJhbXMuZWZmZWN0ID09PSBzICYmIChhLnNsaWRlcy5sZW5ndGggfHwgKGMgPSAhMCksIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBjICYmIGEuc2xpZGVzICYmIGEuc2xpZGVzLmxlbmd0aCAmJiAocigpLCBjID0gITEpO1xuICAgIH0pKTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmxabVpsWTNSSmJtbDBJaXdpWlNJc0ltVm1abVZqZENJc0luTWlMQ0p6ZDJsd1pYSWlMQ0poSWl3aWIyNGlMQ0owSWl3aWMyVjBWSEpoYm5Oc1lYUmxJaXdpY2lJc0luTmxkRlJ5WVc1emFYUnBiMjRpTENKcElpd2liM1psY25keWFYUmxVR0Z5WVcxeklpd2liaUlzSW5CbGNuTndaV04wYVhabElpd2lieUlzSW5KbFkzSmxZWFJsVTJoaFpHOTNjeUlzSW1ZaUxDSm5aWFJGWm1abFkzUlFZWEpoYlhNaUxDSnNJaXdpWXlJc0luQmhjbUZ0Y3lJc0ltTnNZWE56VG1GdFpYTWlMQ0p3ZFhOb0lpd2lZMjl1ZEdGcGJtVnlUVzlrYVdacFpYSkRiR0Z6Y3lJc0lrOWlhbVZqZENJc0ltRnpjMmxuYmlJc0ltOXlhV2RwYm1Gc1VHRnlZVzF6SWl3aWMyeHBaR1ZUYUdGa2IzZHpJaXdpYzJ4cFpHVnpJaXdpWm05eVJXRmphQ0lzSW5GMVpYSjVVMlZzWldOMGIzSkJiR3dpTENKeVpXMXZkbVVpTENKc1pXNW5kR2dpTENKeVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVWlYU3dpYzI5MWNtTmxjeUk2V3lJd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJiblZzYkYwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN1FVRkJRU3hUUVVGVFFTeFhRVUZYUXl4RFFVRkJPMFZCUTJ4Q08wbEJRVTFETEUxQlFVRXNSVUZEU2tNc1EwRkJRVHRKUVVGTlF5eE5RVUZCTEVWQlEwNURMRU5CUVVFN1NVRkJUVU1zUlVGQlFTeEZRVU5PUXl4RFFVRkJPMGxCUVVWRExGbEJRVUVzUlVGRFJrTXNRMEZCUVR0SlFVRlpReXhoUVVGQkxFVkJRMXBETEVOQlFVRTdTVUZCWVVNc1pVRkJRU3hGUVVOaVF5eERRVUZCTzBsQlFXVkRMRmRCUVVFc1JVRkRaa01zUTBGQlFUdEpRVUZYUXl4bFFVRkJMRVZCUTFoRExFTkJRVUU3U1VGQlpVTXNaVUZCUVN4RlFVTm1RenRGUVVGQkxFbEJRMFZzUWl4RFFVRkJPMFZCSzBKS0xFbEJRVWx0UWl4RFFVRkJPMFZCT1VKS1lpeERRVUZCTEVOQlFVY3NZMEZCWXp0SlFVTm1MRWxCUVVsR0xFTkJRVUVzUTBGQlQyZENMRTFCUVVFc1EwRkJUMjVDTEUxQlFVRXNTMEZCVjBNc1EwRkJRU3hGUVVGUk8wbEJRM0pEUlN4RFFVRkJMRU5CUVU5cFFpeFZRVUZCTEVOQlFWZERMRWxCUVVFc1EwRkJTeXhIUVVGSGJFSXNRMEZCUVN4RFFVRlBaMElzVFVGQlFTeERRVUZQUnl4elFrRkJRU3hIUVVGNVFuSkNMRU5CUVVFc1MwRkROMFJaTEVOQlFVRXNTVUZCWlVFc1EwRkJRU3hOUVVOcVFsWXNRMEZCUVN4RFFVRlBhVUlzVlVGQlFTeERRVUZYUXl4SlFVRkJMRU5CUVVzc1IwRkJSMnhDTEVOQlFVRXNRMEZCVDJkQ0xFMUJRVUVzUTBGQlQwY3NjMEpCUVVFN1NVRkZNVU1zVFVGQlRYWkNMRU5CUVVFc1IwRkJkMEpaTEVOQlFVRXNSMEZCYTBKQkxFTkJRVUVzUzBGQmIwSXNRMEZCUXp0SlFVTnlSVmtzVFVGQlFTeERRVUZQUXl4TlFVRkJMRU5CUVU5eVFpeERRVUZCTEVOQlFVOW5RaXhOUVVGQkxFVkJRVkZ3UWl4RFFVRkJMRWRCUXpkQ2QwSXNUVUZCUVN4RFFVRlBReXhOUVVGQkxFTkJRVTl5UWl4RFFVRkJMRU5CUVU5elFpeGpRVUZCTEVWQlFXZENNVUlzUTBGQlFTeERRVUZ6UWp0RlFVRkJMRWxCUlRkRVRTeERRVUZCTEVOQlFVY3NaMEpCUVdkQ08wbEJRMkpHTEVOQlFVRXNRMEZCVDJkQ0xFMUJRVUVzUTBGQlQyNUNMRTFCUVVFc1MwRkJWME1zUTBGQlFTeEpRVU0zUWswc1EwRkJRU3hGUVVGak8wVkJRVUVzU1VGRmFFSkdMRU5CUVVFc1EwRkJSeXhwUWtGQmFVSXNRMEZCUTA0c1EwRkJRU3hGUVVGSlRTeERRVUZCTzBsQlEyNUNSaXhEUVVGQkxFTkJRVTluUWl4TlFVRkJMRU5CUVU5dVFpeE5RVUZCTEV0QlFWZERMRU5CUVVFc1NVRkROMEpSTEVOQlFVRXNRMEZCWTBvc1EwRkJRU3hEUVVGVE8wVkJRVUVzU1VGRmVrSkJMRU5CUVVFc1EwRkJSeXhwUWtGQmFVSTdTVUZEYkVJc1NVRkJTVVlzUTBGQlFTeERRVUZQWjBJc1RVRkJRU3hEUVVGUGJrSXNUVUZCUVN4TFFVRlhReXhEUVVGQkxFbEJRM3BDWXl4RFFVRkJMRVZCUVdsQ08wMUJRMjVDTEV0QlFVdEZMRU5CUVVFc1MwRkJiMEpCTEVOQlFVRXNSMEZCYTBKVExGbEJRVUVzUlVGQll6dE5RVVY2UkhaQ0xFTkJRVUVzUTBGQlQzZENMRTFCUVVFc1EwRkJUME1zVDBGQlFTeERRVUZSTjBJc1EwRkJRVHRSUVVOd1FrRXNRMEZCUVN4RFFVRlJPRUlzWjBKQlFVRXNRMEZCYVVJc1owaEJRV2RJUkN4UFFVRkJMRU5CUVZFM1FpeERRVUZCTEVsQlFWbEJMRU5CUVVFc1EwRkJVeXRDTEUxQlFVRXNSMEZCVXp0TlFVRkJMRWxCUjJwTVppeERRVUZCTEVWQlEwWTdTVUZCUVR0RlFVRkJMRWxCUjBaV0xFTkJRVUVzUTBGQlJ5eHBRa0ZCYVVJN1NVRkRaRVlzUTBGQlFTeERRVUZQWjBJc1RVRkJRU3hEUVVGUGJrSXNUVUZCUVN4TFFVRlhReXhEUVVGQkxFdEJRM2hDUlN4RFFVRkJMRU5CUVU5M1FpeE5RVUZCTEVOQlFVOUpMRTFCUVVFc1MwRkRha0ppTEVOQlFVRXNTVUZCZVVJc1NVRkZNMEpqTEhGQ1FVRkJMRU5CUVhOQ08wMUJRMmhDWkN4RFFVRkJMRWxCUVRCQ1ppeERRVUZCTEVOQlFVOTNRaXhOUVVGQkxFbEJRVlY0UWl4RFFVRkJMRU5CUVU5M1FpeE5RVUZCTEVOQlFVOUpMRTFCUVVFc1MwRkRNMFI0UWl4RFFVRkJMRWxCUTBGWExFTkJRVUVzU1VGQmVVSXNSVUZETTBJN1NVRkJRU3hIUVVOQk8wVkJRVUVzUlVGRlRqdEJRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5lID0gZWZmZWN0VGFyZ2V0O1xudmFyIF91dGlsc01pbiA9IHJlcXVpcmUoXCIuL3V0aWxzLm1pbi5tanNcIik7XG5mdW5jdGlvbiBlZmZlY3RUYXJnZXQoZSwgaSkge1xuICBjb25zdCB0ID0gKDAsIF91dGlsc01pbi5rKShpKTtcbiAgcmV0dXJuIHQgIT09IGkgJiYgKHQuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gXCJoaWRkZW5cIiwgdC5zdHlsZVtcIi13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eVwiXSA9IFwiaGlkZGVuXCIpLCB0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpsWm1abFkzUlVZWEpuWlhRaUxDSmxJaXdpYVNJc0luUWlMQ0puWlhSVGJHbGtaVlJ5WVc1elptOXliVVZzSWl3aWMzUjViR1VpTENKaVlXTnJabUZqWlZacGMybGlhV3hwZEhraVhTd2ljMjkxY21ObGN5STZXeUl3SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQlJVRXNVMEZCVTBFc1lVRkJZVU1zUTBGQlFTeEZRVUZqUXl4RFFVRkJPMFZCUTJ4RExFMUJRVTFETEVOQlFVRXNSMEZCWXl4SlFVRkJReXhYUVVGQkxFVkJRVzlDUml4RFFVRkJPMFZCUzNoRExFOUJTa2xETEVOQlFVRXNTMEZCWjBKRUxFTkJRVUVzUzBGRGJFSkRMRU5CUVVFc1EwRkJXVVVzUzBGQlFTeERRVUZOUXl4clFrRkJRU3hIUVVGeFFpeFZRVU4yUTBnc1EwRkJRU3hEUVVGWlJTeExRVUZCTEVOQlFVMHNhVU5CUVdsRExGZEJSVGxEUml4RFFVTlVPMEZCUVVFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZSA9IGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kO1xudmFyIF91dGlsc01pbiA9IHJlcXVpcmUoXCIuL3V0aWxzLm1pbi5tanNcIik7XG5mdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZChlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiB0LFxuICAgIGR1cmF0aW9uOiBuLFxuICAgIHRyYW5zZm9ybUVsZW1lbnRzOiByLFxuICAgIGFsbFNsaWRlczogaVxuICB9ID0gZTtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4OiBhXG4gIH0gPSB0O1xuICBpZiAodC5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiAwICE9PSBuKSB7XG4gICAgbGV0IGUsXG4gICAgICBuID0gITE7XG4gICAgZSA9IGkgPyByIDogci5maWx0ZXIoZSA9PiB7XG4gICAgICBjb25zdCBuID0gZS5jbGFzc0xpc3QuY29udGFpbnMoXCJzd2lwZXItc2xpZGUtdHJhbnNmb3JtXCIpID8gKGUgPT4ge1xuICAgICAgICBpZiAoIWUucGFyZW50RWxlbWVudCkgcmV0dXJuIHQuc2xpZGVzLmZpbHRlcih0ID0+IHQuc2hhZG93Um9vdCAmJiB0LnNoYWRvd1Jvb3QgPT09IGUucGFyZW50Tm9kZSlbMF07XG4gICAgICAgIHJldHVybiBlLnBhcmVudEVsZW1lbnQ7XG4gICAgICB9KShlKSA6IGU7XG4gICAgICByZXR1cm4gdC5nZXRTbGlkZUluZGV4KG4pID09PSBhO1xuICAgIH0pLCBlLmZvckVhY2goZSA9PiB7XG4gICAgICAoMCwgX3V0aWxzTWluLmkpKGUsICgpID0+IHtcbiAgICAgICAgaWYgKG4pIHJldHVybjtcbiAgICAgICAgaWYgKCF0IHx8IHQuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIG4gPSAhMCwgdC5hbmltYXRpbmcgPSAhMTtcbiAgICAgICAgY29uc3QgZSA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoXCJ0cmFuc2l0aW9uZW5kXCIsIHtcbiAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICBjYW5jZWxhYmxlOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgdC53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmxabVpsWTNSV2FYSjBkV0ZzVkhKaGJuTnBkR2x2YmtWdVpDSXNJbVVpTENKemQybHdaWElpTENKMElpd2laSFZ5WVhScGIyNGlMQ0p1SWl3aWRISmhibk5tYjNKdFJXeGxiV1Z1ZEhNaUxDSnlJaXdpWVd4c1UyeHBaR1Z6SWl3aWFTSXNJbUZqZEdsMlpVbHVaR1Y0SWl3aVlTSXNJbkJoY21GdGN5SXNJblpwY25SMVlXeFVjbUZ1YzJ4aGRHVWlMQ0ptYVd4MFpYSWlMQ0pqYkdGemMweHBjM1FpTENKamIyNTBZV2x1Y3lJc0luQmhjbVZ1ZEVWc1pXMWxiblFpTENKemJHbGtaWE1pTENKemFHRmtiM2RTYjI5MElpd2ljR0Z5Wlc1MFRtOWtaU0lzSW1kbGRGTnNhV1JsU1c1a1pYZ2lMQ0ptYjNKRllXTm9JaXdpWld4bGJXVnVkRlJ5WVc1emFYUnBiMjVGYm1RaUxDSmtaWE4wY205NVpXUWlMQ0poYm1sdFlYUnBibWNpTENKM2FXNWtiM2NpTENKRGRYTjBiMjFGZG1WdWRDSXNJbUoxWW1Kc1pYTWlMQ0pqWVc1alpXeGhZbXhsSWl3aWQzSmhjSEJsY2tWc0lpd2laR2x6Y0dGMFkyaEZkbVZ1ZENKZExDSnpiM1Z5WTJWeklqcGJJakFpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGRlFTeFRRVUZUUVN3eVFrRkJNa0pETEVOQlFVRTdSVUZEYkVNN1NVRkJTVU1zVFVGQlFTeEZRVU5HUXl4RFFVRkJPMGxCUVUxRExGRkJRVUVzUlVGRFRrTXNRMEZCUVR0SlFVRlJReXhwUWtGQlFTeEZRVU5TUXl4RFFVRkJPMGxCUVdsQ1F5eFRRVUZCTEVWQlEycENRenRGUVVGQkxFbEJRMFZTTEVOQlFVRTdSVUZEU2p0SlFVRk5VeXhYUVVGQkxFVkJRMHBETzBWQlFVRXNTVUZEUlZJc1EwRkJRVHRGUVZOS0xFbEJRVWxCTEVOQlFVRXNRMEZCVDFNc1RVRkJRU3hEUVVGUFF5eG5Ra0ZCUVN4SlFVRnBReXhOUVVGaVVpeERRVUZCTEVWQlFXZENPMGxCUTNCRUxFbEJRMGxLTEVOQlFVRTdUVUZFUVVrc1EwRkJRU3hKUVVGcFFqdEpRVWR1UWtvc1EwRkJRU3hIUVVSRlVTeERRVUZCTEVkQlEyOUNSaXhEUVVGQkxFZEJSVUZCTEVOQlFVRXNRMEZCYTBKUExFMUJRVUVzUTBGQlQySXNRMEZCUVR0TlFVTTNReXhOUVVGTlNTeERRVUZCTEVkQlFVdEtMRU5CUVVFc1EwRkJXV01zVTBGQlFTeERRVUZWUXl4UlFVRkJMRU5CUVZNc05FSkJaaTlDTEVOQlFVRm1MRU5CUVVFN1VVRkRaaXhMUVVGTFFTeERRVUZCTEVOQlFVZG5RaXhoUVVGQkxFVkJSMDRzVDBGRVkyUXNRMEZCUVN4RFFVRlBaU3hOUVVGQkxFTkJRVTlLTEUxQlFVRXNRMEZCVDFnc1EwRkJRU3hKUVVGWFFTeERRVUZCTEVOQlFWRm5RaXhWUVVGQkxFbEJRV05vUWl4RFFVRkJMRU5CUVZGblFpeFZRVUZCTEV0QlFXVnNRaXhEUVVGQkxFTkJRVWR0UWl4VlFVRkJMRVZCUVZrN1VVRkhOVWNzVDBGQlQyNUNMRU5CUVVFc1EwRkJSMmRDTEdGQlFXRTdUVUZCUVN4SFFWTTBSR2hDTEVOQlFVRXNTVUZCWlVFc1EwRkJRVHROUVVNNVJpeFBRVUZQUlN4RFFVRkJMRU5CUVU5clFpeGhRVUZCTEVOQlFXTm9RaXhEUVVGQkxFMUJRVkZOTEVOQlFWYzdTVUZCUVN4SlFVZHVSRllzUTBGQlFTeERRVUZ2UW5GQ0xFOUJRVUVzUTBGQlVYSkNMRU5CUVVFN1RVRkRNVUlzU1VGQlFYTkNMRmRCUVVFc1JVRkJjVUowUWl4RFFVRkJMRVZCUVVrN1VVRkRka0lzU1VGQlNVa3NRMEZCUVN4RlFVRm5RanRSUVVOd1FpeExRVUZMUml4RFFVRkJMRWxCUVZWQkxFTkJRVUVzUTBGQlQzRkNMRk5CUVVFc1JVRkJWenRSUVVOcVEyNUNMRU5CUVVFc1NVRkJhVUlzUjBGRGFrSkdMRU5CUVVFc1EwRkJUM05DTEZOQlFVRXNTVUZCV1R0UlFVTnVRaXhOUVVGTmVFSXNRMEZCUVN4SFFVRk5MRWxCUVVsNVFpeE5RVUZCTEVOQlFVOURMRmRCUVVFc1EwRkJXU3hwUWtGQmFVSTdWVUZEYkVSRExFOUJRVUVzUjBGQlV6dFZRVU5VUXl4VlFVRkJMRWRCUVZrN1VVRkJRVHRSUVVWa01VSXNRMEZCUVN4RFFVRlBNa0lzVTBGQlFTeERRVUZWUXl4aFFVRkJMRU5CUVdNNVFpeERRVUZCTEVOQlFVazdUVUZCUVN4RlFVTnVRenRKUVVGQkxFVkJSVTQ3UlVGQlFUdEJRVU5HSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hID0gZ2V0V2luZG93O1xuZXhwb3J0cy5nID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBpc09iamVjdChlKSB7XG4gIHJldHVybiBudWxsICE9PSBlICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgXCJjb25zdHJ1Y3RvclwiIGluIGUgJiYgZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gZXh0ZW5kKGUsIHQpIHtcbiAgdm9pZCAwID09PSBlICYmIChlID0ge30pLCB2b2lkIDAgPT09IHQgJiYgKHQgPSB7fSksIE9iamVjdC5rZXlzKHQpLmZvckVhY2gobiA9PiB7XG4gICAgdm9pZCAwID09PSBlW25dID8gZVtuXSA9IHRbbl0gOiBpc09iamVjdCh0W25dKSAmJiBpc09iamVjdChlW25dKSAmJiBPYmplY3Qua2V5cyh0W25dKS5sZW5ndGggPiAwICYmIGV4dGVuZChlW25dLCB0W25dKTtcbiAgfSk7XG59XG5jb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgYm9keToge30sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBhY3RpdmVFbGVtZW50OiB7XG4gICAgYmx1cigpIHt9LFxuICAgIG5vZGVOYW1lOiBcIlwiXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3I6ICgpID0+IG51bGwsXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6ICgpID0+IFtdLFxuICBnZXRFbGVtZW50QnlJZDogKCkgPT4gbnVsbCxcbiAgY3JlYXRlRXZlbnQ6ICgpID0+ICh7XG4gICAgaW5pdEV2ZW50KCkge31cbiAgfSksXG4gIGNyZWF0ZUVsZW1lbnQ6ICgpID0+ICh7XG4gICAgY2hpbGRyZW46IFtdLFxuICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgIHN0eWxlOiB7fSxcbiAgICBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogKCkgPT4gW11cbiAgfSksXG4gIGNyZWF0ZUVsZW1lbnROUzogKCkgPT4gKHt9KSxcbiAgaW1wb3J0Tm9kZTogKCkgPT4gbnVsbCxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiBcIlwiLFxuICAgIGhvc3Q6IFwiXCIsXG4gICAgaG9zdG5hbWU6IFwiXCIsXG4gICAgaHJlZjogXCJcIixcbiAgICBvcmlnaW46IFwiXCIsXG4gICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgcHJvdG9jb2w6IFwiXCIsXG4gICAgc2VhcmNoOiBcIlwiXG4gIH1cbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgY29uc3QgZSA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ID8gZG9jdW1lbnQgOiB7fTtcbiAgcmV0dXJuIGV4dGVuZChlLCBzc3JEb2N1bWVudCksIGU7XG59XG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcbiAgbmF2aWdhdG9yOiB7XG4gICAgdXNlckFnZW50OiBcIlwiXG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogXCJcIixcbiAgICBob3N0OiBcIlwiLFxuICAgIGhvc3RuYW1lOiBcIlwiLFxuICAgIGhyZWY6IFwiXCIsXG4gICAgb3JpZ2luOiBcIlwiLFxuICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgIHByb3RvY29sOiBcIlwiLFxuICAgIHNlYXJjaDogXCJcIlxuICB9LFxuICBoaXN0b3J5OiB7XG4gICAgcmVwbGFjZVN0YXRlKCkge30sXG4gICAgcHVzaFN0YXRlKCkge30sXG4gICAgZ28oKSB7fSxcbiAgICBiYWNrKCkge31cbiAgfSxcbiAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGdldENvbXB1dGVkU3R5bGU6ICgpID0+ICh7XG4gICAgZ2V0UHJvcGVydHlWYWx1ZTogKCkgPT4gXCJcIlxuICB9KSxcbiAgSW1hZ2UoKSB7fSxcbiAgRGF0ZSgpIHt9LFxuICBzY3JlZW46IHt9LFxuICBzZXRUaW1lb3V0KCkge30sXG4gIGNsZWFyVGltZW91dCgpIHt9LFxuICBtYXRjaE1lZGlhOiAoKSA9PiAoe30pLFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGUgPT4gXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2Ygc2V0VGltZW91dCA/IChlKCksIG51bGwpIDogc2V0VGltZW91dChlLCAwKSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZSkge1xuICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHNldFRpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KGUpO1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICBjb25zdCBlID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge307XG4gIHJldHVybiBleHRlbmQoZSwgc3NyV2luZG93KSwgZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKcGMwOWlhbVZqZENJc0ltVWlMQ0pqYjI1emRISjFZM1J2Y2lJc0lrOWlhbVZqZENJc0ltVjRkR1Z1WkNJc0luUWlMQ0pyWlhseklpd2labTl5UldGamFDSXNJbTRpTENKc1pXNW5kR2dpTENKemMzSkViMk4xYldWdWRDSXNJbUp2WkhraUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUlzSW1GamRHbDJaVVZzWlcxbGJuUWlMQ0ppYkhWeUlpd2libTlrWlU1aGJXVWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eUlpd2ljWFZsY25sVFpXeGxZM1J2Y2tGc2JDSXNJbWRsZEVWc1pXMWxiblJDZVVsa0lpd2lZM0psWVhSbFJYWmxiblFpTENKcGJtbDBSWFpsYm5RaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVkyaHBiR1J5Wlc0aUxDSmphR2xzWkU1dlpHVnpJaXdpYzNSNWJHVWlMQ0p6WlhSQmRIUnlhV0oxZEdVaUxDSm5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU0lzSW1OeVpXRjBaVVZzWlcxbGJuUk9VeUlzSW1sdGNHOXlkRTV2WkdVaUxDSnNiMk5oZEdsdmJpSXNJbWhoYzJnaUxDSm9iM04wSWl3aWFHOXpkRzVoYldVaUxDSm9jbVZtSWl3aWIzSnBaMmx1SWl3aWNHRjBhRzVoYldVaUxDSndjbTkwYjJOdmJDSXNJbk5sWVhKamFDSXNJbWRsZEVSdlkzVnRaVzUwSWl3aVpHOWpkVzFsYm5RaUxDSnpjM0pYYVc1a2IzY2lMQ0p1WVhacFoyRjBiM0lpTENKMWMyVnlRV2RsYm5RaUxDSm9hWE4wYjNKNUlpd2ljbVZ3YkdGalpWTjBZWFJsSWl3aWNIVnphRk4wWVhSbElpd2laMjhpTENKaVlXTnJJaXdpUTNWemRHOXRSWFpsYm5RaUxDSm5aWFJEYjIxd2RYUmxaRk4wZVd4bElpd2laMlYwVUhKdmNHVnlkSGxXWVd4MVpTSXNJa2x0WVdkbElpd2lSR0YwWlNJc0luTmpjbVZsYmlJc0luTmxkRlJwYldWdmRYUWlMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSnRZWFJqYUUxbFpHbGhJaXdpY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElpd2lZMkZ1WTJWc1FXNXBiV0YwYVc5dVJuSmhiV1VpTENKblpYUlhhVzVrYjNjaUxDSjNhVzVrYjNjaVhTd2ljMjkxY21ObGN5STZXeUl3SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQldVRXNVMEZCVTBFc1UwRkJVME1zUTBGQlFUdEZRVU5vUWl4UFFVRmxMRk5CUVZKQkxFTkJRVUVzU1VGQkswSXNiVUpCUVZKQkxFTkJRVUVzU1VGQmIwSXNhVUpCUVdsQ1FTeERRVUZCTEVsQlFVOUJMRU5CUVVFc1EwRkJTVU1zVjBGQlFTeExRVUZuUWtNc1RVRkRhRWM3UVVGQlFUdEJRVU5CTEZOQlFWTkRMRTlCUVU5SUxFTkJRVUVzUlVGQlVVa3NRMEZCUVR0RlFVRkJMRXRCUTFBc1RVRkJXRW9zUTBGQlFTeExRVU5HUVN4RFFVRkJMRWRCUVZNc1EwRkJReXhUUVVWQkxFMUJRVkpKTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hIUVVGTkxFTkJRVU1zU1VGRlZFWXNUVUZCUVN4RFFVRlBSeXhKUVVGQkxFTkJRVXRFTEVOQlFVRXNSVUZCUzBVc1QwRkJRU3hEUVVGUlF5eERRVUZCTzBsQlFVRXNTMEZEU1N4TlFVRm9RbEFzUTBGQlFTeERRVUZQVHl4RFFVRkJMRWxCUVhOQ1VDeERRVUZCTEVOQlFVOVBMRU5CUVVFc1NVRkJUMGdzUTBGQlFTeERRVUZKUnl4RFFVRkJMRWxCUVdOU0xGRkJRVUVzUTBGQlUwc3NRMEZCUVN4RFFVRkpSeXhEUVVGQkxFMUJRVk5TTEZGQlFVRXNRMEZCVTBNc1EwRkJRU3hEUVVGUFR5eERRVUZCTEUxQlFWTk1MRTFCUVVFc1EwRkJUMGNzU1VGQlFTeERRVUZMUkN4RFFVRkJMRU5CUVVsSExFTkJRVUVzUjBGQlRVTXNUVUZCUVN4SFFVRlRMRXRCUTNCS1RDeE5RVUZCTEVOQlFVOUlMRU5CUVVFc1EwRkJUMDhzUTBGQlFTeEhRVUZOU0N4RFFVRkJMRU5CUVVsSExFTkJRVUVzUlVGRE1VSTdSVUZCUVN4RlFVVktPMEZCUVVFN1FVRkRRU3hOUVVGTlJTeFhRVUZCTEVkQlFXTTdSVUZEYkVKRExFbEJRVUVzUlVGQlRTeERRVUZETzBWQlExQkRMR2xDUVVGQkxFZEJRVzlDTzBWQlEzQkNReXh2UWtGQlFTeEhRVUYxUWp0RlFVTjJRa01zWVVGQlFTeEZRVUZsTzBsQlEySkRMRXRCUVVFc1IwRkJVVHRKUVVOU1F5eFJRVUZCTEVWQlFWVTdSVUZCUVR0RlFVVmFReXhoUVVGQkxFVkJRV0ZCTEVOQlFVRXNTMEZEU2p0RlFVVlVReXhuUWtGQlFTeEZRVUZuUWtFc1EwRkJRU3hMUVVOUU8wVkJSVlJETEdOQlFVRXNSVUZCWTBFc1EwRkJRU3hMUVVOTU8wVkJSVlJETEZkQlFVRXNSVUZCVjBFc1EwRkJRU3hOUVVOR08wbEJRMHhETEZWQlFVRXNSMEZCWVR0RlFVRkJPMFZCUjJwQ1F5eGhRVUZCTEVWQlFXRkJMRU5CUVVFc1RVRkRTanRKUVVOTVF5eFJRVUZCTEVWQlFWVTdTVUZEVmtNc1ZVRkJRU3hGUVVGWk8wbEJRMXBETEV0QlFVRXNSVUZCVHl4RFFVRkRPMGxCUTFKRExHRkJRVUVzUjBGQlowSTdTVUZEYUVKRExHOUNRVUZCTEVWQlFXOUNRU3hEUVVGQkxFdEJRMWc3UlVGQlFUdEZRVWxpUXl4bFFVRkJMRVZCUVdWQkxFTkJRVUVzVFVGRFRpeERRVUZETzBWQlJWWkRMRlZCUVVFc1JVRkJWVUVzUTBGQlFTeExRVU5FTzBWQlJWUkRMRkZCUVVFc1JVRkJWVHRKUVVOU1F5eEpRVUZCTEVWQlFVMDdTVUZEVGtNc1NVRkJRU3hGUVVGTk8wbEJRMDVETEZGQlFVRXNSVUZCVlR0SlFVTldReXhKUVVGQkxFVkJRVTA3U1VGRFRrTXNUVUZCUVN4RlFVRlJPMGxCUTFKRExGRkJRVUVzUlVGQlZUdEpRVU5XUXl4UlFVRkJMRVZCUVZVN1NVRkRWa01zVFVGQlFTeEZRVUZSTzBWQlFVRTdRVUZCUVR0QlFVZGFMRk5CUVZORExGbEJRVUU3UlVGRFVDeE5RVUZOZEVNc1EwRkJRU3hIUVVFd1FpeHpRa0ZCWW5WRExGRkJRVUVzUjBGQk1rSkJMRkZCUVVFc1IwRkJWeXhEUVVGRE8wVkJSVEZFTEU5QlJFRndReXhOUVVGQkxFTkJRVTlJTEVOQlFVRXNSVUZCUzFNc1YwRkJRU3hIUVVOTVZDeERRVU5VTzBGQlFVRTdRVUZEUVN4TlFVRk5kME1zVTBGQlFTeEhRVUZaTzBWQlEyaENSQ3hSUVVGQkxFVkJRVlU1UWl4WFFVRkJPMFZCUTFablF5eFRRVUZCTEVWQlFWYzdTVUZEVkVNc1UwRkJRU3hGUVVGWE8wVkJRVUU3UlVGRlltSXNVVUZCUVN4RlFVRlZPMGxCUTFKRExFbEJRVUVzUlVGQlRUdEpRVU5PUXl4SlFVRkJMRVZCUVUwN1NVRkRUa01zVVVGQlFTeEZRVUZWTzBsQlExWkRMRWxCUVVFc1JVRkJUVHRKUVVOT1F5eE5RVUZCTEVWQlFWRTdTVUZEVWtNc1VVRkJRU3hGUVVGVk8wbEJRMVpETEZGQlFVRXNSVUZCVlR0SlFVTldReXhOUVVGQkxFVkJRVkU3UlVGQlFUdEZRVVZXVFN4UFFVRkJMRVZCUVZNN1NVRkRVRU1zWVVGQlFTeEhRVUZuUWp0SlFVTm9Ra01zVlVGQlFTeEhRVUZoTzBsQlEySkRMRWRCUVVFc1IwRkJUVHRKUVVOT1F5eExRVUZCTEVkQlFWRTdSVUZCUVR0RlFVVldReXhYUVVGQkxFVkJRV0VzVTBGQlFVRXNRMEZCUVR0SlFVTllMRTlCUVU4c1NVRkRWRHRGUVVGQk8wVkJRMEZ5UXl4cFFrRkJRU3hIUVVGdlFqdEZRVU53UWtNc2IwSkJRVUVzUjBGQmRVSTdSVUZEZGtKeFF5eG5Ra0ZCUVN4RlFVRm5Ra0VzUTBGQlFTeE5RVU5RTzBsQlEweERMR2RDUVVGQkxFVkJRV2RDUVN4RFFVRkJMRXRCUTFBN1JVRkJRVHRGUVVsaVF5eE5RVUZCTEVkQlFWTTdSVUZEVkVNc1MwRkJRU3hIUVVGUk8wVkJRMUpETEUxQlFVRXNSVUZCVVN4RFFVRkRPMFZCUTFSRExGZEJRVUVzUjBGQll6dEZRVU5rUXl4aFFVRkJMRWRCUVdkQ08wVkJRMmhDUXl4VlFVRkJMRVZCUVZWQkxFTkJRVUVzVFVGRFJDeERRVUZETzBWQlJWWkRMSEZDUVVGQkxFVkJRWE5DZWtRc1EwRkJRU3hKUVVOTkxITkNRVUZtYzBRc1ZVRkJRU3hKUVVOVWRFUXNRMEZCUVN4SlFVTlBMRkZCUlVaelJDeFZRVUZCTEVOQlFWZDBSQ3hEUVVGQkxFVkJRVlU3UlVGRk9VSXdSQ3h4UWtGQmNVSXhSQ3hEUVVGQk8wbEJRMDhzYzBKQlFXWnpSQ3hWUVVGQkxFbEJSMWhETEZsQlFVRXNRMEZCWVhaRUxFTkJRVUVzUTBGRFpqdEZRVUZCTzBGQlFVRTdRVUZGUml4VFFVRlRNa1FzVlVGQlFUdEZRVU5RTEUxQlFVMHpSQ3hEUVVGQkxFZEJRWGRDTEhOQ1FVRllORVFzVFVGQlFTeEhRVUY1UWtFc1RVRkJRU3hIUVVGVExFTkJRVU03UlVGRmRFUXNUMEZFUVhwRUxFMUJRVUVzUTBGQlQwZ3NRMEZCUVN4RlFVRkxkME1zVTBGQlFTeEhRVU5NZUVNc1EwRkRWRHRCUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZCA9IGV4cG9ydHMuUyA9IHZvaWQgMDtcbnZhciBfc3NyV2luZG93RXNtTWluID0gcmVxdWlyZShcIi4vc3NyLXdpbmRvdy5lc20ubWluLm1qc1wiKTtcbnZhciBfdXRpbHNNaW4gPSByZXF1aXJlKFwiLi91dGlscy5taW4ubWpzXCIpO1xubGV0IHN1cHBvcnQsIGRldmljZUNhY2hlZCwgYnJvd3NlcjtcbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICBjb25zdCBlID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKSxcbiAgICB0ID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uZykoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IHQuZG9jdW1lbnRFbGVtZW50ICYmIHQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIFwic2Nyb2xsQmVoYXZpb3JcIiBpbiB0LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICB0b3VjaDogISEoXCJvbnRvdWNoc3RhcnRcIiBpbiBlIHx8IGUuRG9jdW1lbnRUb3VjaCAmJiB0IGluc3RhbmNlb2YgZS5Eb2N1bWVudFRvdWNoKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgcmV0dXJuIHN1cHBvcnQgfHwgKHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpKSwgc3VwcG9ydDtcbn1cbmZ1bmN0aW9uIGNhbGNEZXZpY2UoZSkge1xuICBsZXQge1xuICAgIHVzZXJBZ2VudDogdFxuICB9ID0gdm9pZCAwID09PSBlID8ge30gOiBlO1xuICBjb25zdCBzID0gZ2V0U3VwcG9ydCgpLFxuICAgIGkgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpLFxuICAgIHIgPSBpLm5hdmlnYXRvci5wbGF0Zm9ybSxcbiAgICBhID0gdCB8fCBpLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgbiA9IHtcbiAgICAgIGlvczogITEsXG4gICAgICBhbmRyb2lkOiAhMVxuICAgIH0sXG4gICAgbCA9IGkuc2NyZWVuLndpZHRoLFxuICAgIG8gPSBpLnNjcmVlbi5oZWlnaHQsXG4gICAgZCA9IGEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pO1xuICBsZXQgYyA9IGEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgcCA9IGEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKSxcbiAgICB1ID0gIWMgJiYgYS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKSxcbiAgICBoID0gXCJXaW4zMlwiID09PSByO1xuICBsZXQgbSA9IFwiTWFjSW50ZWxcIiA9PT0gcjtcbiAgcmV0dXJuICFjICYmIG0gJiYgcy50b3VjaCAmJiBbXCIxMDI0eDEzNjZcIiwgXCIxMzY2eDEwMjRcIiwgXCI4MzR4MTE5NFwiLCBcIjExOTR4ODM0XCIsIFwiODM0eDExMTJcIiwgXCIxMTEyeDgzNFwiLCBcIjc2OHgxMDI0XCIsIFwiMTAyNHg3NjhcIiwgXCI4MjB4MTE4MFwiLCBcIjExODB4ODIwXCIsIFwiODEweDEwODBcIiwgXCIxMDgweDgxMFwiXS5pbmRleE9mKGAke2x9eCR7b31gKSA+PSAwICYmIChjID0gYS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyksIGMgfHwgKGMgPSBbMCwgMSwgXCIxM18wXzBcIl0pLCBtID0gITEpLCBkICYmICFoICYmIChuLm9zID0gXCJhbmRyb2lkXCIsIG4uYW5kcm9pZCA9ICEwKSwgKGMgfHwgdSB8fCBwKSAmJiAobi5vcyA9IFwiaW9zXCIsIG4uaW9zID0gITApLCBuO1xufVxuZnVuY3Rpb24gZ2V0RGV2aWNlKGUpIHtcbiAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHt9KSwgZGV2aWNlQ2FjaGVkIHx8IChkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKGUpKSwgZGV2aWNlQ2FjaGVkO1xufVxuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIGNvbnN0IGUgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpO1xuICBsZXQgdCA9ICExO1xuICBmdW5jdGlvbiBzKCkge1xuICAgIGNvbnN0IHQgPSBlLm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdC5pbmRleE9mKFwic2FmYXJpXCIpID49IDAgJiYgdC5pbmRleE9mKFwiY2hyb21lXCIpIDwgMCAmJiB0LmluZGV4T2YoXCJhbmRyb2lkXCIpIDwgMDtcbiAgfVxuICBpZiAocygpKSB7XG4gICAgY29uc3QgcyA9IFN0cmluZyhlLm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmIChzLmluY2x1ZGVzKFwiVmVyc2lvbi9cIikpIHtcbiAgICAgIGNvbnN0IFtlLCBpXSA9IHMuc3BsaXQoXCJWZXJzaW9uL1wiKVsxXS5zcGxpdChcIiBcIilbMF0uc3BsaXQoXCIuXCIpLm1hcChlID0+IE51bWJlcihlKSk7XG4gICAgICB0ID0gZSA8IDE2IHx8IDE2ID09PSBlICYmIGkgPCAyO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGlzU2FmYXJpOiB0IHx8IHMoKSxcbiAgICBuZWVkUGVyc3BlY3RpdmVGaXg6IHQsXG4gICAgaXNXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3QoZS5uYXZpZ2F0b3IudXNlckFnZW50KVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgcmV0dXJuIGJyb3dzZXIgfHwgKGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpKSwgYnJvd3Nlcjtcbn1cbmZ1bmN0aW9uIFJlc2l6ZShlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiB0LFxuICAgIG9uOiBzLFxuICAgIGVtaXQ6IGlcbiAgfSA9IGU7XG4gIGNvbnN0IHIgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpO1xuICBsZXQgYSA9IG51bGwsXG4gICAgbiA9IG51bGw7XG4gIGNvbnN0IGwgPSAoKSA9PiB7XG4gICAgICB0ICYmICF0LmRlc3Ryb3llZCAmJiB0LmluaXRpYWxpemVkICYmIChpKFwiYmVmb3JlUmVzaXplXCIpLCBpKFwicmVzaXplXCIpKTtcbiAgICB9LFxuICAgIG8gPSAoKSA9PiB7XG4gICAgICB0ICYmICF0LmRlc3Ryb3llZCAmJiB0LmluaXRpYWxpemVkICYmIGkoXCJvcmllbnRhdGlvbmNoYW5nZVwiKTtcbiAgICB9O1xuICBzKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgdC5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdm9pZCAwICE9PSByLlJlc2l6ZU9ic2VydmVyID8gdCAmJiAhdC5kZXN0cm95ZWQgJiYgdC5pbml0aWFsaXplZCAmJiAoYSA9IG5ldyBSZXNpemVPYnNlcnZlcihlID0+IHtcbiAgICAgIG4gPSByLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB3aWR0aDogcyxcbiAgICAgICAgICBoZWlnaHQ6IGlcbiAgICAgICAgfSA9IHQ7XG4gICAgICAgIGxldCByID0gcyxcbiAgICAgICAgICBhID0gaTtcbiAgICAgICAgZS5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBjb250ZW50Qm94U2l6ZTogcyxcbiAgICAgICAgICAgIGNvbnRlbnRSZWN0OiBpLFxuICAgICAgICAgICAgdGFyZ2V0OiBuXG4gICAgICAgICAgfSA9IGU7XG4gICAgICAgICAgbiAmJiBuICE9PSB0LmVsIHx8IChyID0gaSA/IGkud2lkdGggOiAoc1swXSB8fCBzKS5pbmxpbmVTaXplLCBhID0gaSA/IGkuaGVpZ2h0IDogKHNbMF0gfHwgcykuYmxvY2tTaXplKTtcbiAgICAgICAgfSksIHIgPT09IHMgJiYgYSA9PT0gaSB8fCBsKCk7XG4gICAgICB9KTtcbiAgICB9KSwgYS5vYnNlcnZlKHQuZWwpKSA6IChyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbCksIHIuYWRkRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsIG8pKTtcbiAgfSksIHMoXCJkZXN0cm95XCIsICgpID0+IHtcbiAgICBuICYmIHIuY2FuY2VsQW5pbWF0aW9uRnJhbWUobiksIGEgJiYgYS51bm9ic2VydmUgJiYgdC5lbCAmJiAoYS51bm9ic2VydmUodC5lbCksIGEgPSBudWxsKSwgci5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGwpLCByLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvcmllbnRhdGlvbmNoYW5nZVwiLCBvKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBPYnNlcnZlcihlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiB0LFxuICAgIGV4dGVuZFBhcmFtczogcyxcbiAgICBvbjogaSxcbiAgICBlbWl0OiByXG4gIH0gPSBlO1xuICBjb25zdCBhID0gW10sXG4gICAgbiA9ICgwLCBfc3NyV2luZG93RXNtTWluLmEpKCksXG4gICAgbCA9IGZ1bmN0aW9uIChlLCBzKSB7XG4gICAgICB2b2lkIDAgPT09IHMgJiYgKHMgPSB7fSk7XG4gICAgICBjb25zdCBpID0gbmV3IChuLk11dGF0aW9uT2JzZXJ2ZXIgfHwgbi5XZWJraXRNdXRhdGlvbk9ic2VydmVyKShlID0+IHtcbiAgICAgICAgaWYgKHQuX19wcmV2ZW50T2JzZXJ2ZXJfXykgcmV0dXJuO1xuICAgICAgICBpZiAoMSA9PT0gZS5sZW5ndGgpIHJldHVybiB2b2lkIHIoXCJvYnNlcnZlclVwZGF0ZVwiLCBlWzBdKTtcbiAgICAgICAgY29uc3QgcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByKFwib2JzZXJ2ZXJVcGRhdGVcIiwgZVswXSk7XG4gICAgICAgIH07XG4gICAgICAgIG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocykgOiBuLnNldFRpbWVvdXQocywgMCk7XG4gICAgICB9KTtcbiAgICAgIGkub2JzZXJ2ZShlLCB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHZvaWQgMCA9PT0gcy5hdHRyaWJ1dGVzIHx8IHMuYXR0cmlidXRlcyxcbiAgICAgICAgY2hpbGRMaXN0OiB2b2lkIDAgPT09IHMuY2hpbGRMaXN0IHx8IHMuY2hpbGRMaXN0LFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiB2b2lkIDAgPT09IHMuY2hhcmFjdGVyRGF0YSB8fCBzLmNoYXJhY3RlckRhdGFcbiAgICAgIH0pLCBhLnB1c2goaSk7XG4gICAgfTtcbiAgcyh7XG4gICAgb2JzZXJ2ZXI6ICExLFxuICAgIG9ic2VydmVQYXJlbnRzOiAhMSxcbiAgICBvYnNlcnZlU2xpZGVDaGlsZHJlbjogITFcbiAgfSksIGkoXCJpbml0XCIsICgpID0+IHtcbiAgICBpZiAodC5wYXJhbXMub2JzZXJ2ZXIpIHtcbiAgICAgIGlmICh0LnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgICBjb25zdCBlID0gKDAsIF91dGlsc01pbi5hKSh0Lmhvc3RFbCk7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQgKz0gMSkgbChlW3RdKTtcbiAgICAgIH1cbiAgICAgIGwodC5ob3N0RWwsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0LnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlblxuICAgICAgfSksIGwodC53cmFwcGVyRWwsIHtcbiAgICAgICAgYXR0cmlidXRlczogITFcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIGkoXCJkZXN0cm95XCIsICgpID0+IHtcbiAgICBhLmZvckVhY2goZSA9PiB7XG4gICAgICBlLmRpc2Nvbm5lY3QoKTtcbiAgICB9KSwgYS5zcGxpY2UoMCwgYS5sZW5ndGgpO1xuICB9KTtcbn1cbnZhciBldmVudHNFbWl0dGVyID0ge1xuICBvbihlLCB0LCBzKSB7XG4gICAgY29uc3QgaSA9IHRoaXM7XG4gICAgaWYgKCFpLmV2ZW50c0xpc3RlbmVycyB8fCBpLmRlc3Ryb3llZCkgcmV0dXJuIGk7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgcmV0dXJuIGk7XG4gICAgY29uc3QgciA9IHMgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiO1xuICAgIHJldHVybiBlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgaS5ldmVudHNMaXN0ZW5lcnNbZV0gfHwgKGkuZXZlbnRzTGlzdGVuZXJzW2VdID0gW10pLCBpLmV2ZW50c0xpc3RlbmVyc1tlXVtyXSh0KTtcbiAgICB9KSwgaTtcbiAgfSxcbiAgb25jZShlLCB0LCBzKSB7XG4gICAgY29uc3QgaSA9IHRoaXM7XG4gICAgaWYgKCFpLmV2ZW50c0xpc3RlbmVycyB8fCBpLmRlc3Ryb3llZCkgcmV0dXJuIGk7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgcmV0dXJuIGk7XG4gICAgZnVuY3Rpb24gcigpIHtcbiAgICAgIGkub2ZmKGUsIHIpLCByLl9fZW1pdHRlclByb3h5ICYmIGRlbGV0ZSByLl9fZW1pdHRlclByb3h5O1xuICAgICAgZm9yICh2YXIgcyA9IGFyZ3VtZW50cy5sZW5ndGgsIGEgPSBuZXcgQXJyYXkocyksIG4gPSAwOyBuIDwgczsgbisrKSBhW25dID0gYXJndW1lbnRzW25dO1xuICAgICAgdC5hcHBseShpLCBhKTtcbiAgICB9XG4gICAgcmV0dXJuIHIuX19lbWl0dGVyUHJveHkgPSB0LCBpLm9uKGUsIHIsIHMpO1xuICB9LFxuICBvbkFueShlLCB0KSB7XG4gICAgY29uc3QgcyA9IHRoaXM7XG4gICAgaWYgKCFzLmV2ZW50c0xpc3RlbmVycyB8fCBzLmRlc3Ryb3llZCkgcmV0dXJuIHM7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHM7XG4gICAgY29uc3QgaSA9IHQgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiO1xuICAgIHJldHVybiBzLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGUpIDwgMCAmJiBzLmV2ZW50c0FueUxpc3RlbmVyc1tpXShlKSwgcztcbiAgfSxcbiAgb2ZmQW55KGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcztcbiAgICBpZiAoIXQuZXZlbnRzTGlzdGVuZXJzIHx8IHQuZGVzdHJveWVkKSByZXR1cm4gdDtcbiAgICBpZiAoIXQuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gdDtcbiAgICBjb25zdCBzID0gdC5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihlKTtcbiAgICByZXR1cm4gcyA+PSAwICYmIHQuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShzLCAxKSwgdDtcbiAgfSxcbiAgb2ZmKGUsIHQpIHtcbiAgICBjb25zdCBzID0gdGhpcztcbiAgICByZXR1cm4gIXMuZXZlbnRzTGlzdGVuZXJzIHx8IHMuZGVzdHJveWVkID8gcyA6IHMuZXZlbnRzTGlzdGVuZXJzID8gKGUuc3BsaXQoXCIgXCIpLmZvckVhY2goZSA9PiB7XG4gICAgICB2b2lkIDAgPT09IHQgPyBzLmV2ZW50c0xpc3RlbmVyc1tlXSA9IFtdIDogcy5ldmVudHNMaXN0ZW5lcnNbZV0gJiYgcy5ldmVudHNMaXN0ZW5lcnNbZV0uZm9yRWFjaCgoaSwgcikgPT4ge1xuICAgICAgICAoaSA9PT0gdCB8fCBpLl9fZW1pdHRlclByb3h5ICYmIGkuX19lbWl0dGVyUHJveHkgPT09IHQpICYmIHMuZXZlbnRzTGlzdGVuZXJzW2VdLnNwbGljZShyLCAxKTtcbiAgICAgIH0pO1xuICAgIH0pLCBzKSA6IHM7XG4gIH0sXG4gIGVtaXQoKSB7XG4gICAgY29uc3QgZSA9IHRoaXM7XG4gICAgaWYgKCFlLmV2ZW50c0xpc3RlbmVycyB8fCBlLmRlc3Ryb3llZCkgcmV0dXJuIGU7XG4gICAgaWYgKCFlLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIGU7XG4gICAgbGV0IHQsIHMsIGk7XG4gICAgZm9yICh2YXIgciA9IGFyZ3VtZW50cy5sZW5ndGgsIGEgPSBuZXcgQXJyYXkociksIG4gPSAwOyBuIDwgcjsgbisrKSBhW25dID0gYXJndW1lbnRzW25dO1xuICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGFbMF0gfHwgQXJyYXkuaXNBcnJheShhWzBdKSA/ICh0ID0gYVswXSwgcyA9IGEuc2xpY2UoMSwgYS5sZW5ndGgpLCBpID0gZSkgOiAodCA9IGFbMF0uZXZlbnRzLCBzID0gYVswXS5kYXRhLCBpID0gYVswXS5jb250ZXh0IHx8IGUpLCBzLnVuc2hpZnQoaSk7XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHQpID8gdCA6IHQuc3BsaXQoXCIgXCIpKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgZS5ldmVudHNBbnlMaXN0ZW5lcnMgJiYgZS5ldmVudHNBbnlMaXN0ZW5lcnMubGVuZ3RoICYmIGUuZXZlbnRzQW55TGlzdGVuZXJzLmZvckVhY2goZSA9PiB7XG4gICAgICAgIGUuYXBwbHkoaSwgW3QsIC4uLnNdKTtcbiAgICAgIH0pLCBlLmV2ZW50c0xpc3RlbmVycyAmJiBlLmV2ZW50c0xpc3RlbmVyc1t0XSAmJiBlLmV2ZW50c0xpc3RlbmVyc1t0XS5mb3JFYWNoKGUgPT4ge1xuICAgICAgICBlLmFwcGx5KGksIHMpO1xuICAgICAgfSk7XG4gICAgfSksIGU7XG4gIH1cbn07XG5mdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICBjb25zdCBlID0gdGhpcztcbiAgbGV0IHQsIHM7XG4gIGNvbnN0IGkgPSBlLmVsO1xuICB0ID0gdm9pZCAwICE9PSBlLnBhcmFtcy53aWR0aCAmJiBudWxsICE9PSBlLnBhcmFtcy53aWR0aCA/IGUucGFyYW1zLndpZHRoIDogaS5jbGllbnRXaWR0aCwgcyA9IHZvaWQgMCAhPT0gZS5wYXJhbXMuaGVpZ2h0ICYmIG51bGwgIT09IGUucGFyYW1zLmhlaWdodCA/IGUucGFyYW1zLmhlaWdodCA6IGkuY2xpZW50SGVpZ2h0LCAwID09PSB0ICYmIGUuaXNIb3Jpem9udGFsKCkgfHwgMCA9PT0gcyAmJiBlLmlzVmVydGljYWwoKSB8fCAodCA9IHQgLSBwYXJzZUludCgoMCwgX3V0aWxzTWluLmwpKGksIFwicGFkZGluZy1sZWZ0XCIpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCgwLCBfdXRpbHNNaW4ubCkoaSwgXCJwYWRkaW5nLXJpZ2h0XCIpIHx8IDAsIDEwKSwgcyA9IHMgLSBwYXJzZUludCgoMCwgX3V0aWxzTWluLmwpKGksIFwicGFkZGluZy10b3BcIikgfHwgMCwgMTApIC0gcGFyc2VJbnQoKDAsIF91dGlsc01pbi5sKShpLCBcInBhZGRpbmctYm90dG9tXCIpIHx8IDAsIDEwKSwgTnVtYmVyLmlzTmFOKHQpICYmICh0ID0gMCksIE51bWJlci5pc05hTihzKSAmJiAocyA9IDApLCBPYmplY3QuYXNzaWduKGUsIHtcbiAgICB3aWR0aDogdCxcbiAgICBoZWlnaHQ6IHMsXG4gICAgc2l6ZTogZS5pc0hvcml6b250YWwoKSA/IHQgOiBzXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3QgZSA9IHRoaXM7XG4gIGZ1bmN0aW9uIHQodCkge1xuICAgIHJldHVybiBlLmlzSG9yaXpvbnRhbCgpID8gdCA6IHtcbiAgICAgIHdpZHRoOiBcImhlaWdodFwiLFxuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwibWFyZ2luLWxlZnRcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbSBcIjogXCJtYXJnaW4tcmlnaHRcIixcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJtYXJnaW4tdG9wXCIsXG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcIm1hcmdpbi1ib3R0b21cIixcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwicGFkZGluZy10b3BcIixcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInBhZGRpbmctYm90dG9tXCIsXG4gICAgICBtYXJnaW5SaWdodDogXCJtYXJnaW5Cb3R0b21cIlxuICAgIH1bdF07XG4gIH1cbiAgZnVuY3Rpb24gcyhlLCBzKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoZS5nZXRQcm9wZXJ0eVZhbHVlKHQocykpIHx8IDApO1xuICB9XG4gIGNvbnN0IGkgPSBlLnBhcmFtcyxcbiAgICB7XG4gICAgICB3cmFwcGVyRWw6IHIsXG4gICAgICBzbGlkZXNFbDogYSxcbiAgICAgIHNpemU6IG4sXG4gICAgICBydGxUcmFuc2xhdGU6IGwsXG4gICAgICB3cm9uZ1JUTDogb1xuICAgIH0gPSBlLFxuICAgIGQgPSBlLnZpcnR1YWwgJiYgaS52aXJ0dWFsLmVuYWJsZWQsXG4gICAgYyA9IGQgPyBlLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IGUuc2xpZGVzLmxlbmd0aCxcbiAgICBwID0gKDAsIF91dGlsc01pbi5lKShhLCBgLiR7ZS5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApLFxuICAgIHUgPSBkID8gZS52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBwLmxlbmd0aDtcbiAgbGV0IGggPSBbXTtcbiAgY29uc3QgbSA9IFtdLFxuICAgIGYgPSBbXTtcbiAgbGV0IHYgPSBpLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgXCJmdW5jdGlvblwiID09IHR5cGVvZiB2ICYmICh2ID0gaS5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChlKSk7XG4gIGxldCBnID0gaS5zbGlkZXNPZmZzZXRBZnRlcjtcbiAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBnICYmIChnID0gaS5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKGUpKTtcbiAgY29uc3QgdyA9IGUuc25hcEdyaWQubGVuZ3RoLFxuICAgIFMgPSBlLnNsaWRlc0dyaWQubGVuZ3RoO1xuICBsZXQgVCA9IGkuc3BhY2VCZXR3ZWVuLFxuICAgIGIgPSAtdixcbiAgICB4ID0gMCxcbiAgICBFID0gMDtcbiAgaWYgKHZvaWQgMCA9PT0gbikgcmV0dXJuO1xuICBcInN0cmluZ1wiID09IHR5cGVvZiBUICYmIFQuaW5kZXhPZihcIiVcIikgPj0gMCA/IFQgPSBwYXJzZUZsb2F0KFQucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwICogbiA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIFQgJiYgKFQgPSBwYXJzZUZsb2F0KFQpKSwgZS52aXJ0dWFsU2l6ZSA9IC1ULCBwLmZvckVhY2goZSA9PiB7XG4gICAgbCA/IGUuc3R5bGUubWFyZ2luTGVmdCA9IFwiXCIgOiBlLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCJcIiwgZS5zdHlsZS5tYXJnaW5Cb3R0b20gPSBcIlwiLCBlLnN0eWxlLm1hcmdpblRvcCA9IFwiXCI7XG4gIH0pLCBpLmNlbnRlcmVkU2xpZGVzICYmIGkuY3NzTW9kZSAmJiAoKDAsIF91dGlsc01pbi5zKShyLCBcIi0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmVcIiwgXCJcIiksICgwLCBfdXRpbHNNaW4ucykociwgXCItLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXJcIiwgXCJcIikpO1xuICBjb25zdCB5ID0gaS5ncmlkICYmIGkuZ3JpZC5yb3dzID4gMSAmJiBlLmdyaWQ7XG4gIGxldCBDO1xuICB5ICYmIGUuZ3JpZC5pbml0U2xpZGVzKHUpO1xuICBjb25zdCBNID0gXCJhdXRvXCIgPT09IGkuc2xpZGVzUGVyVmlldyAmJiBpLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGkuYnJlYWtwb2ludHMpLmZpbHRlcihlID0+IHZvaWQgMCAhPT0gaS5icmVha3BvaW50c1tlXS5zbGlkZXNQZXJWaWV3KS5sZW5ndGggPiAwO1xuICBmb3IgKGxldCByID0gMDsgciA8IHU7IHIgKz0gMSkge1xuICAgIGxldCBhO1xuICAgIGlmIChDID0gMCwgcFtyXSAmJiAoYSA9IHBbcl0pLCB5ICYmIGUuZ3JpZC51cGRhdGVTbGlkZShyLCBhLCB1LCB0KSwgIXBbcl0gfHwgXCJub25lXCIgIT09ICgwLCBfdXRpbHNNaW4ubCkoYSwgXCJkaXNwbGF5XCIpKSB7XG4gICAgICBpZiAoXCJhdXRvXCIgPT09IGkuc2xpZGVzUGVyVmlldykge1xuICAgICAgICBNICYmIChwW3JdLnN0eWxlW3QoXCJ3aWR0aFwiKV0gPSBcIlwiKTtcbiAgICAgICAgY29uc3QgbiA9IGdldENvbXB1dGVkU3R5bGUoYSksXG4gICAgICAgICAgbCA9IGEuc3R5bGUudHJhbnNmb3JtLFxuICAgICAgICAgIG8gPSBhLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgICAgaWYgKGwgJiYgKGEuc3R5bGUudHJhbnNmb3JtID0gXCJub25lXCIpLCBvICYmIChhLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IFwibm9uZVwiKSwgaS5yb3VuZExlbmd0aHMpIEMgPSBlLmlzSG9yaXpvbnRhbCgpID8gKDAsIF91dGlsc01pbi5mKShhLCBcIndpZHRoXCIsICEwKSA6ICgwLCBfdXRpbHNNaW4uZikoYSwgXCJoZWlnaHRcIiwgITApO2Vsc2Uge1xuICAgICAgICAgIGNvbnN0IGUgPSBzKG4sIFwid2lkdGhcIiksXG4gICAgICAgICAgICB0ID0gcyhuLCBcInBhZGRpbmctbGVmdFwiKSxcbiAgICAgICAgICAgIGkgPSBzKG4sIFwicGFkZGluZy1yaWdodFwiKSxcbiAgICAgICAgICAgIHIgPSBzKG4sIFwibWFyZ2luLWxlZnRcIiksXG4gICAgICAgICAgICBsID0gcyhuLCBcIm1hcmdpbi1yaWdodFwiKSxcbiAgICAgICAgICAgIG8gPSBuLmdldFByb3BlcnR5VmFsdWUoXCJib3gtc2l6aW5nXCIpO1xuICAgICAgICAgIGlmIChvICYmIFwiYm9yZGVyLWJveFwiID09PSBvKSBDID0gZSArIHIgKyBsO2Vsc2Uge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBjbGllbnRXaWR0aDogcyxcbiAgICAgICAgICAgICAgb2Zmc2V0V2lkdGg6IG5cbiAgICAgICAgICAgIH0gPSBhO1xuICAgICAgICAgICAgQyA9IGUgKyB0ICsgaSArIHIgKyBsICsgKG4gLSBzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbCAmJiAoYS5zdHlsZS50cmFuc2Zvcm0gPSBsKSwgbyAmJiAoYS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBvKSwgaS5yb3VuZExlbmd0aHMgJiYgKEMgPSBNYXRoLmZsb29yKEMpKTtcbiAgICAgIH0gZWxzZSBDID0gKG4gLSAoaS5zbGlkZXNQZXJWaWV3IC0gMSkgKiBUKSAvIGkuc2xpZGVzUGVyVmlldywgaS5yb3VuZExlbmd0aHMgJiYgKEMgPSBNYXRoLmZsb29yKEMpKSwgcFtyXSAmJiAocFtyXS5zdHlsZVt0KFwid2lkdGhcIildID0gYCR7Q31weGApO1xuICAgICAgcFtyXSAmJiAocFtyXS5zd2lwZXJTbGlkZVNpemUgPSBDKSwgZi5wdXNoKEMpLCBpLmNlbnRlcmVkU2xpZGVzID8gKGIgPSBiICsgQyAvIDIgKyB4IC8gMiArIFQsIDAgPT09IHggJiYgMCAhPT0gciAmJiAoYiA9IGIgLSBuIC8gMiAtIFQpLCAwID09PSByICYmIChiID0gYiAtIG4gLyAyIC0gVCksIE1hdGguYWJzKGIpIDwgLjAwMSAmJiAoYiA9IDApLCBpLnJvdW5kTGVuZ3RocyAmJiAoYiA9IE1hdGguZmxvb3IoYikpLCBFICUgaS5zbGlkZXNQZXJHcm91cCA9PSAwICYmIGgucHVzaChiKSwgbS5wdXNoKGIpKSA6IChpLnJvdW5kTGVuZ3RocyAmJiAoYiA9IE1hdGguZmxvb3IoYikpLCAoRSAtIE1hdGgubWluKGUucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgRSkpICUgZS5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT0gMCAmJiBoLnB1c2goYiksIG0ucHVzaChiKSwgYiA9IGIgKyBDICsgVCksIGUudmlydHVhbFNpemUgKz0gQyArIFQsIHggPSBDLCBFICs9IDE7XG4gICAgfVxuICB9XG4gIGlmIChlLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoZS52aXJ0dWFsU2l6ZSwgbikgKyBnLCBsICYmIG8gJiYgKFwic2xpZGVcIiA9PT0gaS5lZmZlY3QgfHwgXCJjb3ZlcmZsb3dcIiA9PT0gaS5lZmZlY3QpICYmIChyLnN0eWxlLndpZHRoID0gYCR7ZS52aXJ0dWFsU2l6ZSArIFR9cHhgKSwgaS5zZXRXcmFwcGVyU2l6ZSAmJiAoci5zdHlsZVt0KFwid2lkdGhcIildID0gYCR7ZS52aXJ0dWFsU2l6ZSArIFR9cHhgKSwgeSAmJiBlLmdyaWQudXBkYXRlV3JhcHBlclNpemUoQywgaCwgdCksICFpLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgY29uc3QgdCA9IFtdO1xuICAgIGZvciAobGV0IHMgPSAwOyBzIDwgaC5sZW5ndGg7IHMgKz0gMSkge1xuICAgICAgbGV0IHIgPSBoW3NdO1xuICAgICAgaS5yb3VuZExlbmd0aHMgJiYgKHIgPSBNYXRoLmZsb29yKHIpKSwgaFtzXSA8PSBlLnZpcnR1YWxTaXplIC0gbiAmJiB0LnB1c2gocik7XG4gICAgfVxuICAgIGggPSB0LCBNYXRoLmZsb29yKGUudmlydHVhbFNpemUgLSBuKSAtIE1hdGguZmxvb3IoaFtoLmxlbmd0aCAtIDFdKSA+IDEgJiYgaC5wdXNoKGUudmlydHVhbFNpemUgLSBuKTtcbiAgfVxuICBpZiAoZCAmJiBpLmxvb3ApIHtcbiAgICBjb25zdCB0ID0gZlswXSArIFQ7XG4gICAgaWYgKGkuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICBjb25zdCBzID0gTWF0aC5jZWlsKChlLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgZS52aXJ0dWFsLnNsaWRlc0FmdGVyKSAvIGkuc2xpZGVzUGVyR3JvdXApLFxuICAgICAgICByID0gdCAqIGkuc2xpZGVzUGVyR3JvdXA7XG4gICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHM7IGUgKz0gMSkgaC5wdXNoKGhbaC5sZW5ndGggLSAxXSArIHIpO1xuICAgIH1cbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IGUudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBlLnZpcnR1YWwuc2xpZGVzQWZ0ZXI7IHMgKz0gMSkgMSA9PT0gaS5zbGlkZXNQZXJHcm91cCAmJiBoLnB1c2goaFtoLmxlbmd0aCAtIDFdICsgdCksIG0ucHVzaChtW20ubGVuZ3RoIC0gMV0gKyB0KSwgZS52aXJ0dWFsU2l6ZSArPSB0O1xuICB9XG4gIGlmICgwID09PSBoLmxlbmd0aCAmJiAoaCA9IFswXSksIDAgIT09IFQpIHtcbiAgICBjb25zdCBzID0gZS5pc0hvcml6b250YWwoKSAmJiBsID8gXCJtYXJnaW5MZWZ0XCIgOiB0KFwibWFyZ2luUmlnaHRcIik7XG4gICAgcC5maWx0ZXIoKGUsIHQpID0+ICEoaS5jc3NNb2RlICYmICFpLmxvb3ApIHx8IHQgIT09IHAubGVuZ3RoIC0gMSkuZm9yRWFjaChlID0+IHtcbiAgICAgIGUuc3R5bGVbc10gPSBgJHtUfXB4YDtcbiAgICB9KTtcbiAgfVxuICBpZiAoaS5jZW50ZXJlZFNsaWRlcyAmJiBpLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGUgPSAwO1xuICAgIGYuZm9yRWFjaCh0ID0+IHtcbiAgICAgIGUgKz0gdCArIChUIHx8IDApO1xuICAgIH0pLCBlIC09IFQ7XG4gICAgY29uc3QgdCA9IGUgLSBuO1xuICAgIGggPSBoLm1hcChlID0+IGUgPD0gMCA/IC12IDogZSA+IHQgPyB0ICsgZyA6IGUpO1xuICB9XG4gIGlmIChpLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBlID0gMDtcbiAgICBpZiAoZi5mb3JFYWNoKHQgPT4ge1xuICAgICAgZSArPSB0ICsgKFQgfHwgMCk7XG4gICAgfSksIGUgLT0gVCwgZSA8IG4pIHtcbiAgICAgIGNvbnN0IHQgPSAobiAtIGUpIC8gMjtcbiAgICAgIGguZm9yRWFjaCgoZSwgcykgPT4ge1xuICAgICAgICBoW3NdID0gZSAtIHQ7XG4gICAgICB9KSwgbS5mb3JFYWNoKChlLCBzKSA9PiB7XG4gICAgICAgIG1bc10gPSBlICsgdDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmFzc2lnbihlLCB7XG4gICAgc2xpZGVzOiBwLFxuICAgIHNuYXBHcmlkOiBoLFxuICAgIHNsaWRlc0dyaWQ6IG0sXG4gICAgc2xpZGVzU2l6ZXNHcmlkOiBmXG4gIH0pLCBpLmNlbnRlcmVkU2xpZGVzICYmIGkuY3NzTW9kZSAmJiAhaS5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgICgwLCBfdXRpbHNNaW4ucykociwgXCItLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlXCIsIC1oWzBdICsgXCJweFwiKSwgKDAsIF91dGlsc01pbi5zKShyLCBcIi0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlclwiLCBlLnNpemUgLyAyIC0gZltmLmxlbmd0aCAtIDFdIC8gMiArIFwicHhcIik7XG4gICAgY29uc3QgdCA9IC1lLnNuYXBHcmlkWzBdLFxuICAgICAgcyA9IC1lLnNsaWRlc0dyaWRbMF07XG4gICAgZS5zbmFwR3JpZCA9IGUuc25hcEdyaWQubWFwKGUgPT4gZSArIHQpLCBlLnNsaWRlc0dyaWQgPSBlLnNsaWRlc0dyaWQubWFwKGUgPT4gZSArIHMpO1xuICB9XG4gIGlmICh1ICE9PSBjICYmIGUuZW1pdChcInNsaWRlc0xlbmd0aENoYW5nZVwiKSwgaC5sZW5ndGggIT09IHcgJiYgKGUucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgZS5jaGVja092ZXJmbG93KCksIGUuZW1pdChcInNuYXBHcmlkTGVuZ3RoQ2hhbmdlXCIpKSwgbS5sZW5ndGggIT09IFMgJiYgZS5lbWl0KFwic2xpZGVzR3JpZExlbmd0aENoYW5nZVwiKSwgaS53YXRjaFNsaWRlc1Byb2dyZXNzICYmIGUudXBkYXRlU2xpZGVzT2Zmc2V0KCksICEoZCB8fCBpLmNzc01vZGUgfHwgXCJzbGlkZVwiICE9PSBpLmVmZmVjdCAmJiBcImZhZGVcIiAhPT0gaS5lZmZlY3QpKSB7XG4gICAgY29uc3QgdCA9IGAke2kuY29udGFpbmVyTW9kaWZpZXJDbGFzc31iYWNrZmFjZS1oaWRkZW5gLFxuICAgICAgcyA9IGUuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHQpO1xuICAgIHUgPD0gaS5tYXhCYWNrZmFjZUhpZGRlblNsaWRlcyA/IHMgfHwgZS5lbC5jbGFzc0xpc3QuYWRkKHQpIDogcyAmJiBlLmVsLmNsYXNzTGlzdC5yZW1vdmUodCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQoZSkge1xuICBjb25zdCB0ID0gdGhpcyxcbiAgICBzID0gW10sXG4gICAgaSA9IHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCByLFxuICAgIGEgPSAwO1xuICBcIm51bWJlclwiID09IHR5cGVvZiBlID8gdC5zZXRUcmFuc2l0aW9uKGUpIDogITAgPT09IGUgJiYgdC5zZXRUcmFuc2l0aW9uKHQucGFyYW1zLnNwZWVkKTtcbiAgY29uc3QgbiA9IGUgPT4gaSA/IHQuc2xpZGVzW3QuZ2V0U2xpZGVJbmRleEJ5RGF0YShlKV0gOiB0LnNsaWRlc1tlXTtcbiAgaWYgKFwiYXV0b1wiICE9PSB0LnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmIHQucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHQucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSAodC52aXNpYmxlU2xpZGVzIHx8IFtdKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgcy5wdXNoKGUpO1xuICAgIH0pO2Vsc2UgZm9yIChyID0gMDsgciA8IE1hdGguY2VpbCh0LnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgciArPSAxKSB7XG4gICAgICBjb25zdCBlID0gdC5hY3RpdmVJbmRleCArIHI7XG4gICAgICBpZiAoZSA+IHQuc2xpZGVzLmxlbmd0aCAmJiAhaSkgYnJlYWs7XG4gICAgICBzLnB1c2gobihlKSk7XG4gICAgfVxuICB9IGVsc2Ugcy5wdXNoKG4odC5hY3RpdmVJbmRleCkpO1xuICBmb3IgKHIgPSAwOyByIDwgcy5sZW5ndGg7IHIgKz0gMSkgaWYgKHZvaWQgMCAhPT0gc1tyXSkge1xuICAgIGNvbnN0IGUgPSBzW3JdLm9mZnNldEhlaWdodDtcbiAgICBhID0gZSA+IGEgPyBlIDogYTtcbiAgfVxuICAoYSB8fCAwID09PSBhKSAmJiAodC53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7YX1weGApO1xufVxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBlID0gdGhpcyxcbiAgICB0ID0gZS5zbGlkZXMsXG4gICAgcyA9IGUuaXNFbGVtZW50ID8gZS5pc0hvcml6b250YWwoKSA/IGUud3JhcHBlckVsLm9mZnNldExlZnQgOiBlLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHQubGVuZ3RoOyBpICs9IDEpIHRbaV0uc3dpcGVyU2xpZGVPZmZzZXQgPSAoZS5pc0hvcml6b250YWwoKSA/IHRbaV0ub2Zmc2V0TGVmdCA6IHRbaV0ub2Zmc2V0VG9wKSAtIHMgLSBlLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xufVxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3MoZSkge1xuICB2b2lkIDAgPT09IGUgJiYgKGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDApO1xuICBjb25zdCB0ID0gdGhpcyxcbiAgICBzID0gdC5wYXJhbXMsXG4gICAge1xuICAgICAgc2xpZGVzOiBpLFxuICAgICAgcnRsVHJhbnNsYXRlOiByLFxuICAgICAgc25hcEdyaWQ6IGFcbiAgICB9ID0gdDtcbiAgaWYgKDAgPT09IGkubGVuZ3RoKSByZXR1cm47XG4gIHZvaWQgMCA9PT0gaVswXS5zd2lwZXJTbGlkZU9mZnNldCAmJiB0LnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgbiA9IC1lO1xuICByICYmIChuID0gZSksIGkuZm9yRWFjaChlID0+IHtcbiAgICBlLmNsYXNzTGlzdC5yZW1vdmUocy5zbGlkZVZpc2libGVDbGFzcyk7XG4gIH0pLCB0LnZpc2libGVTbGlkZXNJbmRleGVzID0gW10sIHQudmlzaWJsZVNsaWRlcyA9IFtdO1xuICBsZXQgbCA9IHMuc3BhY2VCZXR3ZWVuO1xuICBcInN0cmluZ1wiID09IHR5cGVvZiBsICYmIGwuaW5kZXhPZihcIiVcIikgPj0gMCA/IGwgPSBwYXJzZUZsb2F0KGwucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwICogdC5zaXplIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgbCAmJiAobCA9IHBhcnNlRmxvYXQobCkpO1xuICBmb3IgKGxldCBlID0gMDsgZSA8IGkubGVuZ3RoOyBlICs9IDEpIHtcbiAgICBjb25zdCBvID0gaVtlXTtcbiAgICBsZXQgZCA9IG8uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgcy5jc3NNb2RlICYmIHMuY2VudGVyZWRTbGlkZXMgJiYgKGQgLT0gaVswXS5zd2lwZXJTbGlkZU9mZnNldCk7XG4gICAgY29uc3QgYyA9IChuICsgKHMuY2VudGVyZWRTbGlkZXMgPyB0Lm1pblRyYW5zbGF0ZSgpIDogMCkgLSBkKSAvIChvLnN3aXBlclNsaWRlU2l6ZSArIGwpLFxuICAgICAgcCA9IChuIC0gYVswXSArIChzLmNlbnRlcmVkU2xpZGVzID8gdC5taW5UcmFuc2xhdGUoKSA6IDApIC0gZCkgLyAoby5zd2lwZXJTbGlkZVNpemUgKyBsKSxcbiAgICAgIHUgPSAtKG4gLSBkKSxcbiAgICAgIGggPSB1ICsgdC5zbGlkZXNTaXplc0dyaWRbZV07XG4gICAgKHUgPj0gMCAmJiB1IDwgdC5zaXplIC0gMSB8fCBoID4gMSAmJiBoIDw9IHQuc2l6ZSB8fCB1IDw9IDAgJiYgaCA+PSB0LnNpemUpICYmICh0LnZpc2libGVTbGlkZXMucHVzaChvKSwgdC52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGUpLCBpW2VdLmNsYXNzTGlzdC5hZGQocy5zbGlkZVZpc2libGVDbGFzcykpLCBvLnByb2dyZXNzID0gciA/IC1jIDogYywgby5vcmlnaW5hbFByb2dyZXNzID0gciA/IC1wIDogcDtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3MoZSkge1xuICBjb25zdCB0ID0gdGhpcztcbiAgaWYgKHZvaWQgMCA9PT0gZSkge1xuICAgIGNvbnN0IHMgPSB0LnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICBlID0gdCAmJiB0LnRyYW5zbGF0ZSAmJiB0LnRyYW5zbGF0ZSAqIHMgfHwgMDtcbiAgfVxuICBjb25zdCBzID0gdC5wYXJhbXMsXG4gICAgaSA9IHQubWF4VHJhbnNsYXRlKCkgLSB0Lm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzOiByLFxuICAgIGlzQmVnaW5uaW5nOiBhLFxuICAgIGlzRW5kOiBuLFxuICAgIHByb2dyZXNzTG9vcDogbFxuICB9ID0gdDtcbiAgY29uc3QgbyA9IGEsXG4gICAgZCA9IG47XG4gIGlmICgwID09PSBpKSByID0gMCwgYSA9ICEwLCBuID0gITA7ZWxzZSB7XG4gICAgciA9IChlIC0gdC5taW5UcmFuc2xhdGUoKSkgLyBpO1xuICAgIGNvbnN0IHMgPSBNYXRoLmFicyhlIC0gdC5taW5UcmFuc2xhdGUoKSkgPCAxLFxuICAgICAgbCA9IE1hdGguYWJzKGUgLSB0Lm1heFRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgYSA9IHMgfHwgciA8PSAwLCBuID0gbCB8fCByID49IDEsIHMgJiYgKHIgPSAwKSwgbCAmJiAociA9IDEpO1xuICB9XG4gIGlmIChzLmxvb3ApIHtcbiAgICBjb25zdCBzID0gdC5nZXRTbGlkZUluZGV4QnlEYXRhKDApLFxuICAgICAgaSA9IHQuZ2V0U2xpZGVJbmRleEJ5RGF0YSh0LnNsaWRlcy5sZW5ndGggLSAxKSxcbiAgICAgIHIgPSB0LnNsaWRlc0dyaWRbc10sXG4gICAgICBhID0gdC5zbGlkZXNHcmlkW2ldLFxuICAgICAgbiA9IHQuc2xpZGVzR3JpZFt0LnNsaWRlc0dyaWQubGVuZ3RoIC0gMV0sXG4gICAgICBvID0gTWF0aC5hYnMoZSk7XG4gICAgbCA9IG8gPj0gciA/IChvIC0gcikgLyBuIDogKG8gKyBuIC0gYSkgLyBuLCBsID4gMSAmJiAobCAtPSAxKTtcbiAgfVxuICBPYmplY3QuYXNzaWduKHQsIHtcbiAgICBwcm9ncmVzczogcixcbiAgICBwcm9ncmVzc0xvb3A6IGwsXG4gICAgaXNCZWdpbm5pbmc6IGEsXG4gICAgaXNFbmQ6IG5cbiAgfSksIChzLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcy5jZW50ZXJlZFNsaWRlcyAmJiBzLmF1dG9IZWlnaHQpICYmIHQudXBkYXRlU2xpZGVzUHJvZ3Jlc3MoZSksIGEgJiYgIW8gJiYgdC5lbWl0KFwicmVhY2hCZWdpbm5pbmcgdG9FZGdlXCIpLCBuICYmICFkICYmIHQuZW1pdChcInJlYWNoRW5kIHRvRWRnZVwiKSwgKG8gJiYgIWEgfHwgZCAmJiAhbikgJiYgdC5lbWl0KFwiZnJvbUVkZ2VcIiksIHQuZW1pdChcInByb2dyZXNzXCIsIHIpO1xufVxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgY29uc3QgZSA9IHRoaXMsXG4gICAge1xuICAgICAgc2xpZGVzOiB0LFxuICAgICAgcGFyYW1zOiBzLFxuICAgICAgc2xpZGVzRWw6IGksXG4gICAgICBhY3RpdmVJbmRleDogclxuICAgIH0gPSBlLFxuICAgIGEgPSBlLnZpcnR1YWwgJiYgcy52aXJ0dWFsLmVuYWJsZWQsXG4gICAgbiA9IGUgPT4gKDAsIF91dGlsc01pbi5lKShpLCBgLiR7cy5zbGlkZUNsYXNzfSR7ZX0sIHN3aXBlci1zbGlkZSR7ZX1gKVswXTtcbiAgbGV0IGw7XG4gIGlmICh0LmZvckVhY2goZSA9PiB7XG4gICAgZS5jbGFzc0xpc3QucmVtb3ZlKHMuc2xpZGVBY3RpdmVDbGFzcywgcy5zbGlkZU5leHRDbGFzcywgcy5zbGlkZVByZXZDbGFzcyk7XG4gIH0pLCBhKSB7XG4gICAgaWYgKHMubG9vcCkge1xuICAgICAgbGV0IHQgPSByIC0gZS52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICAgIHQgPCAwICYmICh0ID0gZS52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyB0KSwgdCA+PSBlLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAmJiAodCAtPSBlLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCksIGwgPSBuKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3R9XCJdYCk7XG4gICAgfSBlbHNlIGwgPSBuKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3J9XCJdYCk7XG4gIH0gZWxzZSBsID0gdFtyXTtcbiAgaWYgKGwpIHtcbiAgICBsLmNsYXNzTGlzdC5hZGQocy5zbGlkZUFjdGl2ZUNsYXNzKTtcbiAgICBsZXQgZSA9ICgwLCBfdXRpbHNNaW4ubSkobCwgYC4ke3Muc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgIHMubG9vcCAmJiAhZSAmJiAoZSA9IHRbMF0pLCBlICYmIGUuY2xhc3NMaXN0LmFkZChzLnNsaWRlTmV4dENsYXNzKTtcbiAgICBsZXQgaSA9ICgwLCBfdXRpbHNNaW4ubykobCwgYC4ke3Muc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgIHMubG9vcCAmJiAwID09PSAhaSAmJiAoaSA9IHRbdC5sZW5ndGggLSAxXSksIGkgJiYgaS5jbGFzc0xpc3QuYWRkKHMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9XG4gIGUuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn1cbmNvbnN0IHByb2Nlc3NMYXp5UHJlbG9hZGVyID0gKGUsIHQpID0+IHtcbiAgICBpZiAoIWUgfHwgZS5kZXN0cm95ZWQgfHwgIWUucGFyYW1zKSByZXR1cm47XG4gICAgY29uc3QgcyA9IHQuY2xvc2VzdChlLmlzRWxlbWVudCA/IFwic3dpcGVyLXNsaWRlXCIgOiBgLiR7ZS5wYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgICBpZiAocykge1xuICAgICAgY29uc3QgdCA9IHMucXVlcnlTZWxlY3RvcihgLiR7ZS5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgdCAmJiB0LnJlbW92ZSgpO1xuICAgIH1cbiAgfSxcbiAgdW5sYXp5ID0gKGUsIHQpID0+IHtcbiAgICBpZiAoIWUuc2xpZGVzW3RdKSByZXR1cm47XG4gICAgY29uc3QgcyA9IGUuc2xpZGVzW3RdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICAgIHMgJiYgcy5yZW1vdmVBdHRyaWJ1dGUoXCJsb2FkaW5nXCIpO1xuICB9LFxuICBwcmVsb2FkID0gZSA9PiB7XG4gICAgaWYgKCFlIHx8IGUuZGVzdHJveWVkIHx8ICFlLnBhcmFtcykgcmV0dXJuO1xuICAgIGxldCB0ID0gZS5wYXJhbXMubGF6eVByZWxvYWRQcmV2TmV4dDtcbiAgICBjb25zdCBzID0gZS5zbGlkZXMubGVuZ3RoO1xuICAgIGlmICghcyB8fCAhdCB8fCB0IDwgMCkgcmV0dXJuO1xuICAgIHQgPSBNYXRoLm1pbih0LCBzKTtcbiAgICBjb25zdCBpID0gXCJhdXRvXCIgPT09IGUucGFyYW1zLnNsaWRlc1BlclZpZXcgPyBlLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoZS5wYXJhbXMuc2xpZGVzUGVyVmlldyksXG4gICAgICByID0gZS5hY3RpdmVJbmRleDtcbiAgICBpZiAoZS5wYXJhbXMuZ3JpZCAmJiBlLnBhcmFtcy5ncmlkLnJvd3MgPiAxKSB7XG4gICAgICBjb25zdCBzID0gcixcbiAgICAgICAgYSA9IFtzIC0gdF07XG4gICAgICByZXR1cm4gYS5wdXNoKC4uLkFycmF5LmZyb20oe1xuICAgICAgICBsZW5ndGg6IHRcbiAgICAgIH0pLm1hcCgoZSwgdCkgPT4gcyArIGkgKyB0KSksIHZvaWQgZS5zbGlkZXMuZm9yRWFjaCgodCwgcykgPT4ge1xuICAgICAgICBhLmluY2x1ZGVzKHQuY29sdW1uKSAmJiB1bmxhenkoZSwgcyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgYSA9IHIgKyBpIC0gMTtcbiAgICBpZiAoZS5wYXJhbXMucmV3aW5kIHx8IGUucGFyYW1zLmxvb3ApIGZvciAobGV0IGkgPSByIC0gdDsgaSA8PSBhICsgdDsgaSArPSAxKSB7XG4gICAgICBjb25zdCB0ID0gKGkgJSBzICsgcykgJSBzO1xuICAgICAgKHQgPCByIHx8IHQgPiBhKSAmJiB1bmxhenkoZSwgdCk7XG4gICAgfSBlbHNlIGZvciAobGV0IGkgPSBNYXRoLm1heChyIC0gdCwgMCk7IGkgPD0gTWF0aC5taW4oYSArIHQsIHMgLSAxKTsgaSArPSAxKSBpICE9PSByICYmIChpID4gYSB8fCBpIDwgcikgJiYgdW5sYXp5KGUsIGkpO1xuICB9O1xuZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShlKSB7XG4gIGNvbnN0IHtcbiAgICAgIHNsaWRlc0dyaWQ6IHQsXG4gICAgICBwYXJhbXM6IHNcbiAgICB9ID0gZSxcbiAgICBpID0gZS5ydGxUcmFuc2xhdGUgPyBlLnRyYW5zbGF0ZSA6IC1lLnRyYW5zbGF0ZTtcbiAgbGV0IHI7XG4gIGZvciAobGV0IGUgPSAwOyBlIDwgdC5sZW5ndGg7IGUgKz0gMSkgdm9pZCAwICE9PSB0W2UgKyAxXSA/IGkgPj0gdFtlXSAmJiBpIDwgdFtlICsgMV0gLSAodFtlICsgMV0gLSB0W2VdKSAvIDIgPyByID0gZSA6IGkgPj0gdFtlXSAmJiBpIDwgdFtlICsgMV0gJiYgKHIgPSBlICsgMSkgOiBpID49IHRbZV0gJiYgKHIgPSBlKTtcbiAgcmV0dXJuIHMubm9ybWFsaXplU2xpZGVJbmRleCAmJiAociA8IDAgfHwgdm9pZCAwID09PSByKSAmJiAociA9IDApLCByO1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgoZSkge1xuICBjb25zdCB0ID0gdGhpcyxcbiAgICBzID0gdC5ydGxUcmFuc2xhdGUgPyB0LnRyYW5zbGF0ZSA6IC10LnRyYW5zbGF0ZSxcbiAgICB7XG4gICAgICBzbmFwR3JpZDogaSxcbiAgICAgIHBhcmFtczogcixcbiAgICAgIGFjdGl2ZUluZGV4OiBhLFxuICAgICAgcmVhbEluZGV4OiBuLFxuICAgICAgc25hcEluZGV4OiBsXG4gICAgfSA9IHQ7XG4gIGxldCBvLFxuICAgIGQgPSBlO1xuICBjb25zdCBjID0gZSA9PiB7XG4gICAgbGV0IHMgPSBlIC0gdC52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICByZXR1cm4gcyA8IDAgJiYgKHMgPSB0LnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHMpLCBzID49IHQudmlydHVhbC5zbGlkZXMubGVuZ3RoICYmIChzIC09IHQudmlydHVhbC5zbGlkZXMubGVuZ3RoKSwgcztcbiAgfTtcbiAgaWYgKHZvaWQgMCA9PT0gZCAmJiAoZCA9IGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUodCkpLCBpLmluZGV4T2YocykgPj0gMCkgbyA9IGkuaW5kZXhPZihzKTtlbHNlIHtcbiAgICBjb25zdCBlID0gTWF0aC5taW4oci5zbGlkZXNQZXJHcm91cFNraXAsIGQpO1xuICAgIG8gPSBlICsgTWF0aC5mbG9vcigoZCAtIGUpIC8gci5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKG8gPj0gaS5sZW5ndGggJiYgKG8gPSBpLmxlbmd0aCAtIDEpLCBkID09PSBhKSByZXR1cm4gbyAhPT0gbCAmJiAodC5zbmFwSW5kZXggPSBvLCB0LmVtaXQoXCJzbmFwSW5kZXhDaGFuZ2VcIikpLCB2b2lkICh0LnBhcmFtcy5sb29wICYmIHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgKHQucmVhbEluZGV4ID0gYyhkKSkpO1xuICBsZXQgcDtcbiAgcCA9IHQudmlydHVhbCAmJiByLnZpcnR1YWwuZW5hYmxlZCAmJiByLmxvb3AgPyBjKGQpIDogdC5zbGlkZXNbZF0gPyBwYXJzZUludCh0LnNsaWRlc1tkXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSB8fCBkLCAxMCkgOiBkLCBPYmplY3QuYXNzaWduKHQsIHtcbiAgICBwcmV2aW91c1NuYXBJbmRleDogbCxcbiAgICBzbmFwSW5kZXg6IG8sXG4gICAgcHJldmlvdXNSZWFsSW5kZXg6IG4sXG4gICAgcmVhbEluZGV4OiBwLFxuICAgIHByZXZpb3VzSW5kZXg6IGEsXG4gICAgYWN0aXZlSW5kZXg6IGRcbiAgfSksIHQuaW5pdGlhbGl6ZWQgJiYgcHJlbG9hZCh0KSwgdC5lbWl0KFwiYWN0aXZlSW5kZXhDaGFuZ2VcIiksIHQuZW1pdChcInNuYXBJbmRleENoYW5nZVwiKSwgbiAhPT0gcCAmJiB0LmVtaXQoXCJyZWFsSW5kZXhDaGFuZ2VcIiksICh0LmluaXRpYWxpemVkIHx8IHQucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkgJiYgdC5lbWl0KFwic2xpZGVDaGFuZ2VcIik7XG59XG5mdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZSkge1xuICBjb25zdCB0ID0gdGhpcyxcbiAgICBzID0gdC5wYXJhbXMsXG4gICAgaSA9IGUuY2xvc2VzdChgLiR7cy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIGxldCByLFxuICAgIGEgPSAhMTtcbiAgaWYgKGkpIGZvciAobGV0IGUgPSAwOyBlIDwgdC5zbGlkZXMubGVuZ3RoOyBlICs9IDEpIGlmICh0LnNsaWRlc1tlXSA9PT0gaSkge1xuICAgIGEgPSAhMCwgciA9IGU7XG4gICAgYnJlYWs7XG4gIH1cbiAgaWYgKCFpIHx8ICFhKSByZXR1cm4gdC5jbGlja2VkU2xpZGUgPSB2b2lkIDAsIHZvaWQgKHQuY2xpY2tlZEluZGV4ID0gdm9pZCAwKTtcbiAgdC5jbGlja2VkU2xpZGUgPSBpLCB0LnZpcnR1YWwgJiYgdC5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gdC5jbGlja2VkSW5kZXggPSBwYXJzZUludChpLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpLCAxMCkgOiB0LmNsaWNrZWRJbmRleCA9IHIsIHMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiB2b2lkIDAgIT09IHQuY2xpY2tlZEluZGV4ICYmIHQuY2xpY2tlZEluZGV4ICE9PSB0LmFjdGl2ZUluZGV4ICYmIHQuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xufVxudmFyIHVwZGF0ZSA9IHtcbiAgdXBkYXRlU2l6ZTogdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzOiB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQ6IHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldDogdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzczogdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzOiB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlczogdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXg6IHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGU6IHVwZGF0ZUNsaWNrZWRTbGlkZVxufTtcbmZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShlKSB7XG4gIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyBcInhcIiA6IFwieVwiKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtczogdCxcbiAgICBydGxUcmFuc2xhdGU6IHMsXG4gICAgdHJhbnNsYXRlOiBpLFxuICAgIHdyYXBwZXJFbDogclxuICB9ID0gdGhpcztcbiAgaWYgKHQudmlydHVhbFRyYW5zbGF0ZSkgcmV0dXJuIHMgPyAtaSA6IGk7XG4gIGlmICh0LmNzc01vZGUpIHJldHVybiBpO1xuICBsZXQgYSA9ICgwLCBfdXRpbHNNaW4uaCkociwgZSk7XG4gIHJldHVybiBhICs9IHRoaXMuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCksIHMgJiYgKGEgPSAtYSksIGEgfHwgMDtcbn1cbmZ1bmN0aW9uIHNldFRyYW5zbGF0ZShlLCB0KSB7XG4gIGNvbnN0IHMgPSB0aGlzLFxuICAgIHtcbiAgICAgIHJ0bFRyYW5zbGF0ZTogaSxcbiAgICAgIHBhcmFtczogcixcbiAgICAgIHdyYXBwZXJFbDogYSxcbiAgICAgIHByb2dyZXNzOiBuXG4gICAgfSA9IHM7XG4gIGxldCBsID0gMCxcbiAgICBvID0gMDtcbiAgbGV0IGQ7XG4gIHMuaXNIb3Jpem9udGFsKCkgPyBsID0gaSA/IC1lIDogZSA6IG8gPSBlLCByLnJvdW5kTGVuZ3RocyAmJiAobCA9IE1hdGguZmxvb3IobCksIG8gPSBNYXRoLmZsb29yKG8pKSwgcy5wcmV2aW91c1RyYW5zbGF0ZSA9IHMudHJhbnNsYXRlLCBzLnRyYW5zbGF0ZSA9IHMuaXNIb3Jpem9udGFsKCkgPyBsIDogbywgci5jc3NNb2RlID8gYVtzLmlzSG9yaXpvbnRhbCgpID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiXSA9IHMuaXNIb3Jpem9udGFsKCkgPyAtbCA6IC1vIDogci52aXJ0dWFsVHJhbnNsYXRlIHx8IChzLmlzSG9yaXpvbnRhbCgpID8gbCAtPSBzLmNzc092ZXJmbG93QWRqdXN0bWVudCgpIDogbyAtPSBzLmNzc092ZXJmbG93QWRqdXN0bWVudCgpLCBhLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke2x9cHgsICR7b31weCwgMHB4KWApO1xuICBjb25zdCBjID0gcy5tYXhUcmFuc2xhdGUoKSAtIHMubWluVHJhbnNsYXRlKCk7XG4gIGQgPSAwID09PSBjID8gMCA6IChlIC0gcy5taW5UcmFuc2xhdGUoKSkgLyBjLCBkICE9PSBuICYmIHMudXBkYXRlUHJvZ3Jlc3MoZSksIHMuZW1pdChcInNldFRyYW5zbGF0ZVwiLCBzLnRyYW5zbGF0ZSwgdCk7XG59XG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cbmZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiB0cmFuc2xhdGVUbyhlLCB0LCBzLCBpLCByKSB7XG4gIHZvaWQgMCA9PT0gZSAmJiAoZSA9IDApLCB2b2lkIDAgPT09IHQgJiYgKHQgPSB0aGlzLnBhcmFtcy5zcGVlZCksIHZvaWQgMCA9PT0gcyAmJiAocyA9ICEwKSwgdm9pZCAwID09PSBpICYmIChpID0gITApO1xuICBjb25zdCBhID0gdGhpcyxcbiAgICB7XG4gICAgICBwYXJhbXM6IG4sXG4gICAgICB3cmFwcGVyRWw6IGxcbiAgICB9ID0gYTtcbiAgaWYgKGEuYW5pbWF0aW5nICYmIG4ucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSByZXR1cm4gITE7XG4gIGNvbnN0IG8gPSBhLm1pblRyYW5zbGF0ZSgpLFxuICAgIGQgPSBhLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgYztcbiAgaWYgKGMgPSBpICYmIGUgPiBvID8gbyA6IGkgJiYgZSA8IGQgPyBkIDogZSwgYS51cGRhdGVQcm9ncmVzcyhjKSwgbi5jc3NNb2RlKSB7XG4gICAgY29uc3QgZSA9IGEuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKDAgPT09IHQpIGxbZSA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIl0gPSAtYztlbHNlIHtcbiAgICAgIGlmICghYS5zdXBwb3J0LnNtb290aFNjcm9sbCkgcmV0dXJuICgwLCBfdXRpbHNNaW4ucCkoe1xuICAgICAgICBzd2lwZXI6IGEsXG4gICAgICAgIHRhcmdldFBvc2l0aW9uOiAtYyxcbiAgICAgICAgc2lkZTogZSA/IFwibGVmdFwiIDogXCJ0b3BcIlxuICAgICAgfSksICEwO1xuICAgICAgbC5zY3JvbGxUbyh7XG4gICAgICAgIFtlID8gXCJsZWZ0XCIgOiBcInRvcFwiXTogLWMsXG4gICAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIHJldHVybiAwID09PSB0ID8gKGEuc2V0VHJhbnNpdGlvbigwKSwgYS5zZXRUcmFuc2xhdGUoYyksIHMgJiYgKGEuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLCB0LCByKSwgYS5lbWl0KFwidHJhbnNpdGlvbkVuZFwiKSkpIDogKGEuc2V0VHJhbnNpdGlvbih0KSwgYS5zZXRUcmFuc2xhdGUoYyksIHMgJiYgKGEuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLCB0LCByKSwgYS5lbWl0KFwidHJhbnNpdGlvblN0YXJ0XCIpKSwgYS5hbmltYXRpbmcgfHwgKGEuYW5pbWF0aW5nID0gITAsIGEub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIHx8IChhLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgYSAmJiAhYS5kZXN0cm95ZWQgJiYgZS50YXJnZXQgPT09IHRoaXMgJiYgKGEud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIGEub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSwgYS5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsLCBkZWxldGUgYS5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQsIHMgJiYgYS5lbWl0KFwidHJhbnNpdGlvbkVuZFwiKSk7XG4gIH0pLCBhLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBhLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkpKSwgITA7XG59XG52YXIgdHJhbnNsYXRlID0ge1xuICBnZXRUcmFuc2xhdGU6IGdldFN3aXBlclRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlOiBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZTogbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGU6IG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG86IHRyYW5zbGF0ZVRvXG59O1xuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihlLCB0KSB7XG4gIGNvbnN0IHMgPSB0aGlzO1xuICBzLnBhcmFtcy5jc3NNb2RlIHx8IChzLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYCksIHMuZW1pdChcInNldFRyYW5zaXRpb25cIiwgZSwgdCk7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChlKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyOiB0LFxuICAgIHJ1bkNhbGxiYWNrczogcyxcbiAgICBkaXJlY3Rpb246IGksXG4gICAgc3RlcDogclxuICB9ID0gZTtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4OiBhLFxuICAgIHByZXZpb3VzSW5kZXg6IG5cbiAgfSA9IHQ7XG4gIGxldCBsID0gaTtcbiAgaWYgKGwgfHwgKGwgPSBhID4gbiA/IFwibmV4dFwiIDogYSA8IG4gPyBcInByZXZcIiA6IFwicmVzZXRcIiksIHQuZW1pdChgdHJhbnNpdGlvbiR7cn1gKSwgcyAmJiBhICE9PSBuKSB7XG4gICAgaWYgKFwicmVzZXRcIiA9PT0gbCkgcmV0dXJuIHZvaWQgdC5lbWl0KGBzbGlkZVJlc2V0VHJhbnNpdGlvbiR7cn1gKTtcbiAgICB0LmVtaXQoYHNsaWRlQ2hhbmdlVHJhbnNpdGlvbiR7cn1gKSwgXCJuZXh0XCIgPT09IGwgPyB0LmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3J9YCkgOiB0LmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3J9YCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChlLCB0KSB7XG4gIHZvaWQgMCA9PT0gZSAmJiAoZSA9ICEwKTtcbiAgY29uc3QgcyA9IHRoaXMsXG4gICAge1xuICAgICAgcGFyYW1zOiBpXG4gICAgfSA9IHM7XG4gIGkuY3NzTW9kZSB8fCAoaS5hdXRvSGVpZ2h0ICYmIHMudXBkYXRlQXV0b0hlaWdodCgpLCB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyOiBzLFxuICAgIHJ1bkNhbGxiYWNrczogZSxcbiAgICBkaXJlY3Rpb246IHQsXG4gICAgc3RlcDogXCJTdGFydFwiXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSwgdCkge1xuICB2b2lkIDAgPT09IGUgJiYgKGUgPSAhMCk7XG4gIGNvbnN0IHMgPSB0aGlzLFxuICAgIHtcbiAgICAgIHBhcmFtczogaVxuICAgIH0gPSBzO1xuICBzLmFuaW1hdGluZyA9ICExLCBpLmNzc01vZGUgfHwgKHMuc2V0VHJhbnNpdGlvbigwKSwgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcjogcyxcbiAgICBydW5DYWxsYmFja3M6IGUsXG4gICAgZGlyZWN0aW9uOiB0LFxuICAgIHN0ZXA6IFwiRW5kXCJcbiAgfSkpO1xufVxudmFyIHRyYW5zaXRpb24gPSB7XG4gIHNldFRyYW5zaXRpb246IHNldFRyYW5zaXRpb24sXG4gIHRyYW5zaXRpb25TdGFydDogdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kXG59O1xuZnVuY3Rpb24gc2xpZGVUbyhlLCB0LCBzLCBpLCByKSB7XG4gIHZvaWQgMCA9PT0gZSAmJiAoZSA9IDApLCB2b2lkIDAgPT09IHQgJiYgKHQgPSB0aGlzLnBhcmFtcy5zcGVlZCksIHZvaWQgMCA9PT0gcyAmJiAocyA9ICEwKSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAoZSA9IHBhcnNlSW50KGUsIDEwKSk7XG4gIGNvbnN0IGEgPSB0aGlzO1xuICBsZXQgbiA9IGU7XG4gIG4gPCAwICYmIChuID0gMCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXM6IGwsXG4gICAgc25hcEdyaWQ6IG8sXG4gICAgc2xpZGVzR3JpZDogZCxcbiAgICBwcmV2aW91c0luZGV4OiBjLFxuICAgIGFjdGl2ZUluZGV4OiBwLFxuICAgIHJ0bFRyYW5zbGF0ZTogdSxcbiAgICB3cmFwcGVyRWw6IGgsXG4gICAgZW5hYmxlZDogbVxuICB9ID0gYTtcbiAgaWYgKGEuYW5pbWF0aW5nICYmIGwucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFtICYmICFpICYmICFyKSByZXR1cm4gITE7XG4gIGNvbnN0IGYgPSBNYXRoLm1pbihhLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIG4pO1xuICBsZXQgdiA9IGYgKyBNYXRoLmZsb29yKChuIC0gZikgLyBhLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIHYgPj0gby5sZW5ndGggJiYgKHYgPSBvLmxlbmd0aCAtIDEpO1xuICBjb25zdCBnID0gLW9bdl07XG4gIGlmIChsLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIGZvciAobGV0IGUgPSAwOyBlIDwgZC5sZW5ndGg7IGUgKz0gMSkge1xuICAgIGNvbnN0IHQgPSAtTWF0aC5mbG9vcigxMDAgKiBnKSxcbiAgICAgIHMgPSBNYXRoLmZsb29yKDEwMCAqIGRbZV0pLFxuICAgICAgaSA9IE1hdGguZmxvb3IoMTAwICogZFtlICsgMV0pO1xuICAgIHZvaWQgMCAhPT0gZFtlICsgMV0gPyB0ID49IHMgJiYgdCA8IGkgLSAoaSAtIHMpIC8gMiA/IG4gPSBlIDogdCA+PSBzICYmIHQgPCBpICYmIChuID0gZSArIDEpIDogdCA+PSBzICYmIChuID0gZSk7XG4gIH1cbiAgaWYgKGEuaW5pdGlhbGl6ZWQgJiYgbiAhPT0gcCkge1xuICAgIGlmICghYS5hbGxvd1NsaWRlTmV4dCAmJiAodSA/IGcgPiBhLnRyYW5zbGF0ZSAmJiBnID4gYS5taW5UcmFuc2xhdGUoKSA6IGcgPCBhLnRyYW5zbGF0ZSAmJiBnIDwgYS5taW5UcmFuc2xhdGUoKSkpIHJldHVybiAhMTtcbiAgICBpZiAoIWEuYWxsb3dTbGlkZVByZXYgJiYgZyA+IGEudHJhbnNsYXRlICYmIGcgPiBhLm1heFRyYW5zbGF0ZSgpICYmIChwIHx8IDApICE9PSBuKSByZXR1cm4gITE7XG4gIH1cbiAgbGV0IHc7XG4gIGlmIChuICE9PSAoYyB8fCAwKSAmJiBzICYmIGEuZW1pdChcImJlZm9yZVNsaWRlQ2hhbmdlU3RhcnRcIiksIGEudXBkYXRlUHJvZ3Jlc3MoZyksIHcgPSBuID4gcCA/IFwibmV4dFwiIDogbiA8IHAgPyBcInByZXZcIiA6IFwicmVzZXRcIiwgdSAmJiAtZyA9PT0gYS50cmFuc2xhdGUgfHwgIXUgJiYgZyA9PT0gYS50cmFuc2xhdGUpIHJldHVybiBhLnVwZGF0ZUFjdGl2ZUluZGV4KG4pLCBsLmF1dG9IZWlnaHQgJiYgYS51cGRhdGVBdXRvSGVpZ2h0KCksIGEudXBkYXRlU2xpZGVzQ2xhc3NlcygpLCBcInNsaWRlXCIgIT09IGwuZWZmZWN0ICYmIGEuc2V0VHJhbnNsYXRlKGcpLCBcInJlc2V0XCIgIT09IHcgJiYgKGEudHJhbnNpdGlvblN0YXJ0KHMsIHcpLCBhLnRyYW5zaXRpb25FbmQocywgdykpLCAhMTtcbiAgaWYgKGwuY3NzTW9kZSkge1xuICAgIGNvbnN0IGUgPSBhLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgcyA9IHUgPyBnIDogLWc7XG4gICAgaWYgKDAgPT09IHQpIHtcbiAgICAgIGNvbnN0IHQgPSBhLnZpcnR1YWwgJiYgYS5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgdCAmJiAoYS53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSBcIm5vbmVcIiwgYS5faW1tZWRpYXRlVmlydHVhbCA9ICEwKSwgdCAmJiAhYS5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIGEucGFyYW1zLmluaXRpYWxTbGlkZSA+IDAgPyAoYS5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ID0gITAsIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGhbZSA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIl0gPSBzO1xuICAgICAgfSkpIDogaFtlID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiXSA9IHMsIHQgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgYS53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSBcIlwiLCBhLl9pbW1lZGlhdGVWaXJ0dWFsID0gITE7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFhLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSByZXR1cm4gKDAsIF91dGlsc01pbi5wKSh7XG4gICAgICAgIHN3aXBlcjogYSxcbiAgICAgICAgdGFyZ2V0UG9zaXRpb246IHMsXG4gICAgICAgIHNpZGU6IGUgPyBcImxlZnRcIiA6IFwidG9wXCJcbiAgICAgIH0pLCAhMDtcbiAgICAgIGguc2Nyb2xsVG8oe1xuICAgICAgICBbZSA/IFwibGVmdFwiIDogXCJ0b3BcIl06IHMsXG4gICAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIHJldHVybiBhLnNldFRyYW5zaXRpb24odCksIGEuc2V0VHJhbnNsYXRlKGcpLCBhLnVwZGF0ZUFjdGl2ZUluZGV4KG4pLCBhLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgYS5lbWl0KFwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0XCIsIHQsIGkpLCBhLnRyYW5zaXRpb25TdGFydChzLCB3KSwgMCA9PT0gdCA/IGEudHJhbnNpdGlvbkVuZChzLCB3KSA6IGEuYW5pbWF0aW5nIHx8IChhLmFuaW1hdGluZyA9ICEwLCBhLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIHx8IChhLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBhICYmICFhLmRlc3Ryb3llZCAmJiBlLnRhcmdldCA9PT0gdGhpcyAmJiAoYS53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgYS5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCksIGEub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsLCBkZWxldGUgYS5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCwgYS50cmFuc2l0aW9uRW5kKHMsIHcpKTtcbiAgfSksIGEud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIGEub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpKSwgITA7XG59XG5mdW5jdGlvbiBzbGlkZVRvTG9vcChlLCB0LCBzLCBpKSB7XG4gIGlmICh2b2lkIDAgPT09IGUgJiYgKGUgPSAwKSwgdm9pZCAwID09PSB0ICYmICh0ID0gdGhpcy5wYXJhbXMuc3BlZWQpLCB2b2lkIDAgPT09IHMgJiYgKHMgPSAhMCksIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHtcbiAgICBlID0gcGFyc2VJbnQoZSwgMTApO1xuICB9XG4gIGNvbnN0IHIgPSB0aGlzO1xuICBsZXQgYSA9IGU7XG4gIHJldHVybiByLnBhcmFtcy5sb29wICYmIChyLnZpcnR1YWwgJiYgci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gYSArPSByLnZpcnR1YWwuc2xpZGVzQmVmb3JlIDogYSA9IHIuZ2V0U2xpZGVJbmRleEJ5RGF0YShhKSksIHIuc2xpZGVUbyhhLCB0LCBzLCBpKTtcbn1cbmZ1bmN0aW9uIHNsaWRlTmV4dChlLCB0LCBzKSB7XG4gIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHRoaXMucGFyYW1zLnNwZWVkKSwgdm9pZCAwID09PSB0ICYmICh0ID0gITApO1xuICBjb25zdCBpID0gdGhpcyxcbiAgICB7XG4gICAgICBlbmFibGVkOiByLFxuICAgICAgcGFyYW1zOiBhLFxuICAgICAgYW5pbWF0aW5nOiBuXG4gICAgfSA9IGk7XG4gIGlmICghcikgcmV0dXJuIGk7XG4gIGxldCBsID0gYS5zbGlkZXNQZXJHcm91cDtcbiAgXCJhdXRvXCIgPT09IGEuc2xpZGVzUGVyVmlldyAmJiAxID09PSBhLnNsaWRlc1Blckdyb3VwICYmIGEuc2xpZGVzUGVyR3JvdXBBdXRvICYmIChsID0gTWF0aC5tYXgoaS5zbGlkZXNQZXJWaWV3RHluYW1pYyhcImN1cnJlbnRcIiwgITApLCAxKSk7XG4gIGNvbnN0IG8gPSBpLmFjdGl2ZUluZGV4IDwgYS5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogbCxcbiAgICBkID0gaS52aXJ0dWFsICYmIGEudmlydHVhbC5lbmFibGVkO1xuICBpZiAoYS5sb29wKSB7XG4gICAgaWYgKG4gJiYgIWQgJiYgYS5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gITE7XG4gICAgaS5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogXCJuZXh0XCJcbiAgICB9KSwgaS5fY2xpZW50TGVmdCA9IGkud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgcmV0dXJuIGEucmV3aW5kICYmIGkuaXNFbmQgPyBpLnNsaWRlVG8oMCwgZSwgdCwgcykgOiBpLnNsaWRlVG8oaS5hY3RpdmVJbmRleCArIG8sIGUsIHQsIHMpO1xufVxuZnVuY3Rpb24gc2xpZGVQcmV2KGUsIHQsIHMpIHtcbiAgdm9pZCAwID09PSBlICYmIChlID0gdGhpcy5wYXJhbXMuc3BlZWQpLCB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCk7XG4gIGNvbnN0IGkgPSB0aGlzLFxuICAgIHtcbiAgICAgIHBhcmFtczogcixcbiAgICAgIHNuYXBHcmlkOiBhLFxuICAgICAgc2xpZGVzR3JpZDogbixcbiAgICAgIHJ0bFRyYW5zbGF0ZTogbCxcbiAgICAgIGVuYWJsZWQ6IG8sXG4gICAgICBhbmltYXRpbmc6IGRcbiAgICB9ID0gaTtcbiAgaWYgKCFvKSByZXR1cm4gaTtcbiAgY29uc3QgYyA9IGkudmlydHVhbCAmJiByLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHIubG9vcCkge1xuICAgIGlmIChkICYmICFjICYmIHIubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuICExO1xuICAgIGkubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246IFwicHJldlwiXG4gICAgfSksIGkuX2NsaWVudExlZnQgPSBpLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICB9XG4gIGZ1bmN0aW9uIHAoZSkge1xuICAgIHJldHVybiBlIDwgMCA/IC1NYXRoLmZsb29yKE1hdGguYWJzKGUpKSA6IE1hdGguZmxvb3IoZSk7XG4gIH1cbiAgY29uc3QgdSA9IHAobCA/IGkudHJhbnNsYXRlIDogLWkudHJhbnNsYXRlKSxcbiAgICBoID0gYS5tYXAoZSA9PiBwKGUpKTtcbiAgbGV0IG0gPSBhW2guaW5kZXhPZih1KSAtIDFdO1xuICBpZiAodm9pZCAwID09PSBtICYmIHIuY3NzTW9kZSkge1xuICAgIGxldCBlO1xuICAgIGEuZm9yRWFjaCgodCwgcykgPT4ge1xuICAgICAgdSA+PSB0ICYmIChlID0gcyk7XG4gICAgfSksIHZvaWQgMCAhPT0gZSAmJiAobSA9IGFbZSA+IDAgPyBlIC0gMSA6IGVdKTtcbiAgfVxuICBsZXQgZiA9IDA7XG4gIGlmICh2b2lkIDAgIT09IG0gJiYgKGYgPSBuLmluZGV4T2YobSksIGYgPCAwICYmIChmID0gaS5hY3RpdmVJbmRleCAtIDEpLCBcImF1dG9cIiA9PT0gci5zbGlkZXNQZXJWaWV3ICYmIDEgPT09IHIuc2xpZGVzUGVyR3JvdXAgJiYgci5zbGlkZXNQZXJHcm91cEF1dG8gJiYgKGYgPSBmIC0gaS5zbGlkZXNQZXJWaWV3RHluYW1pYyhcInByZXZpb3VzXCIsICEwKSArIDEsIGYgPSBNYXRoLm1heChmLCAwKSkpLCByLnJld2luZCAmJiBpLmlzQmVnaW5uaW5nKSB7XG4gICAgY29uc3QgciA9IGkucGFyYW1zLnZpcnR1YWwgJiYgaS5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIGkudmlydHVhbCA/IGkudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IGkuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGkuc2xpZGVUbyhyLCBlLCB0LCBzKTtcbiAgfVxuICByZXR1cm4gaS5zbGlkZVRvKGYsIGUsIHQsIHMpO1xufVxuZnVuY3Rpb24gc2xpZGVSZXNldChlLCB0LCBzKSB7XG4gIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHRoaXMucGFyYW1zLnNwZWVkKSwgdm9pZCAwID09PSB0ICYmICh0ID0gITApO1xuICByZXR1cm4gdGhpcy5zbGlkZVRvKHRoaXMuYWN0aXZlSW5kZXgsIGUsIHQsIHMpO1xufVxuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3QoZSwgdCwgcywgaSkge1xuICB2b2lkIDAgPT09IGUgJiYgKGUgPSB0aGlzLnBhcmFtcy5zcGVlZCksIHZvaWQgMCA9PT0gdCAmJiAodCA9ICEwKSwgdm9pZCAwID09PSBpICYmIChpID0gLjUpO1xuICBjb25zdCByID0gdGhpcztcbiAgbGV0IGEgPSByLmFjdGl2ZUluZGV4O1xuICBjb25zdCBuID0gTWF0aC5taW4oci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhKSxcbiAgICBsID0gbiArIE1hdGguZmxvb3IoKGEgLSBuKSAvIHIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSxcbiAgICBvID0gci5ydGxUcmFuc2xhdGUgPyByLnRyYW5zbGF0ZSA6IC1yLnRyYW5zbGF0ZTtcbiAgaWYgKG8gPj0gci5zbmFwR3JpZFtsXSkge1xuICAgIGNvbnN0IGUgPSByLnNuYXBHcmlkW2xdO1xuICAgIG8gLSBlID4gKHIuc25hcEdyaWRbbCArIDFdIC0gZSkgKiBpICYmIChhICs9IHIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlID0gci5zbmFwR3JpZFtsIC0gMV07XG4gICAgbyAtIGUgPD0gKHIuc25hcEdyaWRbbF0gLSBlKSAqIGkgJiYgKGEgLT0gci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIHJldHVybiBhID0gTWF0aC5tYXgoYSwgMCksIGEgPSBNYXRoLm1pbihhLCByLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSksIHIuc2xpZGVUbyhhLCBlLCB0LCBzKTtcbn1cbmZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7XG4gIGNvbnN0IGUgPSB0aGlzLFxuICAgIHtcbiAgICAgIHBhcmFtczogdCxcbiAgICAgIHNsaWRlc0VsOiBzXG4gICAgfSA9IGUsXG4gICAgaSA9IFwiYXV0b1wiID09PSB0LnNsaWRlc1BlclZpZXcgPyBlLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiB0LnNsaWRlc1BlclZpZXc7XG4gIGxldCByLFxuICAgIGEgPSBlLmNsaWNrZWRJbmRleDtcbiAgY29uc3QgbiA9IGUuaXNFbGVtZW50ID8gXCJzd2lwZXItc2xpZGVcIiA6IGAuJHt0LnNsaWRlQ2xhc3N9YDtcbiAgaWYgKHQubG9vcCkge1xuICAgIGlmIChlLmFuaW1hdGluZykgcmV0dXJuO1xuICAgIHIgPSBwYXJzZUludChlLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSwgMTApLCB0LmNlbnRlcmVkU2xpZGVzID8gYSA8IGUubG9vcGVkU2xpZGVzIC0gaSAvIDIgfHwgYSA+IGUuc2xpZGVzLmxlbmd0aCAtIGUubG9vcGVkU2xpZGVzICsgaSAvIDIgPyAoZS5sb29wRml4KCksIGEgPSBlLmdldFNsaWRlSW5kZXgoKDAsIF91dGlsc01pbi5lKShzLCBgJHtufVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cn1cIl1gKVswXSksICgwLCBfdXRpbHNNaW4ubikoKCkgPT4ge1xuICAgICAgZS5zbGlkZVRvKGEpO1xuICAgIH0pKSA6IGUuc2xpZGVUbyhhKSA6IGEgPiBlLnNsaWRlcy5sZW5ndGggLSBpID8gKGUubG9vcEZpeCgpLCBhID0gZS5nZXRTbGlkZUluZGV4KCgwLCBfdXRpbHNNaW4uZSkocywgYCR7bn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3J9XCJdYClbMF0pLCAoMCwgX3V0aWxzTWluLm4pKCgpID0+IHtcbiAgICAgIGUuc2xpZGVUbyhhKTtcbiAgICB9KSkgOiBlLnNsaWRlVG8oYSk7XG4gIH0gZWxzZSBlLnNsaWRlVG8oYSk7XG59XG52YXIgc2xpZGUgPSB7XG4gIHNsaWRlVG86IHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wOiBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0OiBzbGlkZU5leHQsXG4gIHNsaWRlUHJldjogc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0OiBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdDogc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IHNsaWRlVG9DbGlja2VkU2xpZGVcbn07XG5mdW5jdGlvbiBsb29wQ3JlYXRlKGUpIHtcbiAgY29uc3QgdCA9IHRoaXMsXG4gICAge1xuICAgICAgcGFyYW1zOiBzLFxuICAgICAgc2xpZGVzRWw6IGlcbiAgICB9ID0gdDtcbiAgaWYgKCFzLmxvb3AgfHwgdC52aXJ0dWFsICYmIHQucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAoMCwgX3V0aWxzTWluLmUpKGksIGAuJHtzLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5mb3JFYWNoKChlLCB0KSA9PiB7XG4gICAgZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLCB0KTtcbiAgfSksIHQubG9vcEZpeCh7XG4gICAgc2xpZGVSZWFsSW5kZXg6IGUsXG4gICAgZGlyZWN0aW9uOiBzLmNlbnRlcmVkU2xpZGVzID8gdm9pZCAwIDogXCJuZXh0XCJcbiAgfSk7XG59XG5mdW5jdGlvbiBsb29wRml4KGUpIHtcbiAgbGV0IHtcbiAgICBzbGlkZVJlYWxJbmRleDogdCxcbiAgICBzbGlkZVRvOiBzID0gITAsXG4gICAgZGlyZWN0aW9uOiBpLFxuICAgIHNldFRyYW5zbGF0ZTogcixcbiAgICBhY3RpdmVTbGlkZUluZGV4OiBhLFxuICAgIGJ5Q29udHJvbGxlcjogbixcbiAgICBieU1vdXNld2hlZWw6IGxcbiAgfSA9IHZvaWQgMCA9PT0gZSA/IHt9IDogZTtcbiAgY29uc3QgbyA9IHRoaXM7XG4gIGlmICghby5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICBvLmVtaXQoXCJiZWZvcmVMb29wRml4XCIpO1xuICBjb25zdCB7XG4gICAgc2xpZGVzOiBkLFxuICAgIGFsbG93U2xpZGVQcmV2OiBjLFxuICAgIGFsbG93U2xpZGVOZXh0OiBwLFxuICAgIHNsaWRlc0VsOiB1LFxuICAgIHBhcmFtczogaFxuICB9ID0gbztcbiAgaWYgKG8uYWxsb3dTbGlkZVByZXYgPSAhMCwgby5hbGxvd1NsaWRlTmV4dCA9ICEwLCBvLnZpcnR1YWwgJiYgaC52aXJ0dWFsLmVuYWJsZWQpIHJldHVybiBzICYmIChoLmNlbnRlcmVkU2xpZGVzIHx8IDAgIT09IG8uc25hcEluZGV4ID8gaC5jZW50ZXJlZFNsaWRlcyAmJiBvLnNuYXBJbmRleCA8IGguc2xpZGVzUGVyVmlldyA/IG8uc2xpZGVUbyhvLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIG8uc25hcEluZGV4LCAwLCAhMSwgITApIDogby5zbmFwSW5kZXggPT09IG8uc25hcEdyaWQubGVuZ3RoIC0gMSAmJiBvLnNsaWRlVG8oby52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgITEsICEwKSA6IG8uc2xpZGVUbyhvLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgITEsICEwKSksIG8uYWxsb3dTbGlkZVByZXYgPSBjLCBvLmFsbG93U2xpZGVOZXh0ID0gcCwgdm9pZCBvLmVtaXQoXCJsb29wRml4XCIpO1xuICBjb25zdCBtID0gXCJhdXRvXCIgPT09IGguc2xpZGVzUGVyVmlldyA/IG8uc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KGguc2xpZGVzUGVyVmlldywgMTApKTtcbiAgbGV0IGYgPSBoLmxvb3BlZFNsaWRlcyB8fCBtO1xuICBmICUgaC5zbGlkZXNQZXJHcm91cCAhPSAwICYmIChmICs9IGguc2xpZGVzUGVyR3JvdXAgLSBmICUgaC5zbGlkZXNQZXJHcm91cCksIG8ubG9vcGVkU2xpZGVzID0gZjtcbiAgY29uc3QgdiA9IFtdLFxuICAgIGcgPSBbXTtcbiAgbGV0IHcgPSBvLmFjdGl2ZUluZGV4O1xuICB2b2lkIDAgPT09IGEgPyBhID0gby5nZXRTbGlkZUluZGV4KG8uc2xpZGVzLmZpbHRlcihlID0+IGUuY2xhc3NMaXN0LmNvbnRhaW5zKGguc2xpZGVBY3RpdmVDbGFzcykpWzBdKSA6IHcgPSBhO1xuICBjb25zdCBTID0gXCJuZXh0XCIgPT09IGkgfHwgIWksXG4gICAgVCA9IFwicHJldlwiID09PSBpIHx8ICFpO1xuICBsZXQgYiA9IDAsXG4gICAgeCA9IDA7XG4gIGlmIChhIDwgZikge1xuICAgIGIgPSBNYXRoLm1heChmIC0gYSwgaC5zbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgZSA9IDA7IGUgPCBmIC0gYTsgZSArPSAxKSB7XG4gICAgICBjb25zdCB0ID0gZSAtIE1hdGguZmxvb3IoZSAvIGQubGVuZ3RoKSAqIGQubGVuZ3RoO1xuICAgICAgdi5wdXNoKGQubGVuZ3RoIC0gdCAtIDEpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhID4gby5zbGlkZXMubGVuZ3RoIC0gMiAqIGYpIHtcbiAgICB4ID0gTWF0aC5tYXgoYSAtIChvLnNsaWRlcy5sZW5ndGggLSAyICogZiksIGguc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGUgPSAwOyBlIDwgeDsgZSArPSAxKSB7XG4gICAgICBjb25zdCB0ID0gZSAtIE1hdGguZmxvb3IoZSAvIGQubGVuZ3RoKSAqIGQubGVuZ3RoO1xuICAgICAgZy5wdXNoKHQpO1xuICAgIH1cbiAgfVxuICBpZiAoVCAmJiB2LmZvckVhY2goZSA9PiB7XG4gICAgby5zbGlkZXNbZV0uc3dpcGVyTG9vcE1vdmVET00gPSAhMCwgdS5wcmVwZW5kKG8uc2xpZGVzW2VdKSwgby5zbGlkZXNbZV0uc3dpcGVyTG9vcE1vdmVET00gPSAhMTtcbiAgfSksIFMgJiYgZy5mb3JFYWNoKGUgPT4ge1xuICAgIG8uc2xpZGVzW2VdLnN3aXBlckxvb3BNb3ZlRE9NID0gITAsIHUuYXBwZW5kKG8uc2xpZGVzW2VdKSwgby5zbGlkZXNbZV0uc3dpcGVyTG9vcE1vdmVET00gPSAhMTtcbiAgfSksIG8ucmVjYWxjU2xpZGVzKCksIFwiYXV0b1wiID09PSBoLnNsaWRlc1BlclZpZXcgJiYgby51cGRhdGVTbGlkZXMoKSwgaC53YXRjaFNsaWRlc1Byb2dyZXNzICYmIG8udXBkYXRlU2xpZGVzT2Zmc2V0KCksIHMpIGlmICh2Lmxlbmd0aCA+IDAgJiYgVCkge1xuICAgIGlmICh2b2lkIDAgPT09IHQpIHtcbiAgICAgIGNvbnN0IGUgPSBvLnNsaWRlc0dyaWRbd10sXG4gICAgICAgIHQgPSBvLnNsaWRlc0dyaWRbdyArIGJdIC0gZTtcbiAgICAgIGwgPyBvLnNldFRyYW5zbGF0ZShvLnRyYW5zbGF0ZSAtIHQpIDogKG8uc2xpZGVUbyh3ICsgYiwgMCwgITEsICEwKSwgciAmJiAoby50b3VjaGVzW28uaXNIb3Jpem9udGFsKCkgPyBcInN0YXJ0WFwiIDogXCJzdGFydFlcIl0gKz0gdCwgby50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IG8udHJhbnNsYXRlKSk7XG4gICAgfSBlbHNlIHIgJiYgKG8uc2xpZGVUb0xvb3AodCwgMCwgITEsICEwKSwgby50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IG8udHJhbnNsYXRlKTtcbiAgfSBlbHNlIGlmIChnLmxlbmd0aCA+IDAgJiYgUykgaWYgKHZvaWQgMCA9PT0gdCkge1xuICAgIGNvbnN0IGUgPSBvLnNsaWRlc0dyaWRbd10sXG4gICAgICB0ID0gby5zbGlkZXNHcmlkW3cgLSB4XSAtIGU7XG4gICAgbCA/IG8uc2V0VHJhbnNsYXRlKG8udHJhbnNsYXRlIC0gdCkgOiAoby5zbGlkZVRvKHcgLSB4LCAwLCAhMSwgITApLCByICYmIChvLnRvdWNoZXNbby5pc0hvcml6b250YWwoKSA/IFwic3RhcnRYXCIgOiBcInN0YXJ0WVwiXSArPSB0LCBvLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gby50cmFuc2xhdGUpKTtcbiAgfSBlbHNlIG8uc2xpZGVUb0xvb3AodCwgMCwgITEsICEwKTtcbiAgaWYgKG8uYWxsb3dTbGlkZVByZXYgPSBjLCBvLmFsbG93U2xpZGVOZXh0ID0gcCwgby5jb250cm9sbGVyICYmIG8uY29udHJvbGxlci5jb250cm9sICYmICFuKSB7XG4gICAgY29uc3QgZSA9IHtcbiAgICAgIHNsaWRlUmVhbEluZGV4OiB0LFxuICAgICAgc2xpZGVUbzogITEsXG4gICAgICBkaXJlY3Rpb246IGksXG4gICAgICBzZXRUcmFuc2xhdGU6IHIsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4OiBhLFxuICAgICAgYnlDb250cm9sbGVyOiAhMFxuICAgIH07XG4gICAgQXJyYXkuaXNBcnJheShvLmNvbnRyb2xsZXIuY29udHJvbCkgPyBvLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKHQgPT4ge1xuICAgICAgIXQuZGVzdHJveWVkICYmIHQucGFyYW1zLmxvb3AgJiYgdC5sb29wRml4KGUpO1xuICAgIH0pIDogby5jb250cm9sbGVyLmNvbnRyb2wgaW5zdGFuY2VvZiBvLmNvbnN0cnVjdG9yICYmIG8uY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5sb29wICYmIG8uY29udHJvbGxlci5jb250cm9sLmxvb3BGaXgoZSk7XG4gIH1cbiAgby5lbWl0KFwibG9vcEZpeFwiKTtcbn1cbmZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBlID0gdGhpcyxcbiAgICB7XG4gICAgICBwYXJhbXM6IHQsXG4gICAgICBzbGlkZXNFbDogc1xuICAgIH0gPSBlO1xuICBpZiAoIXQubG9vcCB8fCBlLnZpcnR1YWwgJiYgZS5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIGUucmVjYWxjU2xpZGVzKCk7XG4gIGNvbnN0IGkgPSBbXTtcbiAgZS5zbGlkZXMuZm9yRWFjaChlID0+IHtcbiAgICBjb25zdCB0ID0gdm9pZCAwID09PSBlLnN3aXBlclNsaWRlSW5kZXggPyAxICogZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSA6IGUuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBpW3RdID0gZTtcbiAgfSksIGUuc2xpZGVzLmZvckVhY2goZSA9PiB7XG4gICAgZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKTtcbiAgfSksIGkuZm9yRWFjaChlID0+IHtcbiAgICBzLmFwcGVuZChlKTtcbiAgfSksIGUucmVjYWxjU2xpZGVzKCksIGUuc2xpZGVUbyhlLnJlYWxJbmRleCwgMCk7XG59XG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZTogbG9vcENyZWF0ZSxcbiAgbG9vcEZpeDogbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3k6IGxvb3BEZXN0cm95XG59O1xuZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihlKSB7XG4gIGNvbnN0IHQgPSB0aGlzO1xuICBpZiAoIXQucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgdC5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiB0LmlzTG9ja2VkIHx8IHQucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgY29uc3QgcyA9IFwiY29udGFpbmVyXCIgPT09IHQucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID8gdC5lbCA6IHQud3JhcHBlckVsO1xuICB0LmlzRWxlbWVudCAmJiAodC5fX3ByZXZlbnRPYnNlcnZlcl9fID0gITApLCBzLnN0eWxlLmN1cnNvciA9IFwibW92ZVwiLCBzLnN0eWxlLmN1cnNvciA9IGUgPyBcImdyYWJiaW5nXCIgOiBcImdyYWJcIiwgdC5pc0VsZW1lbnQgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICB0Ll9fcHJldmVudE9ic2VydmVyX18gPSAhMTtcbiAgfSk7XG59XG5mdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIGNvbnN0IGUgPSB0aGlzO1xuICBlLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIGUuaXNMb2NrZWQgfHwgZS5wYXJhbXMuY3NzTW9kZSB8fCAoZS5pc0VsZW1lbnQgJiYgKGUuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9ICEwKSwgZVtcImNvbnRhaW5lclwiID09PSBlLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA/IFwiZWxcIiA6IFwid3JhcHBlckVsXCJdLnN0eWxlLmN1cnNvciA9IFwiXCIsIGUuaXNFbGVtZW50ICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZS5fX3ByZXZlbnRPYnNlcnZlcl9fID0gITE7XG4gIH0pKTtcbn1cbnZhciBncmFiQ3Vyc29yID0ge1xuICBzZXRHcmFiQ3Vyc29yOiBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3I6IHVuc2V0R3JhYkN1cnNvclxufTtcbmZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KGUsIHQpIHtcbiAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9IHRoaXMpLCBmdW5jdGlvbiB0KHMpIHtcbiAgICBpZiAoIXMgfHwgcyA9PT0gKDAsIF9zc3JXaW5kb3dFc21NaW4uZykoKSB8fCBzID09PSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpKSByZXR1cm4gbnVsbDtcbiAgICBzLmFzc2lnbmVkU2xvdCAmJiAocyA9IHMuYXNzaWduZWRTbG90KTtcbiAgICBjb25zdCBpID0gcy5jbG9zZXN0KGUpO1xuICAgIHJldHVybiBpIHx8IHMuZ2V0Um9vdE5vZGUgPyBpIHx8IHQocy5nZXRSb290Tm9kZSgpLmhvc3QpIDogbnVsbDtcbiAgfSh0KTtcbn1cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gIGNvbnN0IHQgPSB0aGlzLFxuICAgIHMgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5nKSgpLFxuICAgIGkgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpLFxuICAgIHIgPSB0LnRvdWNoRXZlbnRzRGF0YTtcbiAgci5ldkNhY2hlLnB1c2goZSk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXM6IGEsXG4gICAgdG91Y2hlczogbixcbiAgICBlbmFibGVkOiBsXG4gIH0gPSB0O1xuICBpZiAoIWwpIHJldHVybjtcbiAgaWYgKCFhLnNpbXVsYXRlVG91Y2ggJiYgXCJtb3VzZVwiID09PSBlLnBvaW50ZXJUeXBlKSByZXR1cm47XG4gIGlmICh0LmFuaW1hdGluZyAmJiBhLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikgcmV0dXJuO1xuICAhdC5hbmltYXRpbmcgJiYgYS5jc3NNb2RlICYmIGEubG9vcCAmJiB0Lmxvb3BGaXgoKTtcbiAgbGV0IG8gPSBlO1xuICBvLm9yaWdpbmFsRXZlbnQgJiYgKG8gPSBvLm9yaWdpbmFsRXZlbnQpO1xuICBsZXQgZCA9IG8udGFyZ2V0O1xuICBpZiAoXCJ3cmFwcGVyXCIgPT09IGEudG91Y2hFdmVudHNUYXJnZXQgJiYgIXQud3JhcHBlckVsLmNvbnRhaW5zKGQpKSByZXR1cm47XG4gIGlmIChcIndoaWNoXCIgaW4gbyAmJiAzID09PSBvLndoaWNoKSByZXR1cm47XG4gIGlmIChcImJ1dHRvblwiIGluIG8gJiYgby5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChyLmlzVG91Y2hlZCAmJiByLmlzTW92ZWQpIHJldHVybjtcbiAgY29uc3QgYyA9ICEhYS5ub1N3aXBpbmdDbGFzcyAmJiBcIlwiICE9PSBhLm5vU3dpcGluZ0NsYXNzLFxuICAgIHAgPSBlLmNvbXBvc2VkUGF0aCA/IGUuY29tcG9zZWRQYXRoKCkgOiBlLnBhdGg7XG4gIGMgJiYgby50YXJnZXQgJiYgby50YXJnZXQuc2hhZG93Um9vdCAmJiBwICYmIChkID0gcFswXSk7XG4gIGNvbnN0IHUgPSBhLm5vU3dpcGluZ1NlbGVjdG9yID8gYS5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHthLm5vU3dpcGluZ0NsYXNzfWAsXG4gICAgaCA9ICEoIW8udGFyZ2V0IHx8ICFvLnRhcmdldC5zaGFkb3dSb290KTtcbiAgaWYgKGEubm9Td2lwaW5nICYmIChoID8gY2xvc2VzdEVsZW1lbnQodSwgZCkgOiBkLmNsb3Nlc3QodSkpKSByZXR1cm4gdm9pZCAodC5hbGxvd0NsaWNrID0gITApO1xuICBpZiAoYS5zd2lwZUhhbmRsZXIgJiYgIWQuY2xvc2VzdChhLnN3aXBlSGFuZGxlcikpIHJldHVybjtcbiAgbi5jdXJyZW50WCA9IG8ucGFnZVgsIG4uY3VycmVudFkgPSBvLnBhZ2VZO1xuICBjb25zdCBtID0gbi5jdXJyZW50WCxcbiAgICBmID0gbi5jdXJyZW50WSxcbiAgICB2ID0gYS5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgYS5pT1NFZGdlU3dpcGVEZXRlY3Rpb24sXG4gICAgZyA9IGEuZWRnZVN3aXBlVGhyZXNob2xkIHx8IGEuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAodiAmJiAobSA8PSBnIHx8IG0gPj0gaS5pbm5lcldpZHRoIC0gZykpIHtcbiAgICBpZiAoXCJwcmV2ZW50XCIgIT09IHYpIHJldHVybjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihyLCB7XG4gICAgaXNUb3VjaGVkOiAhMCxcbiAgICBpc01vdmVkOiAhMSxcbiAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiAhMCxcbiAgICBpc1Njcm9sbGluZzogdm9pZCAwLFxuICAgIHN0YXJ0TW92aW5nOiB2b2lkIDBcbiAgfSksIG4uc3RhcnRYID0gbSwgbi5zdGFydFkgPSBmLCByLnRvdWNoU3RhcnRUaW1lID0gKDAsIF91dGlsc01pbi5kKSgpLCB0LmFsbG93Q2xpY2sgPSAhMCwgdC51cGRhdGVTaXplKCksIHQuc3dpcGVEaXJlY3Rpb24gPSB2b2lkIDAsIGEudGhyZXNob2xkID4gMCAmJiAoci5hbGxvd1RocmVzaG9sZE1vdmUgPSAhMSk7XG4gIGxldCB3ID0gITA7XG4gIGQubWF0Y2hlcyhyLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiAodyA9ICExLCBcIlNFTEVDVFwiID09PSBkLm5vZGVOYW1lICYmIChyLmlzVG91Y2hlZCA9ICExKSksIHMuYWN0aXZlRWxlbWVudCAmJiBzLmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhyLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBzLmFjdGl2ZUVsZW1lbnQgIT09IGQgJiYgcy5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgY29uc3QgUyA9IHcgJiYgdC5hbGxvd1RvdWNoTW92ZSAmJiBhLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgIWEudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgJiYgIVMgfHwgZC5pc0NvbnRlbnRFZGl0YWJsZSB8fCBvLnByZXZlbnREZWZhdWx0KCksIGEuZnJlZU1vZGUgJiYgYS5mcmVlTW9kZS5lbmFibGVkICYmIHQuZnJlZU1vZGUgJiYgdC5hbmltYXRpbmcgJiYgIWEuY3NzTW9kZSAmJiB0LmZyZWVNb2RlLm9uVG91Y2hTdGFydCgpLCB0LmVtaXQoXCJ0b3VjaFN0YXJ0XCIsIG8pO1xufVxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICBjb25zdCB0ID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uZykoKSxcbiAgICBzID0gdGhpcyxcbiAgICBpID0gcy50b3VjaEV2ZW50c0RhdGEsXG4gICAge1xuICAgICAgcGFyYW1zOiByLFxuICAgICAgdG91Y2hlczogYSxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogbixcbiAgICAgIGVuYWJsZWQ6IGxcbiAgICB9ID0gcztcbiAgaWYgKCFsKSByZXR1cm47XG4gIGlmICghci5zaW11bGF0ZVRvdWNoICYmIFwibW91c2VcIiA9PT0gZS5wb2ludGVyVHlwZSkgcmV0dXJuO1xuICBsZXQgbyA9IGU7XG4gIGlmIChvLm9yaWdpbmFsRXZlbnQgJiYgKG8gPSBvLm9yaWdpbmFsRXZlbnQpLCAhaS5pc1RvdWNoZWQpIHJldHVybiB2b2lkIChpLnN0YXJ0TW92aW5nICYmIGkuaXNTY3JvbGxpbmcgJiYgcy5lbWl0KFwidG91Y2hNb3ZlT3Bwb3NpdGVcIiwgbykpO1xuICBjb25zdCBkID0gaS5ldkNhY2hlLmZpbmRJbmRleChlID0+IGUucG9pbnRlcklkID09PSBvLnBvaW50ZXJJZCk7XG4gIGQgPj0gMCAmJiAoaS5ldkNhY2hlW2RdID0gbyk7XG4gIGNvbnN0IGMgPSBpLmV2Q2FjaGUubGVuZ3RoID4gMSA/IGkuZXZDYWNoZVswXSA6IG8sXG4gICAgcCA9IGMucGFnZVgsXG4gICAgdSA9IGMucGFnZVk7XG4gIGlmIChvLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSByZXR1cm4gYS5zdGFydFggPSBwLCB2b2lkIChhLnN0YXJ0WSA9IHUpO1xuICBpZiAoIXMuYWxsb3dUb3VjaE1vdmUpIHJldHVybiBvLnRhcmdldC5tYXRjaGVzKGkuZm9jdXNhYmxlRWxlbWVudHMpIHx8IChzLmFsbG93Q2xpY2sgPSAhMSksIHZvaWQgKGkuaXNUb3VjaGVkICYmIChPYmplY3QuYXNzaWduKGEsIHtcbiAgICBzdGFydFg6IHAsXG4gICAgc3RhcnRZOiB1LFxuICAgIHByZXZYOiBzLnRvdWNoZXMuY3VycmVudFgsXG4gICAgcHJldlk6IHMudG91Y2hlcy5jdXJyZW50WSxcbiAgICBjdXJyZW50WDogcCxcbiAgICBjdXJyZW50WTogdVxuICB9KSwgaS50b3VjaFN0YXJ0VGltZSA9ICgwLCBfdXRpbHNNaW4uZCkoKSkpO1xuICBpZiAoci50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFyLmxvb3ApIGlmIChzLmlzVmVydGljYWwoKSkge1xuICAgIGlmICh1IDwgYS5zdGFydFkgJiYgcy50cmFuc2xhdGUgPD0gcy5tYXhUcmFuc2xhdGUoKSB8fCB1ID4gYS5zdGFydFkgJiYgcy50cmFuc2xhdGUgPj0gcy5taW5UcmFuc2xhdGUoKSkgcmV0dXJuIGkuaXNUb3VjaGVkID0gITEsIHZvaWQgKGkuaXNNb3ZlZCA9ICExKTtcbiAgfSBlbHNlIGlmIChwIDwgYS5zdGFydFggJiYgcy50cmFuc2xhdGUgPD0gcy5tYXhUcmFuc2xhdGUoKSB8fCBwID4gYS5zdGFydFggJiYgcy50cmFuc2xhdGUgPj0gcy5taW5UcmFuc2xhdGUoKSkgcmV0dXJuO1xuICBpZiAodC5hY3RpdmVFbGVtZW50ICYmIG8udGFyZ2V0ID09PSB0LmFjdGl2ZUVsZW1lbnQgJiYgby50YXJnZXQubWF0Y2hlcyhpLmZvY3VzYWJsZUVsZW1lbnRzKSkgcmV0dXJuIGkuaXNNb3ZlZCA9ICEwLCB2b2lkIChzLmFsbG93Q2xpY2sgPSAhMSk7XG4gIGlmIChpLmFsbG93VG91Y2hDYWxsYmFja3MgJiYgcy5lbWl0KFwidG91Y2hNb3ZlXCIsIG8pLCBvLnRhcmdldFRvdWNoZXMgJiYgby50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgYS5jdXJyZW50WCA9IHAsIGEuY3VycmVudFkgPSB1O1xuICBjb25zdCBoID0gYS5jdXJyZW50WCAtIGEuc3RhcnRYLFxuICAgIG0gPSBhLmN1cnJlbnRZIC0gYS5zdGFydFk7XG4gIGlmIChzLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGggKiogMiArIG0gKiogMikgPCBzLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcbiAgaWYgKHZvaWQgMCA9PT0gaS5pc1Njcm9sbGluZykge1xuICAgIGxldCBlO1xuICAgIHMuaXNIb3Jpem9udGFsKCkgJiYgYS5jdXJyZW50WSA9PT0gYS5zdGFydFkgfHwgcy5pc1ZlcnRpY2FsKCkgJiYgYS5jdXJyZW50WCA9PT0gYS5zdGFydFggPyBpLmlzU2Nyb2xsaW5nID0gITEgOiBoICogaCArIG0gKiBtID49IDI1ICYmIChlID0gMTgwICogTWF0aC5hdGFuMihNYXRoLmFicyhtKSwgTWF0aC5hYnMoaCkpIC8gTWF0aC5QSSwgaS5pc1Njcm9sbGluZyA9IHMuaXNIb3Jpem9udGFsKCkgPyBlID4gci50b3VjaEFuZ2xlIDogOTAgLSBlID4gci50b3VjaEFuZ2xlKTtcbiAgfVxuICBpZiAoaS5pc1Njcm9sbGluZyAmJiBzLmVtaXQoXCJ0b3VjaE1vdmVPcHBvc2l0ZVwiLCBvKSwgdm9pZCAwID09PSBpLnN0YXJ0TW92aW5nICYmIChhLmN1cnJlbnRYID09PSBhLnN0YXJ0WCAmJiBhLmN1cnJlbnRZID09PSBhLnN0YXJ0WSB8fCAoaS5zdGFydE1vdmluZyA9ICEwKSksIGkuaXNTY3JvbGxpbmcgfHwgcy56b29tICYmIHMucGFyYW1zLnpvb20gJiYgcy5wYXJhbXMuem9vbS5lbmFibGVkICYmIGkuZXZDYWNoZS5sZW5ndGggPiAxKSByZXR1cm4gdm9pZCAoaS5pc1RvdWNoZWQgPSAhMSk7XG4gIGlmICghaS5zdGFydE1vdmluZykgcmV0dXJuO1xuICBzLmFsbG93Q2xpY2sgPSAhMSwgIXIuY3NzTW9kZSAmJiBvLmNhbmNlbGFibGUgJiYgby5wcmV2ZW50RGVmYXVsdCgpLCByLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhci5uZXN0ZWQgJiYgby5zdG9wUHJvcGFnYXRpb24oKTtcbiAgbGV0IGYgPSBzLmlzSG9yaXpvbnRhbCgpID8gaCA6IG0sXG4gICAgdiA9IHMuaXNIb3Jpem9udGFsKCkgPyBhLmN1cnJlbnRYIC0gYS5wcmV2aW91c1ggOiBhLmN1cnJlbnRZIC0gYS5wcmV2aW91c1k7XG4gIHIub25lV2F5TW92ZW1lbnQgJiYgKGYgPSBNYXRoLmFicyhmKSAqIChuID8gMSA6IC0xKSwgdiA9IE1hdGguYWJzKHYpICogKG4gPyAxIDogLTEpKSwgYS5kaWZmID0gZiwgZiAqPSByLnRvdWNoUmF0aW8sIG4gJiYgKGYgPSAtZiwgdiA9IC12KTtcbiAgY29uc3QgZyA9IHMudG91Y2hlc0RpcmVjdGlvbjtcbiAgcy5zd2lwZURpcmVjdGlvbiA9IGYgPiAwID8gXCJwcmV2XCIgOiBcIm5leHRcIiwgcy50b3VjaGVzRGlyZWN0aW9uID0gdiA+IDAgPyBcInByZXZcIiA6IFwibmV4dFwiO1xuICBjb25zdCB3ID0gcy5wYXJhbXMubG9vcCAmJiAhci5jc3NNb2RlO1xuICBpZiAoIWkuaXNNb3ZlZCkge1xuICAgIGlmICh3ICYmIHMubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246IHMuc3dpcGVEaXJlY3Rpb25cbiAgICB9KSwgaS5zdGFydFRyYW5zbGF0ZSA9IHMuZ2V0VHJhbnNsYXRlKCksIHMuc2V0VHJhbnNpdGlvbigwKSwgcy5hbmltYXRpbmcpIHtcbiAgICAgIGNvbnN0IGUgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KFwidHJhbnNpdGlvbmVuZFwiLCB7XG4gICAgICAgIGJ1YmJsZXM6ICEwLFxuICAgICAgICBjYW5jZWxhYmxlOiAhMFxuICAgICAgfSk7XG4gICAgICBzLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGUpO1xuICAgIH1cbiAgICBpLmFsbG93TW9tZW50dW1Cb3VuY2UgPSAhMSwgIXIuZ3JhYkN1cnNvciB8fCAhMCAhPT0gcy5hbGxvd1NsaWRlTmV4dCAmJiAhMCAhPT0gcy5hbGxvd1NsaWRlUHJldiB8fCBzLnNldEdyYWJDdXJzb3IoITApLCBzLmVtaXQoXCJzbGlkZXJGaXJzdE1vdmVcIiwgbyk7XG4gIH1cbiAgbGV0IFM7XG4gIGkuaXNNb3ZlZCAmJiBnICE9PSBzLnRvdWNoZXNEaXJlY3Rpb24gJiYgdyAmJiBNYXRoLmFicyhmKSA+PSAxICYmIChzLmxvb3BGaXgoe1xuICAgIGRpcmVjdGlvbjogcy5zd2lwZURpcmVjdGlvbixcbiAgICBzZXRUcmFuc2xhdGU6ICEwXG4gIH0pLCBTID0gITApLCBzLmVtaXQoXCJzbGlkZXJNb3ZlXCIsIG8pLCBpLmlzTW92ZWQgPSAhMCwgaS5jdXJyZW50VHJhbnNsYXRlID0gZiArIGkuc3RhcnRUcmFuc2xhdGU7XG4gIGxldCBUID0gITAsXG4gICAgYiA9IHIucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAoci50b3VjaFJlbGVhc2VPbkVkZ2VzICYmIChiID0gMCksIGYgPiAwID8gKHcgJiYgIVMgJiYgaS5jdXJyZW50VHJhbnNsYXRlID4gKHIuY2VudGVyZWRTbGlkZXMgPyBzLm1pblRyYW5zbGF0ZSgpIC0gcy5zaXplIC8gMiA6IHMubWluVHJhbnNsYXRlKCkpICYmIHMubG9vcEZpeCh7XG4gICAgZGlyZWN0aW9uOiBcInByZXZcIixcbiAgICBzZXRUcmFuc2xhdGU6ICEwLFxuICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgfSksIGkuY3VycmVudFRyYW5zbGF0ZSA+IHMubWluVHJhbnNsYXRlKCkgJiYgKFQgPSAhMSwgci5yZXNpc3RhbmNlICYmIChpLmN1cnJlbnRUcmFuc2xhdGUgPSBzLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtcy5taW5UcmFuc2xhdGUoKSArIGkuc3RhcnRUcmFuc2xhdGUgKyBmKSAqKiBiKSkpIDogZiA8IDAgJiYgKHcgJiYgIVMgJiYgaS5jdXJyZW50VHJhbnNsYXRlIDwgKHIuY2VudGVyZWRTbGlkZXMgPyBzLm1heFRyYW5zbGF0ZSgpICsgcy5zaXplIC8gMiA6IHMubWF4VHJhbnNsYXRlKCkpICYmIHMubG9vcEZpeCh7XG4gICAgZGlyZWN0aW9uOiBcIm5leHRcIixcbiAgICBzZXRUcmFuc2xhdGU6ICEwLFxuICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHMuc2xpZGVzLmxlbmd0aCAtIChcImF1dG9cIiA9PT0gci5zbGlkZXNQZXJWaWV3ID8gcy5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQoci5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICB9KSwgaS5jdXJyZW50VHJhbnNsYXRlIDwgcy5tYXhUcmFuc2xhdGUoKSAmJiAoVCA9ICExLCByLnJlc2lzdGFuY2UgJiYgKGkuY3VycmVudFRyYW5zbGF0ZSA9IHMubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHMubWF4VHJhbnNsYXRlKCkgLSBpLnN0YXJ0VHJhbnNsYXRlIC0gZikgKiogYikpKSwgVCAmJiAoby5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9ICEwKSwgIXMuYWxsb3dTbGlkZU5leHQgJiYgXCJuZXh0XCIgPT09IHMuc3dpcGVEaXJlY3Rpb24gJiYgaS5jdXJyZW50VHJhbnNsYXRlIDwgaS5zdGFydFRyYW5zbGF0ZSAmJiAoaS5jdXJyZW50VHJhbnNsYXRlID0gaS5zdGFydFRyYW5zbGF0ZSksICFzLmFsbG93U2xpZGVQcmV2ICYmIFwicHJldlwiID09PSBzLnN3aXBlRGlyZWN0aW9uICYmIGkuY3VycmVudFRyYW5zbGF0ZSA+IGkuc3RhcnRUcmFuc2xhdGUgJiYgKGkuY3VycmVudFRyYW5zbGF0ZSA9IGkuc3RhcnRUcmFuc2xhdGUpLCBzLmFsbG93U2xpZGVQcmV2IHx8IHMuYWxsb3dTbGlkZU5leHQgfHwgKGkuY3VycmVudFRyYW5zbGF0ZSA9IGkuc3RhcnRUcmFuc2xhdGUpLCByLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoIShNYXRoLmFicyhmKSA+IHIudGhyZXNob2xkIHx8IGkuYWxsb3dUaHJlc2hvbGRNb3ZlKSkgcmV0dXJuIHZvaWQgKGkuY3VycmVudFRyYW5zbGF0ZSA9IGkuc3RhcnRUcmFuc2xhdGUpO1xuICAgIGlmICghaS5hbGxvd1RocmVzaG9sZE1vdmUpIHJldHVybiBpLmFsbG93VGhyZXNob2xkTW92ZSA9ICEwLCBhLnN0YXJ0WCA9IGEuY3VycmVudFgsIGEuc3RhcnRZID0gYS5jdXJyZW50WSwgaS5jdXJyZW50VHJhbnNsYXRlID0gaS5zdGFydFRyYW5zbGF0ZSwgdm9pZCAoYS5kaWZmID0gcy5pc0hvcml6b250YWwoKSA/IGEuY3VycmVudFggLSBhLnN0YXJ0WCA6IGEuY3VycmVudFkgLSBhLnN0YXJ0WSk7XG4gIH1cbiAgci5mb2xsb3dGaW5nZXIgJiYgIXIuY3NzTW9kZSAmJiAoKHIuZnJlZU1vZGUgJiYgci5mcmVlTW9kZS5lbmFibGVkICYmIHMuZnJlZU1vZGUgfHwgci53YXRjaFNsaWRlc1Byb2dyZXNzKSAmJiAocy51cGRhdGVBY3RpdmVJbmRleCgpLCBzLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSksIHIuZnJlZU1vZGUgJiYgci5mcmVlTW9kZS5lbmFibGVkICYmIHMuZnJlZU1vZGUgJiYgcy5mcmVlTW9kZS5vblRvdWNoTW92ZSgpLCBzLnVwZGF0ZVByb2dyZXNzKGkuY3VycmVudFRyYW5zbGF0ZSksIHMuc2V0VHJhbnNsYXRlKGkuY3VycmVudFRyYW5zbGF0ZSkpO1xufVxuZnVuY3Rpb24gb25Ub3VjaEVuZChlKSB7XG4gIGNvbnN0IHQgPSB0aGlzLFxuICAgIHMgPSB0LnRvdWNoRXZlbnRzRGF0YSxcbiAgICBpID0gcy5ldkNhY2hlLmZpbmRJbmRleCh0ID0+IHQucG9pbnRlcklkID09PSBlLnBvaW50ZXJJZCk7XG4gIGlmIChpID49IDAgJiYgcy5ldkNhY2hlLnNwbGljZShpLCAxKSwgW1wicG9pbnRlcmNhbmNlbFwiLCBcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVybGVhdmVcIl0uaW5jbHVkZXMoZS50eXBlKSkge1xuICAgIGlmICghKFwicG9pbnRlcmNhbmNlbFwiID09PSBlLnR5cGUgJiYgKHQuYnJvd3Nlci5pc1NhZmFyaSB8fCB0LmJyb3dzZXIuaXNXZWJWaWV3KSkpIHJldHVybjtcbiAgfVxuICBjb25zdCB7XG4gICAgcGFyYW1zOiByLFxuICAgIHRvdWNoZXM6IGEsXG4gICAgcnRsVHJhbnNsYXRlOiBuLFxuICAgIHNsaWRlc0dyaWQ6IGwsXG4gICAgZW5hYmxlZDogb1xuICB9ID0gdDtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICghci5zaW11bGF0ZVRvdWNoICYmIFwibW91c2VcIiA9PT0gZS5wb2ludGVyVHlwZSkgcmV0dXJuO1xuICBsZXQgZCA9IGU7XG4gIGlmIChkLm9yaWdpbmFsRXZlbnQgJiYgKGQgPSBkLm9yaWdpbmFsRXZlbnQpLCBzLmFsbG93VG91Y2hDYWxsYmFja3MgJiYgdC5lbWl0KFwidG91Y2hFbmRcIiwgZCksIHMuYWxsb3dUb3VjaENhbGxiYWNrcyA9ICExLCAhcy5pc1RvdWNoZWQpIHJldHVybiBzLmlzTW92ZWQgJiYgci5ncmFiQ3Vyc29yICYmIHQuc2V0R3JhYkN1cnNvcighMSksIHMuaXNNb3ZlZCA9ICExLCB2b2lkIChzLnN0YXJ0TW92aW5nID0gITEpO1xuICByLmdyYWJDdXJzb3IgJiYgcy5pc01vdmVkICYmIHMuaXNUb3VjaGVkICYmICghMCA9PT0gdC5hbGxvd1NsaWRlTmV4dCB8fCAhMCA9PT0gdC5hbGxvd1NsaWRlUHJldikgJiYgdC5zZXRHcmFiQ3Vyc29yKCExKTtcbiAgY29uc3QgYyA9ICgwLCBfdXRpbHNNaW4uZCkoKSxcbiAgICBwID0gYyAtIHMudG91Y2hTdGFydFRpbWU7XG4gIGlmICh0LmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBlID0gZC5wYXRoIHx8IGQuY29tcG9zZWRQYXRoICYmIGQuY29tcG9zZWRQYXRoKCk7XG4gICAgdC51cGRhdGVDbGlja2VkU2xpZGUoZSAmJiBlWzBdIHx8IGQudGFyZ2V0KSwgdC5lbWl0KFwidGFwIGNsaWNrXCIsIGQpLCBwIDwgMzAwICYmIGMgLSBzLmxhc3RDbGlja1RpbWUgPCAzMDAgJiYgdC5lbWl0KFwiZG91YmxlVGFwIGRvdWJsZUNsaWNrXCIsIGQpO1xuICB9XG4gIGlmIChzLmxhc3RDbGlja1RpbWUgPSAoMCwgX3V0aWxzTWluLmQpKCksICgwLCBfdXRpbHNNaW4ubikoKCkgPT4ge1xuICAgIHQuZGVzdHJveWVkIHx8ICh0LmFsbG93Q2xpY2sgPSAhMCk7XG4gIH0pLCAhcy5pc1RvdWNoZWQgfHwgIXMuaXNNb3ZlZCB8fCAhdC5zd2lwZURpcmVjdGlvbiB8fCAwID09PSBhLmRpZmYgfHwgcy5jdXJyZW50VHJhbnNsYXRlID09PSBzLnN0YXJ0VHJhbnNsYXRlKSByZXR1cm4gcy5pc1RvdWNoZWQgPSAhMSwgcy5pc01vdmVkID0gITEsIHZvaWQgKHMuc3RhcnRNb3ZpbmcgPSAhMSk7XG4gIGxldCB1O1xuICBpZiAocy5pc1RvdWNoZWQgPSAhMSwgcy5pc01vdmVkID0gITEsIHMuc3RhcnRNb3ZpbmcgPSAhMSwgdSA9IHIuZm9sbG93RmluZ2VyID8gbiA/IHQudHJhbnNsYXRlIDogLXQudHJhbnNsYXRlIDogLXMuY3VycmVudFRyYW5zbGF0ZSwgci5jc3NNb2RlKSByZXR1cm47XG4gIGlmIChyLmZyZWVNb2RlICYmIHIuZnJlZU1vZGUuZW5hYmxlZCkgcmV0dXJuIHZvaWQgdC5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICBjdXJyZW50UG9zOiB1XG4gIH0pO1xuICBsZXQgaCA9IDAsXG4gICAgbSA9IHQuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuICBmb3IgKGxldCBlID0gMDsgZSA8IGwubGVuZ3RoOyBlICs9IGUgPCByLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiByLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgY29uc3QgdCA9IGUgPCByLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogci5zbGlkZXNQZXJHcm91cDtcbiAgICB2b2lkIDAgIT09IGxbZSArIHRdID8gdSA+PSBsW2VdICYmIHUgPCBsW2UgKyB0XSAmJiAoaCA9IGUsIG0gPSBsW2UgKyB0XSAtIGxbZV0pIDogdSA+PSBsW2VdICYmIChoID0gZSwgbSA9IGxbbC5sZW5ndGggLSAxXSAtIGxbbC5sZW5ndGggLSAyXSk7XG4gIH1cbiAgbGV0IGYgPSBudWxsLFxuICAgIHYgPSBudWxsO1xuICByLnJld2luZCAmJiAodC5pc0JlZ2lubmluZyA/IHYgPSByLnZpcnR1YWwgJiYgci52aXJ0dWFsLmVuYWJsZWQgJiYgdC52aXJ0dWFsID8gdC52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogdC5zbGlkZXMubGVuZ3RoIC0gMSA6IHQuaXNFbmQgJiYgKGYgPSAwKSk7XG4gIGNvbnN0IGcgPSAodSAtIGxbaF0pIC8gbSxcbiAgICB3ID0gaCA8IHIuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiByLnNsaWRlc1Blckdyb3VwO1xuICBpZiAocCA+IHIubG9uZ1N3aXBlc01zKSB7XG4gICAgaWYgKCFyLmxvbmdTd2lwZXMpIHJldHVybiB2b2lkIHQuc2xpZGVUbyh0LmFjdGl2ZUluZGV4KTtcbiAgICBcIm5leHRcIiA9PT0gdC5zd2lwZURpcmVjdGlvbiAmJiAoZyA+PSByLmxvbmdTd2lwZXNSYXRpbyA/IHQuc2xpZGVUbyhyLnJld2luZCAmJiB0LmlzRW5kID8gZiA6IGggKyB3KSA6IHQuc2xpZGVUbyhoKSksIFwicHJldlwiID09PSB0LnN3aXBlRGlyZWN0aW9uICYmIChnID4gMSAtIHIubG9uZ1N3aXBlc1JhdGlvID8gdC5zbGlkZVRvKGggKyB3KSA6IG51bGwgIT09IHYgJiYgZyA8IDAgJiYgTWF0aC5hYnMoZykgPiByLmxvbmdTd2lwZXNSYXRpbyA/IHQuc2xpZGVUbyh2KSA6IHQuc2xpZGVUbyhoKSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFyLnNob3J0U3dpcGVzKSByZXR1cm4gdm9pZCB0LnNsaWRlVG8odC5hY3RpdmVJbmRleCk7XG4gICAgdC5uYXZpZ2F0aW9uICYmIChkLnRhcmdldCA9PT0gdC5uYXZpZ2F0aW9uLm5leHRFbCB8fCBkLnRhcmdldCA9PT0gdC5uYXZpZ2F0aW9uLnByZXZFbCkgPyBkLnRhcmdldCA9PT0gdC5uYXZpZ2F0aW9uLm5leHRFbCA/IHQuc2xpZGVUbyhoICsgdykgOiB0LnNsaWRlVG8oaCkgOiAoXCJuZXh0XCIgPT09IHQuc3dpcGVEaXJlY3Rpb24gJiYgdC5zbGlkZVRvKG51bGwgIT09IGYgPyBmIDogaCArIHcpLCBcInByZXZcIiA9PT0gdC5zd2lwZURpcmVjdGlvbiAmJiB0LnNsaWRlVG8obnVsbCAhPT0gdiA/IHYgOiBoKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICBjb25zdCBlID0gdGhpcyxcbiAgICB7XG4gICAgICBwYXJhbXM6IHQsXG4gICAgICBlbDogc1xuICAgIH0gPSBlO1xuICBpZiAocyAmJiAwID09PSBzLm9mZnNldFdpZHRoKSByZXR1cm47XG4gIHQuYnJlYWtwb2ludHMgJiYgZS5zZXRCcmVha3BvaW50KCk7XG4gIGNvbnN0IHtcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBpLFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHIsXG4gICAgICBzbmFwR3JpZDogYVxuICAgIH0gPSBlLFxuICAgIG4gPSBlLnZpcnR1YWwgJiYgZS5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBlLmFsbG93U2xpZGVOZXh0ID0gITAsIGUuYWxsb3dTbGlkZVByZXYgPSAhMCwgZS51cGRhdGVTaXplKCksIGUudXBkYXRlU2xpZGVzKCksIGUudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBjb25zdCBsID0gbiAmJiB0Lmxvb3A7XG4gICEoXCJhdXRvXCIgPT09IHQuc2xpZGVzUGVyVmlldyB8fCB0LnNsaWRlc1BlclZpZXcgPiAxKSB8fCAhZS5pc0VuZCB8fCBlLmlzQmVnaW5uaW5nIHx8IGUucGFyYW1zLmNlbnRlcmVkU2xpZGVzIHx8IGwgPyBlLnBhcmFtcy5sb29wICYmICFuID8gZS5zbGlkZVRvTG9vcChlLnJlYWxJbmRleCwgMCwgITEsICEwKSA6IGUuc2xpZGVUbyhlLmFjdGl2ZUluZGV4LCAwLCAhMSwgITApIDogZS5zbGlkZVRvKGUuc2xpZGVzLmxlbmd0aCAtIDEsIDAsICExLCAhMCksIGUuYXV0b3BsYXkgJiYgZS5hdXRvcGxheS5ydW5uaW5nICYmIGUuYXV0b3BsYXkucGF1c2VkICYmIChjbGVhclRpbWVvdXQoZS5hdXRvcGxheS5yZXNpemVUaW1lb3V0KSwgZS5hdXRvcGxheS5yZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgZS5hdXRvcGxheSAmJiBlLmF1dG9wbGF5LnJ1bm5pbmcgJiYgZS5hdXRvcGxheS5wYXVzZWQgJiYgZS5hdXRvcGxheS5yZXN1bWUoKTtcbiAgfSwgNTAwKSksIGUuYWxsb3dTbGlkZVByZXYgPSByLCBlLmFsbG93U2xpZGVOZXh0ID0gaSwgZS5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBhICE9PSBlLnNuYXBHcmlkICYmIGUuY2hlY2tPdmVyZmxvdygpO1xufVxuZnVuY3Rpb24gb25DbGljayhlKSB7XG4gIGNvbnN0IHQgPSB0aGlzO1xuICB0LmVuYWJsZWQgJiYgKHQuYWxsb3dDbGljayB8fCAodC5wYXJhbXMucHJldmVudENsaWNrcyAmJiBlLnByZXZlbnREZWZhdWx0KCksIHQucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiB0LmFuaW1hdGluZyAmJiAoZS5zdG9wUHJvcGFnYXRpb24oKSwgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSkpKTtcbn1cbmZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICBjb25zdCBlID0gdGhpcyxcbiAgICB7XG4gICAgICB3cmFwcGVyRWw6IHQsXG4gICAgICBydGxUcmFuc2xhdGU6IHMsXG4gICAgICBlbmFibGVkOiBpXG4gICAgfSA9IGU7XG4gIGlmICghaSkgcmV0dXJuO1xuICBsZXQgcjtcbiAgZS5wcmV2aW91c1RyYW5zbGF0ZSA9IGUudHJhbnNsYXRlLCBlLmlzSG9yaXpvbnRhbCgpID8gZS50cmFuc2xhdGUgPSAtdC5zY3JvbGxMZWZ0IDogZS50cmFuc2xhdGUgPSAtdC5zY3JvbGxUb3AsIDAgPT09IGUudHJhbnNsYXRlICYmIChlLnRyYW5zbGF0ZSA9IDApLCBlLnVwZGF0ZUFjdGl2ZUluZGV4KCksIGUudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBjb25zdCBhID0gZS5tYXhUcmFuc2xhdGUoKSAtIGUubWluVHJhbnNsYXRlKCk7XG4gIHIgPSAwID09PSBhID8gMCA6IChlLnRyYW5zbGF0ZSAtIGUubWluVHJhbnNsYXRlKCkpIC8gYSwgciAhPT0gZS5wcm9ncmVzcyAmJiBlLnVwZGF0ZVByb2dyZXNzKHMgPyAtZS50cmFuc2xhdGUgOiBlLnRyYW5zbGF0ZSksIGUuZW1pdChcInNldFRyYW5zbGF0ZVwiLCBlLnRyYW5zbGF0ZSwgITEpO1xufVxuZnVuY3Rpb24gb25Mb2FkKGUpIHtcbiAgY29uc3QgdCA9IHRoaXM7XG4gIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHQsIGUudGFyZ2V0KSwgdC5wYXJhbXMuY3NzTW9kZSB8fCBcImF1dG9cIiAhPT0gdC5wYXJhbXMuc2xpZGVzUGVyVmlldyAmJiAhdC5wYXJhbXMuYXV0b0hlaWdodCB8fCB0LnVwZGF0ZSgpO1xufVxubGV0IGR1bW15RXZlbnRBdHRhY2hlZCA9ICExO1xuZnVuY3Rpb24gZHVtbXlFdmVudExpc3RlbmVyKCkge31cbmNvbnN0IGV2ZW50cyA9IChlLCB0KSA9PiB7XG4gIGNvbnN0IHMgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5nKSgpLFxuICAgIHtcbiAgICAgIHBhcmFtczogaSxcbiAgICAgIGVsOiByLFxuICAgICAgd3JhcHBlckVsOiBhLFxuICAgICAgZGV2aWNlOiBuXG4gICAgfSA9IGUsXG4gICAgbCA9ICEhaS5uZXN0ZWQsXG4gICAgbyA9IFwib25cIiA9PT0gdCA/IFwiYWRkRXZlbnRMaXN0ZW5lclwiIDogXCJyZW1vdmVFdmVudExpc3RlbmVyXCIsXG4gICAgZCA9IHQ7XG4gIHJbb10oXCJwb2ludGVyZG93blwiLCBlLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6ICExXG4gIH0pLCBzW29dKFwicG9pbnRlcm1vdmVcIiwgZS5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6ICExLFxuICAgIGNhcHR1cmU6IGxcbiAgfSksIHNbb10oXCJwb2ludGVydXBcIiwgZS5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogITBcbiAgfSksIHNbb10oXCJwb2ludGVyY2FuY2VsXCIsIGUub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6ICEwXG4gIH0pLCBzW29dKFwicG9pbnRlcm91dFwiLCBlLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiAhMFxuICB9KSwgc1tvXShcInBvaW50ZXJsZWF2ZVwiLCBlLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiAhMFxuICB9KSwgKGkucHJldmVudENsaWNrcyB8fCBpLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikgJiYgcltvXShcImNsaWNrXCIsIGUub25DbGljaywgITApLCBpLmNzc01vZGUgJiYgYVtvXShcInNjcm9sbFwiLCBlLm9uU2Nyb2xsKSwgaS51cGRhdGVPbldpbmRvd1Jlc2l6ZSA/IGVbZF0obi5pb3MgfHwgbi5hbmRyb2lkID8gXCJyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGVcIiA6IFwicmVzaXplIG9ic2VydmVyVXBkYXRlXCIsIG9uUmVzaXplLCAhMCkgOiBlW2RdKFwib2JzZXJ2ZXJVcGRhdGVcIiwgb25SZXNpemUsICEwKSwgcltvXShcImxvYWRcIiwgZS5vbkxvYWQsIHtcbiAgICBjYXB0dXJlOiAhMFxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IGUgPSB0aGlzLFxuICAgIHQgPSAoMCwgX3NzcldpbmRvd0VzbU1pbi5nKSgpLFxuICAgIHtcbiAgICAgIHBhcmFtczogc1xuICAgIH0gPSBlO1xuICBlLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKGUpLCBlLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChlKSwgZS5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKGUpLCBzLmNzc01vZGUgJiYgKGUub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKGUpKSwgZS5vbkNsaWNrID0gb25DbGljay5iaW5kKGUpLCBlLm9uTG9hZCA9IG9uTG9hZC5iaW5kKGUpLCBkdW1teUV2ZW50QXR0YWNoZWQgfHwgKHQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgZHVtbXlFdmVudExpc3RlbmVyKSwgZHVtbXlFdmVudEF0dGFjaGVkID0gITApLCBldmVudHMoZSwgXCJvblwiKTtcbn1cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgZXZlbnRzKHRoaXMsIFwib2ZmXCIpO1xufVxudmFyIGV2ZW50cyQxID0ge1xuICBhdHRhY2hFdmVudHM6IGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzOiBkZXRhY2hFdmVudHNcbn07XG5jb25zdCBpc0dyaWRFbmFibGVkID0gKGUsIHQpID0+IGUuZ3JpZCAmJiB0LmdyaWQgJiYgdC5ncmlkLnJvd3MgPiAxO1xuZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgY29uc3QgZSA9IHRoaXMsXG4gICAge1xuICAgICAgcmVhbEluZGV4OiB0LFxuICAgICAgaW5pdGlhbGl6ZWQ6IHMsXG4gICAgICBwYXJhbXM6IGksXG4gICAgICBlbDogclxuICAgIH0gPSBlLFxuICAgIGEgPSBpLmJyZWFrcG9pbnRzO1xuICBpZiAoIWEgfHwgYSAmJiAwID09PSBPYmplY3Qua2V5cyhhKS5sZW5ndGgpIHJldHVybjtcbiAgY29uc3QgbiA9IGUuZ2V0QnJlYWtwb2ludChhLCBlLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIGUuZWwpO1xuICBpZiAoIW4gfHwgZS5jdXJyZW50QnJlYWtwb2ludCA9PT0gbikgcmV0dXJuO1xuICBjb25zdCBsID0gKG4gaW4gYSA/IGFbbl0gOiB2b2lkIDApIHx8IGUub3JpZ2luYWxQYXJhbXMsXG4gICAgbyA9IGlzR3JpZEVuYWJsZWQoZSwgaSksXG4gICAgZCA9IGlzR3JpZEVuYWJsZWQoZSwgbCksXG4gICAgYyA9IGkuZW5hYmxlZDtcbiAgbyAmJiAhZCA/IChyLmNsYXNzTGlzdC5yZW1vdmUoYCR7aS5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgLCBgJHtpLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKSwgZS5lbWl0Q29udGFpbmVyQ2xhc3NlcygpKSA6ICFvICYmIGQgJiYgKHIuY2xhc3NMaXN0LmFkZChgJHtpLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApLCAobC5ncmlkLmZpbGwgJiYgXCJjb2x1bW5cIiA9PT0gbC5ncmlkLmZpbGwgfHwgIWwuZ3JpZC5maWxsICYmIFwiY29sdW1uXCIgPT09IGkuZ3JpZC5maWxsKSAmJiByLmNsYXNzTGlzdC5hZGQoYCR7aS5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCksIGUuZW1pdENvbnRhaW5lckNsYXNzZXMoKSksIFtcIm5hdmlnYXRpb25cIiwgXCJwYWdpbmF0aW9uXCIsIFwic2Nyb2xsYmFyXCJdLmZvckVhY2godCA9PiB7XG4gICAgaWYgKHZvaWQgMCA9PT0gbFt0XSkgcmV0dXJuO1xuICAgIGNvbnN0IHMgPSBpW3RdICYmIGlbdF0uZW5hYmxlZCxcbiAgICAgIHIgPSBsW3RdICYmIGxbdF0uZW5hYmxlZDtcbiAgICBzICYmICFyICYmIGVbdF0uZGlzYWJsZSgpLCAhcyAmJiByICYmIGVbdF0uZW5hYmxlKCk7XG4gIH0pO1xuICBjb25zdCBwID0gbC5kaXJlY3Rpb24gJiYgbC5kaXJlY3Rpb24gIT09IGkuZGlyZWN0aW9uLFxuICAgIHUgPSBpLmxvb3AgJiYgKGwuc2xpZGVzUGVyVmlldyAhPT0gaS5zbGlkZXNQZXJWaWV3IHx8IHApO1xuICBwICYmIHMgJiYgZS5jaGFuZ2VEaXJlY3Rpb24oKSwgKDAsIF91dGlsc01pbi5xKShlLnBhcmFtcywgbCk7XG4gIGNvbnN0IGggPSBlLnBhcmFtcy5lbmFibGVkO1xuICBPYmplY3QuYXNzaWduKGUsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogZS5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgYWxsb3dTbGlkZU5leHQ6IGUucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBlLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KSwgYyAmJiAhaCA/IGUuZGlzYWJsZSgpIDogIWMgJiYgaCAmJiBlLmVuYWJsZSgpLCBlLmN1cnJlbnRCcmVha3BvaW50ID0gbiwgZS5lbWl0KFwiX2JlZm9yZUJyZWFrcG9pbnRcIiwgbCksIHUgJiYgcyAmJiAoZS5sb29wRGVzdHJveSgpLCBlLmxvb3BDcmVhdGUodCksIGUudXBkYXRlU2xpZGVzKCkpLCBlLmVtaXQoXCJicmVha3BvaW50XCIsIGwpO1xufVxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChlLCB0LCBzKSB7XG4gIGlmICh2b2lkIDAgPT09IHQgJiYgKHQgPSBcIndpbmRvd1wiKSwgIWUgfHwgXCJjb250YWluZXJcIiA9PT0gdCAmJiAhcykgcmV0dXJuO1xuICBsZXQgaSA9ICExO1xuICBjb25zdCByID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKSxcbiAgICBhID0gXCJ3aW5kb3dcIiA9PT0gdCA/IHIuaW5uZXJIZWlnaHQgOiBzLmNsaWVudEhlaWdodCxcbiAgICBuID0gT2JqZWN0LmtleXMoZSkubWFwKGUgPT4ge1xuICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgMCA9PT0gZS5pbmRleE9mKFwiQFwiKSkge1xuICAgICAgICBjb25zdCB0ID0gcGFyc2VGbG9hdChlLnN1YnN0cigxKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IGEgKiB0LFxuICAgICAgICAgIHBvaW50OiBlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZSxcbiAgICAgICAgcG9pbnQ6IGVcbiAgICAgIH07XG4gICAgfSk7XG4gIG4uc29ydCgoZSwgdCkgPT4gcGFyc2VJbnQoZS52YWx1ZSwgMTApIC0gcGFyc2VJbnQodC52YWx1ZSwgMTApKTtcbiAgZm9yIChsZXQgZSA9IDA7IGUgPCBuLmxlbmd0aDsgZSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQ6IGEsXG4gICAgICB2YWx1ZTogbFxuICAgIH0gPSBuW2VdO1xuICAgIFwid2luZG93XCIgPT09IHQgPyByLm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7bH1weClgKS5tYXRjaGVzICYmIChpID0gYSkgOiBsIDw9IHMuY2xpZW50V2lkdGggJiYgKGkgPSBhKTtcbiAgfVxuICByZXR1cm4gaSB8fCBcIm1heFwiO1xufVxudmFyIGJyZWFrcG9pbnRzID0ge1xuICBzZXRCcmVha3BvaW50OiBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50OiBnZXRCcmVha3BvaW50XG59O1xuZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZSwgdCkge1xuICBjb25zdCBzID0gW107XG4gIHJldHVybiBlLmZvckVhY2goZSA9PiB7XG4gICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgZSA/IE9iamVjdC5rZXlzKGUpLmZvckVhY2goaSA9PiB7XG4gICAgICBlW2ldICYmIHMucHVzaCh0ICsgaSk7XG4gICAgfSkgOiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIHMucHVzaCh0ICsgZSk7XG4gIH0pLCBzO1xufVxuZnVuY3Rpb24gYWRkQ2xhc3NlcygpIHtcbiAgY29uc3QgZSA9IHRoaXMsXG4gICAge1xuICAgICAgY2xhc3NOYW1lczogdCxcbiAgICAgIHBhcmFtczogcyxcbiAgICAgIHJ0bDogaSxcbiAgICAgIGVsOiByLFxuICAgICAgZGV2aWNlOiBhXG4gICAgfSA9IGUsXG4gICAgbiA9IHByZXBhcmVDbGFzc2VzKFtcImluaXRpYWxpemVkXCIsIHMuZGlyZWN0aW9uLCB7XG4gICAgICBcImZyZWUtbW9kZVwiOiBlLnBhcmFtcy5mcmVlTW9kZSAmJiBzLmZyZWVNb2RlLmVuYWJsZWRcbiAgICB9LCB7XG4gICAgICBhdXRvaGVpZ2h0OiBzLmF1dG9IZWlnaHRcbiAgICB9LCB7XG4gICAgICBydGw6IGlcbiAgICB9LCB7XG4gICAgICBncmlkOiBzLmdyaWQgJiYgcy5ncmlkLnJvd3MgPiAxXG4gICAgfSwge1xuICAgICAgXCJncmlkLWNvbHVtblwiOiBzLmdyaWQgJiYgcy5ncmlkLnJvd3MgPiAxICYmIFwiY29sdW1uXCIgPT09IHMuZ3JpZC5maWxsXG4gICAgfSwge1xuICAgICAgYW5kcm9pZDogYS5hbmRyb2lkXG4gICAgfSwge1xuICAgICAgaW9zOiBhLmlvc1xuICAgIH0sIHtcbiAgICAgIFwiY3NzLW1vZGVcIjogcy5jc3NNb2RlXG4gICAgfSwge1xuICAgICAgY2VudGVyZWQ6IHMuY3NzTW9kZSAmJiBzLmNlbnRlcmVkU2xpZGVzXG4gICAgfSwge1xuICAgICAgXCJ3YXRjaC1wcm9ncmVzc1wiOiBzLndhdGNoU2xpZGVzUHJvZ3Jlc3NcbiAgICB9XSwgcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgdC5wdXNoKC4uLm4pLCByLmNsYXNzTGlzdC5hZGQoLi4udCksIGUuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gIGNvbnN0IHtcbiAgICBlbDogZSxcbiAgICBjbGFzc05hbWVzOiB0XG4gIH0gPSB0aGlzO1xuICBlLmNsYXNzTGlzdC5yZW1vdmUoLi4udCksIHRoaXMuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cbnZhciBjbGFzc2VzID0ge1xuICBhZGRDbGFzc2VzOiBhZGRDbGFzc2VzLFxuICByZW1vdmVDbGFzc2VzOiByZW1vdmVDbGFzc2VzXG59O1xuZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgY29uc3QgZSA9IHRoaXMsXG4gICAge1xuICAgICAgaXNMb2NrZWQ6IHQsXG4gICAgICBwYXJhbXM6IHNcbiAgICB9ID0gZSxcbiAgICB7XG4gICAgICBzbGlkZXNPZmZzZXRCZWZvcmU6IGlcbiAgICB9ID0gcztcbiAgaWYgKGkpIHtcbiAgICBjb25zdCB0ID0gZS5zbGlkZXMubGVuZ3RoIC0gMSxcbiAgICAgIHMgPSBlLnNsaWRlc0dyaWRbdF0gKyBlLnNsaWRlc1NpemVzR3JpZFt0XSArIDIgKiBpO1xuICAgIGUuaXNMb2NrZWQgPSBlLnNpemUgPiBzO1xuICB9IGVsc2UgZS5pc0xvY2tlZCA9IDEgPT09IGUuc25hcEdyaWQubGVuZ3RoO1xuICAhMCA9PT0gcy5hbGxvd1NsaWRlTmV4dCAmJiAoZS5hbGxvd1NsaWRlTmV4dCA9ICFlLmlzTG9ja2VkKSwgITAgPT09IHMuYWxsb3dTbGlkZVByZXYgJiYgKGUuYWxsb3dTbGlkZVByZXYgPSAhZS5pc0xvY2tlZCksIHQgJiYgdCAhPT0gZS5pc0xvY2tlZCAmJiAoZS5pc0VuZCA9ICExKSwgdCAhPT0gZS5pc0xvY2tlZCAmJiBlLmVtaXQoZS5pc0xvY2tlZCA/IFwibG9ja1wiIDogXCJ1bmxvY2tcIik7XG59XG52YXIgY2hlY2tPdmVyZmxvdyQxID0ge1xuICAgIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3dcbiAgfSxcbiAgZGVmYXVsdHMgPSB7XG4gICAgaW5pdDogITAsXG4gICAgZGlyZWN0aW9uOiBcImhvcml6b250YWxcIixcbiAgICBvbmVXYXlNb3ZlbWVudDogITEsXG4gICAgdG91Y2hFdmVudHNUYXJnZXQ6IFwid3JhcHBlclwiLFxuICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICBzcGVlZDogMzAwLFxuICAgIGNzc01vZGU6ICExLFxuICAgIHVwZGF0ZU9uV2luZG93UmVzaXplOiAhMCxcbiAgICByZXNpemVPYnNlcnZlcjogITAsXG4gICAgbmVzdGVkOiAhMSxcbiAgICBjcmVhdGVFbGVtZW50czogITEsXG4gICAgZW5hYmxlZDogITAsXG4gICAgZm9jdXNhYmxlRWxlbWVudHM6IFwiaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWxcIixcbiAgICB3aWR0aDogbnVsbCxcbiAgICBoZWlnaHQ6IG51bGwsXG4gICAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiAhMSxcbiAgICB1c2VyQWdlbnQ6IG51bGwsXG4gICAgdXJsOiBudWxsLFxuICAgIGVkZ2VTd2lwZURldGVjdGlvbjogITEsXG4gICAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgICBhdXRvSGVpZ2h0OiAhMSxcbiAgICBzZXRXcmFwcGVyU2l6ZTogITEsXG4gICAgdmlydHVhbFRyYW5zbGF0ZTogITEsXG4gICAgZWZmZWN0OiBcInNsaWRlXCIsXG4gICAgYnJlYWtwb2ludHM6IHZvaWQgMCxcbiAgICBicmVha3BvaW50c0Jhc2U6IFwid2luZG93XCIsXG4gICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICAgIHNsaWRlc1Blckdyb3VwQXV0bzogITEsXG4gICAgY2VudGVyZWRTbGlkZXM6ICExLFxuICAgIGNlbnRlcmVkU2xpZGVzQm91bmRzOiAhMSxcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsXG4gICAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gICAgbm9ybWFsaXplU2xpZGVJbmRleDogITAsXG4gICAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiAhMSxcbiAgICB3YXRjaE92ZXJmbG93OiAhMCxcbiAgICByb3VuZExlbmd0aHM6ICExLFxuICAgIHRvdWNoUmF0aW86IDEsXG4gICAgdG91Y2hBbmdsZTogNDUsXG4gICAgc2ltdWxhdGVUb3VjaDogITAsXG4gICAgc2hvcnRTd2lwZXM6ICEwLFxuICAgIGxvbmdTd2lwZXM6ICEwLFxuICAgIGxvbmdTd2lwZXNSYXRpbzogLjUsXG4gICAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gICAgZm9sbG93RmluZ2VyOiAhMCxcbiAgICBhbGxvd1RvdWNoTW92ZTogITAsXG4gICAgdGhyZXNob2xkOiA1LFxuICAgIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogITEsXG4gICAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiAhMCxcbiAgICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogITEsXG4gICAgdG91Y2hSZWxlYXNlT25FZGdlczogITEsXG4gICAgdW5pcXVlTmF2RWxlbWVudHM6ICEwLFxuICAgIHJlc2lzdGFuY2U6ICEwLFxuICAgIHJlc2lzdGFuY2VSYXRpbzogLjg1LFxuICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ICExLFxuICAgIGdyYWJDdXJzb3I6ICExLFxuICAgIHByZXZlbnRDbGlja3M6ICEwLFxuICAgIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogITAsXG4gICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogITEsXG4gICAgbG9vcDogITEsXG4gICAgbG9vcGVkU2xpZGVzOiBudWxsLFxuICAgIGxvb3BQcmV2ZW50c1NsaWRpbmc6ICEwLFxuICAgIHJld2luZDogITEsXG4gICAgYWxsb3dTbGlkZVByZXY6ICEwLFxuICAgIGFsbG93U2xpZGVOZXh0OiAhMCxcbiAgICBzd2lwZUhhbmRsZXI6IG51bGwsXG4gICAgbm9Td2lwaW5nOiAhMCxcbiAgICBub1N3aXBpbmdDbGFzczogXCJzd2lwZXItbm8tc3dpcGluZ1wiLFxuICAgIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuICAgIHBhc3NpdmVMaXN0ZW5lcnM6ICEwLFxuICAgIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgICBjb250YWluZXJNb2RpZmllckNsYXNzOiBcInN3aXBlci1cIixcbiAgICBzbGlkZUNsYXNzOiBcInN3aXBlci1zbGlkZVwiLFxuICAgIHNsaWRlQWN0aXZlQ2xhc3M6IFwic3dpcGVyLXNsaWRlLWFjdGl2ZVwiLFxuICAgIHNsaWRlVmlzaWJsZUNsYXNzOiBcInN3aXBlci1zbGlkZS12aXNpYmxlXCIsXG4gICAgc2xpZGVOZXh0Q2xhc3M6IFwic3dpcGVyLXNsaWRlLW5leHRcIixcbiAgICBzbGlkZVByZXZDbGFzczogXCJzd2lwZXItc2xpZGUtcHJldlwiLFxuICAgIHdyYXBwZXJDbGFzczogXCJzd2lwZXItd3JhcHBlclwiLFxuICAgIGxhenlQcmVsb2FkZXJDbGFzczogXCJzd2lwZXItbGF6eS1wcmVsb2FkZXJcIixcbiAgICBsYXp5UHJlbG9hZFByZXZOZXh0OiAwLFxuICAgIHJ1bkNhbGxiYWNrc09uSW5pdDogITAsXG4gICAgX2VtaXRDbGFzc2VzOiAhMVxuICB9O1xuZXhwb3J0cy5kID0gZGVmYXVsdHM7XG5mdW5jdGlvbiBtb2R1bGVFeHRlbmRQYXJhbXMoZSwgdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHMpIHtcbiAgICB2b2lkIDAgPT09IHMgJiYgKHMgPSB7fSk7XG4gICAgY29uc3QgaSA9IE9iamVjdC5rZXlzKHMpWzBdLFxuICAgICAgciA9IHNbaV07XG4gICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgciAmJiBudWxsICE9PSByID8gKFtcIm5hdmlnYXRpb25cIiwgXCJwYWdpbmF0aW9uXCIsIFwic2Nyb2xsYmFyXCJdLmluZGV4T2YoaSkgPj0gMCAmJiAhMCA9PT0gZVtpXSAmJiAoZVtpXSA9IHtcbiAgICAgIGF1dG86ICEwXG4gICAgfSksIGkgaW4gZSAmJiBcImVuYWJsZWRcIiBpbiByID8gKCEwID09PSBlW2ldICYmIChlW2ldID0ge1xuICAgICAgZW5hYmxlZDogITBcbiAgICB9KSwgXCJvYmplY3RcIiAhPSB0eXBlb2YgZVtpXSB8fCBcImVuYWJsZWRcIiBpbiBlW2ldIHx8IChlW2ldLmVuYWJsZWQgPSAhMCksIGVbaV0gfHwgKGVbaV0gPSB7XG4gICAgICBlbmFibGVkOiAhMVxuICAgIH0pLCAoMCwgX3V0aWxzTWluLnEpKHQsIHMpKSA6ICgwLCBfdXRpbHNNaW4ucSkodCwgcykpIDogKDAsIF91dGlsc01pbi5xKSh0LCBzKTtcbiAgfTtcbn1cbmNvbnN0IHByb3RvdHlwZXMgPSB7XG4gICAgZXZlbnRzRW1pdHRlcjogZXZlbnRzRW1pdHRlcixcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgIHNsaWRlOiBzbGlkZSxcbiAgICBsb29wOiBsb29wLFxuICAgIGdyYWJDdXJzb3I6IGdyYWJDdXJzb3IsXG4gICAgZXZlbnRzOiBldmVudHMkMSxcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gICAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgfSxcbiAgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IGUsIHQ7XG4gICAgZm9yICh2YXIgcyA9IGFyZ3VtZW50cy5sZW5ndGgsIGkgPSBuZXcgQXJyYXkocyksIHIgPSAwOyByIDwgczsgcisrKSBpW3JdID0gYXJndW1lbnRzW3JdO1xuICAgIDEgPT09IGkubGVuZ3RoICYmIGlbMF0uY29uc3RydWN0b3IgJiYgXCJPYmplY3RcIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlbMF0pLnNsaWNlKDgsIC0xKSA/IHQgPSBpWzBdIDogW2UsIHRdID0gaSwgdCB8fCAodCA9IHt9KSwgdCA9ICgwLCBfdXRpbHNNaW4ucSkoe30sIHQpLCBlICYmICF0LmVsICYmICh0LmVsID0gZSk7XG4gICAgY29uc3QgYSA9ICgwLCBfc3NyV2luZG93RXNtTWluLmcpKCk7XG4gICAgaWYgKHQuZWwgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC5lbCAmJiBhLnF1ZXJ5U2VsZWN0b3JBbGwodC5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3QgZSA9IFtdO1xuICAgICAgcmV0dXJuIGEucXVlcnlTZWxlY3RvckFsbCh0LmVsKS5mb3JFYWNoKHMgPT4ge1xuICAgICAgICBjb25zdCBpID0gKDAsIF91dGlsc01pbi5xKSh7fSwgdCwge1xuICAgICAgICAgIGVsOiBzXG4gICAgICAgIH0pO1xuICAgICAgICBlLnB1c2gobmV3IFN3aXBlcihpKSk7XG4gICAgICB9KSwgZTtcbiAgICB9XG4gICAgY29uc3QgbiA9IHRoaXM7XG4gICAgbi5fX3N3aXBlcl9fID0gITAsIG4uc3VwcG9ydCA9IGdldFN1cHBvcnQoKSwgbi5kZXZpY2UgPSBnZXREZXZpY2Uoe1xuICAgICAgdXNlckFnZW50OiB0LnVzZXJBZ2VudFxuICAgIH0pLCBuLmJyb3dzZXIgPSBnZXRCcm93c2VyKCksIG4uZXZlbnRzTGlzdGVuZXJzID0ge30sIG4uZXZlbnRzQW55TGlzdGVuZXJzID0gW10sIG4ubW9kdWxlcyA9IFsuLi5uLl9fbW9kdWxlc19fXSwgdC5tb2R1bGVzICYmIEFycmF5LmlzQXJyYXkodC5tb2R1bGVzKSAmJiBuLm1vZHVsZXMucHVzaCguLi50Lm1vZHVsZXMpO1xuICAgIGNvbnN0IGwgPSB7fTtcbiAgICBuLm1vZHVsZXMuZm9yRWFjaChlID0+IHtcbiAgICAgIGUoe1xuICAgICAgICBwYXJhbXM6IHQsXG4gICAgICAgIHN3aXBlcjogbixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXModCwgbCksXG4gICAgICAgIG9uOiBuLm9uLmJpbmQobiksXG4gICAgICAgIG9uY2U6IG4ub25jZS5iaW5kKG4pLFxuICAgICAgICBvZmY6IG4ub2ZmLmJpbmQobiksXG4gICAgICAgIGVtaXQ6IG4uZW1pdC5iaW5kKG4pXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjb25zdCBvID0gKDAsIF91dGlsc01pbi5xKSh7fSwgZGVmYXVsdHMsIGwpO1xuICAgIHJldHVybiBuLnBhcmFtcyA9ICgwLCBfdXRpbHNNaW4ucSkoe30sIG8sIGV4dGVuZGVkRGVmYXVsdHMsIHQpLCBuLm9yaWdpbmFsUGFyYW1zID0gKDAsIF91dGlsc01pbi5xKSh7fSwgbi5wYXJhbXMpLCBuLnBhc3NlZFBhcmFtcyA9ICgwLCBfdXRpbHNNaW4ucSkoe30sIHQpLCBuLnBhcmFtcyAmJiBuLnBhcmFtcy5vbiAmJiBPYmplY3Qua2V5cyhuLnBhcmFtcy5vbikuZm9yRWFjaChlID0+IHtcbiAgICAgIG4ub24oZSwgbi5wYXJhbXMub25bZV0pO1xuICAgIH0pLCBuLnBhcmFtcyAmJiBuLnBhcmFtcy5vbkFueSAmJiBuLm9uQW55KG4ucGFyYW1zLm9uQW55KSwgT2JqZWN0LmFzc2lnbihuLCB7XG4gICAgICBlbmFibGVkOiBuLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWw6IGUsXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICBpc0hvcml6b250YWw6ICgpID0+IFwiaG9yaXpvbnRhbFwiID09PSBuLnBhcmFtcy5kaXJlY3Rpb24sXG4gICAgICBpc1ZlcnRpY2FsOiAoKSA9PiBcInZlcnRpY2FsXCIgPT09IG4ucGFyYW1zLmRpcmVjdGlvbixcbiAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgaXNCZWdpbm5pbmc6ICEwLFxuICAgICAgaXNFbmQ6ICExLFxuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiAhMSxcbiAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModGhpcy50cmFuc2xhdGUgLyAyICoqIDIzKSAqIDIgKiogMjM7XG4gICAgICB9LFxuICAgICAgYWxsb3dTbGlkZU5leHQ6IG4ucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IG4ucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdm9pZCAwLFxuICAgICAgICBpc01vdmVkOiB2b2lkIDAsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHZvaWQgMCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHZvaWQgMCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHZvaWQgMCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdm9pZCAwLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdm9pZCAwLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHZvaWQgMCxcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6IG4ucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiAwLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHZvaWQgMCxcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHZvaWQgMCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHZvaWQgMCxcbiAgICAgICAgZXZDYWNoZTogW11cbiAgICAgIH0sXG4gICAgICBhbGxvd0NsaWNrOiAhMCxcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBuLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KSwgbi5lbWl0KFwiX3N3aXBlclwiKSwgbi5wYXJhbXMuaW5pdCAmJiBuLmluaXQoKSwgbjtcbiAgfVxuICBnZXRTbGlkZUluZGV4KGUpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHNsaWRlc0VsOiB0LFxuICAgICAgICBwYXJhbXM6IHNcbiAgICAgIH0gPSB0aGlzLFxuICAgICAgaSA9ICgwLCBfdXRpbHNNaW4uZSkodCwgYC4ke3Muc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApLFxuICAgICAgciA9ICgwLCBfdXRpbHNNaW4uZykoaVswXSk7XG4gICAgcmV0dXJuICgwLCBfdXRpbHNNaW4uZykoZSkgLSByO1xuICB9XG4gIGdldFNsaWRlSW5kZXhCeURhdGEoZSkge1xuICAgIHJldHVybiB0aGlzLmdldFNsaWRlSW5kZXgodGhpcy5zbGlkZXMuZmlsdGVyKHQgPT4gMSAqIHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikgPT09IGUpWzBdKTtcbiAgfVxuICByZWNhbGNTbGlkZXMoKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWw6IGUsXG4gICAgICBwYXJhbXM6IHRcbiAgICB9ID0gdGhpcztcbiAgICB0aGlzLnNsaWRlcyA9ICgwLCBfdXRpbHNNaW4uZSkoZSwgYC4ke3Quc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBlID0gdGhpcztcbiAgICBlLmVuYWJsZWQgfHwgKGUuZW5hYmxlZCA9ICEwLCBlLnBhcmFtcy5ncmFiQ3Vyc29yICYmIGUuc2V0R3JhYkN1cnNvcigpLCBlLmVtaXQoXCJlbmFibGVcIikpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3QgZSA9IHRoaXM7XG4gICAgZS5lbmFibGVkICYmIChlLmVuYWJsZWQgPSAhMSwgZS5wYXJhbXMuZ3JhYkN1cnNvciAmJiBlLnVuc2V0R3JhYkN1cnNvcigpLCBlLmVtaXQoXCJkaXNhYmxlXCIpKTtcbiAgfVxuICBzZXRQcm9ncmVzcyhlLCB0KSB7XG4gICAgY29uc3QgcyA9IHRoaXM7XG4gICAgZSA9IE1hdGgubWluKE1hdGgubWF4KGUsIDApLCAxKTtcbiAgICBjb25zdCBpID0gcy5taW5UcmFuc2xhdGUoKSxcbiAgICAgIHIgPSAocy5tYXhUcmFuc2xhdGUoKSAtIGkpICogZSArIGk7XG4gICAgcy50cmFuc2xhdGVUbyhyLCB2b2lkIDAgPT09IHQgPyAwIDogdCksIHMudXBkYXRlQWN0aXZlSW5kZXgoKSwgcy51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3QgZSA9IHRoaXM7XG4gICAgaWYgKCFlLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIWUuZWwpIHJldHVybjtcbiAgICBjb25zdCB0ID0gZS5lbC5jbGFzc05hbWUuc3BsaXQoXCIgXCIpLmZpbHRlcih0ID0+IDAgPT09IHQuaW5kZXhPZihcInN3aXBlclwiKSB8fCAwID09PSB0LmluZGV4T2YoZS5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykpO1xuICAgIGUuZW1pdChcIl9jb250YWluZXJDbGFzc2VzXCIsIHQuam9pbihcIiBcIikpO1xuICB9XG4gIGdldFNsaWRlQ2xhc3NlcyhlKSB7XG4gICAgY29uc3QgdCA9IHRoaXM7XG4gICAgcmV0dXJuIHQuZGVzdHJveWVkID8gXCJcIiA6IGUuY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5maWx0ZXIoZSA9PiAwID09PSBlLmluZGV4T2YoXCJzd2lwZXItc2xpZGVcIikgfHwgMCA9PT0gZS5pbmRleE9mKHQucGFyYW1zLnNsaWRlQ2xhc3MpKS5qb2luKFwiIFwiKTtcbiAgfVxuICBlbWl0U2xpZGVzQ2xhc3NlcygpIHtcbiAgICBjb25zdCBlID0gdGhpcztcbiAgICBpZiAoIWUucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhZS5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBbXTtcbiAgICBlLnNsaWRlcy5mb3JFYWNoKHMgPT4ge1xuICAgICAgY29uc3QgaSA9IGUuZ2V0U2xpZGVDbGFzc2VzKHMpO1xuICAgICAgdC5wdXNoKHtcbiAgICAgICAgc2xpZGVFbDogcyxcbiAgICAgICAgY2xhc3NOYW1lczogaVxuICAgICAgfSksIGUuZW1pdChcIl9zbGlkZUNsYXNzXCIsIHMsIGkpO1xuICAgIH0pLCBlLmVtaXQoXCJfc2xpZGVDbGFzc2VzXCIsIHQpO1xuICB9XG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKGUsIHQpIHtcbiAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBcImN1cnJlbnRcIiksIHZvaWQgMCA9PT0gdCAmJiAodCA9ICExKTtcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXM6IHMsXG4gICAgICBzbGlkZXM6IGksXG4gICAgICBzbGlkZXNHcmlkOiByLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBhLFxuICAgICAgc2l6ZTogbixcbiAgICAgIGFjdGl2ZUluZGV4OiBsXG4gICAgfSA9IHRoaXM7XG4gICAgbGV0IG8gPSAxO1xuICAgIGlmIChzLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgZSxcbiAgICAgICAgdCA9IGlbbF0gPyBpW2xdLnN3aXBlclNsaWRlU2l6ZSA6IDA7XG4gICAgICBmb3IgKGxldCBzID0gbCArIDE7IHMgPCBpLmxlbmd0aDsgcyArPSAxKSBpW3NdICYmICFlICYmICh0ICs9IGlbc10uc3dpcGVyU2xpZGVTaXplLCBvICs9IDEsIHQgPiBuICYmIChlID0gITApKTtcbiAgICAgIGZvciAobGV0IHMgPSBsIC0gMTsgcyA+PSAwOyBzIC09IDEpIGlbc10gJiYgIWUgJiYgKHQgKz0gaVtzXS5zd2lwZXJTbGlkZVNpemUsIG8gKz0gMSwgdCA+IG4gJiYgKGUgPSAhMCkpO1xuICAgIH0gZWxzZSBpZiAoXCJjdXJyZW50XCIgPT09IGUpIGZvciAobGV0IGUgPSBsICsgMTsgZSA8IGkubGVuZ3RoOyBlICs9IDEpIHtcbiAgICAgICh0ID8gcltlXSArIGFbZV0gLSByW2xdIDwgbiA6IHJbZV0gLSByW2xdIDwgbikgJiYgKG8gKz0gMSk7XG4gICAgfSBlbHNlIGZvciAobGV0IGUgPSBsIC0gMTsgZSA+PSAwOyBlIC09IDEpIHtcbiAgICAgIHJbbF0gLSByW2VdIDwgbiAmJiAobyArPSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzO1xuICAgIGlmICghZSB8fCBlLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNuYXBHcmlkOiB0LFxuICAgICAgcGFyYW1zOiBzXG4gICAgfSA9IGU7XG4gICAgZnVuY3Rpb24gaSgpIHtcbiAgICAgIGNvbnN0IHQgPSBlLnJ0bFRyYW5zbGF0ZSA/IC0xICogZS50cmFuc2xhdGUgOiBlLnRyYW5zbGF0ZSxcbiAgICAgICAgcyA9IE1hdGgubWluKE1hdGgubWF4KHQsIGUubWF4VHJhbnNsYXRlKCkpLCBlLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIGUuc2V0VHJhbnNsYXRlKHMpLCBlLnVwZGF0ZUFjdGl2ZUluZGV4KCksIGUudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBsZXQgcjtcbiAgICBpZiAocy5icmVha3BvaW50cyAmJiBlLnNldEJyZWFrcG9pbnQoKSwgWy4uLmUuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldLmZvckVhY2godCA9PiB7XG4gICAgICB0LmNvbXBsZXRlICYmIHByb2Nlc3NMYXp5UHJlbG9hZGVyKGUsIHQpO1xuICAgIH0pLCBlLnVwZGF0ZVNpemUoKSwgZS51cGRhdGVTbGlkZXMoKSwgZS51cGRhdGVQcm9ncmVzcygpLCBlLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgcy5mcmVlTW9kZSAmJiBzLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXMuY3NzTW9kZSkgaSgpLCBzLmF1dG9IZWlnaHQgJiYgZS51cGRhdGVBdXRvSGVpZ2h0KCk7ZWxzZSB7XG4gICAgICBpZiAoKFwiYXV0b1wiID09PSBzLnNsaWRlc1BlclZpZXcgfHwgcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgZS5pc0VuZCAmJiAhcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCB0ID0gZS52aXJ0dWFsICYmIHMudmlydHVhbC5lbmFibGVkID8gZS52aXJ0dWFsLnNsaWRlcyA6IGUuc2xpZGVzO1xuICAgICAgICByID0gZS5zbGlkZVRvKHQubGVuZ3RoIC0gMSwgMCwgITEsICEwKTtcbiAgICAgIH0gZWxzZSByID0gZS5zbGlkZVRvKGUuYWN0aXZlSW5kZXgsIDAsICExLCAhMCk7XG4gICAgICByIHx8IGkoKTtcbiAgICB9XG4gICAgcy53YXRjaE92ZXJmbG93ICYmIHQgIT09IGUuc25hcEdyaWQgJiYgZS5jaGVja092ZXJmbG93KCksIGUuZW1pdChcInVwZGF0ZVwiKTtcbiAgfVxuICBjaGFuZ2VEaXJlY3Rpb24oZSwgdCkge1xuICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9ICEwKTtcbiAgICBjb25zdCBzID0gdGhpcyxcbiAgICAgIGkgPSBzLnBhcmFtcy5kaXJlY3Rpb247XG4gICAgcmV0dXJuIGUgfHwgKGUgPSBcImhvcml6b250YWxcIiA9PT0gaSA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiKSwgZSA9PT0gaSB8fCBcImhvcml6b250YWxcIiAhPT0gZSAmJiBcInZlcnRpY2FsXCIgIT09IGUgfHwgKHMuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7aX1gKSwgcy5lbC5jbGFzc0xpc3QuYWRkKGAke3MucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtlfWApLCBzLmVtaXRDb250YWluZXJDbGFzc2VzKCksIHMucGFyYW1zLmRpcmVjdGlvbiA9IGUsIHMuc2xpZGVzLmZvckVhY2godCA9PiB7XG4gICAgICBcInZlcnRpY2FsXCIgPT09IGUgPyB0LnN0eWxlLndpZHRoID0gXCJcIiA6IHQuc3R5bGUuaGVpZ2h0ID0gXCJcIjtcbiAgICB9KSwgcy5lbWl0KFwiY2hhbmdlRGlyZWN0aW9uXCIpLCB0ICYmIHMudXBkYXRlKCkpLCBzO1xuICB9XG4gIGNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcztcbiAgICB0LnJ0bCAmJiBcInJ0bFwiID09PSBlIHx8ICF0LnJ0bCAmJiBcImx0clwiID09PSBlIHx8ICh0LnJ0bCA9IFwicnRsXCIgPT09IGUsIHQucnRsVHJhbnNsYXRlID0gXCJob3Jpem9udGFsXCIgPT09IHQucGFyYW1zLmRpcmVjdGlvbiAmJiB0LnJ0bCwgdC5ydGwgPyAodC5lbC5jbGFzc0xpc3QuYWRkKGAke3QucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCksIHQuZWwuZGlyID0gXCJydGxcIikgOiAodC5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3QucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCksIHQuZWwuZGlyID0gXCJsdHJcIiksIHQudXBkYXRlKCkpO1xuICB9XG4gIG1vdW50KGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcztcbiAgICBpZiAodC5tb3VudGVkKSByZXR1cm4gITA7XG4gICAgbGV0IHMgPSBlIHx8IHQucGFyYW1zLmVsO1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBzICYmIChzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzKSksICFzKSByZXR1cm4gITE7XG4gICAgcy5zd2lwZXIgPSB0LCBzLnBhcmVudE5vZGUgJiYgcy5wYXJlbnROb2RlLmhvc3QgJiYgXCJTV0lQRVItQ09OVEFJTkVSXCIgPT09IHMucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lICYmICh0LmlzRWxlbWVudCA9ICEwKTtcbiAgICBjb25zdCBpID0gKCkgPT4gYC4keyh0LnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgXCJcIikudHJpbSgpLnNwbGl0KFwiIFwiKS5qb2luKFwiLlwiKX1gO1xuICAgIGxldCByID0gKCgpID0+IHtcbiAgICAgIGlmIChzICYmIHMuc2hhZG93Um9vdCAmJiBzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoaSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoMCwgX3V0aWxzTWluLmUpKHMsIGkoKSlbMF07XG4gICAgfSkoKTtcbiAgICByZXR1cm4gIXIgJiYgdC5wYXJhbXMuY3JlYXRlRWxlbWVudHMgJiYgKHIgPSAoMCwgX3V0aWxzTWluLmMpKFwiZGl2XCIsIHQucGFyYW1zLndyYXBwZXJDbGFzcyksIHMuYXBwZW5kKHIpLCAoMCwgX3V0aWxzTWluLmUpKHMsIGAuJHt0LnBhcmFtcy5zbGlkZUNsYXNzfWApLmZvckVhY2goZSA9PiB7XG4gICAgICByLmFwcGVuZChlKTtcbiAgICB9KSksIE9iamVjdC5hc3NpZ24odCwge1xuICAgICAgZWw6IHMsXG4gICAgICB3cmFwcGVyRWw6IHIsXG4gICAgICBzbGlkZXNFbDogdC5pc0VsZW1lbnQgJiYgIXMucGFyZW50Tm9kZS5ob3N0LnNsaWRlU2xvdHMgPyBzLnBhcmVudE5vZGUuaG9zdCA6IHIsXG4gICAgICBob3N0RWw6IHQuaXNFbGVtZW50ID8gcy5wYXJlbnROb2RlLmhvc3QgOiBzLFxuICAgICAgbW91bnRlZDogITAsXG4gICAgICBydGw6IFwicnRsXCIgPT09IHMuZGlyLnRvTG93ZXJDYXNlKCkgfHwgXCJydGxcIiA9PT0gKDAsIF91dGlsc01pbi5sKShzLCBcImRpcmVjdGlvblwiKSxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogXCJob3Jpem9udGFsXCIgPT09IHQucGFyYW1zLmRpcmVjdGlvbiAmJiAoXCJydGxcIiA9PT0gcy5kaXIudG9Mb3dlckNhc2UoKSB8fCBcInJ0bFwiID09PSAoMCwgX3V0aWxzTWluLmwpKHMsIFwiZGlyZWN0aW9uXCIpKSxcbiAgICAgIHdyb25nUlRMOiBcIi13ZWJraXQtYm94XCIgPT09ICgwLCBfdXRpbHNNaW4ubCkociwgXCJkaXNwbGF5XCIpXG4gICAgfSksICEwO1xuICB9XG4gIGluaXQoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgIGlmICh0LmluaXRpYWxpemVkKSByZXR1cm4gdDtcbiAgICByZXR1cm4gITEgPT09IHQubW91bnQoZSkgfHwgKHQuZW1pdChcImJlZm9yZUluaXRcIiksIHQucGFyYW1zLmJyZWFrcG9pbnRzICYmIHQuc2V0QnJlYWtwb2ludCgpLCB0LmFkZENsYXNzZXMoKSwgdC51cGRhdGVTaXplKCksIHQudXBkYXRlU2xpZGVzKCksIHQucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgdC5jaGVja092ZXJmbG93KCksIHQucGFyYW1zLmdyYWJDdXJzb3IgJiYgdC5lbmFibGVkICYmIHQuc2V0R3JhYkN1cnNvcigpLCB0LnBhcmFtcy5sb29wICYmIHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0LnNsaWRlVG8odC5wYXJhbXMuaW5pdGlhbFNsaWRlICsgdC52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgdC5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCAhMSwgITApIDogdC5zbGlkZVRvKHQucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgdC5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCAhMSwgITApLCB0LnBhcmFtcy5sb29wICYmIHQubG9vcENyZWF0ZSgpLCB0LmF0dGFjaEV2ZW50cygpLCBbLi4udC5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChlID0+IHtcbiAgICAgIGUuY29tcGxldGUgPyBwcm9jZXNzTGF6eVByZWxvYWRlcih0LCBlKSA6IGUuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZSA9PiB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHQsIGUudGFyZ2V0KTtcbiAgICAgIH0pO1xuICAgIH0pLCBwcmVsb2FkKHQpLCB0LmluaXRpYWxpemVkID0gITAsIHByZWxvYWQodCksIHQuZW1pdChcImluaXRcIiksIHQuZW1pdChcImFmdGVySW5pdFwiKSksIHQ7XG4gIH1cbiAgZGVzdHJveShlLCB0KSB7XG4gICAgdm9pZCAwID09PSBlICYmIChlID0gITApLCB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCk7XG4gICAgY29uc3QgcyA9IHRoaXMsXG4gICAgICB7XG4gICAgICAgIHBhcmFtczogaSxcbiAgICAgICAgZWw6IHIsXG4gICAgICAgIHdyYXBwZXJFbDogYSxcbiAgICAgICAgc2xpZGVzOiBuXG4gICAgICB9ID0gcztcbiAgICByZXR1cm4gdm9pZCAwID09PSBzLnBhcmFtcyB8fCBzLmRlc3Ryb3llZCB8fCAocy5lbWl0KFwiYmVmb3JlRGVzdHJveVwiKSwgcy5pbml0aWFsaXplZCA9ICExLCBzLmRldGFjaEV2ZW50cygpLCBpLmxvb3AgJiYgcy5sb29wRGVzdHJveSgpLCB0ICYmIChzLnJlbW92ZUNsYXNzZXMoKSwgci5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSwgYS5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSwgbiAmJiBuLmxlbmd0aCAmJiBuLmZvckVhY2goZSA9PiB7XG4gICAgICBlLmNsYXNzTGlzdC5yZW1vdmUoaS5zbGlkZVZpc2libGVDbGFzcywgaS5zbGlkZUFjdGl2ZUNsYXNzLCBpLnNsaWRlTmV4dENsYXNzLCBpLnNsaWRlUHJldkNsYXNzKSwgZS5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSwgZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKTtcbiAgICB9KSksIHMuZW1pdChcImRlc3Ryb3lcIiksIE9iamVjdC5rZXlzKHMuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgcy5vZmYoZSk7XG4gICAgfSksICExICE9PSBlICYmIChzLmVsLnN3aXBlciA9IG51bGwsICgwLCBfdXRpbHNNaW4ucikocykpLCBzLmRlc3Ryb3llZCA9ICEwKSwgbnVsbDtcbiAgfVxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMoZSkge1xuICAgICgwLCBfdXRpbHNNaW4ucSkoZXh0ZW5kZWREZWZhdWx0cywgZSk7XG4gIH1cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBpbnN0YWxsTW9kdWxlKGUpIHtcbiAgICBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fIHx8IChTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW10pO1xuICAgIGNvbnN0IHQgPSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fO1xuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSAmJiB0LmluZGV4T2YoZSkgPCAwICYmIHQucHVzaChlKTtcbiAgfVxuICBzdGF0aWMgdXNlKGUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShlKSA/IChlLmZvckVhY2goZSA9PiBTd2lwZXIuaW5zdGFsbE1vZHVsZShlKSksIFN3aXBlcikgOiAoU3dpcGVyLmluc3RhbGxNb2R1bGUoZSksIFN3aXBlcik7XG4gIH1cbn1cbmV4cG9ydHMuUyA9IFN3aXBlcjtcbk9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2goZSA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbZV0pLmZvckVhY2godCA9PiB7XG4gICAgU3dpcGVyLnByb3RvdHlwZVt0XSA9IHByb3RvdHlwZXNbZV1bdF07XG4gIH0pO1xufSksIFN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKZmRYUnBiSE5OYVc0aUxDSnlaWEYxYVhKbElpd2ljM1Z3Y0c5eWRDSXNJbVJsZG1salpVTmhZMmhsWkNJc0ltSnliM2R6WlhJaUxDSmpZV3hqVTNWd2NHOXlkQ0lzSW1VaUxDSm5aWFJYYVc1a2IzY2lMQ0owSWl3aVoyVjBSRzlqZFcxbGJuUWlMQ0p6Ylc5dmRHaFRZM0p2Ykd3aUxDSmtiMk4xYldWdWRFVnNaVzFsYm5RaUxDSnpkSGxzWlNJc0luUnZkV05vSWl3aVJHOWpkVzFsYm5SVWIzVmphQ0lzSW1kbGRGTjFjSEJ2Y25RaUxDSmpZV3hqUkdWMmFXTmxJaXdpZFhObGNrRm5aVzUwSWl3aWN5SXNJbWtpTENKeUlpd2libUYyYVdkaGRHOXlJaXdpY0d4aGRHWnZjbTBpTENKaElpd2liaUlzSW1sdmN5SXNJbUZ1WkhKdmFXUWlMQ0pzSWl3aWMyTnlaV1Z1SWl3aWQybGtkR2dpTENKdklpd2lhR1ZwWjJoMElpd2laQ0lzSW0xaGRHTm9JaXdpWXlJc0luQWlMQ0oxSWl3aWFDSXNJbTBpTENKcGJtUmxlRTltSWl3aWIzTWlMQ0puWlhSRVpYWnBZMlVpTENKallXeGpRbkp2ZDNObGNpSXNJblJ2VEc5M1pYSkRZWE5sSWl3aVUzUnlhVzVuSWl3aWFXNWpiSFZrWlhNaUxDSnpjR3hwZENJc0ltMWhjQ0lzSWs1MWJXSmxjaUlzSW1selUyRm1ZWEpwSWl3aWJtVmxaRkJsY25Od1pXTjBhWFpsUm1sNElpd2lhWE5YWldKV2FXVjNJaXdpZEdWemRDSXNJbWRsZEVKeWIzZHpaWElpTENKU1pYTnBlbVVpTENKemQybHdaWElpTENKdmJpSXNJbVZ0YVhRaUxDSnlaWE5wZW1WSVlXNWtiR1Z5SWl3aVpHVnpkSEp2ZVdWa0lpd2lhVzVwZEdsaGJHbDZaV1FpTENKdmNtbGxiblJoZEdsdmJrTm9ZVzVuWlVoaGJtUnNaWElpTENKd1lYSmhiWE1pTENKeVpYTnBlbVZQWW5ObGNuWmxjaUlzSWxKbGMybDZaVTlpYzJWeWRtVnlJaXdpY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElpd2labTl5UldGamFDSXNJbU52Ym5SbGJuUkNiM2hUYVhwbElpd2lZMjl1ZEdWdWRGSmxZM1FpTENKMFlYSm5aWFFpTENKbGJDSXNJbWx1YkdsdVpWTnBlbVVpTENKaWJHOWphMU5wZW1VaUxDSnZZbk5sY25abElpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbU5oYm1ObGJFRnVhVzFoZEdsdmJrWnlZVzFsSWl3aWRXNXZZbk5sY25abElpd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUlzSWs5aWMyVnlkbVZ5SWl3aVpYaDBaVzVrVUdGeVlXMXpJaXdpWVhSMFlXTm9JaXdpVFhWMFlYUnBiMjVQWW5ObGNuWmxjaUlzSWxkbFltdHBkRTExZEdGMGFXOXVUMkp6WlhKMlpYSWlMQ0pmWDNCeVpYWmxiblJQWW5ObGNuWmxjbDlmSWl3aWJHVnVaM1JvSWl3aWIySnpaWEoyWlhKVmNHUmhkR1VpTENKelpYUlVhVzFsYjNWMElpd2lZWFIwY21saWRYUmxjeUlzSW1Ob2FXeGtUR2x6ZENJc0ltTm9ZWEpoWTNSbGNrUmhkR0VpTENKd2RYTm9JaXdpYjJKelpYSjJaWElpTENKdlluTmxjblpsVUdGeVpXNTBjeUlzSW05aWMyVnlkbVZUYkdsa1pVTm9hV3hrY21WdUlpd2laV3hsYldWdWRGQmhjbVZ1ZEhNaUxDSm9iM04wUld3aUxDSjNjbUZ3Y0dWeVJXd2lMQ0prYVhOamIyNXVaV04wSWl3aWMzQnNhV05sSWl3aVpYWmxiblJ6UlcxcGRIUmxjaUlzSW1WMlpXNTBjMHhwYzNSbGJtVnljeUlzSW05dVkyVWlMQ0p2Wm1ZaUxDSmZYMlZ0YVhSMFpYSlFjbTk0ZVNJc0ltRnlaM1Z0Wlc1MGN5SXNJa0Z5Y21GNUlpd2lZWEJ3YkhraUxDSnZia0Z1ZVNJc0ltVjJaVzUwYzBGdWVVeHBjM1JsYm1WeWN5SXNJbTltWmtGdWVTSXNJbWx6UVhKeVlYa2lMQ0p6YkdsalpTSXNJbVYyWlc1MGN5SXNJbVJoZEdFaUxDSmpiMjUwWlhoMElpd2lkVzV6YUdsbWRDSXNJblZ3WkdGMFpWTnBlbVVpTENKamJHbGxiblJYYVdSMGFDSXNJbU5zYVdWdWRFaGxhV2RvZENJc0ltbHpTRzl5YVhwdmJuUmhiQ0lzSW1selZtVnlkR2xqWVd3aUxDSndZWEp6WlVsdWRDSXNJbVZzWlcxbGJuUlRkSGxzWlNJc0ltbHpUbUZPSWl3aVQySnFaV04wSWl3aVlYTnphV2R1SWl3aWMybDZaU0lzSW5Wd1pHRjBaVk5zYVdSbGN5SXNJbTFoY21kcGJsSnBaMmgwSWl3aWNHRnljMlZHYkc5aGRDSXNJbWRsZEZCeWIzQmxjblI1Vm1Gc2RXVWlMQ0p6Ykdsa1pYTkZiQ0lzSW5KMGJGUnlZVzV6YkdGMFpTSXNJbmR5YjI1blVsUk1JaXdpZG1seWRIVmhiQ0lzSW1WdVlXSnNaV1FpTENKemJHbGtaWE1pTENKbGJHVnRaVzUwUTJocGJHUnlaVzRpTENKemJHbGtaVU5zWVhOeklpd2laaUlzSW5ZaUxDSnpiR2xrWlhOUFptWnpaWFJDWldadmNtVWlMQ0pqWVd4c0lpd2laeUlzSW5Oc2FXUmxjMDltWm5ObGRFRm1kR1Z5SWl3aWR5SXNJbk51WVhCSGNtbGtJaXdpVXlJc0luTnNhV1JsYzBkeWFXUWlMQ0pVSWl3aWMzQmhZMlZDWlhSM1pXVnVJaXdpWWlJc0luZ2lMQ0pGSWl3aWNtVndiR0ZqWlNJc0luWnBjblIxWVd4VGFYcGxJaXdpYldGeVoybHVUR1ZtZENJc0ltMWhjbWRwYmtKdmRIUnZiU0lzSW0xaGNtZHBibFJ2Y0NJc0ltTmxiblJsY21Wa1UyeHBaR1Z6SWl3aVkzTnpUVzlrWlNJc0luTmxkRU5UVTFCeWIzQmxjblI1SWl3aWVTSXNJbWR5YVdRaUxDSnliM2R6SWl3aVF5SXNJbWx1YVhSVGJHbGtaWE1pTENKTklpd2ljMnhwWkdWelVHVnlWbWxsZHlJc0ltSnlaV0ZyY0c5cGJuUnpJaXdpYTJWNWN5SXNJbVpwYkhSbGNpSXNJblZ3WkdGMFpWTnNhV1JsSWl3aVoyVjBRMjl0Y0hWMFpXUlRkSGxzWlNJc0luUnlZVzV6Wm05eWJTSXNJbmRsWW10cGRGUnlZVzV6Wm05eWJTSXNJbkp2ZFc1a1RHVnVaM1JvY3lJc0ltVnNaVzFsYm5SUGRYUmxjbE5wZW1VaUxDSnZabVp6WlhSWGFXUjBhQ0lzSWsxaGRHZ2lMQ0ptYkc5dmNpSXNJbk4zYVhCbGNsTnNhV1JsVTJsNlpTSXNJbUZpY3lJc0luTnNhV1JsYzFCbGNrZHliM1Z3SWl3aWJXbHVJaXdpYzJ4cFpHVnpVR1Z5UjNKdmRYQlRhMmx3SWl3aWJXRjRJaXdpWldabVpXTjBJaXdpYzJWMFYzSmhjSEJsY2xOcGVtVWlMQ0oxY0dSaGRHVlhjbUZ3Y0dWeVUybDZaU0lzSW14dmIzQWlMQ0pqWldsc0lpd2ljMnhwWkdWelFtVm1iM0psSWl3aWMyeHBaR1Z6UVdaMFpYSWlMQ0pqWlc1MFpYSmxaRk5zYVdSbGMwSnZkVzVrY3lJc0ltTmxiblJsY2tsdWMzVm1abWxqYVdWdWRGTnNhV1JsY3lJc0luTnNhV1JsYzFOcGVtVnpSM0pwWkNJc0luZGhkR05vVDNabGNtWnNiM2NpTENKamFHVmphMDkyWlhKbWJHOTNJaXdpZDJGMFkyaFRiR2xrWlhOUWNtOW5jbVZ6Y3lJc0luVndaR0YwWlZOc2FXUmxjMDltWm5ObGRDSXNJbU52Ym5SaGFXNWxjazF2WkdsbWFXVnlRMnhoYzNNaUxDSmpiR0Z6YzB4cGMzUWlMQ0pqYjI1MFlXbHVjeUlzSW0xaGVFSmhZMnRtWVdObFNHbGtaR1Z1VTJ4cFpHVnpJaXdpWVdSa0lpd2ljbVZ0YjNabElpd2lkWEJrWVhSbFFYVjBiMGhsYVdkb2RDSXNJbk5sZEZSeVlXNXphWFJwYjI0aUxDSnpjR1ZsWkNJc0ltZGxkRk5zYVdSbFNXNWtaWGhDZVVSaGRHRWlMQ0oyYVhOcFlteGxVMnhwWkdWeklpd2lZV04wYVhabFNXNWtaWGdpTENKdlptWnpaWFJJWldsbmFIUWlMQ0pwYzBWc1pXMWxiblFpTENKdlptWnpaWFJNWldaMElpd2liMlptYzJWMFZHOXdJaXdpYzNkcGNHVnlVMnhwWkdWUFptWnpaWFFpTENKamMzTlBkbVZ5Wm14dmQwRmthblZ6ZEcxbGJuUWlMQ0oxY0dSaGRHVlRiR2xrWlhOUWNtOW5jbVZ6Y3lJc0luUnlZVzV6YkdGMFpTSXNJbk5zYVdSbFZtbHphV0pzWlVOc1lYTnpJaXdpZG1semFXSnNaVk5zYVdSbGMwbHVaR1Y0WlhNaUxDSnRhVzVVY21GdWMyeGhkR1VpTENKd2NtOW5jbVZ6Y3lJc0ltOXlhV2RwYm1Gc1VISnZaM0psYzNNaUxDSjFjR1JoZEdWUWNtOW5jbVZ6Y3lJc0ltMWhlRlJ5WVc1emJHRjBaU0lzSW1selFtVm5hVzV1YVc1bklpd2lhWE5GYm1RaUxDSndjbTluY21WemMweHZiM0FpTENKaGRYUnZTR1ZwWjJoMElpd2lkWEJrWVhSbFUyeHBaR1Z6UTJ4aGMzTmxjeUlzSW5Oc2FXUmxRV04wYVhabFEyeGhjM01pTENKemJHbGtaVTVsZUhSRGJHRnpjeUlzSW5Oc2FXUmxVSEpsZGtOc1lYTnpJaXdpWld4bGJXVnVkRTVsZUhSQmJHd2lMQ0psYkdWdFpXNTBVSEpsZGtGc2JDSXNJbVZ0YVhSVGJHbGtaWE5EYkdGemMyVnpJaXdpY0hKdlkyVnpjMHhoZW5sUWNtVnNiMkZrWlhJaUxDSmpiRzl6WlhOMElpd2ljWFZsY25sVFpXeGxZM1J2Y2lJc0lteGhlbmxRY21Wc2IyRmtaWEpEYkdGemN5SXNJblZ1YkdGNmVTSXNJbkpsYlc5MlpVRjBkSEpwWW5WMFpTSXNJbkJ5Wld4dllXUWlMQ0pzWVhwNVVISmxiRzloWkZCeVpYWk9aWGgwSWl3aWMyeHBaR1Z6VUdWeVZtbGxkMFI1Ym1GdGFXTWlMQ0ptY205dElpd2lZMjlzZFcxdUlpd2ljbVYzYVc1a0lpd2laMlYwUVdOMGFYWmxTVzVrWlhoQ2VWUnlZVzV6YkdGMFpTSXNJbTV2Y20xaGJHbDZaVk5zYVdSbFNXNWtaWGdpTENKMWNHUmhkR1ZCWTNScGRtVkpibVJsZUNJc0luSmxZV3hKYm1SbGVDSXNJbk51WVhCSmJtUmxlQ0lzSW1kbGRFRjBkSEpwWW5WMFpTSXNJbkJ5WlhacGIzVnpVMjVoY0VsdVpHVjRJaXdpY0hKbGRtbHZkWE5TWldGc1NXNWtaWGdpTENKd2NtVjJhVzkxYzBsdVpHVjRJaXdpY25WdVEyRnNiR0poWTJ0elQyNUpibWwwSWl3aWRYQmtZWFJsUTJ4cFkydGxaRk5zYVdSbElpd2lZMnhwWTJ0bFpGTnNhV1JsSWl3aVkyeHBZMnRsWkVsdVpHVjRJaXdpYzJ4cFpHVlViME5zYVdOclpXUlRiR2xrWlNJc0luVndaR0YwWlNJc0ltZGxkRk4zYVhCbGNsUnlZVzV6YkdGMFpTSXNJblpwY25SMVlXeFVjbUZ1YzJ4aGRHVWlMQ0puWlhSVWNtRnVjMnhoZEdVaUxDSnpaWFJVY21GdWMyeGhkR1VpTENKd2NtVjJhVzkxYzFSeVlXNXpiR0YwWlNJc0luUnlZVzV6YkdGMFpWUnZJaXdpWVc1cGJXRjBhVzVuSWl3aWNISmxkbVZ1ZEVsdWRHVnlZV04wYVc5dVQyNVVjbUZ1YzJsMGFXOXVJaXdpWVc1cGJXRjBaVU5UVTAxdlpHVlRZM0p2Ykd3aUxDSjBZWEpuWlhSUWIzTnBkR2x2YmlJc0luTnBaR1VpTENKelkzSnZiR3hVYnlJc0ltSmxhR0YyYVc5eUlpd2liMjVVY21GdWMyeGhkR1ZVYjFkeVlYQndaWEpVY21GdWMybDBhVzl1Ulc1a0lpd2lkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVJaXdpZEhKaGJuTnBkR2x2YmtWdGFYUWlMQ0p5ZFc1RFlXeHNZbUZqYTNNaUxDSmthWEpsWTNScGIyNGlMQ0p6ZEdWd0lpd2lkSEpoYm5OcGRHbHZibE4wWVhKMElpd2lkSEpoYm5OcGRHbHZia1Z1WkNJc0luUnlZVzV6YVhScGIyNGlMQ0p6Ykdsa1pWUnZJaXdpWVd4c2IzZFRiR2xrWlU1bGVIUWlMQ0poYkd4dmQxTnNhV1JsVUhKbGRpSXNJbk5qY205c2JGTnVZWEJVZVhCbElpd2lYMmx0YldWa2FXRjBaVlpwY25SMVlXd2lMQ0pmWTNOelRXOWtaVlpwY25SMVlXeEpibWwwYVdGc1UyVjBJaXdpYVc1cGRHbGhiRk5zYVdSbElpd2liMjVUYkdsa1pWUnZWM0poY0hCbGNsUnlZVzV6YVhScGIyNUZibVFpTENKemJHbGtaVlJ2VEc5dmNDSXNJbk5zYVdSbFRtVjRkQ0lzSW5Oc2FXUmxjMUJsY2tkeWIzVndRWFYwYnlJc0lteHZiM0JRY21WMlpXNTBjMU5zYVdScGJtY2lMQ0pzYjI5d1JtbDRJaXdpWDJOc2FXVnVkRXhsWm5RaUxDSmpiR2xsYm5STVpXWjBJaXdpYzJ4cFpHVlFjbVYySWl3aWMyeHBaR1ZTWlhObGRDSXNJbk5zYVdSbFZHOURiRzl6WlhOMElpd2liRzl2Y0dWa1UyeHBaR1Z6SWl3aVoyVjBVMnhwWkdWSmJtUmxlQ0lzSW01bGVIUlVhV05ySWl3aWMyeHBaR1VpTENKc2IyOXdRM0psWVhSbElpd2ljMlYwUVhSMGNtbGlkWFJsSWl3aWMyeHBaR1ZTWldGc1NXNWtaWGdpTENKaFkzUnBkbVZUYkdsa1pVbHVaR1Y0SWl3aVlubERiMjUwY205c2JHVnlJaXdpWW5sTmIzVnpaWGRvWldWc0lpd2ljM2RwY0dWeVRHOXZjRTF2ZG1WRVQwMGlMQ0p3Y21Wd1pXNWtJaXdpWVhCd1pXNWtJaXdpY21WallXeGpVMnhwWkdWeklpd2lkRzkxWTJobGN5SXNJblJ2ZFdOb1JYWmxiblJ6UkdGMFlTSXNJbU4xY25KbGJuUlVjbUZ1YzJ4aGRHVWlMQ0pqYjI1MGNtOXNiR1Z5SWl3aVkyOXVkSEp2YkNJc0ltTnZibk4wY25WamRHOXlJaXdpYkc5dmNFUmxjM1J5YjNraUxDSnpkMmx3WlhKVGJHbGtaVWx1WkdWNElpd2ljMlYwUjNKaFlrTjFjbk52Y2lJc0luTnBiWFZzWVhSbFZHOTFZMmdpTENKcGMweHZZMnRsWkNJc0luUnZkV05vUlhabGJuUnpWR0Z5WjJWMElpd2lZM1Z5YzI5eUlpd2lkVzV6WlhSSGNtRmlRM1Z5YzI5eUlpd2laM0poWWtOMWNuTnZjaUlzSW1Oc2IzTmxjM1JGYkdWdFpXNTBJaXdpWVhOemFXZHVaV1JUYkc5MElpd2laMlYwVW05dmRFNXZaR1VpTENKb2IzTjBJaXdpYjI1VWIzVmphRk4wWVhKMElpd2laWFpEWVdOb1pTSXNJbkJ2YVc1MFpYSlVlWEJsSWl3aWIzSnBaMmx1WVd4RmRtVnVkQ0lzSW5kb2FXTm9JaXdpWW5WMGRHOXVJaXdpYVhOVWIzVmphR1ZrSWl3aWFYTk5iM1psWkNJc0ltNXZVM2RwY0dsdVowTnNZWE56SWl3aVkyOXRjRzl6WldSUVlYUm9JaXdpY0dGMGFDSXNJbk5vWVdSdmQxSnZiM1FpTENKdWIxTjNhWEJwYm1kVFpXeGxZM1J2Y2lJc0ltNXZVM2RwY0dsdVp5SXNJbUZzYkc5M1EyeHBZMnNpTENKemQybHdaVWhoYm1Sc1pYSWlMQ0pqZFhKeVpXNTBXQ0lzSW5CaFoyVllJaXdpWTNWeWNtVnVkRmtpTENKd1lXZGxXU0lzSW1Wa1oyVlRkMmx3WlVSbGRHVmpkR2x2YmlJc0ltbFBVMFZrWjJWVGQybHdaVVJsZEdWamRHbHZiaUlzSW1Wa1oyVlRkMmx3WlZSb2NtVnphRzlzWkNJc0ltbFBVMFZrWjJWVGQybHdaVlJvY21WemFHOXNaQ0lzSW1sdWJtVnlWMmxrZEdnaUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0ltRnNiRzkzVkc5MVkyaERZV3hzWW1GamEzTWlMQ0pwYzFOamNtOXNiR2x1WnlJc0luTjBZWEowVFc5MmFXNW5JaXdpYzNSaGNuUllJaXdpYzNSaGNuUlpJaXdpZEc5MVkyaFRkR0Z5ZEZScGJXVWlMQ0p1YjNjaUxDSnpkMmx3WlVScGNtVmpkR2x2YmlJc0luUm9jbVZ6YUc5c1pDSXNJbUZzYkc5M1ZHaHlaWE5vYjJ4a1RXOTJaU0lzSW0xaGRHTm9aWE1pTENKbWIyTjFjMkZpYkdWRmJHVnRaVzUwY3lJc0ltNXZaR1ZPWVcxbElpd2lZV04wYVhabFJXeGxiV1Z1ZENJc0ltSnNkWElpTENKaGJHeHZkMVJ2ZFdOb1RXOTJaU0lzSW5SdmRXTm9VM1JoY25SUWNtVjJaVzUwUkdWbVlYVnNkQ0lzSW5SdmRXTm9VM1JoY25SR2IzSmpaVkJ5WlhabGJuUkVaV1poZFd4MElpd2lhWE5EYjI1MFpXNTBSV1JwZEdGaWJHVWlMQ0ptY21WbFRXOWtaU0lzSW05dVZHOTFZMmhOYjNabElpd2labWx1WkVsdVpHVjRJaXdpY0c5cGJuUmxja2xrSWl3aWNISmxkbVZ1ZEdWa1FubE9aWE4wWldSVGQybHdaWElpTENKd2NtVjJXQ0lzSW5CeVpYWlpJaXdpZEc5MVkyaFNaV3hsWVhObFQyNUZaR2RsY3lJc0luUmhjbWRsZEZSdmRXTm9aWE1pTENKemNYSjBJaXdpWVhSaGJqSWlMQ0pRU1NJc0luUnZkV05vUVc1bmJHVWlMQ0o2YjI5dElpd2lZMkZ1WTJWc1lXSnNaU0lzSW5SdmRXTm9UVzkyWlZOMGIzQlFjbTl3WVdkaGRHbHZiaUlzSW01bGMzUmxaQ0lzSW5OMGIzQlFjbTl3WVdkaGRHbHZiaUlzSW5CeVpYWnBiM1Z6V0NJc0luQnlaWFpwYjNWeldTSXNJbTl1WlZkaGVVMXZkbVZ0Wlc1MElpd2laR2xtWmlJc0luUnZkV05vVW1GMGFXOGlMQ0owYjNWamFHVnpSR2x5WldOMGFXOXVJaXdpYzNSaGNuUlVjbUZ1YzJ4aGRHVWlMQ0ozYVc1a2IzY2lMQ0pEZFhOMGIyMUZkbVZ1ZENJc0ltSjFZbUpzWlhNaUxDSmthWE53WVhSamFFVjJaVzUwSWl3aVlXeHNiM2ROYjIxbGJuUjFiVUp2ZFc1alpTSXNJbkpsYzJsemRHRnVZMlZTWVhScGJ5SXNJbkpsYzJsemRHRnVZMlVpTENKbWIyeHNiM2RHYVc1blpYSWlMQ0p2YmxSdmRXTm9SVzVrSWl3aWRIbHdaU0lzSW14aGMzUkRiR2xqYTFScGJXVWlMQ0pqZFhKeVpXNTBVRzl6SWl3aWJHOXVaMU4zYVhCbGMwMXpJaXdpYkc5dVoxTjNhWEJsY3lJc0lteHZibWRUZDJsd1pYTlNZWFJwYnlJc0luTm9iM0owVTNkcGNHVnpJaXdpYm1GMmFXZGhkR2x2YmlJc0ltNWxlSFJGYkNJc0luQnlaWFpGYkNJc0ltOXVVbVZ6YVhwbElpd2ljMlYwUW5KbFlXdHdiMmx1ZENJc0ltRjFkRzl3YkdGNUlpd2ljblZ1Ym1sdVp5SXNJbkJoZFhObFpDSXNJbU5zWldGeVZHbHRaVzkxZENJc0luSmxjMmw2WlZScGJXVnZkWFFpTENKeVpYTjFiV1VpTENKdmJrTnNhV05ySWl3aWNISmxkbVZ1ZEVOc2FXTnJjeUlzSW5CeVpYWmxiblJEYkdsamEzTlFjbTl3WVdkaGRHbHZiaUlzSW5OMGIzQkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZiaUlzSW05dVUyTnliMnhzSWl3aWMyTnliMnhzVEdWbWRDSXNJbk5qY205c2JGUnZjQ0lzSW05dVRHOWhaQ0lzSW1SMWJXMTVSWFpsYm5SQmRIUmhZMmhsWkNJc0ltUjFiVzE1UlhabGJuUk1hWE4wWlc1bGNpSXNJbVJsZG1salpTSXNJbkJoYzNOcGRtVWlMQ0pqWVhCMGRYSmxJaXdpZFhCa1lYUmxUMjVYYVc1a2IzZFNaWE5wZW1VaUxDSmhkSFJoWTJoRmRtVnVkSE1pTENKaWFXNWtJaXdpWkdWMFlXTm9SWFpsYm5Seklpd2laWFpsYm5SekpERWlMQ0pwYzBkeWFXUkZibUZpYkdWa0lpd2laMlYwUW5KbFlXdHdiMmx1ZENJc0ltSnlaV0ZyY0c5cGJuUnpRbUZ6WlNJc0ltTjFjbkpsYm5SQ2NtVmhhM0J2YVc1MElpd2liM0pwWjJsdVlXeFFZWEpoYlhNaUxDSmxiV2wwUTI5dWRHRnBibVZ5UTJ4aGMzTmxjeUlzSW1acGJHd2lMQ0prYVhOaFlteGxJaXdpWlc1aFlteGxJaXdpWTJoaGJtZGxSR2x5WldOMGFXOXVJaXdpWlhoMFpXNWtJaXdpYVc1dVpYSklaV2xuYUhRaUxDSnpkV0p6ZEhJaUxDSjJZV3gxWlNJc0luQnZhVzUwSWl3aWMyOXlkQ0lzSW0xaGRHTm9UV1ZrYVdFaUxDSndjbVZ3WVhKbFEyeGhjM05sY3lJc0ltRmtaRU5zWVhOelpYTWlMQ0pqYkdGemMwNWhiV1Z6SWl3aWNuUnNJaXdpWVhWMGIyaGxhV2RvZENJc0ltTmxiblJsY21Wa0lpd2ljbVZ0YjNabFEyeGhjM05sY3lJc0ltTnNZWE56WlhNaUxDSmphR1ZqYTA5MlpYSm1iRzkzSkRFaUxDSmtaV1poZFd4MGN5SXNJbWx1YVhRaUxDSmpjbVZoZEdWRmJHVnRaVzUwY3lJc0luVnliQ0lzSW5WdWFYRjFaVTVoZGtWc1pXMWxiblJ6SWl3aWNHRnpjMmwyWlV4cGMzUmxibVZ5Y3lJc0luZHlZWEJ3WlhKRGJHRnpjeUlzSWw5bGJXbDBRMnhoYzNObGN5SXNJbVY0Y0c5eWRITWlMQ0p0YjJSMWJHVkZlSFJsYm1SUVlYSmhiWE1pTENKaGRYUnZJaXdpY0hKdmRHOTBlWEJsY3lJc0ltVjRkR1Z1WkdWa1JHVm1ZWFZzZEhNaUxDSlRkMmx3WlhJaUxDSndjbTkwYjNSNWNHVWlMQ0owYjFOMGNtbHVaeUlzSW5GMVpYSjVVMlZzWldOMGIzSkJiR3dpTENKZlgzTjNhWEJsY2w5Zklpd2liVzlrZFd4bGN5SXNJbDlmYlc5a2RXeGxjMTlmSWl3aWNHRnpjMlZrVUdGeVlXMXpJaXdpZG1Wc2IyTnBkSGtpTENKMGNuVnVZeUlzSW1Oc2FXTnJWR2x0Wlc5MWRDSXNJblpsYkc5amFYUnBaWE1pTENKcGJXRm5aWE5VYjB4dllXUWlMQ0pwYldGblpYTk1iMkZrWldRaUxDSmxiR1Z0Wlc1MFNXNWtaWGdpTENKelpYUlFjbTluY21WemN5SXNJbU5zWVhOelRtRnRaU0lzSW1wdmFXNGlMQ0puWlhSVGJHbGtaVU5zWVhOelpYTWlMQ0p6Ykdsa1pVVnNJaXdpWTI5dGNHeGxkR1VpTENKamFHRnVaMlZNWVc1bmRXRm5aVVJwY21WamRHbHZiaUlzSW1ScGNpSXNJbTF2ZFc1MElpd2liVzkxYm5SbFpDSXNJbVJ2WTNWdFpXNTBJaXdpY0dGeVpXNTBUbTlrWlNJc0ltZGxkRmR5WVhCd1pYSlRaV3hsWTNSdmNpSXNJblJ5YVcwaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWMyeHBaR1ZUYkc5MGN5SXNJbVJsYzNSeWIza2lMQ0prWld4bGRHVlFjbTl3Y3lJc0ltVjRkR1Z1WkVSbFptRjFiSFJ6SWl3aWFXNXpkR0ZzYkUxdlpIVnNaU0lzSW5WelpTSmRMQ0p6YjNWeVkyVnpJanBiSWpBaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdHVkV3hzWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN1FVRkJhVVFzU1VGQlFVRXNVMEZCUVN4SFFVRkJReXhQUVVGQk8wRkJSMnBFTEVsQlFVbERMRTlCUVVFc1JVRm5Ra0ZETEZsQlFVRXNSVUZ4UkVGRExFOUJRVUU3UVVGd1JVb3NVMEZCVTBNc1dVRkJRVHRGUVVOUUxFMUJRVTFETEVOQlFVRXNSMEZCVXl4SlFVRkJReXhyUWtGQlFUdEpRVU5VUXl4RFFVRkJMRWRCUVZjc1NVRkJRVU1zYTBKQlFVRTdSVUZEYWtJc1QwRkJUenRKUVVOTVF5eFpRVUZCTEVWQlFXTkdMRU5CUVVFc1EwRkJVMGNzWlVGQlFTeEpRVUZ0UWtnc1EwRkJRU3hEUVVGVFJ5eGxRVUZCTEVOQlFXZENReXhMUVVGQkxFbEJRVk1zYjBKQlFXOUNTaXhEUVVGQkxFTkJRVk5ITEdWQlFVRXNRMEZCWjBKRExFdEJRVUU3U1VGRGVraERMRXRCUVVFc1MwRkJWU3hyUWtGQmEwSlFMRU5CUVVFc1NVRkJWVUVzUTBGQlFTeERRVUZQVVN4aFFVRkJMRWxCUVdsQ1RpeERRVUZCTEZsQlFXOUNSaXhEUVVGQkxFTkJRVTlSTEdGQlFVRTdSVUZCUVN4RFFVVTNSanRCUVVGQk8wRkJRMEVzVTBGQlUwTXNWMEZCUVR0RlFVbFFMRTlCU0V0aUxFOUJRVUVzUzBGRFNFRXNUMEZCUVN4SFFVRlZSeXhYUVVGQkxFdEJSVXhJTEU5QlExUTdRVUZCUVR0QlFVZEJMRk5CUVZOakxGZEJRVmRXTEVOQlFVRTdSVUZEYkVJN1NVRkJTVmNzVTBGQlFTeEZRVU5HVkR0RlFVRkJMRk5CUTFrc1RVRkJWa1lzUTBGQlFTeEhRVUZ0UWl4RFFVRkRMRWxCUVVsQkxFTkJRVUU3UlVGRE5VSXNUVUZCVFZrc1EwRkJRU3hIUVVGVlNDeFZRVUZCTzBsQlExWkpMRU5CUVVFc1IwRkJVeXhKUVVGQldpeHJRa0ZCUVR0SlFVTlVZU3hEUVVGQkxFZEJRVmRFTEVOQlFVRXNRMEZCVDBVc1UwRkJRU3hEUVVGVlF5eFJRVUZCTzBsQlF6VkNReXhEUVVGQkxFZEJRVXRtTEVOQlFVRXNTVUZCWVZjc1EwRkJRU3hEUVVGUFJTeFRRVUZCTEVOQlFWVktMRk5CUVVFN1NVRkRia05QTEVOQlFVRXNSMEZCVXp0TlFVTmlReXhIUVVGQkxFZEJRVXM3VFVGRFRFTXNUMEZCUVN4SFFVRlRPMGxCUVVFN1NVRkZURU1zUTBGQlFTeEhRVUZqVWl4RFFVRkJMRU5CUVU5VExFMUJRVUVzUTBGQlQwTXNTMEZCUVR0SlFVTTFRa01zUTBGQlFTeEhRVUZsV0N4RFFVRkJMRU5CUVU5VExFMUJRVUVzUTBGQlQwY3NUVUZCUVR0SlFVTTNRa01zUTBGQlFTeEhRVUZWVkN4RFFVRkJMRU5CUVVkVkxFdEJRVUVzUTBGQlRUdEZRVU42UWl4SlFVRkpReXhEUVVGQkxFZEJRVTlZTEVOQlFVRXNRMEZCUjFVc1MwRkJRU3hEUVVGTk8wVkJRM0JDTEUxQlFVMUZMRU5CUVVFc1IwRkJUMW9zUTBGQlFTeERRVUZIVlN4TFFVRkJMRU5CUVUwN1NVRkRhRUpITEVOQlFVRXNTVUZCVlVZc1EwRkJRU3hKUVVGUldDeERRVUZCTEVOQlFVZFZMRXRCUVVFc1EwRkJUVHRKUVVNelFra3NRMEZCUVN4SFFVRjFRaXhaUVVGaWFrSXNRMEZCUVR0RlFVTm9RaXhKUVVGSmEwSXNRMEZCUVN4SFFVRnhRaXhsUVVGaWJFSXNRMEZCUVR0RlFYRkNXaXhSUVdwQ1MyTXNRMEZCUVN4SlFVRlJTU3hEUVVGQkxFbEJRVk53UWl4RFFVRkJMRU5CUVZGTUxFdEJRVUVzU1VGRVZpeERRVUZETEdGQlFXRXNZVUZCWVN4WlFVRlpMRmxCUVZrc1dVRkJXU3haUVVGWkxGbEJRVmtzV1VGQldTeFpRVUZaTEZsQlFWa3NXVUZCV1N4WlFVTjRSekJDTEU5QlFVRXNRMEZCVVN4SFFVRkhXaXhEUVVGQkxFbEJRV1ZITEVOQlFVRXNUMEZCYlVJc1RVRkRPVVpKTEVOQlFVRXNSMEZCVDFnc1EwRkJRU3hEUVVGSFZTeExRVUZCTEVOQlFVMHNkMEpCUTFoRExFTkJRVUVzUzBGQlRVRXNRMEZCUVN4SFFVRlBMRU5CUVVNc1IwRkJSeXhIUVVGSExGbEJRM3BDU1N4RFFVRkJMRWxCUVZFc1NVRkpUazRzUTBGQlFTeExRVUZaU3l4RFFVRkJMRXRCUTJSaUxFTkJRVUVzUTBGQlQyZENMRVZCUVVFc1IwRkJTeXhYUVVOYWFFSXNRMEZCUVN4RFFVRlBSU3hQUVVGQkxFbEJRVlVzUzBGRlpsRXNRMEZCUVN4SlFVRlJSU3hEUVVGQkxFbEJRVlZFTEVOQlFVRXNUVUZEY0VKWUxFTkJRVUVzUTBGQlQyZENMRVZCUVVFc1IwRkJTeXhQUVVOYWFFSXNRMEZCUVN4RFFVRlBReXhIUVVGQkxFbEJRVTBzU1VGSlVrUXNRMEZEVkR0QlFVRkJPMEZCUTBFc1UwRkJVMmxDTEZWQlFWVnVReXhEUVVGQk8wVkJUMnBDTEZsQlRtdENMRTFCUVdSQkxFTkJRVUVzUzBGRFJrRXNRMEZCUVN4SFFVRlpMRU5CUVVNc1NVRkZWa2dzV1VGQlFTeExRVU5JUVN4WlFVRkJMRWRCUVdWaExGVkJRVUVzUTBGQlYxWXNRMEZCUVN4SlFVVnlRa2dzV1VGRFZEdEJRVUZCTzBGQlIwRXNVMEZCVTNWRExGbEJRVUU3UlVGRFVDeE5RVUZOY0VNc1EwRkJRU3hIUVVGVExFbEJRVUZETEd0Q1FVRkJPMFZCUTJZc1NVRkJTVU1zUTBGQlFTeEpRVUZ4UWp0RlFVTjZRaXhUUVVGVFZTeEZRVUZCTzBsQlExQXNUVUZCVFZZc1EwRkJRU3hIUVVGTFJpeERRVUZCTEVOQlFVOWxMRk5CUVVFc1EwRkJWVW9zVTBGQlFTeERRVUZWTUVJc1YwRkJRVHRKUVVOMFF5eFBRVUZQYmtNc1EwRkJRU3hEUVVGSEswSXNUMEZCUVN4RFFVRlJMR0ZCUVdFc1MwRkJTeTlDTEVOQlFVRXNRMEZCUnl0Q0xFOUJRVUVzUTBGQlVTeFpRVUZaTEV0QlFVc3ZRaXhEUVVGQkxFTkJRVWNyUWl4UFFVRkJMRU5CUVZFc1lVRkJZU3hEUVVNeFJqdEZRVUZCTzBWQlEwRXNTVUZCU1hKQ0xFTkJRVUVzU1VGQldUdEpRVU5rTEUxQlFVMUJMRU5CUVVFc1IwRkJTekJDTEUxQlFVRXNRMEZCVDNSRExFTkJRVUVzUTBGQlQyVXNVMEZCUVN4RFFVRlZTaXhUUVVGQk8wbEJRMjVETEVsQlFVbERMRU5CUVVFc1EwRkJSekpDTEZGQlFVRXNRMEZCVXl4aFFVRmhPMDFCUXpOQ0xFOUJRVTkyUXl4RFFVRkJMRVZCUVU5aExFTkJRVUVzU1VGQlUwUXNRMEZCUVN4RFFVRkhORUlzUzBGQlFTeERRVUZOTEZsQlFWa3NSMEZCUjBFc1MwRkJRU3hEUVVGTkxFdEJRVXNzUjBGQlIwRXNTMEZCUVN4RFFVRk5MRXRCUVV0RExFZEJRVUVzUTBGQlNYcERMRU5CUVVFc1NVRkJUekJETEUxQlFVRXNRMEZCVHpGRExFTkJRVUU3VFVGRE1VWkZMRU5CUVVFc1IwRkJjVUpHTEVOQlFVRXNSMEZCVVN4TlFVRm5RaXhQUVVGV1FTeERRVUZCTEVsQlFXZENZU3hEUVVGQkxFZEJRVkVzUTBGRE4wUTdTVUZCUVR0RlFVTkdPMFZCUTBFc1QwRkJUenRKUVVOTU9FSXNVVUZCUVN4RlFVRlZla01zUTBGQlFTeEpRVUZ6UWxVc1EwRkJRVHRKUVVOb1EyZERMR3RDUVVGQkxFVkJRVUV4UXl4RFFVRkJPMGxCUTBFeVF5eFRRVUZCTEVWQlFWY3NLME5CUVN0RFF5eEpRVUZCTEVOQlFVczVReXhEUVVGQkxFTkJRVTlsTEZOQlFVRXNRMEZCVlVvc1UwRkJRVHRGUVVGQkxFTkJSWEJHTzBGQlFVRTdRVUZEUVN4VFFVRlRiME1zVjBGQlFUdEZRVWxRTEU5QlNFdHFSQ3hQUVVGQkxFdEJRMGhCTEU5QlFVRXNSMEZCVlhORExGZEJRVUVzUzBGRlRIUkRMRTlCUTFRN1FVRkJRVHRCUVVWQkxGTkJRVk5yUkN4UFFVRlBhRVFzUTBGQlFUdEZRVU5rTzBsQlFVbHBSQ3hOUVVGQkxFVkJRMFl2UXl4RFFVRkJPMGxCUVUxblJDeEZRVUZCTEVWQlEwNTBReXhEUVVGQk8wbEJRVVYxUXl4SlFVRkJMRVZCUTBaMFF6dEZRVUZCTEVsQlEwVmlMRU5CUVVFN1JVRkRTaXhOUVVGTll5eERRVUZCTEVkQlFWTXNTVUZCUVdJc2EwSkJRVUU3UlVGRFppeEpRVUZKWjBJc1EwRkJRU3hIUVVGWE8wbEJRMWhETEVOQlFVRXNSMEZCYVVJN1JVRkRja0lzVFVGQlRVY3NRMEZCUVN4SFFVRm5RaXRDTEVOQlFVRTdUVUZEWm14RUxFTkJRVUVzUzBGQlZVRXNRMEZCUVN4RFFVRlBiVVFzVTBGQlFTeEpRVUZqYmtRc1EwRkJRU3hEUVVGUGIwUXNWMEZCUVN4TFFVTXpRM3BETEVOQlFVRXNRMEZCU3l4cFFrRkRURUVzUTBGQlFTeERRVUZMTEZWQlFWTTdTVUZCUVR0SlFYTkRWbGNzUTBGQlFTeEhRVUV5UWl0Q0xFTkJRVUU3VFVGRE1VSnlSQ3hEUVVGQkxFdEJRVlZCTEVOQlFVRXNRMEZCVDIxRUxGTkJRVUVzU1VGQlkyNUVMRU5CUVVFc1EwRkJUMjlFTEZkQlFVRXNTVUZETTBONlF5eERRVUZCTEVOQlFVc3NiMEpCUVc5Q08wbEJRVUU3UlVGRk0wSkVMRU5CUVVFc1EwRkJSeXhSUVVGUk8wbEJRMHhXTEVOQlFVRXNRMEZCVDNORUxFMUJRVUVzUTBGQlQwTXNZMEZCUVN4VFFVRnRSQ3hOUVVFeFFqTkRMRU5CUVVFc1EwRkJUelJETEdOQlFVRXNSMEY0UXpkRGVFUXNRMEZCUVN4TFFVRlZRU3hEUVVGQkxFTkJRVTl0UkN4VFFVRkJMRWxCUVdOdVJDeERRVUZCTEVOQlFVOXZSQ3hYUVVGQkxFdEJRek5EY2tNc1EwRkJRU3hIUVVGWExFbEJRVWw1UXl4alFVRkJMRU5CUVdVeFJDeERRVUZCTzAxQlF6VkNhMElzUTBGQlFTeEhRVUZwUWtvc1EwRkJRU3hEUVVGUE5rTXNjVUpCUVVFc1EwRkJjMEk3VVVGRE5VTTdWVUZCVFhCRExFdEJRVUVzUlVGRFNsZ3NRMEZCUVR0VlFVRkxZU3hOUVVGQkxFVkJRMHhhTzFGQlFVRXNTVUZEUlZnc1EwRkJRVHRSUVVOS0xFbEJRVWxaTEVOQlFVRXNSMEZCVjBZc1EwRkJRVHRWUVVOWVN5eERRVUZCTEVkQlFWbEtMRU5CUVVFN1VVRkRhRUppTEVOQlFVRXNRMEZCVVRSRUxFOUJRVUVzUTBGQlVUVkVMRU5CUVVFN1ZVRkRaRHRaUVVGSk5rUXNZMEZCUVN4RlFVTkdha1FzUTBGQlFUdFpRVUZqYTBRc1YwRkJRU3hGUVVOa2FrUXNRMEZCUVR0WlFVRlhhMFFzVFVGQlFTeEZRVU5ZTjBNN1ZVRkJRU3hKUVVORmJFSXNRMEZCUVR0VlFVTkJhMElzUTBGQlFTeEpRVUZWUVN4RFFVRkJMRXRCUVZkb1FpeERRVUZCTEVOQlFVODRSQ3hGUVVGQkxFdEJRMmhEYkVRc1EwRkJRU3hIUVVGWFJDeERRVUZCTEVkQlFXTkJMRU5CUVVFc1EwRkJXVlVzUzBGQlFTeEpRVUZUV0N4RFFVRkJMRU5CUVdVc1RVRkJUVUVzUTBGQlFTeEZRVUZuUW5GRUxGVkJRVUVzUlVGRGJrWm9SQ3hEUVVGQkxFZEJRVmxLTEVOQlFVRXNSMEZCWTBFc1EwRkJRU3hEUVVGWldTeE5RVUZCTEVsQlFWVmlMRU5CUVVFc1EwRkJaU3hOUVVGTlFTeERRVUZCTEVWQlFXZENjMFFzVTBGQlFTeERRVUZUTzFGQlFVRXNTVUZGTlVad1JDeERRVUZCTEV0QlFXRkdMRU5CUVVFc1NVRkJVMHNzUTBGQlFTeExRVUZqU2l4RFFVRkJMRWxCUTNSRFVTeERRVUZCTEVWQlEwWTdUVUZCUVN4RlFVTkJPMGxCUVVFc1NVRkZTa29zUTBGQlFTeERRVUZUYTBRc1QwRkJRU3hEUVVGUmFrVXNRMEZCUVN4RFFVRlBPRVFzUlVGQlFTeE5RVzlDZUVKc1JDeERRVUZCTEVOQlFVOXpSQ3huUWtGQlFTeERRVUZwUWl4VlFVRlZMME1zUTBGQlFTeEhRVU5zUTFBc1EwRkJRU3hEUVVGUGMwUXNaMEpCUVVFc1EwRkJhVUlzY1VKQlFYRkNOVU1zUTBGQlFTeEZRVUY1UWp0RlFVRkJMRWxCUlhoRldpeERRVUZCTEVOQlFVY3NWMEZCVnp0SlFYQkNVazBzUTBGQlFTeEpRVU5HU2l4RFFVRkJMRU5CUVU5MVJDeHZRa0ZCUVN4RFFVRnhRbTVFTEVOQlFVRXNSMEZGTVVKRUxFTkJRVUVzU1VGQldVRXNRMEZCUVN4RFFVRlRjVVFzVTBGQlFTeEpRVUZoY0VVc1EwRkJRU3hEUVVGUE9FUXNSVUZCUVN4TFFVTXpReTlETEVOQlFVRXNRMEZCVTNGRUxGTkJRVUVzUTBGQlZYQkZMRU5CUVVFc1EwRkJUemhFTEVWQlFVRXNSMEZETVVJdlF5eERRVUZCTEVkQlFWY3NUMEZwUW1KSUxFTkJRVUVzUTBGQlQzbEVMRzFDUVVGQkxFTkJRVzlDTEZWQlFWVnNSQ3hEUVVGQkxFZEJRM0pEVUN4RFFVRkJMRU5CUVU5NVJDeHRRa0ZCUVN4RFFVRnZRaXh4UWtGQmNVSXZReXhEUVVGQkxFTkJRWGxDTzBWQlFVRXNSVUZGTjBVN1FVRkJRVHRCUVVWQkxGTkJRVk5uUkN4VFFVRlRlRVVzUTBGQlFUdEZRVU5vUWp0SlFVRkphVVFzVFVGQlFTeEZRVU5HTDBNc1EwRkJRVHRKUVVGTmRVVXNXVUZCUVN4RlFVTk9OMFFzUTBGQlFUdEpRVUZaYzBNc1JVRkJRU3hGUVVOYWNrTXNRMEZCUVR0SlFVRkZjME1zU1VGQlFTeEZRVU5HY2tNN1JVRkJRU3hKUVVORlpDeERRVUZCTzBWQlEwb3NUVUZCVFdsQ0xFTkJRVUVzUjBGQldUdEpRVU5hUXl4RFFVRkJMRWRCUVZNc1NVRkJRV3BDTEd0Q1FVRkJPMGxCUTFSdlFpeERRVUZCTEVkQlFWTXNVMEZCUVhGRUxFTkJRVlV4UlN4RFFVRkJMRVZCUVZGWkxFTkJRVUU3VFVGQlFTeExRVU5tTEUxQlFWcEJMRU5CUVVFc1MwRkRSa0VzUTBGQlFTeEhRVUZWTEVOQlFVTTdUVUZGWWl4TlFVTk5ReXhEUVVGQkxFZEJRVmNzUzBGRVNVc3NRMEZCUVN4RFFVRlBlVVFzWjBKQlFVRXNTVUZCYjBKNlJDeERRVUZCTEVOQlFVOHdSQ3h6UWtGQlFTeEZRVU55UWpWRkxFTkJRVUU3VVVGSmFFTXNTVUZCU1VVc1EwRkJRU3hEUVVGUE1rVXNiVUpCUVVFc1JVRkJjVUk3VVVGRGFFTXNTVUZCZVVJc1RVRkJja0kzUlN4RFFVRkJMRU5CUVZVNFJTeE5RVUZCTEVWQlJWb3NXVUZFUVdoRkxFTkJRVUVzUTBGQlN5eHJRa0ZCYTBKa0xFTkJRVUVzUTBGQlZUdFJRVWR1UXl4TlFVRk5XU3hEUVVGQkxFZEJRV2xDTEZOQlFVRnRSU3hEUVVGQk8xVkJRM0pDYWtVc1EwRkJRU3hEUVVGTExHdENRVUZyUW1Rc1EwRkJRU3hEUVVGVkxFZEJRMjVETzFGQlFVRTdVVUZEU1d0Q0xFTkJRVUVzUTBGQlQzbERMSEZDUVVGQkxFZEJRMVI2UXl4RFFVRkJMRU5CUVU5NVF5eHhRa0ZCUVN4RFFVRnpRaTlETEVOQlFVRXNTVUZGTjBKTkxFTkJRVUVzUTBGQlR6aEVMRlZCUVVFc1EwRkJWM0JGTEVOQlFVRXNSVUZCWjBJc1JVRkRjRU03VFVGQlFUdE5RVVZHUXl4RFFVRkJMRU5CUVZOelJDeFBRVUZCTEVOQlFWRnVSU3hEUVVGQkxFVkJRVkU3VVVGRGRrSnBSaXhWUVVGQkxFOUJRVEJETEUxQlFYWkNja1VzUTBGQlFTeERRVUZSY1VVc1ZVRkJRU3hKUVVGdlEzSkZMRU5CUVVFc1EwRkJVWEZGTEZWQlFVRTdVVUZEZGtWRExGTkJRVUVzVDBGQmQwTXNUVUZCZEVKMFJTeERRVUZCTEVOQlFWRnpSU3hUUVVGQkxFbEJRVzFEZEVVc1EwRkJRU3hEUVVGUmMwVXNVMEZCUVR0UlFVTnlSVU1zWVVGQlFTeFBRVUZuUkN4TlFVRXhRblpGTEVOQlFVRXNRMEZCVVhWRkxHRkJRVUVzU1VGQmRVTjJSU3hEUVVGQkxFTkJRVkYxUlR0TlFVRkJMRWxCUlM5RmJFVXNRMEZCUVN4RFFVRlZiVVVzU1VGQlFTeERRVUZMZGtVc1EwRkJRU3hEUVVOcVFqdEpRVUZCTzBWQmVVSkJSQ3hEUVVGQkxFTkJRV0U3U1VGRFdIbEZMRkZCUVVFc1IwRkJWVHRKUVVOV1F5eGpRVUZCTEVkQlFXZENPMGxCUTJoQ1F5eHZRa0ZCUVN4SFFVRnpRanRGUVVGQkxFbEJSWGhDTVVVc1EwRkJRU3hEUVVGSExGRkJOMEpWTzBsQlExZ3NTVUZCUzFnc1EwRkJRU3hEUVVGUGMwUXNUVUZCUVN4RFFVRlBOa0lzVVVGQlFTeEZRVUZ1UWp0TlFVTkJMRWxCUVVsdVJpeERRVUZCTEVOQlFVOXpSQ3hOUVVGQkxFTkJRVTg0UWl4alFVRkJMRVZCUVdkQ08xRkJRMmhETEUxQlFVMTBSaXhEUVVGQkxFZEJRVzFDTEVsQlFVRjNSaXhYUVVGQkxFVkJRV1YwUml4RFFVRkJMRU5CUVU5MVJpeE5RVUZCTzFGQlF5OURMRXRCUVVzc1NVRkJTWFpHTEVOQlFVRXNSMEZCU1N4SFFVRkhRU3hEUVVGQkxFZEJRVWxHTEVOQlFVRXNRMEZCYVVJNFJTeE5RVUZCTEVWQlFWRTFSU3hEUVVGQkxFbEJRVXNzUjBGRGFFUnRRaXhEUVVGQkxFTkJRVTl5UWl4RFFVRkJMRU5CUVdsQ1JTeERRVUZCTEVWQlJUVkNPMDFCUVVFN1RVRkZRVzFDTEVOQlFVRXNRMEZCVDI1Q0xFTkJRVUVzUTBGQlQzVkdMRTFCUVVFc1JVRkJVVHRSUVVOd1FsQXNVMEZCUVN4RlFVRlhhRVlzUTBGQlFTeERRVUZQYzBRc1RVRkJRU3hEUVVGUEswSTdUVUZCUVN4SlFVa3pRbXhGTEVOQlFVRXNRMEZCVDI1Q0xFTkJRVUVzUTBGQlQzZEdMRk5CUVVFc1JVRkJWenRSUVVOMlFsUXNWVUZCUVN4SFFVRlpPMDFCUVVFc1JVRmtjVUk3U1VGQlFUdEZRV1ZxUXl4SlFXTktjRVVzUTBGQlFTeERRVUZITEZkQldtRTdTVUZEWkVrc1EwRkJRU3hEUVVGVk1rTXNUMEZCUVN4RFFVRlJOVVFzUTBGQlFUdE5RVU5vUWtFc1EwRkJRU3hEUVVGVE1rWXNWVUZCUVN4RlFVRlpPMGxCUVVFc1NVRkZka0l4UlN4RFFVRkJMRU5CUVZVeVJTeE5RVUZCTEVOQlFVOHNSMEZCUnpORkxFTkJRVUVzUTBGQlZUWkVMRTFCUVVFc1EwRkJUenRGUVVGQkxFVkJVM3BETzBGQlFVRTdRVUZKUVN4SlFVRkpaU3hoUVVGQkxFZEJRV2RDTzBWQlEyeENNME1zUjBGQlIyeEVMRU5CUVVFc1JVRkJVVVVzUTBGQlFTeEZRVUZUVlN4RFFVRkJPMGxCUTJ4Q0xFMUJRVTFETEVOQlFVRXNSMEZCVHp0SlFVTmlMRXRCUVV0QkxFTkJRVUVzUTBGQlMybEdMR1ZCUVVFc1NVRkJiVUpxUml4RFFVRkJMRU5CUVV0M1F5eFRRVUZCTEVWQlFWY3NUMEZCVDNoRExFTkJRVUU3U1VGRGNFUXNTVUZCZFVJc2NVSkJRVnBZTEVOQlFVRXNSVUZCZDBJc1QwRkJUMWNzUTBGQlFUdEpRVU14UXl4TlFVRk5ReXhEUVVGQkxFZEJRVk5HTEVOQlFVRXNSMEZCVnl4WlFVRlpPMGxCUzNSRExFOUJTa0ZhTEVOQlFVRXNRMEZCVDNkRExFdEJRVUVzUTBGQlRTeExRVUZMYjBJc1QwRkJRU3hEUVVGUk5VUXNRMEZCUVR0TlFVTnVRbUVzUTBGQlFTeERRVUZMYVVZc1pVRkJRU3hEUVVGblFqbEdMRU5CUVVFc1RVRkJVV0VzUTBGQlFTeERRVUZMYVVZc1pVRkJRU3hEUVVGblFqbEdMRU5CUVVFc1NVRkJVeXhMUVVOb1JXRXNRMEZCUVN4RFFVRkxhVVlzWlVGQlFTeERRVUZuUWpsR0xFTkJRVUVzUlVGQlQyTXNRMEZCUVN4RlFVRlJXaXhEUVVGQkxFTkJRVkU3U1VGQlFTeEpRVVYyUTFjc1EwRkRWRHRGUVVGQk8wVkJRMEZyUml4TFFVRkxMMFlzUTBGQlFTeEZRVUZSUlN4RFFVRkJMRVZCUVZOVkxFTkJRVUU3U1VGRGNFSXNUVUZCVFVNc1EwRkJRU3hIUVVGUE8wbEJRMklzUzBGQlMwRXNRMEZCUVN4RFFVRkxhVVlzWlVGQlFTeEpRVUZ0UW1wR0xFTkJRVUVzUTBGQlMzZERMRk5CUVVFc1JVRkJWeXhQUVVGUGVFTXNRMEZCUVR0SlFVTndSQ3hKUVVGMVFpeHhRa0ZCV2xnc1EwRkJRU3hGUVVGM1FpeFBRVUZQVnl4RFFVRkJPMGxCUXpGRExGTkJRVk5ETEVWQlFVRTdUVUZEVUVRc1EwRkJRU3hEUVVGTGJVWXNSMEZCUVN4RFFVRkphRWNzUTBGQlFTeEZRVUZSWXl4RFFVRkJMRWRCUTJKQkxFTkJRVUVzUTBGQldXMUdMR05CUVVFc1YwRkRVRzVHTEVOQlFVRXNRMEZCV1cxR0xHTkJRVUU3VFVGRmNrSXNTMEZCU3l4SlFVRkpja1lzUTBGQlFTeEhRVUZQYzBZc1UwRkJRU3hEUVVGVmNFSXNUVUZCUVN4RlFVRlJOMFFzUTBGQlFTeEhRVUZQTEVsQlFVbHJSaXhMUVVGQkxFTkJRVTEyUml4RFFVRkJMRWRCUVU5TkxFTkJRVUVzUjBGQlR5eEhRVUZIUVN4RFFVRkJMRWRCUVU5T0xFTkJRVUVzUlVGQlRVMHNRMEZCUVN4SlFVTXZSVVFzUTBGQlFTeERRVUZMUXl4RFFVRkJMRWxCUVZGblJpeFRRVUZCTEVOQlFWVm9SaXhEUVVGQk8wMUJSWHBDYUVJc1EwRkJRU3hEUVVGUmEwY3NTMEZCUVN4RFFVRk5ka1lzUTBGQlFTeEZRVUZOU1N4RFFVRkJMRU5CUTNSQ08wbEJRVUU3U1VGRlFTeFBRVVJCU0N4RFFVRkJMRU5CUVZsdFJpeGpRVUZCTEVkQlFXbENMMFlzUTBGQlFTeEZRVU4wUWxjc1EwRkJRU3hEUVVGTGNVTXNSVUZCUVN4RFFVRkhiRVFzUTBGQlFTeEZRVUZSWXl4RFFVRkJMRVZCUVdGR0xFTkJRVUVzUTBGRGRFTTdSVUZCUVR0RlFVTkJlVVlzVFVGQlRYSkhMRU5CUVVFc1JVRkJVMFVzUTBGQlFUdEpRVU5pTEUxQlFVMVZMRU5CUVVFc1IwRkJUenRKUVVOaUxFdEJRVXRCTEVOQlFVRXNRMEZCUzJ0R0xHVkJRVUVzU1VGQmJVSnNSaXhEUVVGQkxFTkJRVXQ1UXl4VFFVRkJMRVZCUVZjc1QwRkJUM3BETEVOQlFVRTdTVUZEY0VRc1NVRkJkVUlzY1VKQlFWcGFMRU5CUVVFc1JVRkJkMElzVDBGQlQxa3NRMEZCUVR0SlFVTXhReXhOUVVGTlF5eERRVUZCTEVkQlFWTllMRU5CUVVFc1IwRkJWeXhaUVVGWk8wbEJTWFJETEU5QlNFbFZMRU5CUVVFc1EwRkJTekJHTEd0Q1FVRkJMRU5CUVcxQ2NrVXNUMEZCUVN4RFFVRlJha01zUTBGQlFTeEpRVUZYTEV0QlF6ZERXU3hEUVVGQkxFTkJRVXN3Uml4clFrRkJRU3hEUVVGdFFucEdMRU5CUVVFc1JVRkJVV0lzUTBGQlFTeEhRVVV6UWxrc1EwRkRWRHRGUVVGQk8wVkJRMEV5Uml4UFFVRlBka2NzUTBGQlFUdEpRVU5NTEUxQlFVMUZMRU5CUVVFc1IwRkJUenRKUVVOaUxFdEJRVXRCTEVOQlFVRXNRMEZCU3pSR0xHVkJRVUVzU1VGQmJVSTFSaXhEUVVGQkxFTkJRVXR0UkN4VFFVRkJMRVZCUVZjc1QwRkJUMjVFTEVOQlFVRTdTVUZEY0VRc1MwRkJTMEVzUTBGQlFTeERRVUZMYjBjc2EwSkJRVUVzUlVGQmIwSXNUMEZCVDNCSExFTkJRVUU3U1VGRGNrTXNUVUZCVFZVc1EwRkJRU3hIUVVGUlZpeERRVUZCTEVOQlFVdHZSeXhyUWtGQlFTeERRVUZ0UW5KRkxFOUJRVUVzUTBGQlVXcERMRU5CUVVFN1NVRkpPVU1zVDBGSVNWa3NRMEZCUVN4SlFVRlRMRXRCUTFoV0xFTkJRVUVzUTBGQlMyOUhMR3RDUVVGQkxFTkJRVzFDVml4TlFVRkJMRU5CUVU5b1JpeERRVUZCTEVWQlFVOHNTVUZGYWtOV0xFTkJRMVE3UlVGQlFUdEZRVU5CT0VZc1NVRkJTV2hITEVOQlFVRXNSVUZCVVVVc1EwRkJRVHRKUVVOV0xFMUJRVTFWTEVOQlFVRXNSMEZCVHp0SlFVTmlMRkZCUVV0QkxFTkJRVUVzUTBGQlMydEdMR1ZCUVVFc1NVRkJiVUpzUml4RFFVRkJMRU5CUVV0NVF5eFRRVUZCTEVkQlFXdENla01zUTBGQlFTeEhRVU12UTBFc1EwRkJRU3hEUVVGTGEwWXNaVUZCUVN4SlFVTldPVVlzUTBGQlFTeERRVUZQZDBNc1MwRkJRU3hEUVVGTkxFdEJRVXR2UWl4UFFVRkJMRU5CUVZFMVJDeERRVUZCTzAxQlFVRXNTMEZEUkN4TlFVRmFSU3hEUVVGQkxFZEJRMVJWTEVOQlFVRXNRMEZCUzJ0R0xHVkJRVUVzUTBGQlowSTVSaXhEUVVGQkxFbEJRVk1zUzBGRGNrSlpMRU5CUVVFc1EwRkJTMnRHTEdWQlFVRXNRMEZCWjBJNVJpeERRVUZCTEV0QlF6bENXU3hEUVVGQkxFTkJRVXRyUml4bFFVRkJMRU5CUVdkQ09VWXNRMEZCUVN4RlFVRlBORVFzVDBGQlFTeERRVUZSTEVOQlFVTXZReXhEUVVGQkxFVkJRV05ETEVOQlFVRTdVVUZCUVN4RFFVTTNRMFFzUTBGQlFTeExRVUZwUWxnc1EwRkJRU3hKUVVGWFZ5eERRVUZCTEVOQlFXRnZSaXhqUVVGQkxFbEJRV3RDY0VZc1EwRkJRU3hEUVVGaGIwWXNZMEZCUVN4TFFVRnRRaTlHTEVOQlFVRXNTMEZETjBaVkxFTkJRVUVzUTBGQlMydEdMR1ZCUVVFc1EwRkJaMEk1Uml4RFFVRkJMRVZCUVU4MFJpeE5RVUZCTEVOQlFVODVSU3hEUVVGQkxFVkJRVThzUlVGRE5VTTdUVUZCUVN4RlFVVktPMGxCUVVFc1NVRkZTMFlzUTBGQlFTeEpRVm95UWtFc1EwRmhjRU03UlVGQlFUdEZRVU5CZFVNc1MwRkJRVHRKUVVORkxFMUJRVTF1UkN4RFFVRkJMRWRCUVU4N1NVRkRZaXhMUVVGTFFTeERRVUZCTEVOQlFVczRSaXhsUVVGQkxFbEJRVzFDT1VZc1EwRkJRU3hEUVVGTGNVUXNVMEZCUVN4RlFVRlhMRTlCUVU5eVJDeERRVUZCTzBsQlEzQkVMRXRCUVV0QkxFTkJRVUVzUTBGQlN6aEdMR1ZCUVVFc1JVRkJhVUlzVDBGQlR6bEdMRU5CUVVFN1NVRkRiRU1zU1VGQlNVVXNRMEZCUVN4RlFVTkJWU3hEUVVGQkxFVkJRMEZETEVOQlFVRTdTVUZEU2l4TFFVRkxMRWxCUVVsRExFTkJRVUVzUjBGQlVXOUdMRk5CUVVFc1EwRkJWWEJDTEUxQlFVRXNSVUZCVVRkRUxFTkJRVUVzUjBGQlR5eEpRVUZKYTBZc1MwRkJRU3hEUVVGTmNrWXNRMEZCUVN4SFFVRlJTU3hEUVVGQkxFZEJRVkVzUjBGQlIwRXNRMEZCUVN4SFFVRlJTaXhEUVVGQkxFVkJRVTlKTEVOQlFVRXNTVUZEY0VaRUxFTkJRVUVzUTBGQlMwTXNRMEZCUVN4SlFVRlRaMFlzVTBGQlFTeERRVUZWYUVZc1EwRkJRVHRKUVVWSUxHMUNRVUZhUkN4RFFVRkJMRU5CUVVzc1RVRkJiVUpyUml4TFFVRkJMRU5CUVUxTExFOUJRVUVzUTBGQlVYWkdMRU5CUVVFc1EwRkJTeXhQUVVOd1JHWXNRMEZCUVN4SFFVRlRaU3hEUVVGQkxFTkJRVXNzU1VGRFpFd3NRMEZCUVN4SFFVRlBTeXhEUVVGQkxFTkJRVXQzUml4TFFVRkJMRU5CUVUwc1IwRkJSM2hHTEVOQlFVRXNRMEZCU3paRUxFMUJRVUVzUjBGRE1VSnFSU3hEUVVGQkxFZEJRVlZpTEVOQlFVRXNTMEZGVmtVc1EwRkJRU3hIUVVGVFpTeERRVUZCTEVOQlFVc3NSMEZCUjNsR0xFMUJRVUVzUlVGRGFrSTVSaXhEUVVGQkxFZEJRVTlMTEVOQlFVRXNRMEZCU3l4SFFVRkhNRVlzU1VGQlFTeEZRVU5tT1VZc1EwRkJRU3hIUVVGVlNTeERRVUZCTEVOQlFVc3NSMEZCUnpKR0xFOUJRVUVzU1VGQlZ6VkhMRU5CUVVFc1IwRkZMMEpaTEVOQlFVRXNRMEZCUzJsSExFOUJRVUVzUTBGQlVXaEhMRU5CUVVFN1NVRmpZaXhSUVdKdlFuTkdMRXRCUVVFc1EwRkJUVXNzVDBGQlFTeERRVUZSZEVjc1EwRkJRU3hKUVVGVlFTeERRVUZCTEVkQlFWTkJMRU5CUVVFc1EwRkJUM05ETEV0QlFVRXNRMEZCVFN4TlFVTjBSRzlDTEU5QlFVRXNRMEZCVVRGRUxFTkJRVUU3VFVGRFpFWXNRMEZCUVN4RFFVRkxjMGNzYTBKQlFVRXNTVUZCYzBKMFJ5eERRVUZCTEVOQlFVdHpSeXhyUWtGQlFTeERRVUZ0UW5oQ0xFMUJRVUVzU1VGRGNrUTVSU3hEUVVGQkxFTkJRVXR6Unl4clFrRkJRU3hEUVVGdFFqRkRMRTlCUVVFc1EwRkJVVFZFTEVOQlFVRTdVVUZET1VKQkxFTkJRVUVzUTBGQllXOUhMRXRCUVVFc1EwRkJUWFpHTEVOQlFVRXNSVUZCVXl4RFFVRkRXQ3hEUVVGQkxFdEJRVlZWTEVOQlFVRXNSVUZCVFR0TlFVRkJMRWxCUnpkRFdpeERRVUZCTEVOQlFVczRSaXhsUVVGQkxFbEJRVzFDT1VZc1EwRkJRU3hEUVVGTE9FWXNaVUZCUVN4RFFVRm5RalZHTEVOQlFVRXNTMEZETDBOR0xFTkJRVUVzUTBGQlN6aEdMR1ZCUVVFc1EwRkJaMEkxUml4RFFVRkJMRVZCUVU4d1JDeFBRVUZCTEVOQlFWRTFSQ3hEUVVGQk8xRkJRMnhEUVN4RFFVRkJMRU5CUVdGdlJ5eExRVUZCTEVOQlFVMTJSaXhEUVVGQkxFVkJRVk5FTEVOQlFVRXNRMEZCU3p0TlFVRkJMRVZCUlhKRE8wbEJRVUVzU1VGRlMxb3NRMEZEVkR0RlFVRkJPMEZCUVVFN1FVRkhSaXhUUVVGVE9FY3NWMEZCUVR0RlFVTlFMRTFCUVUwNVJ5eERRVUZCTEVkQlFWTTdSVUZEWml4SlFVRkpSU3hEUVVGQkxFVkJRMEZWTEVOQlFVRTdSVUZEU2l4TlFVRk5ReXhEUVVGQkxFZEJRVXRpTEVOQlFVRXNRMEZCVDJkRkxFVkJRVUU3UlVGRmFFSTVSQ3hEUVVGQkxGRkJSR2xETEUxQlFYaENSaXhEUVVGQkxFTkJRVTkzUkN4TlFVRkJMRU5CUVU5cVF5eExRVUZCTEVsQlFXbEVMRk5CUVhoQ2RrSXNRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQYWtNc1MwRkJRU3hIUVVOMFJIWkNMRU5CUVVFc1EwRkJUM2RFTEUxQlFVRXNRMEZCVDJwRExFdEJRVUVzUjBGRlpGWXNRMEZCUVN4RFFVRkhhMGNzVjBGQlFTeEZRVWRZYmtjc1EwRkJRU3hSUVVSclF5eE5RVUY2UWxvc1EwRkJRU3hEUVVGUGQwUXNUVUZCUVN4RFFVRlBMMElzVFVGQlFTeEpRVUZ0UkN4VFFVRjZRbnBDTEVOQlFVRXNRMEZCVDNkRUxFMUJRVUVzUTBGQlR5OUNMRTFCUVVFc1IwRkRkRVI2UWl4RFFVRkJMRU5CUVU5M1JDeE5RVUZCTEVOQlFVOHZRaXhOUVVGQkxFZEJSV1JhTEVOQlFVRXNRMEZCUjIxSExGbEJRVUVzUlVGRlFTeE5RVUZXT1Vjc1EwRkJRU3hKUVVGbFJpeERRVUZCTEVOQlFVOXBTQ3haUVVGQkxFMUJRVFpDTEUxQlFWaHlSeXhEUVVGQkxFbEJRV2RDV2l4RFFVRkJMRU5CUVU5clNDeFZRVUZCTEU5QlMyNUZhRWdzUTBGQlFTeEhRVUZSUVN4RFFVRkJMRWRCUVZGcFNDeFJRVUZCTEVOQlFWTXNTVUZCUVVNc1YwRkJRU3hGUVVGaGRrY3NRMEZCUVN4RlFVRkpMRzFDUVVGdFFpeEhRVUZITEUxQlFVMXpSeXhSUVVGQkxFTkJRVk1zU1VGQlFVTXNWMEZCUVN4RlFVRmhka2NzUTBGQlFTeEZRVUZKTEc5Q1FVRnZRaXhIUVVGSExFdEJRM1pJUkN4RFFVRkJMRWRCUVZOQkxFTkJRVUVzUjBGQlUzVkhMRkZCUVVFc1EwRkJVeXhKUVVGQlF5eFhRVUZCTEVWQlFXRjJSeXhEUVVGQkxFVkJRVWtzYTBKQlFXdENMRWRCUVVjc1RVRkJUWE5ITEZGQlFVRXNRMEZCVXl4SlFVRkJReXhYUVVGQkxFVkJRV0YyUnl4RFFVRkJMRVZCUVVrc2NVSkJRWEZDTEVkQlFVY3NTMEZEY2tnMlFpeE5RVUZCTEVOQlFVOHlSU3hMUVVGQkxFTkJRVTF1U0N4RFFVRkJMRTFCUVZGQkxFTkJRVUVzUjBGQlVTeEpRVU0zUW5kRExFMUJRVUVzUTBGQlR6SkZMRXRCUVVFc1EwRkJUWHBITEVOQlFVRXNUVUZCVTBFc1EwRkJRU3hIUVVGVExFbEJRMjVETUVjc1RVRkJRU3hEUVVGUFF5eE5RVUZCTEVOQlFVOTJTQ3hEUVVGQkxFVkJRVkU3U1VGRGNFSjFRaXhMUVVGQkxFVkJRVUZ5UWl4RFFVRkJPMGxCUTBGMVFpeE5RVUZCTEVWQlFVRmlMRU5CUVVFN1NVRkRRVFJITEVsQlFVRXNSVUZCVFhoSUxFTkJRVUVzUTBGQlQybElMRmxCUVVFc1MwRkJhVUl2Unl4RFFVRkJMRWRCUVZGVk8wVkJRVUVzUjBGRk1VTTdRVUZCUVR0QlFVVkJMRk5CUVZNMlJ5eGhRVUZCTzBWQlExQXNUVUZCVFhwSUxFTkJRVUVzUjBGQlV6dEZRVU5tTEZOQlFWTkZMRVZCUVd0Q1FTeERRVUZCTzBsQlEzcENMRTlCUVVsR0xFTkJRVUVzUTBGQlQybElMRmxCUVVFc1MwRkRSaTlITEVOQlFVRXNSMEZIUmp0TlFVTk1jVUlzUzBGQlFTeEZRVUZUTzAxQlExUXNZMEZCWXp0TlFVTmtMR3RDUVVGclFqdE5RVU5zUWl4bFFVRmxPMDFCUTJZc1owSkJRV2RDTzAxQlEyaENMR2RDUVVGblFqdE5RVU5vUWl4cFFrRkJhVUk3VFVGRGFrSnRSeXhYUVVGQkxFVkJRV1U3U1VGQlFTeEZRVU5tZUVnc1EwRkJRU3hEUVVOS08wVkJRVUU3UlVGRFFTeFRRVUZUVlN4RlFVRXdRbG9zUTBGQlFTeEZRVUZOV1N4RFFVRkJPMGxCUTNaRExFOUJRVThyUnl4VlFVRkJMRU5CUVZjelNDeERRVUZCTEVOQlFVczBTQ3huUWtGQlFTeERRVUZwUWpGSUxFTkJRVUVzUTBGQmEwSlZMRU5CUVVFc1RVRkJWeXhGUVVOMlJUdEZRVUZCTzBWQlEwRXNUVUZCVFVNc1EwRkJRU3hIUVVGVFlpeERRVUZCTEVOQlFVOTNSQ3hOUVVGQk8wbEJRVUU3VFVGRGFFSnJReXhUUVVGQkxFVkJRMG8xUlN4RFFVRkJPMDFCUVZNclJ5eFJRVUZCTEVWQlExUTFSeXhEUVVGQk8wMUJRMEYxUnl4SlFVRkJMRVZCUVUxMFJ5eERRVUZCTzAxQlEwNDBSeXhaUVVGQkxFVkJRV042Unl4RFFVRkJPMDFCUVVjd1J5eFJRVUZCTEVWQlEycENka2M3U1VGQlFTeEpRVU5GZUVJc1EwRkJRVHRKUVVORk1FSXNRMEZCUVN4SFFVRlpNVUlzUTBGQlFTeERRVUZQWjBrc1QwRkJRU3hKUVVGWGJrZ3NRMEZCUVN4RFFVRlBiVWdzVDBGQlFTeERRVUZSUXl4UFFVRkJPMGxCUXpkRGNrY3NRMEZCUVN4SFFVRjFRa1lzUTBGQlFTeEhRVUZaTVVJc1EwRkJRU3hEUVVGUFowa3NUMEZCUVN4RFFVRlJSU3hOUVVGQkxFTkJRVTl3UkN4TlFVRkJMRWRCUVZNNVJTeERRVUZCTEVOQlFVOXJTU3hOUVVGQkxFTkJRVTl3UkN4TlFVRkJPMGxCUTJoR2FrUXNRMEZCUVN4SFFVRlRMRWxCUVVGelJ5eFhRVUZCTEVWQlFXZENiRWdzUTBGQlFTeEZRVUZWTEVsQlFVbHFRaXhEUVVGQkxFTkJRVTkzUkN4TlFVRkJMRU5CUVU4MFJTeFZRVUZCTzBsQlEzSkVkRWNzUTBGQlFTeEhRVUZsU2l4RFFVRkJMRWRCUVZreFFpeERRVUZCTEVOQlFVOW5TU3hQUVVGQkxFTkJRVkZGTEUxQlFVRXNRMEZCVDNCRUxFMUJRVUVzUjBGQlUycEVMRU5CUVVFc1EwRkJUMmxFTEUxQlFVRTdSVUZEZGtVc1NVRkJTUzlETEVOQlFVRXNSMEZCVnp0RlFVTm1MRTFCUVUxRExFTkJRVUVzUjBGQllUdEpRVU5pY1Vjc1EwRkJRU3hIUVVGclFqdEZRVU40UWl4SlFVRkpReXhEUVVGQkxFZEJRV1Y2U0N4RFFVRkJMRU5CUVU4d1NDeHJRa0ZCUVR0RlFVTkZMSEZDUVVGcVFrUXNRMEZCUVN4TFFVTlVRU3hEUVVGQkxFZEJRV1Y2U0N4RFFVRkJMRU5CUVU4d1NDeHJRa0ZCUVN4RFFVRnRRa01zU1VGQlFTeERRVUZMZUVrc1EwRkJRVHRGUVVWb1JDeEpRVUZKZVVrc1EwRkJRU3hIUVVGak5VZ3NRMEZCUVN4RFFVRlBOa2dzYVVKQlFVRTdSVUZEUlN4eFFrRkJhRUpFTEVOQlFVRXNTMEZEVkVFc1EwRkJRU3hIUVVGak5VZ3NRMEZCUVN4RFFVRlBOa2dzYVVKQlFVRXNRMEZCYTBKR0xFbEJRVUVzUTBGQlMzaEpMRU5CUVVFN1JVRkZPVU1zVFVGQlRUSkpMRU5CUVVFc1IwRkJlVUl6U1N4RFFVRkJMRU5CUVU4MFNTeFJRVUZCTEVOQlFWTTVSQ3hOUVVGQk8wbEJRM3BESzBRc1EwRkJRU3hIUVVFeVFqZEpMRU5CUVVFc1EwRkJUemhKTEZWQlFVRXNRMEZCVjJoRkxFMUJRVUU3UlVGRGJrUXNTVUZCU1dsRkxFTkJRVUVzUjBGQlpXeEpMRU5CUVVFc1EwRkJUMjFKTEZsQlFVRTdTVUZEZEVKRExFTkJRVUVzU1VGQmFVSllMRU5CUVVFN1NVRkRha0paTEVOQlFVRXNSMEZCWjBJN1NVRkRhRUpETEVOQlFVRXNSMEZCVVR0RlFVTmFMRk5CUVRCQ0xFMUJRV1pxU1N4RFFVRkJMRVZCUTFRN1JVRkZNRUlzYlVKQlFXcENOa2dzUTBGQlFTeEpRVUUyUWtFc1EwRkJRU3hEUVVGaE9VY3NUMEZCUVN4RFFVRlJMRkZCUVZFc1NVRkRia1U0Unl4RFFVRkJMRWRCUVdWd1FpeFZRVUZCTEVOQlFWZHZRaXhEUVVGQkxFTkJRV0ZMTEU5QlFVRXNRMEZCVVN4TFFVRkxMRTlCUVU4c1RVRkJUV3hKTEVOQlFVRXNSMEZEYUVNc2JVSkJRV3BDTmtnc1EwRkJRU3hMUVVOb1FrRXNRMEZCUVN4SFFVRmxjRUlzVlVGQlFTeERRVUZYYjBJc1EwRkJRU3hKUVVVMVFpOUpMRU5CUVVFc1EwRkJUM0ZLTEZkQlFVRXNTVUZCWlU0c1EwRkJRU3hGUVVkMFFteElMRU5CUVVFc1EwRkJUeXRDTEU5QlFVRXNRMEZCVVRWRUxFTkJRVUU3U1VGRFZIRkNMRU5CUVVFc1IwRkRSbkpDTEVOQlFVRXNRMEZCVVUwc1MwRkJRU3hEUVVGTlowb3NWVUZCUVN4SFFVRmhMRXRCUlROQ2RFb3NRMEZCUVN4RFFVRlJUU3hMUVVGQkxFTkJRVTF2U0N4WFFVRkJMRWRCUVdNc1NVRkZPVUl4U0N4RFFVRkJMRU5CUVZGTkxFdEJRVUVzUTBGQlRXbEtMRmxCUVVFc1IwRkJaU3hKUVVNM1FuWktMRU5CUVVFc1EwRkJVVTBzUzBGQlFTeERRVUZOYTBvc1UwRkJRU3hIUVVGWkxFVkJRVVU3UlVGQlFTeEpRVWt4UWpOSkxFTkJRVUVzUTBGQlR6UkpMR05CUVVFc1NVRkJhMEkxU1N4RFFVRkJMRU5CUVU4MlNTeFBRVUZCTEV0QlEyeERMRWxCUVVGRExGZEJRVUVzUlVGQlpUZEpMRU5CUVVFc1JVRkJWeXh0UTBGQmJVTXNTMEZETjBRc1NVRkJRVFpKTEZkQlFVRXNSVUZCWlRkSkxFTkJRVUVzUlVGQlZ5eHJRMEZCYTBNN1JVRkZPVVFzVFVGQlRUaEpMRU5CUVVFc1IwRkJZeTlKTEVOQlFVRXNRMEZCVDJkS0xFbEJRVUVzU1VGQlVXaEtMRU5CUVVFc1EwRkJUMmRLTEVsQlFVRXNRMEZCUzBNc1NVRkJRU3hIUVVGUExFdEJRVXM1U2l4RFFVRkJMRU5CUVU4MlNpeEpRVUZCTzBWQlRXeEZMRWxCUVVsRkxFTkJRVUU3UlVGTVFVZ3NRMEZCUVN4SlFVTkdOVW9zUTBGQlFTeERRVUZQTmtvc1NVRkJRU3hEUVVGTFJ5eFZRVUZCTEVOQlFWZHNTU3hEUVVGQk8wVkJTM3BDTEUxQlFVMXRTU3hEUVVGQkxFZEJRV2RFTEZkQlFYcENjRW9zUTBGQlFTeERRVUZQY1Vvc1lVRkJRU3hKUVVFMFFuSktMRU5CUVVFc1EwRkJUM05LTEZkQlFVRXNTVUZCWlRkRExFMUJRVUVzUTBGQlR6aERMRWxCUVVFc1EwRkJTM1pLTEVOQlFVRXNRMEZCVDNOS0xGZEJRVUVzUlVGQllVVXNUVUZCUVN4RFFVRlBja3NzUTBGQlFTeFRRVU51UlN4TlFVRXhRMkVzUTBGQlFTeERRVUZQYzBvc1YwRkJRU3hEUVVGWmJrc3NRMEZCUVN4RlFVRkxhMHNzWVVGQlFTeEZRVU55UTNCR0xFMUJRVUVzUjBGQlV6dEZRVU5hTEV0QlFVc3NTVUZCU1doRkxFTkJRVUVzUjBGQlNTeEhRVUZIUVN4RFFVRkJMRWRCUVVsblFpeERRVUZCTEVWQlFXTm9RaXhEUVVGQkxFbEJRVXNzUjBGQlJ6dEpRVVY0UXl4SlFVRkpSeXhEUVVGQk8wbEJTMG9zU1VGT1FUaEpMRU5CUVVFc1IwRkJXU3hIUVVWU2JFa3NRMEZCUVN4RFFVRlBaaXhEUVVGQkxFMUJRVWxITEVOQlFVRXNSMEZCVVZrc1EwRkJRU3hEUVVGUFppeERRVUZCTEVsQlF6RkNPRWtzUTBGQlFTeEpRVU5HTlVvc1EwRkJRU3hEUVVGUE5rb3NTVUZCUVN4RFFVRkxVeXhYUVVGQkxFTkJRVmw0U2l4RFFVRkJMRVZCUVVkSExFTkJRVUVzUlVGQlQyRXNRMEZCUVN4RlFVRmpOVUlzUTBGQlFTeEpRVVU1UXpKQ0xFTkJRVUVzUTBGQlQyWXNRMEZCUVN4TFFVRjVReXhYUVVGdVF5eEpRVUZCYzBjc1YwRkJRU3hGUVVGaGJrY3NRMEZCUVN4RlFVRlBMRmxCUVhKRE8wMUJSVUVzU1VGQk5rSXNWMEZCZWtKS0xFTkJRVUVzUTBGQlQzRktMR0ZCUVVFc1JVRkJNRUk3VVVGREwwSkVMRU5CUVVFc1MwRkRSbkJKTEVOQlFVRXNRMEZCVDJZc1EwRkJRU3hGUVVGSFVpeExRVUZCTEVOQlFVMUtMRU5CUVVFc1EwRkJhMElzV1VGQldUdFJRVVZvUkN4TlFVRk5aMElzUTBGQlFTeEhRVUZqY1Vvc1owSkJRVUVzUTBGQmFVSjBTaXhEUVVGQk8xVkJReTlDU1N4RFFVRkJMRWRCUVcxQ1NpeERRVUZCTEVOQlFVMVlMRXRCUVVFc1EwRkJUV3RMTEZOQlFVRTdWVUZETDBKb1NpeERRVUZCTEVkQlFYbENVQ3hEUVVGQkxFTkJRVTFZTEV0QlFVRXNRMEZCVFcxTExHVkJRVUU3VVVGUE0wTXNTVUZPU1hCS0xFTkJRVUVzUzBGRFJrb3NRMEZCUVN4RFFVRk5XQ3hMUVVGQkxFTkJRVTFyU3l4VFFVRkJMRWRCUVZrc1UwRkZkRUpvU2l4RFFVRkJMRXRCUTBaUUxFTkJRVUVzUTBGQlRWZ3NTMEZCUVN4RFFVRk5iVXNzWlVGQlFTeEhRVUZyUWl4VFFVVTFRalZLTEVOQlFVRXNRMEZCVHpaS0xGbEJRVUVzUlVGRFZGZ3NRMEZCUVN4SFFVRlpMMG9zUTBGQlFTeERRVUZQYVVnc1dVRkJRU3hMUVVGcFFpeEpRVUZCTUVRc1YwRkJRU3hGUVVGcFFqRktMRU5CUVVFc1JVRkJUeXhWUVVGVExFdEJRVkVzU1VGQlFUQktMRmRCUVVFc1JVRkJhVUl4U2l4RFFVRkJMRVZCUVU4c1YwRkJWU3hSUVVNeFJ6dFZRVVZNTEUxQlFVMXFRaXhEUVVGQkxFZEJRVkZaTEVOQlFVRXNRMEZCTUVKTkxFTkJRVUVzUlVGQllUdFpRVU12UTJoQ0xFTkJRVUVzUjBGQlkxVXNRMEZCUVN4RFFVRXdRazBzUTBGQlFTeEZRVUZoTzFsQlEzSkVUQ3hEUVVGQkxFZEJRV1ZFTEVOQlFVRXNRMEZCTUVKTkxFTkJRVUVzUlVGQllUdFpRVU4wUkVvc1EwRkJRU3hIUVVGaFJpeERRVUZCTEVOQlFUQkNUU3hEUVVGQkxFVkJRV0U3V1VGRGNFUkhMRU5CUVVFc1IwRkJZMVFzUTBGQlFTeERRVUV3UWswc1EwRkJRU3hGUVVGaE8xbEJRM0pFVFN4RFFVRkJMRWRCUVZsT0xFTkJRVUVzUTBGQldUQkhMR2RDUVVGQkxFTkJRV2xDTzFWQlF5OURMRWxCUVVsd1J5eERRVUZCTEVsQlFUSkNMR2xDUVVGa1FTeERRVUZCTEVWQlEyWjFTU3hEUVVGQkxFZEJRVmt2U2l4RFFVRkJMRWRCUVZGakxFTkJRVUVzUjBGQllVOHNRMEZCUVN4TlFVTTFRanRaUVVOTU8yTkJRVTB3Uml4WFFVRkJMRVZCUTBwdVJ5eERRVUZCTzJOQlFWZG5TeXhYUVVGQkxFVkJRMWd4U2p0WlFVRkJMRWxCUTBWRUxFTkJRVUU3V1VGRFNqaEpMRU5CUVVFc1IwRkJXUzlLTEVOQlFVRXNSMEZCVVVVc1EwRkJRU3hIUVVGalZ5eERRVUZCTEVkQlFXVkRMRU5CUVVFc1IwRkJZVThzUTBGQlFTeEpRVUZsU0N4RFFVRkJMRWRCUVdOT0xFTkJRVUVzUTBGRE4wWTdWVUZCUVR0UlFVTkdPMUZCUTBsVExFTkJRVUVzUzBGRFJrb3NRMEZCUVN4RFFVRk5XQ3hMUVVGQkxFTkJRVTFyU3l4VFFVRkJMRWRCUVZsdVNpeERRVUZCTEVkQlJYUkNSeXhEUVVGQkxFdEJRMFpRTEVOQlFVRXNRMEZCVFZnc1MwRkJRU3hEUVVGTmJVc3NaVUZCUVN4SFFVRnJRbXBLTEVOQlFVRXNSMEZGTlVKWUxFTkJRVUVzUTBGQlR6WktMRmxCUVVFc1MwRkJZMWdzUTBGQlFTeEhRVUZaWXl4SlFVRkJMRU5CUVV0RExFdEJRVUVzUTBGQlRXWXNRMEZCUVN4RlFVTnNSRHROUVVGQkxFOUJRMFZCTEVOQlFVRXNTVUZCWVRkSkxFTkJRVUVzU1VGQlkwd3NRMEZCUVN4RFFVRlBjVW9zWVVGQlFTeEhRVUZuUWl4TFFVRkxia0lzUTBGQlFTeEpRVUZuUW14SkxFTkJRVUVzUTBGQlQzRktMR0ZCUVVFc1JVRkRNVVZ5U2l4RFFVRkJMRU5CUVU4MlNpeFpRVUZCTEV0QlFXTllMRU5CUVVFc1IwRkJXV01zU1VGQlFTeERRVUZMUXl4TFFVRkJMRU5CUVUxbUxFTkJRVUVzU1VGRE5VTnNTU3hEUVVGQkxFTkJRVTltTEVOQlFVRXNUVUZEVkdVc1EwRkJRU3hEUVVGUFppeERRVUZCTEVWQlFVZFNMRXRCUVVFc1EwRkJUVW9zUTBGQlFTeERRVUZyUWl4WlFVRlpMRWRCUVVjMlNpeERRVUZCTzAxQlIycEViRWtzUTBGQlFTeERRVUZQWml4RFFVRkJMRTFCUTFSbExFTkJRVUVzUTBGQlQyWXNRMEZCUVN4RlFVRkhhVXNzWlVGQlFTeEhRVUZyUW1oQ0xFTkJRVUVzUjBGRk9VSXhRaXhEUVVGQkxFTkJRV2RDYWtRc1NVRkJRU3hEUVVGTE1rVXNRMEZCUVN4SFFVTnFRbXhLTEVOQlFVRXNRMEZCVHpSSkxHTkJRVUVzU1VGRFZGSXNRMEZCUVN4SFFVRm5Ra0VzUTBGQlFTeEhRVUZuUW1Nc1EwRkJRU3hIUVVGWkxFbEJRVWxpTEVOQlFVRXNSMEZCWjBJc1NVRkJTVWdzUTBGQlFTeEZRVU01UXl4TlFVRnNRa2NzUTBGQlFTeEpRVUUyUWl4TlFVRk9jRWtzUTBGQlFTeExRVUZUYlVrc1EwRkJRU3hIUVVGblFrRXNRMEZCUVN4SFFVRm5RaTlJTEVOQlFVRXNSMEZCWVN4SlFVRkpOa2dzUTBGQlFTeEhRVU16UlN4TlFVRk9ha2tzUTBGQlFTeExRVUZUYlVrc1EwRkJRU3hIUVVGblFrRXNRMEZCUVN4SFFVRm5RaTlJTEVOQlFVRXNSMEZCWVN4SlFVRkpOa2dzUTBGQlFTeEhRVU14UkRoQ0xFbEJRVUVzUTBGQlMwY3NSMEZCUVN4RFFVRkpMMElzUTBGQlFTeEpRVUZwUWl4VFFVRlZRU3hEUVVGQkxFZEJRV2RDTEVsQlEzQkVjRWtzUTBGQlFTeERRVUZQTmtvc1dVRkJRU3hMUVVGamVrSXNRMEZCUVN4SFFVRm5RalJDTEVsQlFVRXNRMEZCUzBNc1MwRkJRU3hEUVVGTk4wSXNRMEZCUVN4SlFVTm9SRVVzUTBGQlFTeEhRVUZSZEVrc1EwRkJRU3hEUVVGUGIwc3NZMEZCUVN4SlFVRnRRaXhMUVVGSGJFb3NRMEZCUVN4RFFVRlRjVVFzU1VGQlFTeERRVUZMTmtRc1EwRkJRU3hIUVVOMlJHcElMRU5CUVVFc1EwRkJWMjlFTEVsQlFVRXNRMEZCU3paRUxFTkJRVUVzVFVGRlduQkpMRU5CUVVFc1EwRkJUelpLTEZsQlFVRXNTMEZCWTNwQ0xFTkJRVUVzUjBGQlowSTBRaXhKUVVGQkxFTkJRVXRETEV0QlFVRXNRMEZCVFRkQ0xFTkJRVUVzUzBGREwwTkZMRU5CUVVFc1IwRkJVVEJDTEVsQlFVRXNRMEZCUzBzc1IwRkJRU3hEUVVGSmJFd3NRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQTWtnc2EwSkJRVUVzUlVGQmIwSm9ReXhEUVVGQkxFdEJRVlZ1U2l4RFFVRkJMRU5CUVU5M1JDeE5RVUZCTEVOQlFVOTVTQ3hqUVVGQkxFbEJRVzFDTEV0QlFVZHNTaXhEUVVGQkxFTkJRVk54UkN4SlFVRkJMRU5CUVVzMlJDeERRVUZCTEVkQlEzQklha2dzUTBGQlFTeERRVUZYYjBRc1NVRkJRU3hEUVVGTE5rUXNRMEZCUVN4SFFVTm9Ra0VzUTBGQlFTeEhRVUZuUWtFc1EwRkJRU3hIUVVGblFtTXNRMEZCUVN4SFFVRlphRUlzUTBGQlFTeEhRVVU1UXk5SkxFTkJRVUVzUTBGQlQzRktMRmRCUVVFc1NVRkJaVlVzUTBGQlFTeEhRVUZaYUVJc1EwRkJRU3hGUVVOc1EwY3NRMEZCUVN4SFFVRm5RbUVzUTBGQlFTeEZRVU5vUWxvc1EwRkJRU3hKUVVGVExFTkJja1V5UkR0SlFVRkJPMFZCYzBWMFJUdEZRV0ZCTEVsQldrRnVTaXhEUVVGQkxFTkJRVTl4U2l4WFFVRkJMRWRCUVdOM1FpeEpRVUZCTEVOQlFVdFBMRWRCUVVFc1EwRkJTWEJNTEVOQlFVRXNRMEZCVDNGS0xGZEJRVUVzUlVGQllXNUpMRU5CUVVFc1NVRkJZM1ZJTEVOQlFVRXNSVUZETlVSd1NDeERRVUZCTEVsQlFVOUhMRU5CUVVFc1MwRkJLMElzV1VGQmJFSllMRU5CUVVFc1EwRkJUM2RMTEUxQlFVRXNTVUZCZDBNc1owSkJRV3hDZUVzc1EwRkJRU3hEUVVGUGQwc3NUVUZCUVN4TlFVTXhSSFpMTEVOQlFVRXNRMEZCVlZJc1MwRkJRU3hEUVVGTmFVSXNTMEZCUVN4SFFVRlJMRWRCUVVkMlFpeERRVUZCTEVOQlFVOXhTaXhYUVVGQkxFZEJRV05PTEVOQlFVRXNUMEZGT1VOc1NTeERRVUZCTEVOQlFVOTVTeXhqUVVGQkxFdEJRMVI0U3l4RFFVRkJMRU5CUVZWU0xFdEJRVUVzUTBGQlRVb3NRMEZCUVN4RFFVRnJRaXhaUVVGWkxFZEJRVWRHTEVOQlFVRXNRMEZCVDNGS0xGZEJRVUVzUjBGQlkwNHNRMEZCUVN4UFFVVndSV0VzUTBGQlFTeEpRVU5HTlVvc1EwRkJRU3hEUVVGUE5rb3NTVUZCUVN4RFFVRkxNRUlzYVVKQlFVRXNRMEZCYTBKNFFpeERRVUZCTEVWQlFWZG9TU3hEUVVGQkxFVkJRVlUzUWl4RFFVRkJMRWxCU1doRVZ5eERRVUZCTEVOQlFVODBTU3hqUVVGQkxFVkJRV2RDTzBsQlF6RkNMRTFCUVUxMlNpeERRVUZCTEVkQlFXZENPMGxCUTNSQ0xFdEJRVXNzU1VGQlNWVXNRMEZCUVN4SFFVRkpMRWRCUVVkQkxFTkJRVUVzUjBGQlNXMUNMRU5CUVVFc1EwRkJVeXRETEUxQlFVRXNSVUZCVVd4RkxFTkJRVUVzU1VGQlN5eEhRVUZITzAxQlF6TkRMRWxCUVVsRkxFTkJRVUVzUjBGQmFVSnBRaXhEUVVGQkxFTkJRVk51UWl4RFFVRkJPMDFCUXpGQ1F5eERRVUZCTEVOQlFVODJTaXhaUVVGQkxFdEJRV00xU2l4RFFVRkJMRWRCUVdsQ0swb3NTVUZCUVN4RFFVRkxReXhMUVVGQkxFTkJRVTFvU3l4RFFVRkJMRWxCUTJwRWFVSXNRMEZCUVN4RFFVRlRia0lzUTBGQlFTeExRVUZOV2l4RFFVRkJMRU5CUVU5eFNpeFhRVUZCTEVkQlFXTnVTU3hEUVVGQkxFbEJRM1JEYUVJc1EwRkJRU3hEUVVGamEwWXNTVUZCUVN4RFFVRkxkRVVzUTBGQlFTeERRVVYyUWp0SlFVRkJPMGxCUTBGcFFpeERRVUZCTEVkQlFWYzNRaXhEUVVGQkxFVkJRMUF5U3l4SlFVRkJMRU5CUVV0RExFdEJRVUVzUTBGQlRUbExMRU5CUVVFc1EwRkJUM0ZLTEZkQlFVRXNSMEZCWTI1SkxFTkJRVUVzU1VGQll6SktMRWxCUVVFc1EwRkJTME1zUzBGQlFTeERRVUZOTDBrc1EwRkJRU3hEUVVGVFFTeERRVUZCTEVOQlFWTXJReXhOUVVGQkxFZEJRVk1zVFVGQlRTeExRVU0xUmk5RExFTkJRVUVzUTBGQlUzRkVMRWxCUVVFc1EwRkJTM0JHTEVOQlFVRXNRMEZCVDNGS0xGZEJRVUVzUjBGQlkyNUpMRU5CUVVFc1EwRkZka003UlVGQlFUdEZRVU5CTEVsQlFVbFJMRU5CUVVFc1NVRkJZV0lzUTBGQlFTeERRVUZQTWtzc1NVRkJRU3hGUVVGTk8wbEJRelZDTEUxQlFVMTBUQ3hEUVVGQkxFZEJRVTl0U1N4RFFVRkJMRU5CUVdkQ0xFdEJRVXRWTEVOQlFVRTdTVUZEYkVNc1NVRkJTV3hKTEVOQlFVRXNRMEZCVDI5TExHTkJRVUVzUjBGQmFVSXNSMEZCUnp0TlFVTTNRaXhOUVVGTmNrc3NRMEZCUVN4SFFVRlRhVXNzU1VGQlFTeERRVUZMV1N4SlFVRkJMRVZCUVUxNlRDeERRVUZCTEVOQlFVOW5TU3hQUVVGQkxFTkJRVkV3UkN4WlFVRkJMRWRCUVdVeFRDeERRVUZCTEVOQlFVOW5TU3hQUVVGQkxFTkJRVkV5UkN4WFFVRkJMRWxCUVdVNVN5eERRVUZCTEVOQlFVOXZTeXhqUVVGQk8xRkJRM1pHYmtzc1EwRkJRU3hIUVVGWldpeERRVUZCTEVkQlFVOVhMRU5CUVVFc1EwRkJUMjlMTEdOQlFVRTdUVUZEYUVNc1MwRkJTeXhKUVVGSmFrd3NRMEZCUVN4SFFVRkpMRWRCUVVkQkxFTkJRVUVzUjBGQlNWa3NRMEZCUVN4RlFVRlJXaXhEUVVGQkxFbEJRVXNzUjBGREwwSXJRaXhEUVVGQkxFTkJRVk54UkN4SlFVRkJMRU5CUVV0eVJDeERRVUZCTEVOQlFWTkJMRU5CUVVFc1EwRkJVeXRETEUxQlFVRXNSMEZCVXl4TFFVRkxhRVVzUTBGQlFTeERRVVZzUkR0SlFVRkJPMGxCUTBFc1MwRkJTeXhKUVVGSlJpeERRVUZCTEVkQlFVa3NSMEZCUjBFc1EwRkJRU3hIUVVGSldpeERRVUZCTEVOQlFVOW5TU3hQUVVGQkxFTkJRVkV3UkN4WlFVRkJMRWRCUVdVeFRDeERRVUZCTEVOQlFVOW5TU3hQUVVGQkxFTkJRVkV5UkN4WFFVRkJMRVZCUVdFdlN5eERRVUZCTEVsQlFVc3NSMEZEYmtRc1RVRkJNVUpETEVOQlFVRXNRMEZCVDI5TExHTkJRVUVzU1VGRFZHeEtMRU5CUVVFc1EwRkJVM0ZFTEVsQlFVRXNRMEZCUzNKRUxFTkJRVUVzUTBGQlUwRXNRMEZCUVN4RFFVRlRLME1zVFVGQlFTeEhRVUZUTEV0QlFVczFSU3hEUVVGQkxFZEJSV2hFT0VJc1EwRkJRU3hEUVVGWGIwUXNTVUZCUVN4RFFVRkxjRVFzUTBGQlFTeERRVUZYUVN4RFFVRkJMRU5CUVZjNFF5eE5RVUZCTEVkQlFWTXNTMEZCU3pWRkxFTkJRVUVzUjBGRGNFUkdMRU5CUVVFc1EwRkJUM0ZLTEZkQlFVRXNTVUZCWlc1S0xFTkJSVEZDTzBWQlFVRTdSVUZGUVN4SlFVUjNRaXhOUVVGd1FqWkNMRU5CUVVFc1EwRkJVeXRETEUxQlFVRXNTMEZCWXk5RExFTkJRVUVzUjBGQlZ5eERRVUZETEV0QlEyeENMRTFCUVdwQ1owZ3NRMEZCUVN4RlFVRnZRanRKUVVOMFFpeE5RVUZOYmtrc1EwRkJRU3hIUVVGTldpeERRVUZCTEVOQlFVOXBTQ3haUVVGQkxFMUJRV3RDTlVZc1EwRkJRU3hIUVVGTkxHVkJRV1Z1UWl4RFFVRkJMRU5CUVd0Q08wbEJRelZGTWtJc1EwRkJRU3hEUVVGUGQwa3NUVUZCUVN4RFFVRlBMRU5CUVVOeVN5eERRVUZCTEVWQlFVZEZMRU5CUVVFc1QwRkRXRmNzUTBGQlFTeERRVUZQTmtrc1QwRkJRU3hMUVVGWE4wa3NRMEZCUVN4RFFVRlBNa3NzU1VGQlFTeExRVU14UW5STUxFTkJRVUVzUzBGQlpUSkNMRU5CUVVFc1EwRkJUMmxFTEUxQlFVRXNSMEZCVXl4SFFVbHNRMnhDTEU5QlFVRXNRMEZCVVRWRUxFTkJRVUU3VFVGRFZFRXNRMEZCUVN4RFFVRlJUU3hMUVVGQkxFTkJRVTFOTEVOQlFVRXNTVUZCVHl4SFFVRkhiVWtzUTBGQlFTeEpRVUZuUWp0SlFVRkJMRVZCUlRWRE8wVkJRVUU3UlVGRFFTeEpRVUZKYkVrc1EwRkJRU3hEUVVGUE5Fa3NZMEZCUVN4SlFVRnJRalZKTEVOQlFVRXNRMEZCVHl0TExHOUNRVUZCTEVWQlFYTkNPMGxCUTNoRUxFbEJRVWsxVEN4RFFVRkJMRWRCUVdkQ08wbEJRM0JDY1Vrc1EwRkJRU3hEUVVGblFucEZMRTlCUVVFc1EwRkJVVEZFTEVOQlFVRTdUVUZEZEVKR0xFTkJRVUVzU1VGQmFVSkZMRU5CUVVFc1NVRkJhMEkyU1N4RFFVRkJMRWxCUVdkQ0xFVkJRVVU3U1VGQlFTeEpRVVYyUkM5SkxFTkJRVUVzU1VGQmFVSXJTU3hEUVVGQk8wbEJRMnBDTEUxQlFVMDNTU3hEUVVGQkxFZEJRVlZHTEVOQlFVRXNSMEZCWjBKclFpeERRVUZCTzBsQlEyaERZU3hEUVVGQkxFZEJRVmRCTEVOQlFVRXNRMEZCVTFVc1IwRkJRU3hEUVVGSmVrTXNRMEZCUVN4SlFVTnNRa0VzUTBGQlFTeEpRVUZSTEV0QlFWZHpTU3hEUVVGQkxFZEJRMjVDZEVrc1EwRkJRU3hIUVVGUFJTeERRVUZCTEVkQlFXZENRU3hEUVVGQkxFZEJRVlYxU1N4RFFVRkJMRWRCUXpsQ2Vra3NRMEZCUVN4RFFVVllPMFZCUVVFN1JVRkRRU3hKUVVGSllTeERRVUZCTEVOQlFVOW5UQ3gzUWtGQlFTeEZRVUV3UWp0SlFVTnVReXhKUVVGSk4wd3NRMEZCUVN4SFFVRm5RanRKUVV0d1FpeEpRVXBCY1Vrc1EwRkJRU3hEUVVGblFucEZMRTlCUVVFc1EwRkJVVEZFTEVOQlFVRTdUVUZEZEVKR0xFTkJRVUVzU1VGQmFVSkZMRU5CUVVFc1NVRkJhMEkyU1N4RFFVRkJMRWxCUVdkQ0xFVkJRVVU3U1VGQlFTeEpRVVYyUkM5SkxFTkJRVUVzU1VGQmFVSXJTU3hEUVVGQkxFVkJRMkl2U1N4RFFVRkJMRWRCUVdkQ2EwSXNRMEZCUVN4RlFVRlpPMDFCUXpsQ0xFMUJRVTFvUWl4RFFVRkJMRWxCUVcxQ1owSXNRMEZCUVN4SFFVRmhiRUlzUTBGQlFTeEpRVUZwUWp0TlFVTjJSQ3RDTEVOQlFVRXNRMEZCVXpaQ0xFOUJRVUVzUTBGQlVTeERRVUZETlVRc1EwRkJRU3hGUVVGTldTeERRVUZCTzFGQlEzUkNiVUlzUTBGQlFTeERRVUZUYmtJc1EwRkJRU3hKUVVGaFdpeERRVUZCTEVkQlFVOUZMRU5CUVdVN1RVRkJRU3hKUVVVNVF6aENMRU5CUVVFc1EwRkJWelJDTEU5QlFVRXNRMEZCVVN4RFFVRkROVVFzUTBGQlFTeEZRVUZOV1N4RFFVRkJPMUZCUTNoQ2IwSXNRMEZCUVN4RFFVRlhjRUlzUTBGQlFTeEpRVUZoV2l4RFFVRkJMRWRCUVU5RkxFTkJRV1U3VFVGQlFTeEZRVVZzUkR0SlFVRkJPMFZCUTBZN1JVRlBRU3hKUVU1QmIwZ3NUVUZCUVN4RFFVRlBReXhOUVVGQkxFTkJRVTkyU0N4RFFVRkJMRVZCUVZFN1NVRkRjRUpyU1N4TlFVRkJMRVZCUVVGeVJ5eERRVUZCTzBsQlEwRXJSeXhSUVVGQkxFVkJRVUUzUnl4RFFVRkJPMGxCUTBFclJ5eFZRVUZCTEVWQlFVRTVSeXhEUVVGQk8wbEJRMEU0U2l4bFFVRkJMRVZCUVVGNlJEdEZRVUZCTEVsQlJVVjRTQ3hEUVVGQkxFTkJRVTgwU1N4alFVRkJMRWxCUVd0Q05Va3NRMEZCUVN4RFFVRlBOa2tzVDBGQlFTeExRVUZaTjBrc1EwRkJRU3hEUVVGUEswc3NiMEpCUVVFc1JVRkJjMEk3U1VGRE0wVXNTVUZCUVdwRExGZEJRVUVzUlVGQlpUZEpMRU5CUVVFc1JVRkJWeXh2UTBGQmRVTnBRaXhEUVVGQkxFTkJRVk1zUzBGQllpeFBRVU0zUkN4SlFVRkJORWdzVjBGQlFTeEZRVUZsTjBrc1EwRkJRU3hGUVVGWExHdERRVUZ4UTJRc1EwRkJRU3hEUVVGUGQwZ3NTVUZCUVN4SFFVRlBMRWxCUVVsaExFTkJRVUVzUTBGQlowSkJMRU5CUVVFc1EwRkJaMEoyUkN4TlFVRkJMRWRCUVZNc1MwRkJTeXhKUVVGdVJUdEpRVU0xUkN4TlFVRk5OVVVzUTBGQlFTeEpRVUZwUWtZc1EwRkJRU3hEUVVGUE5Fa3NVVUZCUVN4RFFVRlRPMDFCUTJwRGFFa3NRMEZCUVN4SlFVRnRRbG9zUTBGQlFTeERRVUZQT0Vrc1ZVRkJRU3hEUVVGWE8wbEJRek5ET1Vrc1EwRkJRU3hEUVVGUE5Fa3NVVUZCUVN4SFFVRlhOVWtzUTBGQlFTeERRVUZQTkVrc1VVRkJRU3hEUVVGVGJrY3NSMEZCUVN4RFFVRkpla01zUTBGQlFTeEpRVUZMUVN4RFFVRkJMRWRCUVVsRkxFTkJRVUVzUjBGREwwTkdMRU5CUVVFc1EwRkJUemhKTEZWQlFVRXNSMEZCWVRsSkxFTkJRVUVzUTBGQlR6aEpMRlZCUVVFc1EwRkJWM0pITEVkQlFVRXNRMEZCU1hwRExFTkJRVUVzU1VGQlMwRXNRMEZCUVN4SFFVRkpXU3hEUVVGQkxFTkJRM0pFTzBWQlFVRTdSVUZqUVN4SlFXSkphMElzUTBGQlFTeExRVUZwUWtZc1EwRkJRU3hKUVVOdVFqVkNMRU5CUVVFc1EwRkJUMjFFTEVsQlFVRXNRMEZCU3l4MVFrRkZWbkJDTEVOQlFVRXNRMEZCVXl0RExFMUJRVUVzUzBGQlZ6WkVMRU5CUVVFc1MwRkRiRUl6U1N4RFFVRkJMRU5CUVU5M1JDeE5RVUZCTEVOQlFVOTFTU3hoUVVGQkxFbEJRV1V2VEN4RFFVRkJMRU5CUVU5blRTeGhRVUZCTEVsQlEzaERhRTBzUTBGQlFTeERRVUZQYlVRc1NVRkJRU3hEUVVGTExEQkNRVVZXYmtJc1EwRkJRU3hEUVVGWE9FTXNUVUZCUVN4TFFVRlhLMFFzUTBGQlFTeEpRVU40UWpkSkxFTkJRVUVzUTBGQlQyMUVMRWxCUVVFc1EwRkJTeXd5UWtGRlZuUkRMRU5CUVVFc1EwRkJUMjlNTEcxQ1FVRkJMRWxCUTFScVRTeERRVUZCTEVOQlFVOXJUU3hyUWtGQlFTeE5RVVZLZUVzc1EwRkJRU3hKUVVGallpeERRVUZCTEVOQlFVODJTU3hQUVVGQkxFbEJRVGhDTEZsQlFXeENOMGtzUTBGQlFTeERRVUZQZDBzc1RVRkJRU3hKUVVGM1F5eFhRVUZzUW5oTExFTkJRVUVzUTBGQlQzZExMRTFCUVVFc1IwRkJiMEk3U1VGRE5VWXNUVUZCVFc1TUxFTkJRVUVzUjBGQmMwSXNSMEZCUjFjc1EwRkJRU3hEUVVGUGMwd3NjMEpCUVVFN1RVRkRhRU4yVEN4RFFVRkJMRWRCUVRaQ1dpeERRVUZCTEVOQlFVOW5SU3hGUVVGQkxFTkJRVWR2U1N4VFFVRkJMRU5CUVZWRExGRkJRVUVzUTBGQlUyNU5MRU5CUVVFN1NVRkROVVEwUWl4RFFVRkJMRWxCUVdkQ2FrSXNRMEZCUVN4RFFVRlBlVXdzZFVKQlFVRXNSMEZEY0VJeFRDeERRVUZCTEVsQlFUUkNXaXhEUVVGQkxFTkJRVTluUlN4RlFVRkJMRU5CUVVkdlNTeFRRVUZCTEVOQlFWVkhMRWRCUVVFc1EwRkJTWEpOTEVOQlFVRXNTVUZEYUVSVkxFTkJRVUVzU1VGRFZGb3NRMEZCUVN4RFFVRlBaMFVzUlVGQlFTeERRVUZIYjBrc1UwRkJRU3hEUVVGVlNTeE5RVUZCTEVOQlFVOTBUU3hEUVVGQkxFTkJSUzlDTzBWQlFVRTdRVUZEUmp0QlFVVkJMRk5CUVZOMVRTeHBRa0ZCYVVKNlRTeERRVUZCTzBWQlEzaENMRTFCUVUxRkxFTkJRVUVzUjBGQlV6dEpRVU5VVlN4RFFVRkJMRWRCUVdVN1NVRkRaa01zUTBGQlFTeEhRVUZaV0N4RFFVRkJMRU5CUVU4NFNDeFBRVUZCTEVsQlFWYzVTQ3hEUVVGQkxFTkJRVTl6UkN4TlFVRkJMRU5CUVU5M1JTeFBRVUZCTEVOQlFWRkRMRTlCUVVFN1JVRkRNVVFzU1VGRFNXNUlMRU5CUVVFN1NVRkVRVWNzUTBGQlFTeEhRVUZaTzBWQlJVc3NiVUpCUVZacVFpeERRVUZCTEVkQlExUkZMRU5CUVVFc1EwRkJUM2ROTEdGQlFVRXNRMEZCWXpGTkxFTkJRVUVzUzBGRFJpeE5RVUZXUVN4RFFVRkJMRWxCUTFSRkxFTkJRVUVzUTBGQlQzZE5MR0ZCUVVFc1EwRkJZM2hOTEVOQlFVRXNRMEZCVDNORUxFMUJRVUVzUTBGQlQyMUtMRXRCUVVFN1JVRkZja01zVFVGQlRYcE1MRU5CUVVFc1IwRkJhMEpzUWl4RFFVRkJMRWxCUTJ4Q1lTeERRVUZCTEVkQlEwdFlMRU5CUVVFc1EwRkJUMmRKTEUxQlFVRXNRMEZCVDJoSkxFTkJRVUVzUTBGQlR6Qk5MRzFDUVVGQkxFTkJRVzlDTlUwc1EwRkJRU3hMUVVVelEwVXNRMEZCUVN4RFFVRlBaMGtzVFVGQlFTeERRVUZQYkVrc1EwRkJRVHRGUVVkMlFpeEpRVUZ2UXl4WFFVRm9RMFVzUTBGQlFTeERRVUZQYzBRc1RVRkJRU3hEUVVGUE1FY3NZVUZCUVN4SlFVRTBRbWhMTEVOQlFVRXNRMEZCVDNORUxFMUJRVUVzUTBGQlR6QkhMR0ZCUVVFc1IwRkJaMEk3U1VGRE1VVXNTVUZCU1doTExFTkJRVUVzUTBGQlQzTkVMRTFCUVVFc1EwRkJUMmxITEdOQlFVRXNSMEZEWm5aS0xFTkJRVUVzUTBGQlR6Sk5MR0ZCUVVFc1NVRkJhVUlzU1VGQlNXcEtMRTlCUVVFc1EwRkJVVFZFTEVOQlFVRTdUVUZEYmtOWkxFTkJRVUVzUTBGQllYZEZMRWxCUVVFc1EwRkJTM0JHTEVOQlFVRXNRMEZCVFR0SlFVRkJMRkZCUnpGQ0xFdEJRVXRqTEVOQlFVRXNSMEZCU1N4SFFVRkhRU3hEUVVGQkxFZEJRVWtyU2l4SlFVRkJMRU5CUVV0WkxFbEJRVUVzUTBGQlMzWk1MRU5CUVVFc1EwRkJUM05FTEUxQlFVRXNRMEZCVHpCSExHRkJRVUVzUjBGQlowSndTaXhEUVVGQkxFbEJRVXNzUjBGQlJ6dE5RVU01UkN4TlFVRk5aQ3hEUVVGQkxFZEJRVkZGTEVOQlFVRXNRMEZCVHpSTkxGZEJRVUVzUjBGQlkyaE5MRU5CUVVFN1RVRkRia01zU1VGQlNXUXNRMEZCUVN4SFFVRlJSU3hEUVVGQkxFTkJRVTluU1N4TlFVRkJMRU5CUVU5d1JDeE5RVUZCTEV0QlFWZHFSU3hEUVVGQkxFVkJRVmM3VFVGRGFFUkVMRU5CUVVFc1EwRkJZWGRGTEVsQlFVRXNRMEZCUzJ4RkxFTkJRVUVzUTBGQlowSnNRaXhEUVVGQkxFVkJRM0JETzBsQlFVRTdSVUZCUVN4UFFVZEdXU3hEUVVGQkxFTkJRV0YzUlN4SlFVRkJMRU5CUVV0c1JTeERRVUZCTEVOQlFXZENhRUlzUTBGQlFTeERRVUZQTkUwc1YwRkJRVHRGUVVrelF5eExRVUZMYUUwc1EwRkJRU3hIUVVGSkxFZEJRVWRCTEVOQlFVRXNSMEZCU1VZc1EwRkJRU3hEUVVGaGEwVXNUVUZCUVN4RlFVRlJhRVVzUTBGQlFTeEpRVUZMTEVkQlEzaERMRk5CUVN0Q0xFMUJRWEJDUml4RFFVRkJMRU5CUVdGRkxFTkJRVUVzUjBGQmIwSTdTVUZETVVNc1RVRkJUV1FzUTBGQlFTeEhRVUZUV1N4RFFVRkJMRU5CUVdGRkxFTkJRVUVzUlVGQlIybE5MRmxCUVVFN1NVRkRMMEk1VEN4RFFVRkJMRWRCUVZscVFpeERRVUZCTEVkQlFWTnBRaXhEUVVGQkxFZEJRVmxxUWl4RFFVRkJMRWRCUVZOcFFpeERRVU0xUXp0RlFVRkJPMFZCUVVFc1EwRkpSVUVzUTBGQlFTeEpRVUV5UWl4TlFVRmtRU3hEUVVGQkxFMUJRV2xDWml4RFFVRkJMRU5CUVU5M1JpeFRRVUZCTEVOQlFWVndSaXhMUVVGQkxFTkJRVTF0UWl4TlFVRkJMRWRCUVZNc1IwRkJSMUlzUTBGQlFTeExRVU4yUlR0QlFVRkJPMEZCUlVFc1UwRkJVMmxNTEcxQ1FVRkJPMFZCUTFBc1RVRkJUV3hOTEVOQlFVRXNSMEZCVXp0SlFVTlVSU3hEUVVGQkxFZEJRVk5HTEVOQlFVRXNRMEZCVDJ0SkxFMUJRVUU3U1VGRmFFSjBTQ3hEUVVGQkxFZEJRV05hTEVOQlFVRXNRMEZCVDJkT0xGTkJRVUVzUjBGQldXaE9MRU5CUVVFc1EwRkJUMmxJTEZsQlFVRXNTMEZCYVVKcVNDeERRVUZCTEVOQlFVOHdSaXhUUVVGQkxFTkJRVlYxU0N4VlFVRkJMRWRCUVdGcVRpeERRVUZCTEVOQlFVOHdSaXhUUVVGQkxFTkJRVlYzU0N4VFFVRkJMRWRCUVZrN1JVRkRNVWdzUzBGQlN5eEpRVUZKY2swc1EwRkJRU3hIUVVGSkxFZEJRVWRCTEVOQlFVRXNSMEZCU1Znc1EwRkJRU3hEUVVGUE5FVXNUVUZCUVN4RlFVRlJha1VzUTBGQlFTeEpRVUZMTEVkQlEzUkRXQ3hEUVVGQkxFTkJRVTlYTEVOQlFVRXNSVUZCUjNOTkxHbENRVUZCTEVsQlFYRkNiazRzUTBGQlFTeERRVUZQYVVnc1dVRkJRU3hMUVVGcFFpOUhMRU5CUVVFc1EwRkJUMWNzUTBGQlFTeEZRVUZIYjAwc1ZVRkJRU3hIUVVGaEwwMHNRMEZCUVN4RFFVRlBWeXhEUVVGQkxFVkJRVWR4VFN4VFFVRkJMRWxCUVdGMFRTeERRVUZCTEVkQlFXTmFMRU5CUVVFc1EwRkJUMjlPTEhGQ1FVRkJMRVZCUlRsSU8wRkJRVUU3UVVGRlFTeFRRVUZUUXl4eFFrRkJjVUp5VGl4RFFVRkJPMFZCUVVFc1MwRkRWaXhOUVVGa1FTeERRVUZCTEV0QlEwWkJMRU5CUVVFc1IwRkJXU3hSUVVGUkxFdEJRVXR6VGl4VFFVRkJMRWxCUVdFN1JVRkZlRU1zVFVGQlRYQk9MRU5CUVVFc1IwRkJVenRKUVVOVVZTeERRVUZCTEVkQlFWTldMRU5CUVVFc1EwRkJUM05FTEUxQlFVRTdTVUZCUVR0TlFVTm9RakJGTEUxQlFVRXNSVUZEU25KSUxFTkJRVUU3VFVGRFFXbElMRmxCUVVFc1JVRkJZMmhJTEVOQlFVRTdUVUZCUnpoSUxGRkJRVUVzUlVGRGFrSXpTRHRKUVVGQkxFbEJRMFZtTEVOQlFVRTdSVUZEU2l4SlFVRnpRaXhOUVVGc1FsY3NRMEZCUVN4RFFVRlBhVVVzVFVGQlFTeEZRVUZqTzBWQlFVRXNTMEZEYTBJc1RVRkJhRU5xUlN4RFFVRkJMRU5CUVU4c1IwRkJSM05OTEdsQ1FVRkJMRWxCUVcxRGFrNHNRMEZCUVN4RFFVRlBaMDBzYTBKQlFVRTdSVUZETDBRc1NVRkJTV2hNTEVOQlFVRXNTVUZCWjBKc1FpeERRVUZCTzBWQlEyaENZeXhEUVVGQkxFdEJRVXRKTEVOQlFVRXNSMEZCWld4Q0xFTkJRVUVzUjBGSGVFSmhMRU5CUVVFc1EwRkJUeXRETEU5QlFVRXNRMEZCVVRWRUxFTkJRVUU3U1VGRFlrRXNRMEZCUVN4RFFVRlJiMDBzVTBGQlFTeERRVUZWU1N4TlFVRkJMRU5CUVU4MVRDeERRVUZCTEVOQlFVOHlUU3hwUWtGQlFTeERRVUZyUWp0RlFVRkJMRWxCUlhCRWNrNHNRMEZCUVN4RFFVRlBjMDRzYjBKQlFVRXNSMEZCZFVJc1NVRkRPVUowVGl4RFFVRkJMRU5CUVU4eVRTeGhRVUZCTEVkQlFXZENPMFZCUTNaQ0xFbEJRVWw0VEN4RFFVRkJMRWRCUVdWVUxFTkJRVUVzUTBGQlQyOUpMRmxCUVVFN1JVRkRSU3h0UWtGQmFrSXpTQ3hEUVVGQkxFbEJRVFpDUVN4RFFVRkJMRU5CUVdGWkxFOUJRVUVzUTBGQlVTeFJRVUZSTEVsQlEyNUZXaXhEUVVGQkxFZEJRV1Z6Unl4VlFVRkJMRU5CUVZkMFJ5eERRVUZCTEVOQlFXRXJTQ3hQUVVGQkxFTkJRVkVzUzBGQlN5eFBRVUZQTEUxQlFVMXNTaXhEUVVGQkxFTkJRVTl6U0N4SlFVRkJMRWRCUTNaRExHMUNRVUZxUW01SExFTkJRVUVzUzBGRGFFSkJMRU5CUVVFc1IwRkJaWE5ITEZWQlFVRXNRMEZCVjNSSExFTkJRVUU3UlVGRk5VSXNTMEZCU3l4SlFVRkpja0lzUTBGQlFTeEhRVUZKTEVkQlFVZEJMRU5CUVVFc1IwRkJTV0VzUTBGQlFTeERRVUZQYVVVc1RVRkJRU3hGUVVGUk9VVXNRMEZCUVN4SlFVRkxMRWRCUVVjN1NVRkRla01zVFVGQlRYZENMRU5CUVVFc1IwRkJVVmdzUTBGQlFTeERRVUZQWWl4RFFVRkJPMGxCUTNKQ0xFbEJRVWt3UWl4RFFVRkJMRWRCUVdOR0xFTkJRVUVzUTBGQlRUSk1MR2xDUVVGQk8wbEJRM0JDZGswc1EwRkJRU3hEUVVGUE9Fa3NUMEZCUVN4SlFVRlhPVWtzUTBGQlFTeERRVUZQTmtrc1kwRkJRU3hMUVVNelFpOUlMRU5CUVVFc1NVRkJaV0lzUTBGQlFTeERRVUZQTEVkQlFVZHpUU3hwUWtGQlFUdEpRVVV6UWl4TlFVRk5ka3dzUTBGQlFTeEpRVUZwUWxZc1EwRkJRU3hKUVVGblFrNHNRMEZCUVN4RFFVRlBOa2tzWTBGQlFTeEhRVUZwUW5aS0xFTkJRVUVzUTBGQlQzVk9MRmxCUVVFc1MwRkJhVUlzUzBGQlN5OU1MRU5CUVVFc1MwRkJaMEpHTEVOQlFVRXNRMEZCVFhWS0xHVkJRVUVzUjBGQmEwSXhTaXhEUVVGQk8wMUJRemxJVVN4RFFVRkJMRWxCUVhsQ1dDeERRVUZCTEVkQlFXVkVMRU5CUVVFc1EwRkJVeXhOUVVGTlRDeERRVUZCTEVOQlFVODJTU3hqUVVGQkxFZEJRV2xDZGtvc1EwRkJRU3hEUVVGUGRVNHNXVUZCUVN4TFFVRnBRaXhMUVVGTEwwd3NRMEZCUVN4TFFVRm5Ra1lzUTBGQlFTeERRVUZOZFVvc1pVRkJRU3hIUVVGclFqRktMRU5CUVVFN1RVRkRjRXBUTEVOQlFVRXNTMEZCWjBKYUxFTkJRVUVzUjBGQlpWRXNRMEZCUVR0TlFVTXZRa3NzUTBGQlFTeEhRVUZoUkN4RFFVRkJMRWRCUVdNMVFpeERRVUZCTEVOQlFVODBUQ3hsUVVGQkxFTkJRV2RDT1V3c1EwRkJRVHRKUVVGQkxFTkJRM1JET0VJc1EwRkJRU3hKUVVGbExFdEJRVXRCTEVOQlFVRXNSMEZCWXpWQ0xFTkJRVUVzUTBGQlQzTklMRWxCUVVFc1IwRkJUeXhMUVVGTGVrWXNRMEZCUVN4SFFVRmhMRXRCUVV0QkxFTkJRVUVzU1VGQll6ZENMRU5CUVVFc1EwRkJUM05JTEVsQlFVRXNTVUZCVVRGR0xFTkJRVUVzU1VGQlpTeExRVUZMUXl4RFFVRkJMRWxCUVdNM1FpeERRVUZCTEVOQlFVOXpTQ3hKUVVGQkxFMUJSVGRLZEVnc1EwRkJRU3hEUVVGUE1rMHNZVUZCUVN4RFFVRmpla2dzU1VGQlFTeERRVUZMTlVRc1EwRkJRU3hIUVVNeFFuUkNMRU5CUVVFc1EwRkJUM05PTEc5Q1FVRkJMRU5CUVhGQ2NFa3NTVUZCUVN4RFFVRkxjRVlzUTBGQlFTeEhRVU5xUTJFc1EwRkJRU3hEUVVGUFlpeERRVUZCTEVWQlFVZHZUU3hUUVVGQkxFTkJRVlZITEVkQlFVRXNRMEZCU1ROTUxFTkJRVUVzUTBGQlR6Sk5MR2xDUVVGQkxFbEJSV3BETDB3c1EwRkJRU3hEUVVGTmEwMHNVVUZCUVN4SFFVRlhOVTBzUTBGQlFTeEpRVUZQWXl4RFFVRkJMRWRCUVdkQ1FTeERRVUZCTEVWQlEzaERTaXhEUVVGQkxFTkJRVTF0VFN4blFrRkJRU3hIUVVGdFFqZE5MRU5CUVVFc1NVRkJUMlVzUTBGQlFTeEhRVUYzUWtFc1EwRkRNVVE3UlVGQlFUdEJRVU5HTzBGQlJVRXNVMEZCVXl0TUxHVkJRV1UxVGl4RFFVRkJPMFZCUTNSQ0xFMUJRVTFGTEVOQlFVRXNSMEZCVXp0RlFVTm1MRk5CUVhsQ0xFMUJRV1JHTEVOQlFVRXNSVUZCTWtJN1NVRkRjRU1zVFVGQlRWa3NRMEZCUVN4SFFVRmhWaXhEUVVGQkxFTkJRVTgwU0N4WlFVRkJMRWxCUVdkQ0xFbEJRVWs3U1VGRk9VTTVTQ3hEUVVGQkxFZEJRVmxGTEVOQlFVRXNTVUZCVlVFc1EwRkJRU3hEUVVGUGIwNHNVMEZCUVN4SlFVRmhjRTRzUTBGQlFTeERRVUZQYjA0c1UwRkJRU3hIUVVGWk1VMHNRMEZCUVN4SlFVRmpMRU5CUXpkRk8wVkJRVUU3UlVGRFFTeE5RVUZOUVN4RFFVRkJMRWRCUVZOV0xFTkJRVUVzUTBGQlQzTkVMRTFCUVVFN1NVRkRhRUl6UXl4RFFVRkJMRWRCUVdsQ1dDeERRVUZCTEVOQlFVOHlUaXhaUVVGQkxFdEJRV2xDTTA0c1EwRkJRU3hEUVVGUGRVNHNXVUZCUVR0RlFVTjBSRHRKUVVGSlF5eFJRVUZCTEVWQlEwWTFUU3hEUVVGQk8wbEJRVkZuVGl4WFFVRkJMRVZCUTFJM1RTeERRVUZCTzBsQlFWYzRUU3hMUVVGQkxFVkJRMWczVFN4RFFVRkJPMGxCUVVzNFRTeFpRVUZCTEVWQlEwd3pUVHRGUVVGQkxFbEJRMFZ1UWl4RFFVRkJPMFZCUTBvc1RVRkJUWE5DTEVOQlFVRXNSMEZCWlZBc1EwRkJRVHRKUVVObVV5eERRVUZCTEVkQlFWTlNMRU5CUVVFN1JVRkRaaXhKUVVGMVFpeE5RVUZ1UWt3c1EwRkJRU3hGUVVOR1F5eERRVUZCTEVkQlFWY3NSMEZEV0Vjc1EwRkJRU3hKUVVGakxFZEJRMlJETEVOQlFVRXNTVUZCVVN4UFFVTklPMGxCUTB4S0xFTkJRVUVzU1VGQldXUXNRMEZCUVN4SFFVRlpSU3hEUVVGQkxFTkJRVTkxVGl4WlFVRkJMRTFCUVd0Q05VMHNRMEZCUVR0SlFVTnFSQ3hOUVVGTlJDeERRVUZCTEVkQlFYRkNhVXNzU1VGQlFTeERRVUZMUnl4SFFVRkJMRU5CUVVsb1RDeERRVUZCTEVkQlFWbEZMRU5CUVVFc1EwRkJUM1ZPTEZsQlFVRXNUVUZCYTBJN1RVRkRia1Z3VFN4RFFVRkJMRWRCUVdWM1NpeEpRVUZCTEVOQlFVdEhMRWRCUVVFc1EwRkJTV2hNTEVOQlFVRXNSMEZCV1VVc1EwRkJRU3hEUVVGUE1rNHNXVUZCUVN4TlFVRnJRanRKUVVOdVJUVk5MRU5CUVVFc1IwRkJZMHdzUTBGQlFTeEpRVUZ6UWtVc1EwRkJRU3hKUVVGWkxFZEJRMmhFU1N4RFFVRkJMRWRCUVZGSExFTkJRVUVzU1VGQlowSlFMRU5CUVVFc1NVRkJXU3hIUVVOb1EwWXNRMEZCUVN4TFFVRnZRa1VzUTBGQlFTeEhRVUZYTEVsQlF5OUNUeXhEUVVGQkxFdEJRV05RTEVOQlFVRXNSMEZCVnl4RlFVTXZRanRGUVVGQk8wVkJRMEVzU1VGQlNVWXNRMEZCUVN4RFFVRlBORXNzU1VGQlFTeEZRVUZOTzBsQlEyWXNUVUZCVFRWTExFTkJRVUVzUjBGQmEwSldMRU5CUVVFc1EwRkJUekJOTEcxQ1FVRkJMRU5CUVc5Q08wMUJRemRETDB3c1EwRkJRU3hIUVVGcFFsZ3NRMEZCUVN4RFFVRlBNRTBzYlVKQlFVRXNRMEZCYjBJeFRTeERRVUZCTEVOQlFVOW5TU3hOUVVGQkxFTkJRVTl3UkN4TlFVRkJMRWRCUVZNN1RVRkRia1ZvUlN4RFFVRkJMRWRCUVhOQ1dpeERRVUZCTEVOQlFVODBTU3hWUVVGQkxFTkJRVmRzU1N4RFFVRkJPMDFCUTNoRFN5eERRVUZCTEVkQlFYRkNaaXhEUVVGQkxFTkJRVTgwU1N4VlFVRkJMRU5CUVZkcVNTeERRVUZCTzAxQlEzWkRTeXhEUVVGQkxFZEJRV1ZvUWl4RFFVRkJMRU5CUVU4MFNTeFZRVUZCTEVOQlFWYzFTU3hEUVVGQkxFTkJRVTgwU1N4VlFVRkJMRU5CUVZkb1JTeE5RVUZCTEVkQlFWTTdUVUZETlVSMFJDeERRVUZCTEVkQlFXVnhTaXhKUVVGQkxFTkJRVXRITEVkQlFVRXNRMEZCU1doTUxFTkJRVUU3U1VGRk5VSnhRaXhEUVVGQkxFZEJSRVZITEVOQlFVRXNTVUZCWjBKV0xFTkJRVUVzU1VGRFJsVXNRMEZCUVN4SFFVRmxWaXhEUVVGQkxFbEJRWFZDU1N4RFFVRkJMRWxCUlhSRFRTeERRVUZCTEVkQlFXVk9MRU5CUVVFc1IwRkJaVVFzUTBGQlFTeEpRVUZ6UWtNc1EwRkJRU3hGUVVWc1JVY3NRMEZCUVN4SFFVRmxMRTFCUVVkQkxFTkJRVUVzU1VGQlowSXNSVUZEZUVNN1JVRkJRVHRGUVVOQmFVY3NUVUZCUVN4RFFVRlBReXhOUVVGQkxFTkJRVTl5U0N4RFFVRkJMRVZCUVZFN1NVRkRjRUozVGl4UlFVRkJMRVZCUVVFMVRTeERRVUZCTzBsQlEwRnJUaXhaUVVGQkxFVkJRVUV6VFN4RFFVRkJPMGxCUTBGNVRTeFhRVUZCTEVWQlFVRTNUU3hEUVVGQk8wbEJRMEU0VFN4TFFVRkJMRVZCUVVFM1RUdEZRVUZCTEV0QlJVVk9MRU5CUVVFc1EwRkJUM0ZNTEcxQ1FVRkJMRWxCUVhWQ2Nrd3NRMEZCUVN4RFFVRlBOa2tzWTBGQlFTeEpRVUZyUWpkSkxFTkJRVUVzUTBGQlQzRk9MRlZCUVVFc1MwRkJXUzlPTEVOQlFVRXNRMEZCVDIxT0xHOUNRVUZCTEVOQlFYRkNjazRzUTBGQlFTeEhRVU4wUjJsQ0xFTkJRVUVzUzBGQlowSlBMRU5CUVVFc1NVRkRiRUowUWl4RFFVRkJMRU5CUVU5cFJDeEpRVUZCTEVOQlFVc3NNRUpCUlZacVF5eERRVUZCTEV0QlFWVlJMRU5CUVVFc1NVRkRXbmhDTEVOQlFVRXNRMEZCVDJsRUxFbEJRVUVzUTBGQlN5eHhRa0ZGVmpOQ0xFTkJRVUVzUzBGQmFVSlFMRU5CUVVFc1NVRkJaVk1zUTBGQlFTeExRVUZYVWl4RFFVRkJMRXRCUXpkRGFFSXNRMEZCUVN4RFFVRlBhVVFzU1VGQlFTeERRVUZMTEdGQlJXUnFSQ3hEUVVGQkxFTkJRVTlwUkN4SlFVRkJMRU5CUVVzc1dVRkJXWEpETEVOQlFVRXNRMEZETVVJN1FVRkJRVHRCUVVWQkxGTkJRVk52VGl4dlFrRkJRVHRGUVVOUUxFMUJRVTFzVHl4RFFVRkJMRWRCUVZNN1NVRkJRVHROUVVOVWEwa3NUVUZCUVN4RlFVTkthRWtzUTBGQlFUdE5RVUZOYzBRc1RVRkJRU3hGUVVOT05VTXNRMEZCUVR0TlFVRk5hVWdzVVVGQlFTeEZRVU5PYUVnc1EwRkJRVHROUVVGUmFVMHNWMEZCUVN4RlFVTlNhRTA3U1VGQlFTeEpRVU5GWkN4RFFVRkJPMGxCUTBWcFFpeERRVUZCTEVkQlFWbHFRaXhEUVVGQkxFTkJRVTluU1N4UFFVRkJMRWxCUVZkd1NDeERRVUZCTEVOQlFVOXZTQ3hQUVVGQkxFTkJRVkZETEU5QlFVRTdTVUZETjBNdlJ5eERRVUZCTEVkQlFXMUNiRUlzUTBGQlFTeEpRVU5vUWl4SlFVRkJiVWtzVjBGQlFTeEZRVUZuUW5SSUxFTkJRVUVzUlVGQlZTeEpRVUZKUkN4RFFVRkJMRU5CUVU5M1NDeFZRVUZCTEVkQlFXRndTU3hEUVVGQkxHbENRVUY1UWtFc1EwRkJRU3hKUVVGWk8wVkJTMmhITEVsQlFVbHhRaXhEUVVGQk8wVkJRMG9zU1VGS1FXNUNMRU5CUVVFc1EwRkJUekJFTEU5QlFVRXNRMEZCVVRWRUxFTkJRVUU3U1VGRFlrRXNRMEZCUVN4RFFVRlJiMDBzVTBGQlFTeERRVUZWU1N4TlFVRkJMRU5CUVU4MVRDeERRVUZCTEVOQlFVOTFUaXhuUWtGQlFTeEZRVUZyUW5aT0xFTkJRVUVzUTBGQlQzZE9MR05CUVVFc1JVRkJaMEo0VGl4RFFVRkJMRU5CUVU5NVRpeGpRVUZCTEVOQlFXVTdSVUZCUVN4SlFVYzNSbkJPTEVOQlFVRTdTVUZEUml4SlFVRkpUQ3hEUVVGQkxFTkJRVTgwU3l4SlFVRkJMRVZCUVUwN1RVRkRaaXhKUVVGSmRFd3NRMEZCUVN4SFFVRmhXU3hEUVVGQkxFZEJRV05rTEVOQlFVRXNRMEZCVDJkSkxFOUJRVUVzUTBGQlVUQkVMRmxCUVVFN1RVRkRNVU40VEN4RFFVRkJMRWRCUVdFc1RVRkJSMEVzUTBGQlFTeEhRVUZoUml4RFFVRkJMRU5CUVU5blNTeFBRVUZCTEVOQlFWRkZMRTFCUVVFc1EwRkJUM0JFTEUxQlFVRXNSMEZCVXpWRkxFTkJRVUVzUjBGRE5VUkJMRU5CUVVFc1NVRkJZMFlzUTBGQlFTeERRVUZQWjBrc1QwRkJRU3hEUVVGUlJTeE5RVUZCTEVOQlFVOXdSQ3hOUVVGQkxFdEJRVkUxUlN4RFFVRkJMRWxCUVdOR0xFTkJRVUVzUTBGQlQyZEpMRTlCUVVFc1EwRkJVVVVzVFVGQlFTeERRVUZQY0VRc1RVRkJRU3hIUVVOd1JucEVMRU5CUVVFc1IwRkJZMGdzUTBGQlFTeERRVUZwUWl3MlFrRkJOa0pvUWl4RFFVRkJMRXRCUXpsRU8wbEJRVUVzVDBGRFJXMUNMRU5CUVVFc1IwRkJZMGdzUTBGQlFTeERRVUZwUWl3MlFrRkJOa0pLTEVOQlFVRTdSVUZCUVN4UFFVYzVSRThzUTBGQlFTeEhRVUZqYmtJc1EwRkJRU3hEUVVGUFdTeERRVUZCTzBWQlJYWkNMRWxCUVVsUExFTkJRVUVzUlVGQllUdEpRVVZtUVN4RFFVRkJMRU5CUVZrclN5eFRRVUZCTEVOQlFWVkhMRWRCUVVFc1EwRkJTVE5NTEVOQlFVRXNRMEZCVDNWT0xHZENRVUZCTzBsQlIycERMRWxCUVVsdVR5eERRVUZCTEVkQlFWa3NTVUZCUVhOUExGZEJRVUVzUlVGQlpXcE9MRU5CUVVFc1JVRkJZU3hKUVVGSlZDeERRVUZCTEVOQlFVOTNTQ3hWUVVGQkxHdENRVUUwUWp0SlFVTXZSWGhJTEVOQlFVRXNRMEZCVHpSTExFbEJRVUVzUzBGQlUzaE1MRU5CUVVFc1MwRkRiRUpCTEVOQlFVRXNSMEZCV1VVc1EwRkJRU3hEUVVGUExFdEJSV3BDUml4RFFVRkJMRWxCUTBaQkxFTkJRVUVzUTBGQlZXOU5MRk5CUVVFc1EwRkJWVWNzUjBGQlFTeERRVUZKTTB3c1EwRkJRU3hEUVVGUGQwNHNZMEZCUVR0SlFVZHFReXhKUVVGSmRrNHNRMEZCUVN4SFFVRlpMRWxCUVVFd1RpeFhRVUZCTEVWQlFXVnNUaXhEUVVGQkxFVkJRV0VzU1VGQlNWUXNRMEZCUVN4RFFVRlBkMGdzVlVGQlFTeHJRa0ZCTkVJN1NVRkRMMFY0U0N4RFFVRkJMRU5CUVU4MFN5eEpRVUZCTEVsQlFYVkNMRTlCUVdRelN5eERRVUZCTEV0QlEyeENRU3hEUVVGQkxFZEJRVmxZTEVOQlFVRXNRMEZCVDBFc1EwRkJRU3hEUVVGUE5FVXNUVUZCUVN4SFFVRlRMRXRCUldwRGFrVXNRMEZCUVN4SlFVTkdRU3hEUVVGQkxFTkJRVlYxVEN4VFFVRkJMRU5CUVZWSExFZEJRVUVzUTBGQlNUTk1MRU5CUVVFc1EwRkJUM2xPTEdOQlFVRXNRMEZGYmtNN1JVRkJRVHRGUVVOQmNrOHNRMEZCUVN4RFFVRlBkMDhzYVVKQlFVRXNSVUZEVkR0QlFVRkJPMEZCUlVFc1RVRkJUVU1zYjBKQlFVRXNSMEZCZFVKQkxFTkJRVU42VHl4RFFVRkJMRVZCUVZGRkxFTkJRVUU3U1VGRGNFTXNTMEZCUzBZc1EwRkJRU3hKUVVGVlFTeERRVUZCTEVOQlFVOXhSQ3hUUVVGQkxFdEJRV055UkN4RFFVRkJMRU5CUVU5M1JDeE5RVUZCTEVWQlFWRTdTVUZEYmtRc1RVRkRUVFZETEVOQlFVRXNSMEZCVlZZc1EwRkJRU3hEUVVGUmQwOHNUMEZCUVN4RFFVUkpNVThzUTBGQlFTeERRVUZQWjA0c1UwRkJRU3hIUVVGWkxHbENRVUZwUWl4SlFVRkphRTRzUTBGQlFTeERRVUZQZDBRc1RVRkJRU3hEUVVGUE5FVXNWVUZCUVR0SlFVVnNSaXhKUVVGSmVFZ3NRMEZCUVN4RlFVRlRPMDFCUTFnc1RVRkJUVllzUTBGQlFTeEhRVUZUVlN4RFFVRkJMRU5CUVZFclRpeGhRVUZCTEVOQlFXTXNTVUZCU1ROUExFTkJRVUVzUTBGQlQzZEVMRTFCUVVFc1EwRkJUMjlNTEd0Q1FVRkJPMDFCUTI1RU1VOHNRMEZCUVN4SlFVRlJRU3hEUVVGQkxFTkJRVTl6VFN4TlFVRkJMRVZCUTNKQ08wbEJRVUU3UlVGQlFUdEZRVVZKY1VNc1RVRkJRU3hIUVVGVFFTeERRVUZETjA4c1EwRkJRU3hGUVVGUlJTeERRVUZCTzBsQlEzUkNMRXRCUVV0R0xFTkJRVUVzUTBGQlQydEpMRTFCUVVFc1EwRkJUMmhKTEVOQlFVRXNSMEZCVVR0SlFVTXpRaXhOUVVGTlZTeERRVUZCTEVkQlFWVmFMRU5CUVVFc1EwRkJUMnRKTEUxQlFVRXNRMEZCVDJoSkxFTkJRVUVzUlVGQlQzbFBMR0ZCUVVFc1EwRkJZenRKUVVNdlF5OU9MRU5CUVVFc1NVRkJVMEVzUTBGQlFTeERRVUZSYTA4c1pVRkJRU3hEUVVGblFpeFZRVUZWTzBWQlFVRTdSVUZGTTBORExFOUJRVUVzUjBGQlZTOVBMRU5CUVVFN1NVRkRaQ3hMUVVGTFFTeERRVUZCTEVsQlFWVkJMRU5CUVVFc1EwRkJUM0ZFTEZOQlFVRXNTMEZCWTNKRUxFTkJRVUVzUTBGQlQzZEVMRTFCUVVFc1JVRkJVVHRKUVVOdVJDeEpRVUZKZEVRc1EwRkJRU3hIUVVGVFJpeERRVUZCTEVOQlFVOTNSQ3hOUVVGQkxFTkJRVTkzVEN4dFFrRkJRVHRKUVVNelFpeE5RVUZOY0U4c1EwRkJRU3hIUVVGTldpeERRVUZCTEVOQlFVOXJTU3hOUVVGQkxFTkJRVTl3UkN4TlFVRkJPMGxCUXpGQ0xFdEJRVXRzUlN4RFFVRkJMRXRCUVZGV0xFTkJRVUVzU1VGQlZVRXNRMEZCUVN4SFFVRlRMRWRCUVVjN1NVRkRia05CTEVOQlFVRXNSMEZCVXpKTExFbEJRVUVzUTBGQlMwc3NSMEZCUVN4RFFVRkphRXdzUTBGQlFTeEZRVUZSVlN4RFFVRkJPMGxCUXpGQ0xFMUJRVTFETEVOQlFVRXNSMEZCWjBRc1YwRkJhRU5pTEVOQlFVRXNRMEZCVDNkRUxFMUJRVUVzUTBGQlR6QkhMR0ZCUVVFc1IwRkJNa0pzU3l4RFFVRkJMRU5CUVU5cFVDeHZRa0ZCUVN4TFFVRjVRbkJGTEVsQlFVRXNRMEZCUzFrc1NVRkJRU3hEUVVGTGVrd3NRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQTUVjc1lVRkJRVHROUVVOcVNIQktMRU5CUVVFc1IwRkJZMlFzUTBGQlFTeERRVUZQT0Uwc1YwRkJRVHRKUVVNelFpeEpRVUZKT1Uwc1EwRkJRU3hEUVVGUGQwUXNUVUZCUVN4RFFVRlBjVWNzU1VGQlFTeEpRVUZSTjBvc1EwRkJRU3hEUVVGUGQwUXNUVUZCUVN4RFFVRlBjVWNzU1VGQlFTeERRVUZMUXl4SlFVRkJMRWRCUVU4c1IwRkJSenROUVVOeVJDeE5RVUZOYkVvc1EwRkJRU3hIUVVGbFJTeERRVUZCTzFGQlEyWkhMRU5CUVVFc1IwRkJhVUlzUTBGQlEwd3NRMEZCUVN4SFFVRmxWaXhEUVVGQk8wMUJVM1pETEU5QlVrRmxMRU5CUVVFc1EwRkJaVzFGTEVsQlFVRXNTVUZCVVdVc1MwRkJRU3hEUVVGTkswa3NTVUZCUVN4RFFVRkxPMUZCUTJoRGNFc3NUVUZCUVN4RlFVRlJOVVU3VFVGQlFTeEhRVU5RZFVNc1IwRkJRU3hEUVVGSkxFTkJRVU42UXl4RFFVRkJMRVZCUVVkRkxFTkJRVUVzUzBGRFJsVXNRMEZCUVN4SFFVRmxReXhEUVVGQkxFZEJRV2RDV0N4RFFVRkJMRk5CUlhoRFJpeERRVUZCTEVOQlFVOXJTU3hOUVVGQkxFTkJRVTkwUlN4UFFVRkJMRU5CUVZFc1EwRkJRekZFTEVOQlFVRXNSVUZCVTFVc1EwRkJRVHRSUVVNeFFrc3NRMEZCUVN4RFFVRmxjMElzVVVGQlFTeERRVUZUY2tNc1EwRkJRU3hEUVVGUmFWQXNUVUZCUVN4TFFVRlRUaXhOUVVGQkxFTkJRVTgzVHl4RFFVRkJMRVZCUVZGWkxFTkJRVUVzUTBGQlJUdE5RVUZCTEVWQlIyeEZPMGxCUVVFN1NVRkRRU3hOUVVGTlN5eERRVUZCTEVkQlFYVkNTQ3hEUVVGQkxFZEJRV05FTEVOQlFVRXNSMEZCWjBJN1NVRkRNMFFzU1VGQlNXSXNRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQTkV3c1RVRkJRU3hKUVVGVmNGQXNRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQWjBrc1NVRkJRU3hGUVVONFF5eExRVUZMTEVsQlFVa3pTeXhEUVVGQkxFZEJRVWxETEVOQlFVRXNSMEZCWTFvc1EwRkJRU3hGUVVGUlZ5eERRVUZCTEVsQlFVdEpMRU5CUVVFc1IwRkJkVUptTEVOQlFVRXNSVUZCVVZjc1EwRkJRU3hKUVVGTExFZEJRVWM3VFVGRE4wVXNUVUZCVFZnc1EwRkJRU3hKUVVGaFZ5eERRVUZCTEVkQlFVbEVMRU5CUVVFc1IwRkJUVUVzUTBGQlFTeEpRVUZQUVN4RFFVRkJPMDFCUVVFc1EwRkRhRU5XTEVOQlFVRXNSMEZCV1Zrc1EwRkJRU3hKUVVGbFdpeERRVUZCTEVkQlFWbGxMRU5CUVVFc1MwRkJjMEkwVGl4TlFVRkJMRU5CUVU4M1R5eERRVUZCTEVWQlFWRkZMRU5CUVVFc1EwRkRiRVk3U1VGQlFTeFBRVVZCTEV0QlFVc3NTVUZCU1Zjc1EwRkJRU3hIUVVGSlowc3NTVUZCUVN4RFFVRkxUeXhIUVVGQkxFTkJRVWwwU3l4RFFVRkJMRWRCUVdOYUxFTkJRVUVzUlVGQlVTeEpRVUZKVnl4RFFVRkJMRWxCUVV0blN5eEpRVUZCTEVOQlFVdExMRWRCUVVFc1EwRkJTV3BMTEVOQlFVRXNSMEZCZFVKbUxFTkJRVUVzUlVGQlVWVXNRMEZCUVN4SFFVRk5MRWxCUVVsRExFTkJRVUVzU1VGQlN5eEhRVU4wUjBFc1EwRkJRU3hMUVVGTlF5eERRVUZCTEV0QlFXZENSQ3hEUVVGQkxFZEJRVWxKTEVOQlFVRXNTVUZCZDBKS0xFTkJRVUVzUjBGQlNVTXNRMEZCUVN4TFFVTjRSQ3RPTEUxQlFVRXNRMEZCVHpkUExFTkJRVUVzUlVGQlVXRXNRMEZCUVN4RFFVZHlRanRGUVVGQk8wRkJSMFlzVTBGQlUzZFBMREJDUVVFd1FuSlFMRU5CUVVFN1JVRkRha003VFVGQlRUaEpMRlZCUVVFc1JVRkRTalZKTEVOQlFVRTdUVUZCVlhORUxFMUJRVUVzUlVGRFZqVkRPMGxCUVVFc1NVRkRSVm9zUTBGQlFUdEpRVU5GWVN4RFFVRkJMRWRCUVZsaUxFTkJRVUVzUTBGQlR6aElMRmxCUVVFc1IwRkJaVGxJTEVOQlFVRXNRMEZCVDNOT0xGTkJRVUVzU1VGQllYUk9MRU5CUVVFc1EwRkJUM05PTEZOQlFVRTdSVUZEYmtVc1NVRkJTWGhOTEVOQlFVRTdSVUZEU2l4TFFVRkxMRWxCUVVsa0xFTkJRVUVzUjBGQlNTeEhRVUZIUVN4RFFVRkJMRWRCUVVsRkxFTkJRVUVzUTBGQlZ6UkZMRTFCUVVFc1JVRkJVVGxGTEVOQlFVRXNTVUZCU3l4UlFVTlVMRTFCUVhSQ1JTeERRVUZCTEVOQlFWZEdMRU5CUVVFc1IwRkJTU3hMUVVOd1FtRXNRMEZCUVN4SlFVRmhXQ3hEUVVGQkxFTkJRVmRHTEVOQlFVRXNTMEZCVFdFc1EwRkJRU3hIUVVGWldDeERRVUZCTEVOQlFWZEdMRU5CUVVFc1IwRkJTU3hOUVVGTlJTeERRVUZCTEVOQlFWZEdMRU5CUVVFc1IwRkJTU3hMUVVGTFJTeERRVUZCTEVOQlFWZEdMRU5CUVVFc1MwRkJUU3hKUVVOMFIyTXNRMEZCUVN4SFFVRmpaQ3hEUVVGQkxFZEJRMHhoTEVOQlFVRXNTVUZCWVZnc1EwRkJRU3hEUVVGWFJpeERRVUZCTEV0QlFVMWhMRU5CUVVFc1IwRkJXVmdzUTBGQlFTeERRVUZYUml4RFFVRkJMRWRCUVVrc1QwRkRiRVZqTEVOQlFVRXNSMEZCWTJRc1EwRkJRU3hIUVVGSkxFdEJSVmhoTEVOQlFVRXNTVUZCWVZnc1EwRkJRU3hEUVVGWFJpeERRVUZCTEUxQlEycERZeXhEUVVGQkxFZEJRV05rTEVOQlFVRTdSVUZQYkVJc1QwRklTVmtzUTBGQlFTeERRVUZQTUU4c2JVSkJRVUVzUzBGRFRIaFBMRU5CUVVFc1IwRkJZeXhWUVVFMFFpeE5RVUZvUWtFc1EwRkJRU3hOUVVFMlFrRXNRMEZCUVN4SFFVRmpMRWxCUlhCRlFTeERRVU5VTzBGQlFVRTdRVUZEUVN4VFFVRlRlVThzYTBKQlFXdENkbEFzUTBGQlFUdEZRVU42UWl4TlFVRk5SU3hEUVVGQkxFZEJRVk03U1VGRFZGVXNRMEZCUVN4SFFVRlpWaXhEUVVGQkxFTkJRVTgwU0N4WlFVRkJMRWRCUVdVMVNDeERRVUZCTEVOQlFVOXZUaXhUUVVGQkxFbEJRV0Z3VGl4RFFVRkJMRU5CUVU5dlRpeFRRVUZCTzBsQlFVRTdUVUZETjBReFJTeFJRVUZCTEVWQlEwb3ZTQ3hEUVVGQk8wMUJRVkV5UXl4TlFVRkJMRVZCUTFJeFF5eERRVUZCTzAxQlEwRm5UU3hYUVVGQkxFVkJRV0UzVEN4RFFVRkJPMDFCUTJKMVR5eFRRVUZCTEVWQlFWZDBUeXhEUVVGQk8wMUJRMWgxVHl4VFFVRkJMRVZCUVZkd1R6dEpRVUZCTEVsQlExUnVRaXhEUVVGQk8wVkJRMG9zU1VGRFNYTkNMRU5CUVVFN1NVRkVRVVVzUTBGQlFTeEhRVUZqTVVJc1EwRkJRVHRGUVVWc1FpeE5RVUZOTkVJc1EwRkJRU3hIUVVGelFqVkNMRU5CUVVFN1NVRkRNVUlzU1VGQlNWa3NRMEZCUVN4SFFVRlpXaXhEUVVGQkxFZEJRVk5GTEVOQlFVRXNRMEZCVHpoSUxFOUJRVUVzUTBGQlVUQkVMRmxCUVVFN1NVRlBlRU1zVDBGT1NUbExMRU5CUVVFc1IwRkJXU3hOUVVOa1FTeERRVUZCTEVkQlFWbFdMRU5CUVVFc1EwRkJUemhJTEU5QlFVRXNRMEZCVVVVc1RVRkJRU3hEUVVGUGNFUXNUVUZCUVN4SFFVRlRiRVVzUTBGQlFTeEhRVVY2UTBFc1EwRkJRU3hKUVVGaFZpeERRVUZCTEVOQlFVODRTQ3hQUVVGQkxFTkJRVkZGTEUxQlFVRXNRMEZCVDNCRUxFMUJRVUVzUzBGRGNrTnNSU3hEUVVGQkxFbEJRV0ZXTEVOQlFVRXNRMEZCVHpoSUxFOUJRVUVzUTBGQlVVVXNUVUZCUVN4RFFVRlBjRVFzVFVGQlFTeEhRVVU1UW14RkxFTkJRVk03UlVGQlFUdEZRVXRzUWl4VFFVZ3lRaXhOUVVGb1FtTXNRMEZCUVN4TFFVTlVRU3hEUVVGQkxFZEJRV015VGl4NVFrRkJRU3hEUVVFd1FtNVFMRU5CUVVFc1NVRkZkRU5YTEVOQlFVRXNRMEZCVTI5Q0xFOUJRVUVzUTBGQlVYSkNMRU5CUVVFc1MwRkJZeXhIUVVOcVExa3NRMEZCUVN4SFFVRlpXQ3hEUVVGQkxFTkJRVk52UWl4UFFVRkJMRU5CUVZGeVFpeERRVUZCTEU5QlEzaENPMGxCUTB3c1RVRkJUVm9zUTBGQlFTeEhRVUZQTmtzc1NVRkJRU3hEUVVGTFN5eEhRVUZCTEVOQlFVbHdTeXhEUVVGQkxFTkJRVTl4U3l4clFrRkJRU3hGUVVGdlFucEtMRU5CUVVFN1NVRkRha1JHTEVOQlFVRXNSMEZCV1hoQ0xFTkJRVUVzUjBGQlR6WkxMRWxCUVVFc1EwRkJTME1zUzBGQlFTeEZRVUZQY0Vvc1EwRkJRU3hIUVVGak1VSXNRMEZCUVN4SlFVRlJZeXhEUVVGQkxFTkJRVTl0U3l4alFVRkJMRU5CUXpsRU8wVkJRVUU3UlVGRlFTeEpRVVJKZWtvc1EwRkJRU3hKUVVGaFdDeERRVUZCTEVOQlFWTnBSU3hOUVVGQkxFdEJRVkYwUkN4RFFVRkJMRWRCUVZsWUxFTkJRVUVzUTBGQlUybEZMRTFCUVVFc1IwRkJVeXhKUVVNMVJIQkVMRU5CUVVFc1MwRkJaMEpVTEVOQlFVRXNSVUZSYkVJc1QwRlFTVThzUTBGQlFTeExRVUZqU0N4RFFVRkJMRXRCUTJoQ2JrSXNRMEZCUVN4RFFVRlBkVkFzVTBGQlFTeEhRVUZaYWs4c1EwRkJRU3hGUVVOdVFuUkNMRU5CUVVFc1EwRkJUMmxFTEVsQlFVRXNRMEZCU3l3eVFrRkZWbXBFTEVOQlFVRXNRMEZCVDNORUxFMUJRVUVzUTBGQlQyZEpMRWxCUVVFc1NVRkJVWFJNTEVOQlFVRXNRMEZCVHpoSUxFOUJRVUVzU1VGQlZ6bElMRU5CUVVFc1EwRkJUM05FTEUxQlFVRXNRMEZCVDNkRkxFOUJRVUVzUTBGQlVVTXNUMEZCUVN4TFFVTm9SUzlJTEVOQlFVRXNRMEZCVDNOUUxGTkJRVUVzUjBGQldUVk9MRU5CUVVFc1EwRkJiMEpHTEVOQlFVRTdSVUZMTTBNc1NVRkJTVWNzUTBGQlFUdEZRVVZHUVN4RFFVRkJMRWRCUkVVelFpeERRVUZCTEVOQlFVODRTQ3hQUVVGQkxFbEJRVmRzU0N4RFFVRkJMRU5CUVU5clNDeFBRVUZCTEVOQlFWRkRMRTlCUVVFc1NVRkJWMjVJTEVOQlFVRXNRMEZCVHpCTExFbEJRVUVzUjBGRGVrTTFTaXhEUVVGQkxFTkJRVzlDUml4RFFVRkJMRWxCUTNaQ2VFSXNRMEZCUVN4RFFVRlBaMGtzVFVGQlFTeERRVUZQZUVjc1EwRkJRU3hKUVVOWWVVWXNVVUZCUVN4RFFVRlRha2dzUTBGQlFTeERRVUZQWjBrc1RVRkJRU3hEUVVGUGVFY3NRMEZCUVN4RlFVRmhaMDhzV1VGQlFTeERRVUZoTERoQ1FVRTRRbWhQTEVOQlFVRXNSVUZCWVN4TlFVVTFSa0VzUTBGQlFTeEZRVVZrTkVZc1RVRkJRU3hEUVVGUFF5eE5RVUZCTEVOQlFVOXlTQ3hEUVVGQkxFVkJRVkU3U1VGRGNFSjVVQ3hwUWtGQlFTeEZRVUZCZEU4c1EwRkJRVHRKUVVOQmIwOHNVMEZCUVN4RlFVRkJhazhzUTBGQlFUdEpRVU5CYjA4c2FVSkJRVUVzUlVGQlFURlBMRU5CUVVFN1NVRkRRWE5QTEZOQlFVRXNSVUZCUVROT0xFTkJRVUU3U1VGRFFXZFBMR0ZCUVVFc1JVRkJRVFZQTEVOQlFVRTdTVUZEUVRaTUxGZEJRVUVzUlVGQlFYQk1PMFZCUVVFc1NVRkZSWGhDTEVOQlFVRXNRMEZCVDI5RUxGZEJRVUVzU1VGRFZIbE1MRTlCUVVFc1EwRkJVVGRQTEVOQlFVRXNSMEZGVmtFc1EwRkJRU3hEUVVGUGFVUXNTVUZCUVN4RFFVRkxMSE5DUVVOYWFrUXNRMEZCUVN4RFFVRlBhVVFzU1VGQlFTeERRVUZMTEc5Q1FVTlNha01zUTBGQlFTeExRVUZ6UWxjc1EwRkJRU3hKUVVONFFqTkNMRU5CUVVFc1EwRkJUMmxFTEVsQlFVRXNRMEZCU3l4eFFrRkZWbXBFTEVOQlFVRXNRMEZCVDI5RUxGZEJRVUVzU1VGQlpYQkVMRU5CUVVFc1EwRkJUM05FTEUxQlFVRXNRMEZCVDNOTkxHdENRVUZCTEV0QlEzUkROVkFzUTBGQlFTeERRVUZQYVVRc1NVRkJRU3hEUVVGTExHTkJSV2hDTzBGQlFVRTdRVUZGUVN4VFFVRlRORTBzYlVKQlFXMUNMMUFzUTBGQlFUdEZRVU14UWl4TlFVRk5SU3hEUVVGQkxFZEJRVk03U1VGRFZGVXNRMEZCUVN4SFFVRlRWaXhEUVVGQkxFTkJRVTl6UkN4TlFVRkJPMGxCUTJoQ00wTXNRMEZCUVN4SFFVRlJZaXhEUVVGQkxFTkJRVVV3VHl4UFFVRkJMRU5CUVZFc1NVRkJTVGxPTEVOQlFVRXNRMEZCVDNkSUxGVkJRVUU3UlVGRGJrTXNTVUZEU1hSSUxFTkJRVUU3U1VGRVFVY3NRMEZCUVN4SlFVRmhPMFZCUldwQ0xFbEJRVWxLTEVOQlFVRXNSVUZEUml4TFFVRkxMRWxCUVVsaUxFTkJRVUVzUjBGQlNTeEhRVUZIUVN4RFFVRkJMRWRCUVVsRkxFTkJRVUVzUTBGQlQyZEpMRTFCUVVFc1EwRkJUM0JFTEUxQlFVRXNSVUZCVVRsRkxFTkJRVUVzU1VGQlN5eEhRVU0zUXl4SlFVRkpSU3hEUVVGQkxFTkJRVTluU1N4TlFVRkJMRU5CUVU5c1NTeERRVUZCTEUxQlFVOWhMRU5CUVVFc1JVRkJUenRKUVVNNVFra3NRMEZCUVN4SlFVRmhMRWRCUTJKSUxFTkJRVUVzUjBGQllXUXNRMEZCUVR0SlFVTmlPMFZCUTBZN1JVRkhTaXhMUVVGSllTeERRVUZCTEV0QlFWTkpMRU5CUVVFc1JVRlZXQ3hQUVVaQlppeERRVUZCTEVOQlFVODRVQ3haUVVGQkxGRkJRV1VzVTBGRGRFSTVVQ3hEUVVGQkxFTkJRVThyVUN4WlFVRkJMRkZCUVdVN1JVRlNkRUl2VUN4RFFVRkJMRU5CUVU4NFVDeFpRVUZCTEVkQlFXVnVVQ3hEUVVGQkxFVkJRMnhDV0N4RFFVRkJMRU5CUVU4NFNDeFBRVUZCTEVsQlFWYzVTQ3hEUVVGQkxFTkJRVTl6UkN4TlFVRkJMRU5CUVU5M1JTeFBRVUZCTEVOQlFWRkRMRTlCUVVFc1IwRkRNVU12U0N4RFFVRkJMRU5CUVU4clVDeFpRVUZCTEVkQlFXVTVTU3hSUVVGQkxFTkJRVk4wUnl4RFFVRkJMRU5CUVUwMlR5eFpRVUZCTEVOQlFXRXNORUpCUVRSQ0xFMUJSVGxGZUZBc1EwRkJRU3hEUVVGUEsxQXNXVUZCUVN4SFFVRmxibEFzUTBGQlFTeEZRVTkwUWtZc1EwRkJRU3hEUVVGUGMxQXNiVUpCUVVFc1UwRkJLME1zVFVGQmVFSm9VU3hEUVVGQkxFTkJRVThyVUN4WlFVRkJMRWxCUVRoQ0wxQXNRMEZCUVN4RFFVRlBLMUFzV1VGQlFTeExRVUZwUWk5UUxFTkJRVUVzUTBGQlR6Uk5MRmRCUVVFc1NVRkRjRWMxVFN4RFFVRkJMRU5CUVU5blVTeHRRa0ZCUVN4RlFVVllPMEZCUVVFN1FVRkZRU3hKUVVGSlF5eE5RVUZCTEVkQlFWTTdSVUZEV0hKS0xGVkJRVUVzUlVGQlFVRXNWVUZCUVR0RlFVTkJWeXhaUVVGQkxFVkJRVUZCTEZsQlFVRTdSVUZEUVdkR0xHZENRVUZCTEVWQlFVRkJMR2RDUVVGQk8wVkJRMEZRTEd0Q1FVRkJMRVZCUVVGQkxHdENRVUZCTzBWQlEwRnRRaXh2UWtGQlFTeEZRVUZCUVN4dlFrRkJRVHRGUVVOQlR5eGpRVUZCTEVWQlFVRkJMR05CUVVFN1JVRkRRVTBzYlVKQlFVRXNSVUZCUVVFc2JVSkJRVUU3UlVGRFFYRkNMR2xDUVVGQkxFVkJRVUZCTEdsQ1FVRkJPMFZCUTBGUkxHdENRVUZCTEVWQlFVRkJPMEZCUVVFN1FVRkhSaXhUUVVGVFN5eHRRa0ZCYlVKd1VTeERRVUZCTzBWQlFVRXNTMEZEWWl4TlFVRlVRU3hEUVVGQkxFdEJRMFpCTEVOQlFVRXNSMEZCVHl4TFFVRkxhVWdzV1VGQlFTeExRVUZwUWl4TlFVRk5PMFZCUlhKRE8wbEJRMDE2UkN4TlFVRkJMRVZCUTBwMFJDeERRVUZCTzBsQlEwRTBTQ3haUVVGQkxFVkJRV05zU0N4RFFVRkJPMGxCUVVjd1RTeFRRVUZCTEVWQlEycENlazBzUTBGQlFUdEpRVUZUTmtVc1UwRkJRU3hGUVVOVU5VVTdSVUZCUVN4SlFVeGhPMFZCVDJZc1NVRkJTVm9zUTBGQlFTeERRVUZQYlZFc1owSkJRVUVzUlVGRFZDeFBRVUZQZWxBc1EwRkJRU3hKUVVGUFF5eERRVUZCTEVkQlFWbEJMRU5CUVVFN1JVRkZOVUlzU1VGQlNWZ3NRMEZCUVN4RFFVRlBkMG9zVDBGQlFTeEZRVU5VTEU5QlFVODNTU3hEUVVGQk8wVkJSVlFzU1VGQlNVa3NRMEZCUVN4SFFVRnRRaXhKUVVGQmNWQXNWMEZCUVN4RlFVRmhlRkFzUTBGQlFTeEZRVUZYWkN4RFFVRkJPMFZCUnk5RExFOUJSa0ZwUWl4RFFVRkJMRWxCWkdVc1MwRmpXVzFOTEhGQ1FVRkJMRWxCUTNaQ2VFMHNRMEZCUVN4TFFVRkxTeXhEUVVGQkxFbEJRVzlDUVN4RFFVRkJMRWRCUTNSQ1FTeERRVUZCTEVsQlFXOUNMRU5CUXpkQ08wRkJRVUU3UVVGRlFTeFRRVUZUYzFBc1lVRkJZWFpSTEVOQlFVRXNSVUZCVjBVc1EwRkJRVHRGUVVNdlFpeE5RVUZOVlN4RFFVRkJMRWRCUVZNN1NVRkJRVHROUVVWaWEwZ3NXVUZCUVN4RlFVRmpha2dzUTBGQlFUdE5RVUZITWtNc1RVRkJRU3hGUVVOcVFqRkRMRU5CUVVFN1RVRkJUVFJGTEZOQlFVRXNSVUZEVG5wRkxFTkJRVUU3VFVGQlUzbE5MRkZCUVVFc1JVRkRWSGhOTzBsQlFVRXNTVUZEUlU0c1EwRkJRVHRGUVVOS0xFbEJRVWxUTEVOQlFVRXNSMEZCU1R0SlFVTktSeXhEUVVGQkxFZEJRVWs3UlVGNVFsSXNTVUZCU1VVc1EwRkJRVHRGUVhaQ1FXUXNRMEZCUVN4RFFVRlBjVWNzV1VGQlFTeExRVU5VTlVZc1EwRkJRU3hIUVVGSlVpeERRVUZCTEVsQlFVOWlMRU5CUVVFc1IwRkJXVUVzUTBGQlFTeEhRVVYyUW5kQ0xFTkJRVUVzUjBGQlNYaENMRU5CUVVFc1JVRkZSbU1zUTBGQlFTeERRVUZQTkVvc1dVRkJRU3hMUVVOVWNrb3NRMEZCUVN4SFFVRkpkMG9zU1VGQlFTeERRVUZMUXl4TFFVRkJMRU5CUVUxNlNpeERRVUZCTEVkQlEyWkhMRU5CUVVFc1IwRkJTWEZLTEVsQlFVRXNRMEZCUzBNc1MwRkJRU3hEUVVGTmRFb3NRMEZCUVN4SlFVVnFRbG9zUTBGQlFTeERRVUZQTkZBc2FVSkJRVUVzUjBGQmIwSTFVQ3hEUVVGQkxFTkJRVTh3VFN4VFFVRkJMRVZCUTJ4RE1VMHNRMEZCUVN4RFFVRlBNRTBzVTBGQlFTeEhRVUZaTVUwc1EwRkJRU3hEUVVGUGNVY3NXVUZCUVN4TFFVRnBRalZHTEVOQlFVRXNSMEZCU1Vjc1EwRkJRU3hGUVVNelExWXNRMEZCUVN4RFFVRlBORWtzVDBGQlFTeEhRVU5VZWtrc1EwRkJRU3hEUVVGVlRDeERRVUZCTEVOQlFVOXhSeXhaUVVGQkxFdEJRV2xDTEdWQlFXVXNaVUZCWlhKSExFTkJRVUVzUTBGQlQzRkhMRmxCUVVFc1RVRkJhMEkxUml4RFFVRkJMRWxCUVV0SExFTkJRVUVzUjBGRGNFWldMRU5CUVVFc1EwRkJUM1ZRTEdkQ1FVRkJMRXRCUTJKNlVDeERRVUZCTEVOQlFVOXhSeXhaUVVGQkxFdEJRMVExUml4RFFVRkJMRWxCUVV0VUxFTkJRVUVzUTBGQlQzZE5MSEZDUVVGQkxFdEJSVm8xVEN4RFFVRkJMRWxCUVV0YUxFTkJRVUVzUTBGQlQzZE5MSEZDUVVGQkxFbEJSV1J1VFN4RFFVRkJMRU5CUVZWWUxFdEJRVUVzUTBGQlRXdExMRk5CUVVFc1IwRkJXU3hsUVVGbGJrb3NRMEZCUVN4UFFVRlJSeXhEUVVGQk8wVkJTM0pFTEUxQlFVMUpMRU5CUVVFc1IwRkJhVUpvUWl4RFFVRkJMRU5CUVU5cFRpeFpRVUZCTEV0QlFXbENhazRzUTBGQlFTeERRVUZQTmswc1dVRkJRVHRGUVVWd1JDOU1MRU5CUVVFc1IwRkVjVUlzVFVGQmJrSkZMRU5CUVVFc1IwRkRXU3hMUVVWRE5VSXNRMEZCUVN4SFFVRlpXU3hEUVVGQkxFTkJRVTgyVFN4WlFVRkJMRTFCUVd0Q04wd3NRMEZCUVN4RlFVVnNSRVlzUTBGQlFTeExRVUZuUWxJc1EwRkJRU3hKUVVOc1FrNHNRMEZCUVN4RFFVRlBaMDRzWTBGQlFTeERRVUZsTlU0c1EwRkJRU3hIUVVWNFFsa3NRMEZCUVN4RFFVRlBkVU1zU1VGQlFTeERRVUZMTEdkQ1FVRm5RblpETEVOQlFVRXNRMEZCVHpCTkxGTkJRVUVzUlVGQlYzQk9MRU5CUVVFc1EwRkRhRVE3UVVGQlFUdEJRVVZCTEZOQlFWTjFUaXhoUVVGQk8wVkJRMUFzVVVGQlVTeExRVUZMTjBVc1VVRkJRU3hEUVVGVExFVkJRM2hDTzBGQlFVRTdRVUZGUVN4VFFVRlRhVVlzWVVGQlFUdEZRVU5RTEZGQlFWRXNTMEZCUzJwR0xGRkJRVUVzUTBGQlV5eExRVUZMUVN4UlFVRkJMRU5CUVZNNVJDeE5RVUZCTEVkQlFWTXNSVUZETDBNN1FVRkJRVHRCUVVWQkxGTkJRVk15VEN4WlFVRlplbEVzUTBGQlFTeEZRVUZYUlN4RFFVRkJMRVZCUVU5VkxFTkJRVUVzUlVGQlkwTXNRMEZCUVN4RlFVRnBRa01zUTBGQlFUdEZRVUZCTEV0QlEyeEVMRTFCUVdSa0xFTkJRVUVzUzBGRFJrRXNRMEZCUVN4SFFVRlpMRk5CUlVFc1RVRkJWa1VzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWRCUVZFc1MwRkJTM05FTEUxQlFVRXNRMEZCVDIxS0xFdEJRVUVzVVVGRlJDeE5RVUZxUWk5TUxFTkJRVUVzUzBGRFJrRXNRMEZCUVN4SlFVRmxMRk5CUlU4c1RVRkJjRUpETEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hKUVVGclFqdEZRVVZ3UWl4TlFVRk5TU3hEUVVGQkxFZEJRVk03U1VGQlFUdE5RVU5VZFVNc1RVRkJRU3hGUVVOS2RFTXNRMEZCUVR0TlFVRk5kMFVzVTBGQlFTeEZRVU5PY2tVN1NVRkJRU3hKUVVORlNpeERRVUZCTzBWQlEwb3NTVUZCU1VFc1EwRkJRU3hEUVVGUGVWQXNVMEZCUVN4SlFVRmhlRkFzUTBGQlFTeERRVUZQZVZBc09FSkJRVUVzUlVGRE4wSXNVVUZCVHp0RlFVVlVMRTFCUVUxdVVDeERRVUZCTEVkQlFXVlFMRU5CUVVFc1EwRkJUM2ROTEZsQlFVRTdTVUZEZEVJdlRDeERRVUZCTEVkQlFXVlVMRU5CUVVFc1EwRkJUelJOTEZsQlFVRTdSVUZETlVJc1NVRkJTV3BOTEVOQlFVRTdSVUZMU2l4SlFVcHBSRUVzUTBGQlFTeEhRVUUzUTJZc1EwRkJRU3hKUVVGdFFtSXNRMEZCUVN4SFFVRlpkMElzUTBGQlFTeEhRVUUyUWtFc1EwRkJRU3hIUVVGelFsZ3NRMEZCUVN4SlFVRnRRbUlzUTBGQlFTeEhRVUZaTUVJc1EwRkJRU3hIUVVFMlFrRXNRMEZCUVN4SFFVRnBRekZDTEVOQlFVRXNSVUZIYmt4cFFpeERRVUZCTEVOQlFVOHlUU3hqUVVGQkxFTkJRV1ZvVFN4RFFVRkJMRWRCUTJ4Q1ZpeERRVUZCTEVOQlFVOTNTU3hQUVVGQkxFVkJRVk03U1VGRGJFSXNUVUZCVFRGS0xFTkJRVUVzUjBGQlRXbENMRU5CUVVFc1EwRkJUMmRITEZsQlFVRTdTVUZEYmtJc1NVRkJZeXhOUVVGV0wwY3NRMEZCUVN4RlFVTkdiVUlzUTBGQlFTeERRVUZWY2tJc1EwRkJRU3hIUVVGTkxHVkJRV1VzWjBKQlFXZENORUlzUTBGQlFTeE5RVU14UXp0TlFVTk1MRXRCUVV0WUxFTkJRVUVzUTBGQlQzSkNMRTlCUVVFc1EwRkJVVkVzV1VGQlFTeEZRVTFzUWl4UFFVeEJMRWxCUVVGM1VTeFhRVUZCTEVWQlFYRkNPMUZCUTI1Q00wNHNUVUZCUVN4RlFVRkJhRU1zUTBGQlFUdFJRVU5CTkZBc1kwRkJRU3hIUVVGcFFtcFFMRU5CUVVFN1VVRkRha0pyVUN4SlFVRkJMRVZCUVUwNVVTeERRVUZCTEVkQlFVMHNVMEZCVXp0TlFVRkJMRXRCUldoQ08wMUJSVlJ4UWl4RFFVRkJMRU5CUVZVd1VDeFJRVUZCTEVOQlFWTTdVVUZEYWtJc1EwRkJReTlSTEVOQlFVRXNSMEZCVFN4VFFVRlRMRk5CUVZNMFFpeERRVUZCTzFGQlEzcENiMUFzVVVGQlFTeEZRVUZWTzAxQlFVRXNSVUZGWkR0SlFVRkJPMGxCUTBFc1VVRkJUeXhEUVVOVU8wVkJRVUU3UlVGblEwRXNUMEV2UW1Nc1RVRkJWamxSTEVOQlFVRXNTVUZEUm1Vc1EwRkJRU3hEUVVGUGVVd3NZVUZCUVN4RFFVRmpMRWxCUTNKQ2Vrd3NRMEZCUVN4RFFVRlBjMUFzV1VGQlFTeERRVUZoTTA4c1EwRkJRU3hIUVVOb1FtaENMRU5CUVVFc1MwRkRSa3NzUTBGQlFTeERRVUZQYTBNc1NVRkJRU3hEUVVGTExIbENRVUY1UW1wRUxFTkJRVUVzUlVGQlQxa3NRMEZCUVN4SFFVTTFRMGNzUTBGQlFTeERRVUZQYTBNc1NVRkJRU3hEUVVGTExITkNRVWRrYkVNc1EwRkJRU3hEUVVGUGVVd3NZVUZCUVN4RFFVRmplRTBzUTBGQlFTeEhRVU55UW1Vc1EwRkJRU3hEUVVGUGMxQXNXVUZCUVN4RFFVRmhNMDhzUTBGQlFTeEhRVU5vUW1oQ0xFTkJRVUVzUzBGRFJrc3NRMEZCUVN4RFFVRlBhME1zU1VGQlFTeERRVUZMTEhsQ1FVRjVRbXBFTEVOQlFVRXNSVUZCVDFrc1EwRkJRU3hIUVVNMVEwY3NRMEZCUVN4RFFVRlBhME1zU1VGQlFTeERRVUZMTEhGQ1FVVlViRU1zUTBGQlFTeERRVUZQZVZBc1UwRkJRU3hMUVVOV2VsQXNRMEZCUVN4RFFVRlBlVkFzVTBGQlFTeEpRVUZaTEVkQlEyUjZVQ3hEUVVGQkxFTkJRVTluVVN4cFEwRkJRU3hMUVVOV2FGRXNRMEZCUVN4RFFVRlBaMUVzYVVOQlFVRXNSMEZCYjBNc1ZVRkJkVUpxVWl4RFFVRkJPMGxCUXpORWFVSXNRMEZCUVN4TFFVRlZRU3hEUVVGQkxFTkJRVTl2UXl4VFFVRkJMRWxCUTJ4Q2NrUXNRMEZCUVN4RFFVRkZLMFFzVFVGQlFTeExRVUZYTEZOQlEycENPVU1zUTBGQlFTeERRVUZQZVVVc1UwRkJRU3hEUVVGVmJrSXNiVUpCUVVFc1EwRkJiMElzYVVKQlFXbENkRVFzUTBGQlFTeERRVUZQWjFFc2FVTkJRVUVzUjBGRE4wUm9VU3hEUVVGQkxFTkJRVTluVVN4cFEwRkJRU3hIUVVGdlF5eGhRVU53UTJoUkxFTkJRVUVzUTBGQlQyZFJMR2xEUVVGQkxFVkJRMVp5VVN4RFFVRkJMRWxCUTBaTExFTkJRVUVzUTBGQlQydERMRWxCUVVFc1EwRkJTeXhwUWtGRmFFSTdSVUZCUVN4SlFVVkdiRU1zUTBGQlFTeERRVUZQZVVVc1UwRkJRU3hEUVVGVmRFSXNaMEpCUVVFc1EwRkJhVUlzYVVKQlFXbENia1FzUTBGQlFTeERRVUZQWjFFc2FVTkJRVUVzVFVGSGRrUXNRMEZEVkR0QlFVRkJPMEZCUlVFc1NVRkJTVE5FTEZOQlFVRXNSMEZCV1R0RlFVTmtaMFFzV1VGQlFTeEZRVUZqUml4clFrRkJRVHRGUVVOa1J5eFpRVUZCTEVWQlFVRkJMRmxCUVVFN1JVRkRRVGxETEZsQlFVRXNSVUZCUVVFc1dVRkJRVHRGUVVOQlNTeFpRVUZCTEVWQlFVRkJMRmxCUVVFN1JVRkRRVFJETEZkQlFVRXNSVUZCUVVFN1FVRkJRVHRCUVVkR0xGTkJRVk12UkN4alFVRmpNVTBzUTBGQlFTeEZRVUZWUlN4RFFVRkJPMFZCUXk5Q0xFMUJRVTFWTEVOQlFVRXNSMEZCVXp0RlFVTldRU3hEUVVGQkxFTkJRVTgwUXl4TlFVRkJMRU5CUVU5clJ5eFBRVUZCTEV0QlEycENPVWtzUTBGQlFTeERRVUZQT0VVc1UwRkJRU3hEUVVGVmNFWXNTMEZCUVN4RFFVRk5ORkVzYTBKQlFVRXNSMEZCY1VJc1IwRkJSMnhTTEVOQlFVRXNUMEZGYWtSWkxFTkJRVUVzUTBGQlQzVkRMRWxCUVVFc1EwRkJTeXhwUWtGQmFVSnVSQ3hEUVVGQkxFVkJRVlZGTEVOQlFVRXNRMEZEZWtNN1FVRkJRVHRCUVVWQkxGTkJRVk5wVWl4bFFVRmxibElzUTBGQlFUdEZRVU4wUWp0SlFVRkphVVFzVFVGQlFTeEZRVU5HTDBNc1EwRkJRVHRKUVVGTmExSXNXVUZCUVN4RlFVTk9lRkVzUTBGQlFUdEpRVUZaZVZFc1UwRkJRU3hGUVVOYWVGRXNRMEZCUVR0SlFVRlRlVkVzU1VGQlFTeEZRVU5VZUZFN1JVRkJRU3hKUVVORlpDeERRVUZCTzBWQlEwbzdTVUZCVFRoTkxGZEJRVUVzUlVGRFNqZE1MRU5CUVVFN1NVRkJWelJQTEdGQlFVRXNSVUZEV0ROUE8wVkJRVUVzU1VGRFJXaENMRU5CUVVFN1JVRkRTaXhKUVVGSmJVSXNRMEZCUVN4SFFVRk5VaXhEUVVGQk8wVkJTMVlzU1VGS1MxRXNRMEZCUVN4TFFVTTRRa0VzUTBGQlFTeEhRVUUzUWtvc1EwRkJRU3hIUVVGalF5eERRVUZCTEVkQlFYRkNMRk5CUVdkQ1JDeERRVUZCTEVkQlFXTkRMRU5CUVVFc1IwRkJjVUlzVTBGQmEwSXNWVUZGT1Vkb1FpeERRVUZCTEVOQlFVOXBSQ3hKUVVGQkxFTkJRVXNzWVVGQllYSkRMRU5CUVVFc1MwRkRja0pHTEVOQlFVRXNTVUZCWjBKTExFTkJRVUVzUzBGQlowSkRMRU5CUVVFc1JVRkJaVHRKUVVOcVJDeEpRVUZaTEZsQlFWSkhMRU5CUVVFc1JVRkZSaXhaUVVSQmJrSXNRMEZCUVN4RFFVRlBhVVFzU1VGQlFTeERRVUZMTEhWQ1FVRjFRbkpETEVOQlFVRTdTVUZIY2tOYUxFTkJRVUVzUTBGQlQybEVMRWxCUVVFc1EwRkJTeXgzUWtGQmQwSnlReXhEUVVGQkxFdEJRM2hDTEZkQlFWSlBMRU5CUVVFc1IwRkRSbTVDTEVOQlFVRXNRMEZCVDJsRUxFbEJRVUVzUTBGQlN5eHpRa0ZCYzBKeVF5eERRVUZCTEUxQlJXeERXaXhEUVVGQkxFTkJRVTlwUkN4SlFVRkJMRU5CUVVzc2MwSkJRWE5DY2tNc1EwRkJRU3hIUVVWMFF6dEZRVUZCTzBGQlEwWTdRVUZGUVN4VFFVRlRlVkVzWjBKQlFXZENkbElzUTBGQlFTeEZRVUZqUlN4RFFVRkJPMFZCUVVFc1MwRkRhRUlzVFVGQmFrSkdMRU5CUVVFc1MwRkRSa0VzUTBGQlFTeEpRVUZsTzBWQlJXcENMRTFCUVUxWkxFTkJRVUVzUjBGQlV6dEpRVUZCTzAxQlExUTBReXhOUVVGQkxFVkJRMG96UXp0SlFVRkJMRWxCUTBWRUxFTkJRVUU3UlVGRFFVTXNRMEZCUVN4RFFVRlBOa2tzVDBGQlFTeExRVU5RTjBrc1EwRkJRU3hEUVVGUGIwNHNWVUZCUVN4SlFVTlVjazRzUTBGQlFTeERRVUZQTmt3c1owSkJRVUVzU1VGRlZEQkZMR05CUVVFc1EwRkJaVHRKUVVOaWJFOHNUVUZCUVN4RlFVRkJja01zUTBGQlFUdEpRVU5CZDFFc1dVRkJRU3hGUVVGQmNGSXNRMEZCUVR0SlFVTkJjVklzVTBGQlFTeEZRVUZCYmxJc1EwRkJRVHRKUVVOQmIxSXNTVUZCUVN4RlFVRk5PMFZCUVVFc1IwRkZWanRCUVVGQk8wRkJSVUVzVTBGQlUwVXNZMEZCWTNoU0xFTkJRVUVzUlVGQlkwVXNRMEZCUVR0RlFVRkJMRXRCUTJRc1RVRkJha0pHTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hKUVVGbE8wVkJSV3BDTEUxQlFVMVpMRU5CUVVFc1IwRkJVenRKUVVGQk8wMUJRMVEwUXl4TlFVRkJMRVZCUTBvelF6dEpRVUZCTEVsQlEwVkVMRU5CUVVFN1JVRkRTa0VzUTBGQlFTeERRVUZQT0ZBc1UwRkJRU3hKUVVGWkxFZEJRMlkzVUN4RFFVRkJMRU5CUVU4MlNTeFBRVUZCTEV0QlExZzVTU3hEUVVGQkxFTkJRVTg0VEN4aFFVRkJMRU5CUVdNc1NVRkRja0o1UlN4alFVRkJMRU5CUVdVN1NVRkRZbXhQTEUxQlFVRXNSVUZCUVhKRExFTkJRVUU3U1VGRFFYZFJMRmxCUVVFc1JVRkJRWEJTTEVOQlFVRTdTVUZEUVhGU0xGTkJRVUVzUlVGQlFXNVNMRU5CUVVFN1NVRkRRVzlTTEVsQlFVRXNSVUZCVFR0RlFVRkJMRWRCUlZZN1FVRkJRVHRCUVVWQkxFbEJRVWxITEZWQlFVRXNSMEZCWVR0RlFVTm1MMFVzWVVGQlFTeEZRVUZCUVN4aFFVRkJPMFZCUTBFMlJTeGxRVUZCTEVWQlFVRkJMR1ZCUVVFN1JVRkRRVU1zWVVGQlFTeEZRVUZCUVR0QlFVRkJPMEZCUjBZc1UwRkJVMFVzVVVGQlVURlNMRU5CUVVFc1JVRkJUMFVzUTBGQlFTeEZRVUZQVlN4RFFVRkJMRVZCUVdORExFTkJRVUVzUlVGQlZVTXNRMEZCUVR0RlFVRkJMRXRCUTNaRExFMUJRVlprTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hIUVVGUkxGTkJSVWtzVFVGQlZrVXNRMEZCUVN4TFFVTkdRU3hEUVVGQkxFZEJRVkVzUzBGQlMzTkVMRTFCUVVFc1EwRkJUMjFLTEV0QlFVRXNVVUZGUkN4TlFVRnFRaTlNTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hKUVVGbExFbEJSVWtzYlVKQlFWWmFMRU5CUVVFc1MwRkRWRUVzUTBGQlFTeEhRVUZSYlVnc1VVRkJRU3hEUVVGVGJrZ3NRMEZCUVN4RlFVRlBPMFZCUlRGQ0xFMUJRVTFwUWl4RFFVRkJMRWRCUVZNN1JVRkRaaXhKUVVGSlF5eERRVUZCTEVkQlFXRnNRaXhEUVVGQk8wVkJRMkpyUWl4RFFVRkJMRWRCUVdFc1RVRkJSMEVzUTBGQlFTeEhRVUZoTzBWQlEycERPMGxCUVUxelF5eE5RVUZCTEVWQlEwcHVReXhEUVVGQk8wbEJRVTExU0N4UlFVRkJMRVZCUTA1d1NDeERRVUZCTzBsQlFWRnpTQ3hWUVVGQkxFVkJRMUp3U0N4RFFVRkJPMGxCUVZWdFR5eGhRVUZCTEVWQlExWnFUeXhEUVVGQk8wbEJRV0ZyVEN4WFFVRkJMRVZCUTJKcVRDeERRVUZCTzBsQlEwRnBSeXhaUVVGQkxFVkJRV05vUnl4RFFVRkJPMGxCUVVjMFJDeFRRVUZCTEVWQlEycENNMFFzUTBGQlFUdEpRVUZUYTBjc1QwRkJRU3hGUVVOVWFrYzdSVUZCUVN4SlFVTkZaaXhEUVVGQk8wVkJRMG9zU1VGQlNVRXNRMEZCUVN4RFFVRlBlVkFzVTBGQlFTeEpRVUZoY2xBc1EwRkJRU3hEUVVGUGMxQXNPRUpCUVVFc1MwRkJiVU16VHl4RFFVRkJMRXRCUVZsdVFpeERRVUZCTEV0QlFXRkRMRU5CUVVFc1JVRkRla1lzVVVGQlR6dEZRVVZVTEUxQlFVMTFTQ3hEUVVGQkxFZEJRVTkzUXl4SlFVRkJMRU5CUVV0TExFZEJRVUVzUTBGQlNXcExMRU5CUVVFc1EwRkJUM1ZETEUxQlFVRXNRMEZCVHpKSUxHdENRVUZCTEVWQlFXOUNha3NzUTBGQlFUdEZRVU40UkN4SlFVRkpiMGdzUTBGQlFTeEhRVUZaUkN4RFFVRkJMRWRCUVU5M1F5eEpRVUZCTEVOQlFVdERMRXRCUVVFc1JVRkJUelZLTEVOQlFVRXNSMEZCWVcxSUxFTkJRVUVzU1VGQlVYQklMRU5CUVVFc1EwRkJUM1ZETEUxQlFVRXNRMEZCVDNsSUxHTkJRVUU3UlVGRGJFVXpReXhEUVVGQkxFbEJRV0U1Unl4RFFVRkJMRU5CUVZOelJDeE5RVUZCTEV0QlFWRjNSQ3hEUVVGQkxFZEJRVms1Unl4RFFVRkJMRU5CUVZOelJDeE5RVUZCTEVkQlFWTTdSVUZEYUVVc1RVRkJUVEpFTEVOQlFVRXNTVUZCWVdwSUxFTkJRVUVzUTBGQlV6aEhMRU5CUVVFN1JVRkZOVUlzU1VGQlNXcElMRU5CUVVFc1EwRkJUMmxQTEcxQ1FVRkJMRVZCUTFRc1MwRkJTeXhKUVVGSmRGQXNRMEZCUVN4SFFVRkpMRWRCUVVkQkxFTkJRVUVzUjBGQlNUQkNMRU5CUVVFc1EwRkJWMjlFTEUxQlFVRXNSVUZCVVRsRkxFTkJRVUVzU1VGQlN5eEhRVUZITzBsQlF6ZERMRTFCUVUxRkxFTkJRVUVzU1VGQmRVSXlTeXhKUVVGQkxFTkJRVXRETEV0QlFVRXNRMEZCYTBJc1RVRkJXbkpETEVOQlFVRTdUVUZEYkVNM1NDeERRVUZCTEVkQlFXbENhVXNzU1VGQlFTeERRVUZMUXl4TFFVRkJMRU5CUVhOQ0xFMUJRV2hDY0Vvc1EwRkJRU3hEUVVGWE1VSXNRMEZCUVR0TlFVTjJRMkVzUTBGQlFTeEhRVUZ4UW1kTExFbEJRVUVzUTBGQlMwTXNTMEZCUVN4RFFVRXdRaXhOUVVGd1FuQktMRU5CUVVFc1EwRkJWekZDTEVOQlFVRXNSMEZCU1R0SlFVRkJMRXRCUTNCQ0xFMUJRWFJDTUVJc1EwRkJRU3hEUVVGWE1VSXNRMEZCUVN4SFFVRkpMRXRCUTNCQ1JTeERRVUZCTEVsQlFYVkNWU3hEUVVGQkxFbEJRV3RDVml4RFFVRkJMRWRCUVhOQ1Z5eERRVUZCTEVsQlFYTkNRU3hEUVVGQkxFZEJRWEZDUkN4RFFVRkJMRWxCUVd0Q0xFbEJRemxJVFN4RFFVRkJMRWRCUVdGc1FpeERRVUZCTEVkQlEwcEZMRU5CUVVFc1NVRkJkVUpWTEVOQlFVRXNTVUZCYTBKV0xFTkJRVUVzUjBGQmMwSlhMRU5CUVVFc1MwRkRlRVZMTEVOQlFVRXNSMEZCWVd4Q0xFTkJRVUVzUjBGQlNTeExRVVZXUlN4RFFVRkJMRWxCUVhWQ1ZTeERRVUZCTEV0QlEyaERUU3hEUVVGQkxFZEJRV0ZzUWl4RFFVRkJMRU5CUldwQ08wVkJRVUU3UlVGSFJpeEpRVUZKYVVJc1EwRkJRU3hEUVVGUGNVTXNWMEZCUVN4SlFVRmxjRU1zUTBGQlFTeExRVUZsVnl4RFFVRkJMRVZCUVdFN1NVRkRjRVFzUzBGQlMxb3NRMEZCUVN4RFFVRlBNRkVzWTBGQlFTeExRVUZ0UWpkUUxFTkJRVUVzUjBGQlRUSkhMRU5CUVVFc1IwRkJXWGhJTEVOQlFVRXNRMEZCVDNGTkxGTkJRVUVzU1VGQllUZEZMRU5CUVVFc1IwRkJXWGhJTEVOQlFVRXNRMEZCVDNkTkxGbEJRVUVzUzBGQmFVSm9SaXhEUVVGQkxFZEJRVmw0U0N4RFFVRkJMRU5CUVU5eFRTeFRRVUZCTEVsQlFXRTNSU3hEUVVGQkxFZEJRVmw0U0N4RFFVRkJMRU5CUVU5M1RTeFpRVUZCTEV0QlF6RktMRkZCUVU4N1NVRkZWQ3hMUVVGTGVFMHNRMEZCUVN4RFFVRlBNbEVzWTBGQlFTeEpRVUZyUW01S0xFTkJRVUVzUjBGQldYaElMRU5CUVVFc1EwRkJUM0ZOTEZOQlFVRXNTVUZCWVRkRkxFTkJRVUVzUjBGQldYaElMRU5CUVVFc1EwRkJUelJOTEZsQlFVRXNUMEZETVVWb1RTeERRVUZCTEVsQlFXVXNUMEZCVDFnc1EwRkJRU3hGUVVONlFpeFJRVUZQTEVOQlIySTdSVUZCUVR0RlFVOUJMRWxCUVVsNVNDeERRVUZCTzBWQlNVb3NTVUZXU1hwSUxFTkJRVUVzVFVGQlowSlZMRU5CUVVFc1NVRkJhVUlzVFVGQlRXaENMRU5CUVVFc1NVRkRla05MTEVOQlFVRXNRMEZCVDJ0RExFbEJRVUVzUTBGQlN5d3lRa0ZKWkd4RExFTkJRVUVzUTBGQlR6Sk5MR05CUVVFc1EwRkJaVzVHTEVOQlFVRXNSMEZGVVVVc1EwRkJRU3hIUVVFeFFucElMRU5CUVVFc1IwRkJZVmNzUTBGQlFTeEhRVUY1UWl4VFFVRm5RbGdzUTBGQlFTeEhRVUZoVnl4RFFVRkJMRWRCUVhsQ0xGTkJRWGRDTEZOQlIzQklReXhEUVVGQkxFdEJRVkV5Unl4RFFVRkJMRXRCUVdONFNDeERRVUZCTEVOQlFVOXhUU3hUUVVGQkxFdEJRV040VEN4RFFVRkJMRWxCUVU4eVJ5eERRVUZCTEV0QlFXTjRTQ3hEUVVGQkxFTkJRVTl4VFN4VFFVRkJMRVZCWTNwRkxFOUJZa0Z5VFN4RFFVRkJMRU5CUVU5elR5eHBRa0ZCUVN4RFFVRnJRbkpQTEVOQlFVRXNSMEZGY2tKSExFTkJRVUVzUTBGQlR6Uk5MRlZCUVVFc1NVRkRWR2hPTEVOQlFVRXNRMEZCVDNkTUxHZENRVUZCTEVsQlJWUjRUQ3hEUVVGQkxFTkJRVTlwVGl4dFFrRkJRU3hKUVVObExGbEJRV3hDTjAwc1EwRkJRU3hEUVVGUFowc3NUVUZCUVN4SlFVTlVjRXNzUTBGQlFTeERRVUZQYzFBc1dVRkJRU3hEUVVGaE9VZ3NRMEZCUVN4SFFVVktMRmxCUVdSRkxFTkJRVUVzUzBGRFJqRklMRU5CUVVFc1EwRkJUM05STEdWQlFVRXNRMEZCWjBJelVTeERRVUZCTEVWQlFXTXJTQ3hEUVVGQkxFZEJRM0pETVVnc1EwRkJRU3hEUVVGUGRWRXNZVUZCUVN4RFFVRmpOVkVzUTBGQlFTeEZRVUZqSzBnc1EwRkJRU3hMUVVVNVFqdEZRVVZVTEVsQlFVbDBTQ3hEUVVGQkxFTkJRVTl4U1N4UFFVRkJMRVZCUVZNN1NVRkRiRUlzVFVGQlRURktMRU5CUVVFc1IwRkJUV2xDTEVOQlFVRXNRMEZCVDJkSExGbEJRVUU3VFVGRFluSkhMRU5CUVVFc1IwRkJTV3RDTEVOQlFVRXNSMEZCVFRKSExFTkJRVUVzU1VGQllVRXNRMEZCUVR0SlFVTTNRaXhKUVVGakxFMUJRVloyU1N4RFFVRkJMRVZCUVdFN1RVRkRaaXhOUVVGTlFTeERRVUZCTEVkQlFWbGxMRU5CUVVFc1EwRkJUeXRITEU5QlFVRXNTVUZCVnk5SExFTkJRVUVzUTBGQlQzVkRMRTFCUVVFc1EwRkJUM2RGTEU5QlFVRXNRMEZCVVVNc1QwRkJRVHROUVVOMFJDOUlMRU5CUVVFc1MwRkRSbVVzUTBGQlFTeERRVUZQZVVVc1UwRkJRU3hEUVVGVmNFWXNTMEZCUVN4RFFVRk5kVklzWTBGQlFTeEhRVUZwUWl4UlFVTjRRelZSTEVOQlFVRXNRMEZCVHpaUkxHbENRVUZCTEVsQlFXOUNMRWxCUlhwQ05WSXNRMEZCUVN4TFFVRmpaU3hEUVVGQkxFTkJRVTg0VVN4NVFrRkJRU3hKUVVFMlFqbFJMRU5CUVVFc1EwRkJUM1ZETEUxQlFVRXNRMEZCVDNkUExGbEJRVUVzUjBGQlpTeExRVU5xUmk5UkxFTkJRVUVzUTBGQlR6aFJMSGxDUVVGQkxFbEJRVFJDTEVkQlEyNURjRThzY1VKQlFVRXNRMEZCYzBJN1VVRkRjRUkxUWl4RFFVRkJMRU5CUVZVdlFpeERRVUZCTEVkQlFVMHNaVUZCWlN4bFFVRmxXU3hEUVVGRE8wMUJRVUVzVFVGSGFrUnRRaXhEUVVGQkxFTkJRVlV2UWl4RFFVRkJMRWRCUVUwc1pVRkJaU3hsUVVGbFdTeERRVUZCTEVWQlJUVkRWaXhEUVVGQkxFbEJRMFo1UkN4eFFrRkJRU3hEUVVGelFqdFJRVU53UWpGRExFTkJRVUVzUTBGQlQzbEZMRk5CUVVFc1EwRkJWWEJHTEV0QlFVRXNRMEZCVFhWU0xHTkJRVUVzUjBGQmFVSXNTVUZEZUVNMVVTeERRVUZCTEVOQlFVODJVU3hwUWtGQlFTeEpRVUZ2UWl4RFFVRkxPMDFCUVVFc1JVRkhkRU03U1VGQlFTeFBRVUZQTzAxQlEwd3NTMEZCU3pkUkxFTkJRVUVzUTBGQlQzSkNMRTlCUVVFc1EwRkJVVkVzV1VGQlFTeEZRVTFzUWl4UFFVeEJMRWxCUVVGM1VTeFhRVUZCTEVWQlFYRkNPMUZCUTI1Q00wNHNUVUZCUVN4RlFVRkJhRU1zUTBGQlFUdFJRVU5CTkZBc1kwRkJRU3hGUVVGblFtcFJMRU5CUVVFN1VVRkRhRUpyVVN4SlFVRkJMRVZCUVUwNVVTeERRVUZCTEVkQlFVMHNVMEZCVXp0TlFVRkJMRXRCUldoQ08wMUJSVlFyUWl4RFFVRkJMRU5CUVZWblVDeFJRVUZCTEVOQlFWTTdVVUZEYWtJc1EwRkJReTlSTEVOQlFVRXNSMEZCVFN4VFFVRlRMRkZCUVZGWkxFTkJRVUU3VVVGRGVFSnZVU3hSUVVGQkxFVkJRVlU3VFVGQlFTeEZRVVZrTzBsQlFVRTdTVUZEUVN4UlFVRlBMRU5CUTFRN1JVRkJRVHRGUVhWQ1FTeFBRWFJDUVM5UUxFTkJRVUVzUTBGQlQzbE1MR0ZCUVVFc1EwRkJZM2hOTEVOQlFVRXNSMEZEY2tKbExFTkJRVUVzUTBGQlQzTlFMRmxCUVVFc1EwRkJZVGxJTEVOQlFVRXNSMEZEY0VKNFNDeERRVUZCTEVOQlFVOXpUeXhwUWtGQlFTeERRVUZyUW5KUExFTkJRVUVzUjBGRGVrSkVMRU5CUVVFc1EwRkJUMmxPTEcxQ1FVRkJMRWxCUTFCcVRpeERRVUZCTEVOQlFVOXJReXhKUVVGQkxFTkJRVXNzZVVKQlFYbENha1FzUTBGQlFTeEZRVUZQVnl4RFFVRkJMRWRCUXpWRFNTeERRVUZCTEVOQlFVOXpVU3hsUVVGQkxFTkJRV2RDTTFFc1EwRkJRU3hGUVVGakswZ3NRMEZCUVN4SFFVTjJRaXhOUVVGV2Vra3NRMEZCUVN4SFFVTkdaU3hEUVVGQkxFTkJRVTkxVVN4aFFVRkJMRU5CUVdNMVVTeERRVUZCTEVWQlFXTXJTQ3hEUVVGQkxFbEJRM3BDTVVnc1EwRkJRU3hEUVVGUGVWQXNVMEZCUVN4TFFVTnFRbnBRTEVOQlFVRXNRMEZCVDNsUUxGTkJRVUVzU1VGQldTeEhRVU5rZWxBc1EwRkJRU3hEUVVGUFoxSXNOa0pCUVVFc1MwRkRWbWhTTEVOQlFVRXNRMEZCVDJkU0xEWkNRVUZCTEVkQlFXZERMRlZCUVhWQ2FsTXNRMEZCUVR0SlFVTjJSR2xDTEVOQlFVRXNTMEZCVlVFc1EwRkJRU3hEUVVGUGIwTXNVMEZCUVN4SlFVTnNRbkpFTEVOQlFVRXNRMEZCUlN0RUxFMUJRVUVzUzBGQlZ5eFRRVU5xUWpsRExFTkJRVUVzUTBGQlQzbEZMRk5CUVVFc1EwRkJWVzVDTEcxQ1FVRkJMRU5CUVc5Q0xHbENRVUZwUW5SRUxFTkJRVUVzUTBGQlQyZFNMRFpDUVVGQkxFZEJRemRFYUZJc1EwRkJRU3hEUVVGUFoxSXNOa0pCUVVFc1IwRkJaME1zWVVGRGFFTm9VaXhEUVVGQkxFTkJRVTluVWl3MlFrRkJRU3hGUVVOa2FGSXNRMEZCUVN4RFFVRlBkVkVzWVVGQlFTeERRVUZqTlZFc1EwRkJRU3hGUVVGakswZ3NRMEZCUVN4RlFVTnlRenRGUVVGQkxFbEJSVVl4U0N4RFFVRkJMRU5CUVU5NVJTeFRRVUZCTEVOQlFWVjBRaXhuUWtGQlFTeERRVUZwUWl4cFFrRkJhVUp1UkN4RFFVRkJMRU5CUVU5blVpdzJRa0ZCUVN4TFFVVnlSQ3hEUVVOVU8wRkJRVUU3UVVGRlFTeFRRVUZUUXl4WlFVRlpiRk1zUTBGQlFTeEZRVUZQUlN4RFFVRkJMRVZCUVU5VkxFTkJRVUVzUlVGQlkwTXNRMEZCUVR0RlFWVXZReXhUUVZSakxFMUJRVlppTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hIUVVGUkxGTkJSVWtzVFVGQlZrVXNRMEZCUVN4TFFVTkdRU3hEUVVGQkxFZEJRVkVzUzBGQlMzTkVMRTFCUVVFc1EwRkJUMjFLTEV0QlFVRXNVVUZGUkN4TlFVRnFRaTlNTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hKUVVGbExFbEJSVWtzYlVKQlFWWmFMRU5CUVVFc1JVRkJiMEk3U1VGRk4wSkJMRU5CUVVFc1IwRkVjMEp0U0N4UlFVRkJMRU5CUVZOdVNDeERRVUZCTEVWQlFVOHNSMEZGZUVNN1JVRkJRVHRGUVVOQkxFMUJRVTFqTEVOQlFVRXNSMEZCVXp0RlFVTm1MRWxCUVVsSExFTkJRVUVzUjBGQlYycENMRU5CUVVFN1JVRlRaaXhQUVZKSll5eERRVUZCTEVOQlFVOHdReXhOUVVGQkxFTkJRVTluU1N4SlFVRkJMRXRCUTFveFN5eERRVUZCTEVOQlFVOXJTQ3hQUVVGQkxFbEJRVmRzU0N4RFFVRkJMRU5CUVU4d1F5eE5RVUZCTEVOQlFVOTNSU3hQUVVGQkxFTkJRVkZETEU5QlFVRXNSMEZGTVVOb1NDeERRVUZCTEVsQlFYTkNTQ3hEUVVGQkxFTkJRVTlyU0N4UFFVRkJMRU5CUVZFd1JDeFpRVUZCTEVkQlJYSkRla3NzUTBGQlFTeEhRVUZYU0N4RFFVRkJMRU5CUVU4NFRDeHRRa0ZCUVN4RFFVRnZRak5NTEVOQlFVRXNTVUZIYmtOSUxFTkJRVUVzUTBGQlR6UlJMRTlCUVVFc1EwRkJVWHBSTEVOQlFVRXNSVUZCVldZc1EwRkJRU3hGUVVGUFZTeERRVUZCTEVWQlFXTkRMRU5CUVVFc1EwRkRka1E3UVVGQlFUdEJRVWRCTEZOQlFWTnpVaXhWUVVGVmJsTXNRMEZCUVN4RlFVRlBSU3hEUVVGQkxFVkJRV05WTEVOQlFVRTdSVUZCUVN4TFFVTjRRaXhOUVVGV1dpeERRVUZCTEV0QlEwWkJMRU5CUVVFc1IwRkJVU3hMUVVGTGQwUXNUVUZCUVN4RFFVRlBiVW9zUzBGQlFTeFJRVVZFTEUxQlFXcENlazBzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWxCUVdVN1JVRkZha0lzVFVGQlRWY3NRMEZCUVN4SFFVRlRPMGxCUVVFN1RVRkRWRzlJTEU5QlFVRXNSVUZEU201SUxFTkJRVUU3VFVGQlR6QkRMRTFCUVVFc1JVRkRVSFpETEVOQlFVRTdUVUZCVFhsUUxGTkJRVUVzUlVGRFRuaFFPMGxCUVVFc1NVRkRSVXdzUTBGQlFUdEZRVU5LTEV0QlFVdERMRU5CUVVFc1JVRkJVeXhQUVVGUFJDeERRVUZCTzBWQlEzSkNMRWxCUVVsUkxFTkJRVUVzUjBGQlYwb3NRMEZCUVN4RFFVRlBaMHNzWTBGQlFUdEZRVU5QTEZkQlFYcENhRXNzUTBGQlFTeERRVUZQYVVvc1lVRkJRU3hKUVVGelJDeE5RVUV4UW1wS0xFTkJRVUVzUTBGQlQyZExMR05CUVVFc1NVRkJkMEpvU3l4RFFVRkJMRU5CUVU5dFVpeHJRa0ZCUVN4TFFVTXpSUzlSTEVOQlFVRXNSMEZCVjNkS0xFbEJRVUVzUTBGQlMwOHNSMEZCUVN4RFFVRkpka3NzUTBGQlFTeERRVUZQYjA4c2IwSkJRVUVzUTBGQmNVSXNXVUZCVnl4SlFVRlBPMFZCUlhCRkxFMUJRVTE2VGl4RFFVRkJMRWRCUVZsWUxFTkJRVUVzUTBGQlQybE5MRmRCUVVFc1IwRkJZemRNTEVOQlFVRXNRMEZCVDJ0TExHdENRVUZCTEVkQlFYRkNMRWxCUVVrNVNpeERRVUZCTzBsQlEycEZTeXhEUVVGQkxFZEJRVmxpTEVOQlFVRXNRMEZCVDIxSUxFOUJRVUVzU1VGQlZ5OUhMRU5CUVVFc1EwRkJUeXRITEU5QlFVRXNRMEZCVVVNc1QwRkJRVHRGUVVOdVJDeEpRVUZKYUVnc1EwRkJRU3hEUVVGUGRVc3NTVUZCUVN4RlFVRk5PMGxCUTJZc1NVRkJTWFJMTEVOQlFVRXNTMEZCWTFFc1EwRkJRU3hKUVVGaFZDeERRVUZCTEVOQlFVOXZVaXh0UWtGQlFTeEZRVUZ4UWl4UlFVRlBPMGxCUTJ4RmVGSXNRMEZCUVN4RFFVRlBlVklzVDBGQlFTeERRVUZSTzAxQlEySnFRaXhUUVVGQkxFVkJRVmM3U1VGQlFTeEpRVWRpZUZFc1EwRkJRU3hEUVVGUE1GSXNWMEZCUVN4SFFVRmpNVklzUTBGQlFTeERRVUZQTmtVc1UwRkJRU3hEUVVGVk9FMHNWVUZEZUVNN1JVRkJRVHRGUVVOQkxFOUJRVWwyVWl4RFFVRkJMRU5CUVU5dFR5eE5RVUZCTEVsQlFWVjJUeXhEUVVGQkxFTkJRVTlyVGl4TFFVRkJMRWRCUTI1Q2JFNHNRMEZCUVN4RFFVRlBObEVzVDBGQlFTeERRVUZSTEVkQlFVY3hVaXhEUVVGQkxFVkJRVTlGTEVOQlFVRXNSVUZCWTFVc1EwRkJRU3hKUVVWNlEwTXNRMEZCUVN4RFFVRlBObEVzVDBGQlFTeERRVUZSTjFFc1EwRkJRU3hEUVVGUGFVMHNWMEZCUVN4SFFVRmpkRXdzUTBGQlFTeEZRVUZYZUVJc1EwRkJRU3hGUVVGUFJTeERRVUZCTEVWQlFXTlZMRU5CUVVFc1EwRkROMFU3UVVGQlFUdEJRVWRCTEZOQlFWTTJVaXhWUVVGVmVsTXNRMEZCUVN4RlFVRlBSU3hEUVVGQkxFVkJRV05WTEVOQlFVRTdSVUZCUVN4TFFVTjRRaXhOUVVGV1dpeERRVUZCTEV0QlEwWkJMRU5CUVVFc1IwRkJVU3hMUVVGTGQwUXNUVUZCUVN4RFFVRlBiVW9zUzBGQlFTeFJRVVZFTEUxQlFXcENlazBzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWxCUVdVN1JVRkZha0lzVFVGQlRWY3NRMEZCUVN4SFFVRlRPMGxCUVVFN1RVRkRWREpETEUxQlFVRXNSVUZEU2pGRExFTkJRVUU3VFVGQlRUaElMRkZCUVVFc1JVRkRUak5JTEVOQlFVRTdUVUZCVVRaSUxGVkJRVUVzUlVGRFVqVklMRU5CUVVFN1RVRkJWVFJITEZsQlFVRXNSVUZEVm5wSExFTkJRVUU3VFVGQldUUkhMRTlCUVVFc1JVRkRXbnBITEVOQlFVRTdUVUZCVDJ0UUxGTkJRVUVzUlVGRFVHaFFPMGxCUVVFc1NVRkRSV0lzUTBGQlFUdEZRVU5LTEV0QlFVdFhMRU5CUVVFc1JVRkJVeXhQUVVGUFdDeERRVUZCTzBWQlEzSkNMRTFCUVUxbExFTkJRVUVzUjBGQldXWXNRMEZCUVN4RFFVRlBiVWdzVDBGQlFTeEpRVUZYYkVnc1EwRkJRU3hEUVVGUGEwZ3NUMEZCUVN4RFFVRlJReXhQUVVGQk8wVkJRMjVFTEVsQlFVbHVTQ3hEUVVGQkxFTkJRVTh3U3l4SlFVRkJMRVZCUVUwN1NVRkRaaXhKUVVGSk9Vb3NRMEZCUVN4TFFVRmpSU3hEUVVGQkxFbEJRV0ZrTEVOQlFVRXNRMEZCVDNWU0xHMUNRVUZCTEVWQlFYRkNMRkZCUVU4N1NVRkRiRVY0VWl4RFFVRkJMRU5CUVU5NVVpeFBRVUZCTEVOQlFWRTdUVUZEWW1wQ0xGTkJRVUVzUlVGQlZ6dEpRVUZCTEVsQlIySjRVU3hEUVVGQkxFTkJRVTh3VWl4WFFVRkJMRWRCUVdNeFVpeERRVUZCTEVOQlFVODJSU3hUUVVGQkxFTkJRVlU0VFN4VlFVTjRRenRGUVVGQk8wVkJSVUVzVTBGQlV6TlJMRVZCUVZVM1FpeERRVUZCTzBsQlEycENMRTlCUVVsQkxFTkJRVUVzUjBGQlRTeExRVUZYTmtzc1NVRkJRU3hEUVVGTFF5eExRVUZCTEVOQlFVMUVMRWxCUVVFc1EwRkJTMGNzUjBGQlFTeERRVUZKYUV3c1EwRkJRU3hMUVVOc1F6WkxMRWxCUVVFc1EwRkJTME1zUzBGQlFTeERRVUZOT1Vzc1EwRkJRU3hEUVVOd1FqdEZRVUZCTzBWQlEwRXNUVUZCVFRoQ0xFTkJRVUVzUjBGQmMwSkVMRU5CUVVFc1EwRk1WbElzUTBGQlFTeEhRVUZsVWl4RFFVRkJMRU5CUVU5NVRTeFRRVUZCTEVsQlFXRjZUU3hEUVVGQkxFTkJRVTk1VFN4VFFVRkJPMGxCVFhSRWRrd3NRMEZCUVN4SFFVRnhRbVFzUTBGQlFTeERRVUZUZDBJc1IwRkJRU3hEUVVGSmVrTXNRMEZCUVN4SlFVRlBOa0lzUTBGQlFTeERRVUZWTjBJc1EwRkJRVHRGUVVONlJDeEpRVUZKWjBNc1EwRkJRU3hIUVVGWFppeERRVUZCTEVOQlFWTmpMRU5CUVVFc1EwRkJiVUpGTEU5QlFVRXNRMEZCVVVnc1EwRkJRU3hKUVVGMVFqdEZRVU14UlN4VFFVRjNRaXhOUVVGaVJTeERRVUZCTEVsQlFUUkNiRUlzUTBGQlFTeERRVUZQTkVrc1QwRkJRU3hGUVVGVE8wbEJRM0pFTEVsQlFVa3hTaXhEUVVGQk8wbEJRMHBwUWl4RFFVRkJMRU5CUVZNeVF5eFBRVUZCTEVOQlFWRXNRMEZCUXpGRUxFTkJRVUVzUlVGQlRWVXNRMEZCUVR0TlFVTnNRbXRDTEVOQlFVRXNTVUZCZFVJMVFpeERRVUZCTEV0QlJYcENSaXhEUVVGQkxFZEJRV2RDV1N4RFFVRkJMRU5CUTJ4Q08wbEJRVUVzVTBGRk1rSXNUVUZCYkVKYUxFTkJRVUVzUzBGRFZHZERMRU5CUVVFc1IwRkJWMllzUTBGQlFTeERRVUZUYWtJc1EwRkJRU3hIUVVGblFpeEpRVUZKUVN4RFFVRkJMRWRCUVdkQ0xFbEJRVWxCTEVOQlFVRXNSVUZGYUVVN1JVRkJRVHRGUVVOQkxFbEJRVWx4U1N4RFFVRkJMRWRCUVZrN1JVRlRhRUlzVTBGU2QwSXNUVUZCWW5KSExFTkJRVUVzUzBGRFZIRkhMRU5CUVVFc1IwRkJXVzVJTEVOQlFVRXNRMEZCVjJVc1QwRkJRU3hEUVVGUlJDeERRVUZCTEVkQlF6TkNjVWNzUTBGQlFTeEhRVUZaTEUxQlFVZEJMRU5CUVVFc1IwRkJXWGhJTEVOQlFVRXNRMEZCVDJsTkxGZEJRVUVzUjBGQll5eEpRVU4yUWl4WFFVRjZRbWhOTEVOQlFVRXNRMEZCVDI5S0xHRkJRVUVzU1VGQmMwUXNUVUZCTVVKd1NpeERRVUZCTEVOQlFVOXRTeXhqUVVGQkxFbEJRWGRDYmtzc1EwRkJRU3hEUVVGUGMxSXNhMEpCUVVFc1MwRkRNMFV2U2l4RFFVRkJMRWRCUVZsQkxFTkJRVUVzUjBGQldYaElMRU5CUVVFc1EwRkJUMjlQTEc5Q1FVRkJMRU5CUVhGQ0xHRkJRVmtzUzBGQlVTeEhRVU40UlRWSExFTkJRVUVzUjBGQldYZERMRWxCUVVFc1EwRkJTMDhzUjBGQlFTeERRVUZKTDBNc1EwRkJRU3hGUVVGWExFMUJSMmhEZGtnc1EwRkJRU3hEUVVGUGMwOHNUVUZCUVN4SlFVRlZkazhzUTBGQlFTeERRVUZQYVU0c1YwRkJRU3hGUVVGaE8wbEJRM1pETEUxQlFVMW9UaXhEUVVGQkxFZEJRVmxFTEVOQlFVRXNRMEZCVHpKRExFMUJRVUVzUTBGQlQzZEZMRTlCUVVFc1NVRkJWMjVJTEVOQlFVRXNRMEZCVHpKRExFMUJRVUVzUTBGQlQzZEZMRTlCUVVFc1EwRkJVVU1zVDBGQlFTeEpRVUZYY0Vnc1EwRkJRU3hEUVVGUGJVZ3NUMEZCUVN4SFFVRlZia2dzUTBGQlFTeERRVUZQYlVnc1QwRkJRU3hEUVVGUlJTeE5RVUZCTEVOQlFVOXdSQ3hOUVVGQkxFZEJRVk1zU1VGQlNXcEZMRU5CUVVFc1EwRkJUM0ZJTEUxQlFVRXNRMEZCVDNCRUxFMUJRVUVzUjBGQlV6dEpRVU4yU2l4UFFVRlBha1VzUTBGQlFTeERRVUZQTmxFc1QwRkJRU3hEUVVGUk5WRXNRMEZCUVN4RlFVRlhaQ3hEUVVGQkxFVkJRVTlGTEVOQlFVRXNSVUZCWTFVc1EwRkJRU3hEUVVONFJEdEZRVUZCTzBWQlEwRXNUMEZCVDBNc1EwRkJRU3hEUVVGUE5sRXNUMEZCUVN4RFFVRlJja29zUTBGQlFTeEZRVUZYY2trc1EwRkJRU3hGUVVGUFJTeERRVUZCTEVWQlFXTlZMRU5CUVVFc1EwRkRlRVE3UVVGQlFUdEJRVWRCTEZOQlFWTTRVaXhYUVVGWE1WTXNRMEZCUVN4RlFVRlBSU3hEUVVGQkxFVkJRV05WTEVOQlFVRTdSVUZCUVN4TFFVTjZRaXhOUVVGV1dpeERRVUZCTEV0QlEwWkJMRU5CUVVFc1IwRkJVU3hMUVVGTGQwUXNUVUZCUVN4RFFVRlBiVW9zUzBGQlFTeFJRVVZFTEUxQlFXcENlazBzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWxCUVdVN1JVRkhha0lzVDBGRVpTeExRVU5FZDFJc1QwRkJRU3hEUVVSRExFdEJRMk0xUlN4WFFVRkJMRVZCUVdFNVRTeERRVUZCTEVWQlFVOUZMRU5CUVVFc1JVRkJZMVVzUTBGQlFTeERRVU5xUlR0QlFVRkJPMEZCUjBFc1UwRkJVeXRTTEdWQlFXVXpVeXhEUVVGQkxFVkJRVTlGTEVOQlFVRXNSVUZCWTFVc1EwRkJRU3hGUVVGVlF5eERRVUZCTzBWQlFVRXNTMEZEZGtNc1RVRkJWbUlzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWRCUVZFc1MwRkJTM2RFTEUxQlFVRXNRMEZCVDIxS0xFdEJRVUVzVVVGRlJDeE5RVUZxUW5wTkxFTkJRVUVzUzBGRFJrRXNRMEZCUVN4SlFVRmxMRk5CUlVNc1RVRkJaRmNzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWRCUVZrN1JVRkZaQ3hOUVVGTlF5eERRVUZCTEVkQlFWTTdSVUZEWml4SlFVRkpSeXhEUVVGQkxFZEJRVkZJTEVOQlFVRXNRMEZCVDJkTkxGZEJRVUU3UlVGRGJrSXNUVUZCVFRWTUxFTkJRVUVzUjBGQlR6SktMRWxCUVVFc1EwRkJTMHNzUjBGQlFTeERRVUZKY0Vzc1EwRkJRU3hEUVVGUE1FTXNUVUZCUVN4RFFVRlBNa2dzYTBKQlFVRXNSVUZCYjBKc1N5eERRVUZCTzBsQlEyeEVTU3hEUVVGQkxFZEJRVmxJTEVOQlFVRXNSMEZCVHpKS0xFbEJRVUVzUTBGQlMwTXNTMEZCUVN4RlFVRlBOMG9zUTBGQlFTeEhRVUZSUXl4RFFVRkJMRWxCUVZGS0xFTkJRVUVzUTBGQlR6QkRMRTFCUVVFc1EwRkJUM2xJTEdOQlFVRTdTVUZETjBSNlNpeERRVUZCTEVkQlFWbFdMRU5CUVVFc1EwRkJUMmRJTEZsQlFVRXNSMEZCWldoSUxFTkJRVUVzUTBGQlQzZE5MRk5CUVVFc1NVRkJZWGhOTEVOQlFVRXNRMEZCVDNkTkxGTkJRVUU3UlVGRGJrVXNTVUZCU1RsTUxFTkJRVUVzU1VGQllWWXNRMEZCUVN4RFFVRlBPRWdzVVVGQlFTeERRVUZUZGtnc1EwRkJRU3hIUVVGWk8wbEJSek5ETEUxQlFVMXlRaXhEUVVGQkxFZEJRV05qTEVOQlFVRXNRMEZCVHpoSUxGRkJRVUVzUTBGQlUzWklMRU5CUVVFN1NVRkZhRU5ITEVOQlFVRXNSMEZCV1hoQ0xFTkJRVUVzU1VGRVEyTXNRMEZCUVN4RFFVRlBPRWdzVVVGQlFTeERRVUZUZGtnc1EwRkJRU3hIUVVGWkxFdEJRMGh5UWl4RFFVRkJMRWxCUVdWaExFTkJRVUVzUzBGRGRrUkpMRU5CUVVFc1NVRkJVMGdzUTBGQlFTeERRVUZQTUVNc1RVRkJRU3hEUVVGUGVVZ3NZMEZCUVN4RFFVVXpRanRGUVVGQkxFOUJRVTg3U1VGSFRDeE5RVUZOYWt3c1EwRkJRU3hIUVVGWFl5eERRVUZCTEVOQlFVODRTQ3hSUVVGQkxFTkJRVk4yU0N4RFFVRkJMRWRCUVZrN1NVRkZla05ITEVOQlFVRXNSMEZCV1hoQ0xFTkJRVUVzUzBGRVNXTXNRMEZCUVN4RFFVRlBPRWdzVVVGQlFTeERRVUZUZGtnc1EwRkJRU3hKUVVOUGNrSXNRMEZCUVN4SlFVRlpZU3hEUVVGQkxFdEJRM0pFU1N4RFFVRkJMRWxCUVZOSUxFTkJRVUVzUTBGQlR6QkRMRTFCUVVFc1EwRkJUM2xJTEdOQlFVRXNRMEZGTTBJN1JVRkJRVHRGUVVkQkxFOUJSa0ZvU3l4RFFVRkJMRWRCUVZFMFNpeEpRVUZCTEVOQlFVdFBMRWRCUVVFc1EwRkJTVzVMTEVOQlFVRXNSVUZCVHl4SlFVTjRRa0VzUTBGQlFTeEhRVUZSTkVvc1NVRkJRU3hEUVVGTFN5eEhRVUZCTEVOQlFVbHFTeXhEUVVGQkxFVkJRVTlJTEVOQlFVRXNRMEZCVDJkSkxGVkJRVUVzUTBGQlYyaEZMRTFCUVVFc1IwRkJVeXhKUVVNMVEyaEZMRU5CUVVFc1EwRkJUelJSTEU5QlFVRXNRMEZCVVhwUkxFTkJRVUVzUlVGQlQycENMRU5CUVVFc1JVRkJUMFVzUTBGQlFTeEZRVUZqVlN4RFFVRkJMRU5CUTNCRU8wRkJRVUU3UVVGRlFTeFRRVUZUYzFBc2IwSkJRVUU3UlVGRFVDeE5RVUZOYkZFc1EwRkJRU3hIUVVGVE8wbEJRVUU3VFVGRFZIZEVMRTFCUVVFc1JVRkRTblJFTEVOQlFVRTdUVUZCVFRKSUxGRkJRVUVzUlVGRFRtcElPMGxCUVVFc1NVRkRSVm9zUTBGQlFUdEpRVU5GWVN4RFFVRkJMRWRCUVhsRExGZEJRWHBDV0N4RFFVRkJMRU5CUVU5blN5eGhRVUZCTEVkQlFUSkNiRXNzUTBGQlFTeERRVUZQYVZBc2IwSkJRVUVzUzBGQmVVSXZUeXhEUVVGQkxFTkJRVTluU3l4aFFVRkJPMFZCUXk5R0xFbEJRMGx3U2l4RFFVRkJPMGxCUkVGSExFTkJRVUVzUjBGQlpXcENMRU5CUVVFc1EwRkJUMmxSTEZsQlFVRTdSVUZGTVVJc1RVRkJUUzlQTEVOQlFVRXNSMEZCWjBKc1FpeERRVUZCTEVOQlFVOW5UaXhUUVVGQkxFZEJRVmtzYVVKQlFXbENMRWxCUVVrNVRTeERRVUZCTEVOQlFVOXJTU3hWUVVGQk8wVkJRM0pGTEVsQlFVbHNTU3hEUVVGQkxFTkJRVTl6VEN4SlFVRkJMRVZCUVUwN1NVRkRaaXhKUVVGSmVFd3NRMEZCUVN4RFFVRlBNRkVzVTBGQlFTeEZRVUZYTzBsQlEzUkNOVkFzUTBGQlFTeEhRVUZaY1Vjc1VVRkJRU3hEUVVGVGJrZ3NRMEZCUVN4RFFVRlBaMUVzV1VGQlFTeERRVUZoVGl4WlFVRkJMRU5CUVdFc05FSkJRVFJDTEV0QlF6bEZlRkFzUTBGQlFTeERRVUZQZFVvc1kwRkJRU3hIUVVOTWVFa3NRMEZCUVN4SFFVRmxha0lzUTBGQlFTeERRVUZQTkZNc1dVRkJRU3hIUVVGbEwxSXNRMEZCUVN4SFFVRm5RaXhMUVVGTFNTeERRVUZCTEVkQlFXVnFRaXhEUVVGQkxFTkJRVTlyU1N4TlFVRkJMRU5CUVU5d1JDeE5RVUZCTEVkQlFWTTVSU3hEUVVGQkxFTkJRVTgwVXl4WlFVRkJMRWRCUVdVdlVpeERRVUZCTEVkQlFXZENMRXRCUTNoSllpeERRVUZCTEVOQlFVOXpVeXhQUVVGQkxFbEJRMUJ5VWl4RFFVRkJMRWRCUVdWcVFpeERRVUZCTEVOQlFVODJVeXhoUVVGQkxFTkJRV01zU1VGQlFURkxMRmRCUVVFc1JVRkJaMEoyU0N4RFFVRkJMRVZCUVZVc1IwRkJSMDBzUTBGQlFTdzJRa0ZCTUVOS0xFTkJRVUVzVFVGQlpTeExRVU14U0N4SlFVRkJaMU1zVjBGQlFTeEZRVUZUTzAxQlExQTVVeXhEUVVGQkxFTkJRVTh3VWl4UFFVRkJMRU5CUVZGNlVTeERRVUZCTEVOQlFXRTdTVUZCUVN4TlFVYzVRbXBDTEVOQlFVRXNRMEZCVHpCU0xFOUJRVUVzUTBGQlVYcFJMRU5CUVVFc1NVRkZVa0VzUTBGQlFTeEhRVUZsYWtJc1EwRkJRU3hEUVVGUGEwa3NUVUZCUVN4RFFVRlBjRVFzVFVGQlFTeEhRVUZUYWtVc1EwRkJRU3hKUVVNdlEySXNRMEZCUVN4RFFVRlBjMU1zVDBGQlFTeEpRVU5RY2xJc1EwRkJRU3hIUVVGbGFrSXNRMEZCUVN4RFFVRlBObE1zWVVGQlFTeERRVUZqTEVsQlFVRXhTeXhYUVVGQkxFVkJRV2RDZGtnc1EwRkJRU3hGUVVGVkxFZEJRVWROTEVOQlFVRXNOa0pCUVRCRFNpeERRVUZCTEUxQlFXVXNTMEZETVVnc1NVRkJRV2RUTEZkQlFVRXNSVUZCVXp0TlFVTlFPVk1zUTBGQlFTeERRVUZQTUZJc1QwRkJRU3hEUVVGUmVsRXNRMEZCUVN4RFFVRmhPMGxCUVVFc1RVRkhPVUpxUWl4RFFVRkJMRU5CUVU4d1VpeFBRVUZCTEVOQlFWRjZVU3hEUVVGQkxFTkJSVzVDTzBWQlFVRXNUMEZEUldwQ0xFTkJRVUVzUTBGQlR6QlNMRTlCUVVFc1EwRkJVWHBSTEVOQlFVRXNRMEZGYmtJN1FVRkJRVHRCUVVWQkxFbEJRVWs0VWl4TFFVRkJMRWRCUVZFN1JVRkRWbkpDTEU5QlFVRXNSVUZCUVVFc1QwRkJRVHRGUVVOQlVTeFhRVUZCTEVWQlFVRkJMRmRCUVVFN1JVRkRRVU1zVTBGQlFTeEZRVUZCUVN4VFFVRkJPMFZCUTBGTkxGTkJRVUVzUlVGQlFVRXNVMEZCUVR0RlFVTkJReXhWUVVGQkxFVkJRVUZCTEZWQlFVRTdSVUZEUVVNc1kwRkJRU3hGUVVGQlFTeGpRVUZCTzBWQlEwRjZReXh0UWtGQlFTeEZRVUZCUVR0QlFVRkJPMEZCUjBZc1UwRkJVemhETEZkQlFWZG9WQ3hEUVVGQk8wVkJRMnhDTEUxQlFVMUZMRU5CUVVFc1IwRkJVenRKUVVGQk8wMUJRMVJ6UkN4TlFVRkJMRVZCUTBvMVF5eERRVUZCTzAxQlFVMXBTQ3hSUVVGQkxFVkJRMDVvU0R0SlFVRkJMRWxCUTBWWUxFTkJRVUU3UlVGRFNpeExRVUZMVlN4RFFVRkJMRU5CUVU4MFN5eEpRVUZCTEVsQlFWRjBUQ3hEUVVGQkxFTkJRVTg0U0N4UFFVRkJMRWxCUVZjNVNDeERRVUZCTEVOQlFVOXpSQ3hOUVVGQkxFTkJRVTkzUlN4UFFVRkJMRU5CUVZGRExFOUJRVUVzUlVGQlV6dEZRVU4wUkN4SlFVRkJSU3hYUVVGQkxFVkJRV2RDZEVnc1EwRkJRU3hGUVVGVkxFbEJRVWxFTEVOQlFVRXNRMEZCVDNkSUxGVkJRVUVzYTBKQlF6ZERlRVVzVDBGQlFTeERRVUZSTEVOQlFVTTFSQ3hEUVVGQkxFVkJRVWxGTEVOQlFVRTdTVUZEYkVKR0xFTkJRVUVzUTBGQlIybFVMRmxCUVVFc1EwRkJZU3d5UWtGQk1rSXZVeXhEUVVGQkxFTkJRVTA3UlVGQlFTeEpRVVZ1UkVFc1EwRkJRU3hEUVVGUGIxTXNUMEZCUVN4RFFVRlJPMGxCUTJKWkxHTkJRVUVzUlVGQlFXeFVMRU5CUVVFN1NVRkRRWEZTTEZOQlFVRXNSVUZCVjNwUkxFTkJRVUVzUTBGQlR6WkpMR05CUVVFc1VVRkJhVUlzU1VGQldUdEZRVUZCTEVWQlJXNUVPMEZCUVVFN1FVRkZRU3hUUVVGVE5ra3NVVUZCVVhSVExFTkJRVUU3UlVGRFpqdEpRVUZKYTFRc1kwRkJRU3hGUVVOR2FGUXNRMEZCUVR0SlFVRmpkMUlzVDBGQlFTeEZRVU5rT1ZFc1EwRkJRU3hKUVVGVk8wbEJRVWw1VVN4VFFVRkJMRVZCUTJSNFVTeERRVUZCTzBsQlFWTXdVQ3haUVVGQkxFVkJRMVI2VUN4RFFVRkJPMGxCUVZseFV5eG5Ra0ZCUVN4RlFVTmFiRk1zUTBGQlFUdEpRVUZuUW0xVExGbEJRVUVzUlVGRGFFSnNVeXhEUVVGQk8wbEJRVmx0VXl4WlFVRkJMRVZCUTFwb1V6dEZRVUZCTEZOQlExa3NUVUZCVm5KQ0xFTkJRVUVzUjBGQmJVSXNRMEZCUXl4SlFVRkpRU3hEUVVGQk8wVkJRelZDTEUxQlFVMTNRaXhEUVVGQkxFZEJRVk03UlVGRFppeExRVUZMUVN4RFFVRkJMRU5CUVU5blF5eE5RVUZCTEVOQlFVOW5TU3hKUVVGQkxFVkJRVTA3UlVGRGVrSm9TeXhEUVVGQkxFTkJRVTh5UWl4SlFVRkJMRU5CUVVzN1JVRkRXanRKUVVGTkswVXNUVUZCUVN4RlFVTktlRWNzUTBGQlFUdEpRVUZOYTFFc1kwRkJRU3hGUVVOT2FGRXNRMEZCUVR0SlFVRmpLMUFzWTBGQlFTeEZRVU5rT1ZBc1EwRkJRVHRKUVVGalowY3NVVUZCUVN4RlFVTmtMMFlzUTBGQlFUdEpRVUZSTUVJc1RVRkJRU3hGUVVOU2VrSTdSVUZCUVN4SlFVTkZVQ3hEUVVGQk8wVkJSMG9zU1VGR1FVRXNRMEZCUVN4RFFVRlBiMUVzWTBGQlFTeEpRVUZwUWl4SFFVTjRRbkJSTEVOQlFVRXNRMEZCVDIxUkxHTkJRVUVzU1VGQmFVSXNSMEZEY0VKdVVTeERRVUZCTEVOQlFVOTNSeXhQUVVGQkxFbEJRVmRxUnl4RFFVRkJMRU5CUVU5cFJ5eFBRVUZCTEVOQlFWRkRMRTlCUVVFc1JVRmhia01zVDBGYVNYSklMRU5CUVVFc1MwRkRSMjFDTEVOQlFVRXNRMEZCVHpCSUxHTkJRVUVzU1VGQmRVTXNUVUZCY2tKcVNTeERRVUZCTEVOQlFVOXBUeXhUUVVGQkxFZEJSVEZDTVU0c1EwRkJRU3hEUVVGUE1FZ3NZMEZCUVN4SlFVRnJRbXBKTEVOQlFVRXNRMEZCVDJsUExGTkJRVUVzUjBGQldURk9MRU5CUVVFc1EwRkJUMjFKTEdGQlFVRXNSMEZETlVReFNTeERRVUZCTEVOQlFVOXJVU3hQUVVGQkxFTkJRVkZzVVN4RFFVRkJMRU5CUVU5M1J5eFBRVUZCTEVOQlFWRkZMRTFCUVVFc1EwRkJUM0JFTEUxQlFVRXNSMEZCVTNSRUxFTkJRVUVzUTBGQlQybFBMRk5CUVVFc1JVRkJWeXhKUVVGSExFbEJRVThzUzBGRGFrVnFUeXhEUVVGQkxFTkJRVTlwVHl4VFFVRkJMRXRCUVdOcVR5eERRVUZCTEVOQlFVOXZTQ3hSUVVGQkxFTkJRVk01UkN4TlFVRkJMRWRCUVZNc1MwRkRka1IwUkN4RFFVRkJMRU5CUVU5clVTeFBRVUZCTEVOQlFWRnNVU3hEUVVGQkxFTkJRVTkzUnl4UFFVRkJMRU5CUVZFd1JDeFpRVUZCTEVWQlFXTXNTVUZCUnl4SlFVRlBMRXRCU25SRWJFc3NRMEZCUVN4RFFVRlBhMUVzVDBGQlFTeERRVUZSYkZFc1EwRkJRU3hEUVVGUGQwY3NUMEZCUVN4RFFVRlJSU3hOUVVGQkxFTkJRVTl3UkN4TlFVRkJMRVZCUVZFc1NVRkJSeXhKUVVGUExFdEJUek5FZEVRc1EwRkJRU3hEUVVGUGIxRXNZMEZCUVN4SFFVRnBRbWhSTEVOQlFVRXNSVUZEZUVKS0xFTkJRVUVzUTBGQlQyMVJMR05CUVVFc1IwRkJhVUk1VUN4RFFVRkJMRTlCUTNoQ1RDeERRVUZCTEVOQlFVOHlRaXhKUVVGQkxFTkJRVXM3UlVGSFpDeE5RVUZOYmtJc1EwRkJRU3hIUVVGNVF5eFhRVUY2UWtRc1EwRkJRU3hEUVVGUGJVa3NZVUZCUVN4SFFVRXlRakZKTEVOQlFVRXNRMEZCVDNsT0xHOUNRVUZCTEV0QlFYbENjRVVzU1VGQlFTeERRVUZMV1N4SlFVRkJMRU5CUVVzNVJDeFZRVUZCTEVOQlFWYzFSaXhEUVVGQkxFTkJRVTl0U1N4aFFVRkJMRVZCUVdVN1JVRkRia2tzU1VGQlNUZENMRU5CUVVFc1IwRkJaWFJITEVOQlFVRXNRMEZCVHpaUkxGbEJRVUVzU1VGQlowSTFVU3hEUVVGQk8wVkJRM1JEY1Vjc1EwRkJRU3hIUVVGbGRFY3NRMEZCUVN4RFFVRlBhMG9zWTBGQlFTeEpRVUZ0UWl4TlFVTXpRelZETEVOQlFVRXNTVUZCWjBKMFJ5eERRVUZCTEVOQlFVOXJTaXhqUVVGQkxFZEJRV2xDTlVNc1EwRkJRU3hIUVVGbGRFY3NRMEZCUVN4RFFVRlBhMG9zWTBGQlFTeEhRVVZvUlhwS0xFTkJRVUVzUTBGQlQyOVNMRmxCUVVFc1IwRkJaWFpMTEVOQlFVRTdSVUZEZEVJc1RVRkJUVU1zUTBGQlFTeEhRVUYxUWp0SlFVTjJRa2NzUTBGQlFTeEhRVUZ6UWp0RlFVTTFRaXhKUVVGSlJTeERRVUZCTEVkQlFXTnVTQ3hEUVVGQkxFTkJRVTl6VEN4WFFVRkJPMFZCUVVFc1MwRkRUeXhOUVVGeVFqZE1MRU5CUVVFc1IwRkRWRUVzUTBGQlFTeEhRVUZ0UWs4c1EwRkJRU3hEUVVGUGNWSXNZVUZCUVN4RFFVRmpjbElzUTBGQlFTeERRVUZQTUVjc1RVRkJRU3hEUVVGUGJVTXNUVUZCUVN4RFFVRlBja3NzUTBGQlFTeEpRVUZOUVN4RFFVRkJMRU5CUVVkdlRTeFRRVUZCTEVOQlFWVkRMRkZCUVVFc1EwRkJVM1JMTEVOQlFVRXNRMEZCVDI5TkxHZENRVUZCTEVkQlFXMUNMRTFCUlc1SWVFWXNRMEZCUVN4SFFVRmpNVWdzUTBGQlFUdEZRVVZvUWl4TlFVRk5ORWdzUTBGQlFTeEhRVUYxUWl4WFFVRmthRWtzUTBGQlFTeExRVUY1UWtFc1EwRkJRVHRKUVVOc1EydEpMRU5CUVVFc1IwRkJkVUlzVjBGQlpHeEpMRU5CUVVFc1MwRkJlVUpCTEVOQlFVRTdSVUZEZUVNc1NVRkJTVzlKTEVOQlFVRXNSMEZCYTBJN1NVRkRiRUpETEVOQlFVRXNSMEZCYVVJN1JVRkZja0lzU1VGQlNXcEpMRU5CUVVFc1IwRkJiVUp2U0N4RFFVRkJMRVZCUVdNN1NVRkRia05aTEVOQlFVRXNSMEZCYTBJMFFpeEpRVUZCTEVOQlFVdFBMRWRCUVVFc1EwRkJTUzlETEVOQlFVRXNSMEZCWlhCSUxFTkJRVUVzUlVGQmEwSmpMRU5CUVVFc1EwRkJUMnRLTEdOQlFVRTdTVUZEYmtVc1MwRkJTeXhKUVVGSmFrd3NRMEZCUVN4SFFVRkpMRWRCUVVkQkxFTkJRVUVzUjBGQlNYRkpMRU5CUVVFc1IwRkJaWEJJTEVOQlFVRXNSVUZCYTBKcVFpeERRVUZCTEVsQlFVc3NSMEZCUnp0TlFVTXpSQ3hOUVVGTlJTeERRVUZCTEVkQlFWRkdMRU5CUVVFc1IwRkJTVFpMTEVsQlFVRXNRMEZCUzBNc1MwRkJRU3hEUVVGTk9Vc3NRMEZCUVN4SFFVRkpNRUlzUTBGQlFTeERRVUZQYjBRc1RVRkJRU3hKUVVGVmNFUXNRMEZCUVN4RFFVRlBiMFFzVFVGQlFUdE5RVU42UkhkRUxFTkJRVUVzUTBGQmNVSnNSQ3hKUVVGQkxFTkJRVXN4UkN4RFFVRkJMRU5CUVU5dlJDeE5RVUZCTEVkQlFWTTFSU3hEUVVGQkxFZEJRVkVzUlVGRGNFUTdTVUZCUVR0RlFVTkdMRTlCUVU4c1NVRkJTV1VzUTBGQlFTeEhRVUY1UTA4c1EwRkJRU3hEUVVGUE1FY3NUVUZCUVN4RFFVRlBjRVFzVFVGQlFTeEhRVUYzUWl4SlFVRm1kVVFzUTBGQlFTeEZRVUZyUWp0SlFVTXpSbUVzUTBGQlFTeEhRVUZwUWpKQ0xFbEJRVUVzUTBGQlMwOHNSMEZCUVN4RFFVRkpia3NzUTBGQlFTeEpRVUZ2UWs4c1EwRkJRU3hEUVVGUE1FY3NUVUZCUVN4RFFVRlBjRVFzVFVGQlFTeEhRVUYzUWl4SlFVRm1kVVFzUTBGQlFTeEhRVUZ0UW5SSExFTkJRVUVzUTBGQlQydEtMR05CUVVFN1NVRkRMMFlzUzBGQlN5eEpRVUZKYWt3c1EwRkJRU3hIUVVGSkxFZEJRVWRCTEVOQlFVRXNSMEZCU1d0S0xFTkJRVUVzUlVGQlowSnNTaXhEUVVGQkxFbEJRVXNzUjBGQlJ6dE5RVU14UXl4TlFVRk5SU3hEUVVGQkxFZEJRVkZHTEVOQlFVRXNSMEZCU1RaTExFbEJRVUVzUTBGQlMwTXNTMEZCUVN4RFFVRk5PVXNzUTBGQlFTeEhRVUZKTUVJc1EwRkJRU3hEUVVGUGIwUXNUVUZCUVN4SlFVRlZjRVFzUTBGQlFTeERRVUZQYjBRc1RVRkJRVHROUVVONlJESkVMRU5CUVVFc1EwRkJiMEp5UkN4SlFVRkJMRU5CUVV0c1JpeERRVUZCTEVOQlF6TkNPMGxCUVVFN1JVRkRSanRGUVhOQ1FTeEpRWEpDU1RaSkxFTkJRVUVzU1VGRFJsUXNRMEZCUVN4RFFVRnhRakZGTEU5QlFVRXNRMEZCVVRWRUxFTkJRVUU3U1VGRE0wSjNRaXhEUVVGQkxFTkJRVTh3Unl4TlFVRkJMRU5CUVU5c1NTeERRVUZCTEVWQlFVOXpWQ3hwUWtGQlFTeEpRVUZ2UWl4SFFVTjZRM2hTTEVOQlFVRXNRMEZCVTNsU0xFOUJRVUVzUTBGQlVTOVNMRU5CUVVFc1EwRkJUekJITEUxQlFVRXNRMEZCVDJ4SkxFTkJRVUVzU1VGREwwSjNRaXhEUVVGQkxFTkJRVTh3Unl4TlFVRkJMRU5CUVU5c1NTeERRVUZCTEVWQlFVOXpWQ3hwUWtGQlFTeEpRVUZ2UWl4RFFVRkxPMFZCUVVFc1NVRkhPVU42U3l4RFFVRkJMRWxCUTBaS0xFTkJRVUVzUTBGQmIwSTNSU3hQUVVGQkxFTkJRVkUxUkN4RFFVRkJPMGxCUXpGQ2QwSXNRMEZCUVN4RFFVRlBNRWNzVFVGQlFTeERRVUZQYkVrc1EwRkJRU3hGUVVGUGMxUXNhVUpCUVVFc1NVRkJiMElzUjBGRGVrTjRVaXhEUVVGQkxFTkJRVk13VWl4TlFVRkJMRU5CUVU5b1V5eERRVUZCTEVOQlFVOHdSeXhOUVVGQkxFTkJRVTlzU1N4RFFVRkJMRWxCUXpsQ2QwSXNRMEZCUVN4RFFVRlBNRWNzVFVGQlFTeERRVUZQYkVrc1EwRkJRU3hGUVVGUGMxUXNhVUpCUVVFc1NVRkJiMElzUTBGQlN6dEZRVUZCTEVsQlIyeEVPVklzUTBGQlFTeERRVUZQYVZNc1dVRkJRU3hKUVVOelFpeFhRVUY2UWpGU0xFTkJRVUVzUTBGQlQyMUpMR0ZCUVVFc1NVRkRWREZKTEVOQlFVRXNRMEZCVDJsSExGbEJRVUVzU1VGRlRERkdMRU5CUVVFc1EwRkJUMnRMTEcxQ1FVRkJMRWxCUTFSNlN5eERRVUZCTEVOQlFVOHdTeXhyUWtGQlFTeEpRVVZNZEV3c1EwRkJRU3hGUVVOR0xFbEJRVWt3U0N4RFFVRkJMRU5CUVhGQ2VFUXNUVUZCUVN4SFFVRlRMRXRCUVV0cFJTeERRVUZCTzBsQlEzSkRMRk5CUVRoQ0xFMUJRVzVDTjBrc1EwRkJRU3hGUVVGblF6dE5RVU42UXl4TlFVRk5SaXhEUVVGQkxFZEJRWGRDZDBJc1EwRkJRU3hEUVVGUGMwZ3NWVUZCUVN4RFFVRlhTQ3hEUVVGQk8xRkJSVEZEZWtrc1EwRkJRU3hIUVVSdlFuTkNMRU5CUVVFc1EwRkJUM05JTEZWQlFVRXNRMEZCVjBnc1EwRkJRU3hIUVVGalRTeERRVUZCTEVsQlEzcENha29zUTBGQlFUdE5RVU0zUW5GQ0xFTkJRVUVzUjBGRFJrY3NRMEZCUVN4RFFVRlBLMDhzV1VGQlFTeERRVUZoTDA4c1EwRkJRU3hEUVVGUE9Fd3NVMEZCUVN4SFFVRlpjRTRzUTBGQlFTeExRVVYyUTNOQ0xFTkJRVUVzUTBGQlQydFJMRTlCUVVFc1EwRkJVUzlKTEVOQlFVRXNSMEZCWTAwc1EwRkJRU3hGUVVGcFFpeEpRVUZITEVsQlFVOHNTVUZEY0VSdVNTeERRVUZCTEV0QlEwWlZMRU5CUVVFc1EwRkJUMnRUTEU5QlFVRXNRMEZCVVd4VExFTkJRVUVzUTBGQlQzbEdMRmxCUVVFc1MwRkJhVUlzVjBGQlZ5eGhRVUZoTDBjc1EwRkJRU3hGUVVNdlJITkNMRU5CUVVFc1EwRkJUMjFUTEdWQlFVRXNRMEZCWjBKRExHZENRVUZCTEVkQlFXMUNjRk1zUTBGQlFTeERRVUZQT0V3c1UwRkJRU3hGUVVkMlJEdEpRVUZCTEU5QlEwMTRUU3hEUVVGQkxFdEJRMFpWTEVOQlFVRXNRMEZCVHpCUkxGZEJRVUVzUTBGQldXaFRMRU5CUVVFc1JVRkJaMElzU1VGQlJ5eEpRVUZQTEVsQlF6ZERjMElzUTBGQlFTeERRVUZQYlZNc1pVRkJRU3hEUVVGblFrTXNaMEpCUVVFc1IwRkJiVUp3VXl4RFFVRkJMRU5CUVU4NFRDeFRRVUZCTzBWQlFVRXNUMEZIYUVRc1NVRkJTVGRGTEVOQlFVRXNRMEZCYjBJelJDeE5RVUZCTEVkQlFWTXNTMEZCU3l0RUxFTkJRVUVzUlVGRE0wTXNVMEZCT0VJc1RVRkJia0l6U1N4RFFVRkJMRVZCUVdkRE8wbEJRM3BETEUxQlFVMUdMRU5CUVVFc1IwRkJkMEozUWl4RFFVRkJMRU5CUVU5elNDeFZRVUZCTEVOQlFWZElMRU5CUVVFN1RVRkZNVU42U1N4RFFVRkJMRWRCUkc5Q2MwSXNRMEZCUVN4RFFVRlBjMGdzVlVGQlFTeERRVUZYU0N4RFFVRkJMRWRCUVdOUExFTkJRVUVzU1VGRGVrSnNTaXhEUVVGQk8wbEJRemRDY1VJc1EwRkJRU3hIUVVOR1J5eERRVUZCTEVOQlFVOHJUeXhaUVVGQkxFTkJRV0V2VHl4RFFVRkJMRU5CUVU4NFRDeFRRVUZCTEVkQlFWbHdUaXhEUVVGQkxFdEJSWFpEYzBJc1EwRkJRU3hEUVVGUGExRXNUMEZCUVN4RFFVRlJMMGtzUTBGQlFTeEhRVUZqVHl4RFFVRkJMRVZCUVdkQ0xFbEJRVWNzU1VGQlR5eEpRVU51UkhCSkxFTkJRVUVzUzBGRFJsVXNRMEZCUVN4RFFVRlBhMU1zVDBGQlFTeERRVUZSYkZNc1EwRkJRU3hEUVVGUGVVWXNXVUZCUVN4TFFVRnBRaXhYUVVGWExHRkJRV0V2Unl4RFFVRkJMRVZCUXk5RWMwSXNRMEZCUVN4RFFVRlBiVk1zWlVGQlFTeERRVUZuUWtNc1owSkJRVUVzUjBGQmJVSndVeXhEUVVGQkxFTkJRVTg0VEN4VFFVRkJMRVZCUjNaRU8wVkJRVUVzVDBGRFJUbE1MRU5CUVVFc1EwRkJUekJSTEZkQlFVRXNRMEZCV1doVExFTkJRVUVzUlVGQlowSXNTVUZCUnl4SlFVRlBPMFZCVFc1RUxFbEJSa0Z6UWl4RFFVRkJMRU5CUVU5dlVTeGpRVUZCTEVkQlFXbENhRkVzUTBGQlFTeEZRVU40UWtvc1EwRkJRU3hEUVVGUGJWRXNZMEZCUVN4SFFVRnBRamxRTEVOQlFVRXNSVUZEY0VKTUxFTkJRVUVzUTBGQlQzRlRMRlZCUVVFc1NVRkJZM0pUTEVOQlFVRXNRMEZCVDNGVExGVkJRVUVzUTBGQlYwTXNUMEZCUVN4TFFVRlpOVk1zUTBGQlFTeEZRVUZqTzBsQlEyNUZMRTFCUVUxc1FpeERRVUZCTEVkQlFXRTdUVUZEYWtKclZDeGpRVUZCTEVWQlFVRm9WQ3hEUVVGQk8wMUJRMEYzVWl4UFFVRkJMRWRCUVZNN1RVRkRWRXdzVTBGQlFTeEZRVUZCZUZFc1EwRkJRVHROUVVOQk1GQXNXVUZCUVN4RlFVRkJlbEFzUTBGQlFUdE5RVU5CY1ZNc1owSkJRVUVzUlVGQlFXeFRMRU5CUVVFN1RVRkRRVzFUTEZsQlFVRXNSMEZCWXp0SlFVRkJPMGxCUlZwcVRpeExRVUZCTEVOQlFVMUxMRTlCUVVFc1EwRkJVV2hHTEVOQlFVRXNRMEZCVDNGVExGVkJRVUVzUTBGQlYwTXNUMEZCUVN4SlFVTnNRM1JUTEVOQlFVRXNRMEZCVDNGVExGVkJRVUVzUTBGQlYwTXNUMEZCUVN4RFFVRlJiRkVzVDBGQlFTeERRVUZSTVVRc1EwRkJRVHROUVVGQkxFTkJRek5DUVN4RFFVRkJMRU5CUVVWdFJDeFRRVUZCTEVsQlFXRnVSQ3hEUVVGQkxFTkJRVVZ6UkN4TlFVRkJMRU5CUVU5blNTeEpRVUZCTEVsQlFVMTBUQ3hEUVVGQkxFTkJRVVZ2VXl4UFFVRkJMRU5CUVZGMFV5eERRVUZCTEVOQlFWYzdTVUZCUVN4TFFVVnFSSGRDTEVOQlFVRXNRMEZCVDNGVExGVkJRVUVzUTBGQlYwTXNUMEZCUVN4WlFVRnRRblJUTEVOQlFVRXNRMEZCVDNWVExGZEJRVUVzU1VGQlpYWlRMRU5CUVVFc1EwRkJUM0ZUTEZWQlFVRXNRMEZCVjBNc1QwRkJRU3hEUVVGUmRGRXNUVUZCUVN4RFFVRlBaMGtzU1VGQlFTeEpRVU55UjJoTExFTkJRVUVzUTBGQlQzRlRMRlZCUVVFc1EwRkJWME1zVDBGQlFTeERRVUZSZUVJc1QwRkJRU3hEUVVGUmRGTXNRMEZCUVN4RFFVVjBRenRGUVVGQk8wVkJRMEYzUWl4RFFVRkJMRU5CUVU4eVFpeEpRVUZCTEVOQlFVc3NWVUZEWkR0QlFVRkJPMEZCUlVFc1UwRkJVelpSTEZsQlFVRTdSVUZEVUN4TlFVRk5hRlVzUTBGQlFTeEhRVUZUTzBsQlFVRTdUVUZEVkhkRUxFMUJRVUVzUlVGRFNuUkVMRU5CUVVFN1RVRkJUVEpJTEZGQlFVRXNSVUZEVG1wSU8wbEJRVUVzU1VGRFJWb3NRMEZCUVR0RlFVTktMRXRCUVV0RkxFTkJRVUVzUTBGQlQzTk1MRWxCUVVFc1NVRkJVWGhNTEVOQlFVRXNRMEZCVDJkSkxFOUJRVUVzU1VGQlYyaEpMRU5CUVVFc1EwRkJUM2RFTEUxQlFVRXNRMEZCVDNkRkxFOUJRVUVzUTBGQlVVTXNUMEZCUVN4RlFVRlRPMFZCUTNKRmFra3NRMEZCUVN4RFFVRlBlVlFzV1VGQlFUdEZRVU5RTEUxQlFVMDFVeXhEUVVGQkxFZEJRV2xDTzBWQlEzWkNZaXhEUVVGQkxFTkJRVTlyU1N4TlFVRkJMRU5CUVU5MFJTeFBRVUZCTEVOQlFWRTFSQ3hEUVVGQk8wbEJRM0JDTEUxQlFVMUZMRU5CUVVFc1VVRkJORU1zVFVGQk4wSkdMRU5CUVVFc1EwRkJVV2xWTEdkQ1FVRkJMRWRCUVhGR0xFbEJRV3hFYWxVc1EwRkJRU3hEUVVGUk1GQXNXVUZCUVN4RFFVRmhMRFpDUVVGcFF6RlFMRU5CUVVFc1EwRkJVV2xWTEdkQ1FVRkJPMGxCUXpsSWNGUXNRMEZCUVN4RFFVRmxXQ3hEUVVGQkxFbEJRVk5HTEVOQlFVODdSVUZCUVN4SlFVVnFRMEVzUTBGQlFTeERRVUZQYTBrc1RVRkJRU3hEUVVGUGRFVXNUMEZCUVN4RFFVRlJOVVFzUTBGQlFUdEpRVU53UWtFc1EwRkJRU3hEUVVGUk9FOHNaVUZCUVN4RFFVRm5RaXd3UWtGQk1FSTdSVUZCUVN4SlFVVndSR3BQTEVOQlFVRXNRMEZCWlN0RExFOUJRVUVzUTBGQlVUVkVMRU5CUVVFN1NVRkRja0paTEVOQlFVRXNRMEZCVXpSVExFMUJRVUVzUTBGQlQzaFVMRU5CUVVFc1EwRkJVVHRGUVVGQkxFbEJSVEZDUVN4RFFVRkJMRU5CUVU5NVZDeFpRVUZCTEVsQlExQjZWQ3hEUVVGQkxFTkJRVTh3VWl4UFFVRkJMRU5CUVZFeFVpeERRVUZCTEVOQlFVOTNVQ3hUUVVGQkxFVkJRVmNzUlVGRGJrTTdRVUZCUVR0QlFVVkJMRWxCUVVsb1JTeEpRVUZCTEVkQlFVODdSVUZEVkhkSUxGVkJRVUVzUlVGQlFVRXNWVUZCUVR0RlFVTkJWaXhQUVVGQkxFVkJRVUZCTEU5QlFVRTdSVUZEUVRCQ0xGZEJRVUVzUlVGQlFVRTdRVUZCUVR0QlFVZEdMRk5CUVZORkxHTkJRV05zVlN4RFFVRkJPMFZCUTNKQ0xFMUJRVTFGTEVOQlFVRXNSMEZCVXp0RlFVTm1MRXRCUVV0QkxFTkJRVUVzUTBGQlQzTkVMRTFCUVVFc1EwRkJUekpSTEdGQlFVRXNTVUZCYVVKcVZTeERRVUZCTEVOQlFVOXpSQ3hOUVVGQkxFTkJRVTkxU1N4aFFVRkJMRWxCUVdsQ04wd3NRMEZCUVN4RFFVRlBhMVVzVVVGQlFTeEpRVUZaYkZVc1EwRkJRU3hEUVVGUGMwUXNUVUZCUVN4RFFVRlBhMGNzVDBGQlFTeEZRVUZUTzBWQlF6ZEhMRTFCUVUwNVNTeERRVUZCTEVkQlFYbERMR2RDUVVGd1ExWXNRMEZCUVN4RFFVRlBjMFFzVFVGQlFTeERRVUZQTmxFc2FVSkJRVUVzUjBGQmIwTnVWU3hEUVVGQkxFTkJRVTg0UkN4RlFVRkJMRWRCUVVzNVJDeERRVUZCTEVOQlFVOTNSaXhUUVVGQk8wVkJRelZGZUVZc1EwRkJRU3hEUVVGUE9FMHNVMEZCUVN4TFFVTlVPVTBzUTBGQlFTeERRVUZQTWtVc2JVSkJRVUVzU1VGQmMwSXNTVUZGTDBKcVJTeERRVUZCTEVOQlFVZE9MRXRCUVVFc1EwRkJUV2RWTEUxQlFVRXNSMEZCVXl4UlFVTnNRakZVTEVOQlFVRXNRMEZCUjA0c1MwRkJRU3hEUVVGTloxVXNUVUZCUVN4SFFVRlRkRlVzUTBGQlFTeEhRVUZUTEdGQlFXRXNVVUZEY0VORkxFTkJRVUVzUTBGQlR6aE5MRk5CUVVFc1NVRkRWSEpLTEhGQ1FVRkJMRU5CUVhOQ08wbEJRM0JDZWtRc1EwRkJRU3hEUVVGUE1rVXNiVUpCUVVFc1NVRkJjMElzUTBGQlN6dEZRVUZCTEVWQlIzaERPMEZCUVVFN1FVRkZRU3hUUVVGVE1GQXNaMEpCUVVFN1JVRkRVQ3hOUVVGTmRsVXNRMEZCUVN4SFFVRlRPMFZCUTFoQkxFTkJRVUVzUTBGQlQzZEVMRTFCUVVFc1EwRkJUM1ZKTEdGQlFVRXNTVUZCYVVJdlRDeERRVUZCTEVOQlFVOXZWU3hSUVVGQkxFbEJRVmx3VlN4RFFVRkJMRU5CUVU5M1JDeE5RVUZCTEVOQlFVOXJSeXhQUVVGQkxFdEJSMmhGTVVvc1EwRkJRU3hEUVVGUFowNHNVMEZCUVN4TFFVTlVhRTRzUTBGQlFTeERRVUZQTmtVc2JVSkJRVUVzU1VGQmMwSXNTVUZGTDBJM1JTeERRVUZCTEVOQlFUSkRMR2RDUVVGd1EwRXNRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQTmxFc2FVSkJRVUVzUjBGQmIwTXNUMEZCVHl4aFFVRmhMMVFzUzBGQlFTeERRVUZOWjFVc1RVRkJRU3hIUVVGVExFbEJRM2hHZEZVc1EwRkJRU3hEUVVGUFowNHNVMEZCUVN4SlFVTlVja29zY1VKQlFVRXNRMEZCYzBJN1NVRkRjRUl6UkN4RFFVRkJMRU5CUVU4MlJTeHRRa0ZCUVN4SlFVRnpRaXhEUVVGTE8wVkJRVUVzUjBGSGVFTTdRVUZCUVR0QlFVVkJMRWxCUVVreVVDeFZRVUZCTEVkQlFXRTdSVUZEWms0c1lVRkJRU3hGUVVGQlFTeGhRVUZCTzBWQlEwRkxMR1ZCUVVFc1JVRkJRVUU3UVVGQlFUdEJRVWxHTEZOQlFWTkZMR1ZCUVdWNlZTeERRVUZCTEVWQlFWVkZMRU5CUVVFN1JVRmhhRU1zV1VGYVlTeE5RVUZVUVN4RFFVRkJMRXRCUTBaQkxFTkJRVUVzUjBGQlR5eFBRVVZVTEZOQlFWTkJMRVZCUVdOVkxFTkJRVUU3U1VGRGNrSXNTMEZCUzBFc1EwRkJRU3hKUVVGTlFTeERRVUZCTEV0QlFVOHNTVUZCUVZRc2EwSkJRVUVzVDBGQmFVSlRMRU5CUVVFc1MwRkJUeXhKUVVGQldDeHJRa0ZCUVN4TFFVRmhMRTlCUVU4N1NVRkRNVVJYTEVOQlFVRXNRMEZCUnpoVUxGbEJRVUVzUzBGQll6bFVMRU5CUVVFc1IwRkJTMEVzUTBGQlFTeERRVUZIT0ZRc1dVRkJRVHRKUVVNM1FpeE5RVUZOTjFRc1EwRkJRU3hIUVVGUlJDeERRVUZCTEVOQlFVYzRUaXhQUVVGQkxFTkJRVkV4VHl4RFFVRkJPMGxCUTNwQ0xFOUJRVXRoTEVOQlFVRXNTVUZCVlVRc1EwRkJRU3hEUVVGSEsxUXNWMEZCUVN4SFFVZFlPVlFzUTBGQlFTeEpRVUZUV0N4RFFVRkJMRU5CUVdOVkxFTkJRVUVzUTBGQlJ5dFVMRmRCUVVFc1IwRkJZME1zU1VGQlFTeEpRVVowUXl4SlFVZFlPMFZCUVVFc1EwRkRUeXhEUVVGak1WVXNRMEZCUVN4RFFVTjJRanRCUVVGQk8wRkJRMEVzVTBGQlV6SlZMR0ZCUVdFM1ZTeERRVUZCTzBWQlEzQkNMRTFCUVUxRkxFTkJRVUVzUjBGQlV6dEpRVU5VVlN4RFFVRkJMRWRCUVZjc1NVRkJRVlFzYTBKQlFVRTdTVUZEV0ZVc1EwRkJRU3hIUVVGVExFbEJRVUZhTEd0Q1FVRkJPMGxCUTFSaExFTkJRVUVzUjBGQlQxb3NRMEZCUVN4RFFVRlBlVlFzWlVGQlFUdEZRVU53UWpkVExFTkJRVUVzUTBGQlMyZFZMRTlCUVVFc1EwRkJVVEZRTEVsQlFVRXNRMEZCUzNCR0xFTkJRVUU3UlVGRGJFSTdTVUZCVFhkRUxFMUJRVUVzUlVGRFNuWkRMRU5CUVVFN1NVRkJUWGxUTEU5QlFVRXNSVUZEVG5oVExFTkJRVUU3U1VGQlR5dEhMRTlCUVVFc1JVRkRVRFZITzBWQlFVRXNTVUZEUlc1Q0xFTkJRVUU3UlVGRFNpeExRVUZMYlVJc1EwRkJRU3hGUVVGVE8wVkJRMlFzUzBGQlMwb3NRMEZCUVN4RFFVRlBhMVFzWVVGQlFTeEpRVUYxUXl4WlFVRjBRbTVWTEVOQlFVRXNRMEZCVFN0VkxGZEJRVUVzUlVGQmVVSTdSVUZETlVRc1NVRkJTVGRWTEVOQlFVRXNRMEZCVDNkUkxGTkJRVUVzU1VGQllYcFFMRU5CUVVFc1EwRkJUekJRTERoQ1FVRkJMRVZCUXpkQ08wVkJRVUVzUTBGRlIzcFJMRU5CUVVFc1EwRkJUM2RSTEZOQlFVRXNTVUZCWVhwUUxFTkJRVUVzUTBGQlQzbEpMRTlCUVVFc1NVRkJWM3BKTEVOQlFVRXNRMEZCVDNWTExFbEJRVUVzU1VGRGFFUjBUQ3hEUVVGQkxFTkJRVTl2VXl4UFFVRkJPMFZCUlZRc1NVRkJTVGxSTEVOQlFVRXNSMEZCU1hoQ0xFTkJRVUU3UlVGRFNuZENMRU5CUVVFc1EwRkJSWGRVTEdGQlFVRXNTMEZCWlhoVUxFTkJRVUVzUjBGQlNVRXNRMEZCUVN4RFFVRkZkMVFzWVVGQlFUdEZRVU16UWl4SlFVRkpkRlFzUTBGQlFTeEhRVUZYUml4RFFVRkJMRU5CUVVWMVF5eE5RVUZCTzBWQlEycENMRWxCUVdsRExHTkJRVGRDT1VNc1EwRkJRU3hEUVVGUGIxUXNhVUpCUVVFc1MwRkRTbTVWTEVOQlFVRXNRMEZCVDNkR0xGTkJRVUVzUTBGQlZUSkhMRkZCUVVFc1EwRkJVek5MTEVOQlFVRXNSMEZCVnp0RlFVVTFReXhKUVVGSkxGZEJRVmRHTEVOQlFVRXNTVUZCYVVJc1RVRkJXa0VzUTBGQlFTeERRVUZGZVZRc1MwRkJRU3hGUVVGaE8wVkJRMjVETEVsQlFVa3NXVUZCV1hwVUxFTkJRVUVzU1VGQlMwRXNRMEZCUVN4RFFVRkZNRlFzVFVGQlFTeEhRVUZUTEVkQlFVYzdSVUZEYmtNc1NVRkJTWEJWTEVOQlFVRXNRMEZCUzNGVkxGTkJRVUVzU1VGQllYSlZMRU5CUVVFc1EwRkJTM05WTEU5QlFVRXNSVUZCVXp0RlFVZHdReXhOUVVGTmVGUXNRMEZCUVN4TFFVRjVRbGdzUTBGQlFTeERRVUZQYjFVc1kwRkJRU3hKUVVFMFF5eFBRVUV4UW5CVkxFTkJRVUVzUTBGQlQyOVZMR05CUVVFN1NVRkZla1I0VkN4RFFVRkJMRWRCUVZrM1FpeERRVUZCTEVOQlFVMXpWaXhaUVVGQkxFZEJRV1YwVml4RFFVRkJMRU5CUVUxelZpeFpRVUZCTEV0QlFXbENkRllzUTBGQlFTeERRVUZOZFZZc1NVRkJRVHRGUVVOb1JUTlVMRU5CUVVFc1NVRkJkMEpLTEVOQlFVRXNRMEZCUlhWRExFMUJRVUVzU1VGQlZYWkRMRU5CUVVFc1EwRkJSWFZETEUxQlFVRXNRMEZCVDNsU0xGVkJRVUVzU1VGQll6TlVMRU5CUVVFc1MwRkROMFJJTEVOQlFVRXNSMEZCVjBjc1EwRkJRU3hEUVVGVk8wVkJSWFpDTEUxQlFVMURMRU5CUVVFc1IwRkJiMEppTEVOQlFVRXNRMEZCVDNkVkxHbENRVUZCTEVkQlFXOUNlRlVzUTBGQlFTeERRVUZQZDFVc2FVSkJRVUVzUjBGQmIwSXNTVUZCU1hoVkxFTkJRVUVzUTBGQlQyOVZMR05CUVVFN1NVRkRja1owVkN4RFFVRkJMRTFCUVc5Q1VDeERRVUZCTEVOQlFVVjFReXhOUVVGQkxFdEJRVlYyUXl4RFFVRkJMRU5CUVVWMVF5eE5RVUZCTEVOQlFVOTVVaXhWUVVGQk8wVkJSeTlETEVsQlFVbDJWU3hEUVVGQkxFTkJRVTk1VlN4VFFVRkJMRXRCUVdNelZDeERRVUZCTEVkQlFXbENNRk1zWTBGQlFTeERRVUZsTTFNc1EwRkJRU3hGUVVGdFFrb3NRMEZCUVN4SlFVRlpRU3hEUVVGQkxFTkJRVk5uVGl4UFFVRkJMRU5CUVZFMVRTeERRVUZCTEVsQlJYWkhMR0ZCUkVFMVFpeERRVUZCTEVOQlFVOTVWaXhWUVVGQkxFbEJRV0U3UlVGSGRFSXNTVUZCU1RGVkxFTkJRVUVzUTBGQlR6SlZMRmxCUVVFc1MwRkRTbXhWTEVOQlFVRXNRMEZCVTJkT0xFOUJRVUVzUTBGQlVYcE9MRU5CUVVFc1EwRkJUekpWTEZsQlFVRXNSMEZCWlR0RlFVVTVRekZWTEVOQlFVRXNRMEZCVVRKVkxGRkJRVUVzUjBGQlYzSlZMRU5CUVVFc1EwRkJSWE5WTEV0QlFVRXNSVUZEY2tJMVZTeERRVUZCTEVOQlFWRTJWU3hSUVVGQkxFZEJRVmQyVlN4RFFVRkJMRU5CUVVWM1ZTeExRVUZCTzBWQlEzSkNMRTFCUVUxb1ZTeERRVUZCTEVkQlFWTmtMRU5CUVVFc1EwRkJVVEpWTEZGQlFVRTdTVUZEYWtKNFRpeERRVUZCTEVkQlFWTnVTQ3hEUVVGQkxFTkJRVkUyVlN4UlFVRkJPMGxCU1dwQ2VrNHNRMEZCUVN4SFFVRnhRbkpJTEVOQlFVRXNRMEZCVDJkV0xHdENRVUZCTEVsQlFYTkNhRllzUTBGQlFTeERRVUZQYVZZc2NVSkJRVUU3U1VGRGVrUjZUaXhEUVVGQkxFZEJRWEZDZUVnc1EwRkJRU3hEUVVGUGExWXNhMEpCUVVFc1NVRkJjMEpzVml4RFFVRkJMRU5CUVU5dFZpeHhRa0ZCUVR0RlFVTXZSQ3hKUVVGSk9VNHNRMEZCUVN4TFFVRjFRblJITEVOQlFVRXNTVUZCVlhsSExFTkJRVUVzU1VGQmMwSjZSeXhEUVVGQkxFbEJRVlZ1UWl4RFFVRkJMRU5CUVU5M1ZpeFZRVUZCTEVkQlFXRTFUaXhEUVVGQkxFZEJRWEZDTzBsQlF6VkhMRWxCUVRKQ0xHTkJRWFpDU0N4RFFVRkJMRVZCUjBZN1NVRkdRWFJKTEVOQlFVRXNRMEZCVFhOWExHTkJRVUVzUlVGSlZqdEZRVUZCTzBWQlEwRm9VQ3hOUVVGQkxFTkJRVTlETEUxQlFVRXNRMEZCVDNwSExFTkJRVUVzUlVGQlRUdEpRVU5zUW5GVkxGTkJRVUVzUjBGQlZ6dEpRVU5ZUXl4UFFVRkJMRWRCUVZNN1NVRkRWRzFDTEcxQ1FVRkJMRWRCUVhGQ08wbEJRM0pDUXl4WFFVRkJMRTlCUVdFN1NVRkRZa01zVjBGQlFTeFBRVUZoTzBWQlFVRXNTVUZGWm5aV0xFTkJRVUVzUTBGQlVYZFdMRTFCUVVFc1IwRkJVekZWTEVOQlFVRXNSVUZEYWtKa0xFTkJRVUVzUTBGQlVYbFdMRTFCUVVFc1IwRkJVM1JQTEVOQlFVRXNSVUZEYWtKMlNDeERRVUZCTEVOQlFVczRWaXhqUVVGQkxFZEJRV2xDTEVsQlFVRkRMRmRCUVVFc1MwRkRkRUl6Vnl4RFFVRkJMRU5CUVU5NVZpeFZRVUZCTEVsQlFXRXNSMEZEY0VKNlZpeERRVUZCTEVOQlFVODBSeXhWUVVGQkxFbEJRMUExUnl4RFFVRkJMRU5CUVU4MFZ5eGpRVUZCTEZGQlFXbENMRWRCUTNCQ04xWXNRMEZCUVN4RFFVRlBPRllzVTBGQlFTeEhRVUZaTEUxQlFVZHFWeXhEUVVGQkxFTkJRVXRyVnl4clFrRkJRU3hKUVVGeFFqdEZRVU53UkN4SlFVRkpjazhzUTBGQlFTeEpRVUZwUWp0RlFVTnFRbXBJTEVOQlFVRXNRMEZCVTNWV0xFOUJRVUVzUTBGQlVXNVhMRU5CUVVFc1EwRkJTMjlYTEdsQ1FVRkJMRTFCUTNoQ2RrOHNRMEZCUVN4SlFVRnBRaXhIUVVOVExHRkJRWFJDYWtnc1EwRkJRU3hEUVVGVGVWWXNVVUZCUVN4TFFVTlljbGNzUTBGQlFTeERRVUZMY1ZVc1UwRkJRU3hKUVVGWkxFdEJSMnBDZGxVc1EwRkJRU3hEUVVGVGQxY3NZVUZCUVN4SlFVRnBRbmhYTEVOQlFVRXNRMEZCVTNkWExHRkJRVUVzUTBGQlkwZ3NUMEZCUVN4RFFVRlJibGNzUTBGQlFTeERRVUZMYjFjc2FVSkJRVUVzUzBGQmMwSjBWeXhEUVVGQkxFTkJRVk4zVnl4aFFVRkJMRXRCUVd0Q01WWXNRMEZCUVN4SlFVTnFTR1FzUTBGQlFTeERRVUZUZDFjc1lVRkJRU3hEUVVGalF5eEpRVUZCTzBWQlJYcENMRTFCUVUxNFR5eERRVUZCTEVkQlFYVkNSaXhEUVVGQkxFbEJRV3RDZWtrc1EwRkJRU3hEUVVGUGIxZ3NZMEZCUVN4SlFVRnJRbkpYTEVOQlFVRXNRMEZCVDNOWExIZENRVUZCTzBWQlFVRXNRMEZETVVWMFZ5eERRVUZCTEVOQlFVOTFWeXcyUWtGQlFTeExRVUZwUXpOUExFTkJRVUVzU1VGQk1FSnVTQ3hEUVVGQkxFTkJRVk1yVml4cFFrRkJRU3hKUVVNNVJXcFhMRU5CUVVFc1EwRkJSVGhWTEdOQlFVRXNTVUZGUVhKV0xFTkJRVUVzUTBGQlQzbFhMRkZCUVVFc1NVRkJXWHBYTEVOQlFVRXNRMEZCVDNsWExGRkJRVUVzUTBGQlUzcFFMRTlCUVVFc1NVRkJWeTlJTEVOQlFVRXNRMEZCVDNkWUxGRkJRVUVzU1VGQldYaFlMRU5CUVVFc1EwRkJUM2RSTEZOQlFVRXNTMEZCWTNwUUxFTkJRVUVzUTBGQlQzbEpMRTlCUVVFc1NVRkRMMFo0U2l4RFFVRkJMRU5CUVU5M1dDeFJRVUZCTEVOQlFWTTNReXhaUVVGQkxFbEJSV3hDTTFVc1EwRkJRU3hEUVVGUGFVUXNTVUZCUVN4RFFVRkxMR05CUVdNelFpeERRVUZCTEVOQlF6VkNPMEZCUVVFN1FVRkZRU3hUUVVGVGJWY3NXVUZCV1ROWUxFTkJRVUU3UlVGRGJrSXNUVUZCVFVVc1EwRkJRU3hIUVVGWExFbEJRVUZETEd0Q1FVRkJPMGxCUTFoVExFTkJRVUVzUjBGQlV6dEpRVU5VUXl4RFFVRkJMRWRCUVU5RUxFTkJRVUVzUTBGQlR5dFRMR1ZCUVVFN1NVRkJRVHROUVVOa2JsRXNUVUZCUVN4RlFVTktNVU1zUTBGQlFUdE5RVUZOTkZNc1QwRkJRU3hGUVVOT2VsTXNRMEZCUVR0TlFVTkJOa2NzV1VGQlFTeEZRVUZqTlVjc1EwRkJRVHROUVVGSEswY3NUMEZCUVN4RlFVTnFRalZITzBsQlFVRXNTVUZEUlZRc1EwRkJRVHRGUVVOS0xFdEJRVXRUTEVOQlFVRXNSVUZCVXp0RlFVTmtMRXRCUVV0UUxFTkJRVUVzUTBGQlQzRlVMR0ZCUVVFc1NVRkJkVU1zV1VGQmRFSnVWU3hEUVVGQkxFTkJRVTByVlN4WFFVRkJMRVZCUVhsQ08wVkJRelZFTEVsQlFVbDJWQ3hEUVVGQkxFZEJRVWw0UWl4RFFVRkJPMFZCUlZJc1NVRkVTWGRDTEVOQlFVRXNRMEZCUlhkVUxHRkJRVUVzUzBGQlpYaFVMRU5CUVVFc1IwRkJTVUVzUTBGQlFTeERRVUZGZDFRc1lVRkJRU3hKUVVOMFFtNVZMRU5CUVVFc1EwRkJTM05WTEZOQlFVRXNSVUZKVWl4aFFVaEpkRlVzUTBGQlFTeERRVUZMTkZZc1YwRkJRU3hKUVVGbE5WWXNRMEZCUVN4RFFVRkxNbFlzVjBGQlFTeEpRVU16UWpWV0xFTkJRVUVzUTBGQlQzVkRMRWxCUVVFc1EwRkJTeXh4UWtGQmNVSXpRaXhEUVVGQk8wVkJTWEpETEUxQlFVMUZMRU5CUVVFc1IwRkJaV0lzUTBGQlFTeERRVUZMYVZVc1QwRkJRU3hEUVVGUk9FTXNVMEZCUVN4RFFVRlZOVmdzUTBGQlFTeEpRVUZaUVN4RFFVRkJMRU5CUVZNMldDeFRRVUZCTEV0QlFXTnlWeXhEUVVGQkxFTkJRVVZ4Vnl4VFFVRkJPMFZCUXpkRmJsY3NRMEZCUVN4SlFVRm5RaXhOUVVGSFlpeERRVUZCTEVOQlFVdHBWU3hQUVVGQkxFTkJRVkZ3VkN4RFFVRkJMRWxCUVdkQ1JpeERRVUZCTzBWQlEzQkVMRTFCUVUxSkxFTkJRVUVzUjBGQlkyWXNRMEZCUVN4RFFVRkxhVlVzVDBGQlFTeERRVUZSYUZFc1RVRkJRU3hIUVVGVExFbEJRVWxxUlN4RFFVRkJMRU5CUVV0cFZTeFBRVUZCTEVOQlFWRXNTMEZCUzNSVUxFTkJRVUU3U1VGRE1VUkxMRU5CUVVFc1IwRkJVVVFzUTBGQlFTeERRVUZaYTFVc1MwRkJRVHRKUVVOd1FtaFZMRU5CUVVFc1IwRkJVVVlzUTBGQlFTeERRVUZaYjFVc1MwRkJRVHRGUVVNeFFpeEpRVUZKZUZVc1EwRkJRU3hEUVVGRmMxY3NkVUpCUVVFc1JVRkhTaXhQUVVaQk4xY3NRMEZCUVN4RFFVRlJlVllzVFVGQlFTeEhRVUZUTjFVc1EwRkJRU3hSUVVOcVFsb3NRMEZCUVN4RFFVRlJNRllzVFVGQlFTeEhRVUZUTjFVc1EwRkJRVHRGUVVkdVFpeExRVUZMYkVJc1EwRkJRU3hEUVVGUE1GY3NZMEZCUVN4RlFXVldMRTlCWkVzNVZpeERRVUZCTEVOQlFVVjFReXhOUVVGQkxFTkJRVTlyVkN4UFFVRkJMRU5CUVZGd1Z5eERRVUZCTEVOQlFVdHhWeXhwUWtGQlFTeE5RVU42UW5SWExFTkJRVUVzUTBGQlR5dFZMRlZCUVVFc1NVRkJZU3hWUVVWc1FqbFZMRU5CUVVFc1EwRkJTM05WTEZOQlFVRXNTMEZEVURkT0xFMUJRVUVzUTBGQlQwTXNUVUZCUVN4RFFVRlBkRWNzUTBGQlFTeEZRVUZUTzBsQlEzSkNlVllzVFVGQlFTeEZRVUZSTjFVc1EwRkJRVHRKUVVOU09GVXNUVUZCUVN4RlFVRlJOMVVzUTBGQlFUdEpRVU5TYVZjc1MwRkJRU3hGUVVGUGJsZ3NRMEZCUVN4RFFVRlBPRk1zVDBGQlFTeERRVUZSYlVNc1VVRkJRVHRKUVVOMFFtMURMRXRCUVVFc1JVRkJUM0JZTEVOQlFVRXNRMEZCVHpoVExFOUJRVUVzUTBGQlVYRkRMRkZCUVVFN1NVRkRkRUpHTEZGQlFVRXNSVUZCVldoVkxFTkJRVUU3U1VGRFZtdFZMRkZCUVVFc1JVRkJWV3BWTzBWQlFVRXNTVUZGV21wQ0xFTkJRVUVzUTBGQlN5dFdMR05CUVVFc1IwRkJhVUlzU1VGQlFVTXNWMEZCUVR0RlFVa3hRaXhKUVVGSkwxWXNRMEZCUVN4RFFVRlBiVmdzYlVKQlFVRXNTMEZCZDBKdVdDeERRVUZCTEVOQlFVOHdTeXhKUVVGQkxFVkJRM2hETEVsQlFVazFTeXhEUVVGQkxFTkJRVTl6Unl4VlFVRkJPMGxCUlZRc1NVRkJTWEJHTEVOQlFVRXNSMEZCVVdJc1EwRkJRU3hEUVVGUk1GWXNUVUZCUVN4SlFVRlZMMVlzUTBGQlFTeERRVUZQTUUwc1UwRkJRU3hKUVVGaE1VMHNRMEZCUVN4RFFVRlBhVTRzV1VGQlFTeE5RVUZyUWk5TUxFTkJRVUVzUjBGQlVXSXNRMEZCUVN4RFFVRlJNRllzVFVGQlFTeEpRVUZWTDFZc1EwRkJRU3hEUVVGUE1FMHNVMEZCUVN4SlFVRmhNVTBzUTBGQlFTeERRVUZQTmswc1dVRkJRU3hKUVVjNVNDeFBRVVpCTlUwc1EwRkJRU3hEUVVGTGMxVXNVMEZCUVN4SlFVRlpMRk5CUTJwQ2RGVXNRMEZCUVN4RFFVRkxkVlVzVDBGQlFTeEpRVUZWTzBWQlFVRXNUMEZIV2l4SlFVRkpkbFFzUTBGQlFTeEhRVUZSV2l4RFFVRkJMRU5CUVZGNVZpeE5RVUZCTEVsQlFWVTVWaXhEUVVGQkxFTkJRVTh3VFN4VFFVRkJMRWxCUVdFeFRTeERRVUZCTEVOQlFVOXBUaXhaUVVGQkxFMUJRV3RDYUUwc1EwRkJRU3hIUVVGUldpeERRVUZCTEVOQlFWRjVWaXhOUVVGQkxFbEJRVlU1Vml4RFFVRkJMRU5CUVU4d1RTeFRRVUZCTEVsQlFXRXhUU3hEUVVGQkxFTkJRVTgyVFN4WlFVRkJMRWxCUTNKSk8wVkJSMG9zU1VGQlNYWk9MRU5CUVVFc1EwRkJVMnRZTEdGQlFVRXNTVUZEVURWV0xFTkJRVUVzUTBGQlJYVkRMRTFCUVVFc1MwRkJWemRFTEVOQlFVRXNRMEZCVTJ0WUxHRkJRVUVzU1VGQmFVSTFWaXhEUVVGQkxFTkJRVVYxUXl4TlFVRkJMRU5CUVU5clZDeFBRVUZCTEVOQlFWRndWeXhEUVVGQkxFTkJRVXR4Vnl4cFFrRkJRU3hIUVVjdlJDeFBRVVpCY2xjc1EwRkJRU3hEUVVGTGRWVXNUMEZCUVN4SlFVRlZMRk5CUTJaNFZTeERRVUZCTEVOQlFVOHJWU3hWUVVGQkxFbEJRV0U3UlVGUGVFSXNTVUZJU1RsVkxFTkJRVUVzUTBGQlN6QldMRzFDUVVGQkxFbEJRMUF6Vml4RFFVRkJMRU5CUVU5MVF5eEpRVUZCTEVOQlFVc3NZVUZCWVROQ0xFTkJRVUVzUjBGRmRrSkJMRU5CUVVFc1EwRkJSVEJYTEdGQlFVRXNTVUZCYVVJeFZ5eERRVUZCTEVOQlFVVXdWeXhoUVVGQkxFTkJRV053VkN4TlFVRkJMRWRCUVZNc1IwRkJSenRGUVVOdVJEZEVMRU5CUVVFc1EwRkJVVFJWTEZGQlFVRXNSMEZCVjJoVkxFTkJRVUVzUlVGRGJrSmFMRU5CUVVFc1EwRkJVVGhWTEZGQlFVRXNSMEZCVjJwVkxFTkJRVUU3UlVGRGJrSXNUVUZCVFVNc1EwRkJRU3hIUVVGUlpDeERRVUZCTEVOQlFWRTBWU3hSUVVGQkxFZEJRVmMxVlN4RFFVRkJMRU5CUVZGNVZpeE5RVUZCTzBsQlEyNURNVlVzUTBGQlFTeEhRVUZSWml4RFFVRkJMRU5CUVZFNFZTeFJRVUZCTEVkQlFWYzVWU3hEUVVGQkxFTkJRVkV3Vml4TlFVRkJPMFZCUTNwRExFbEJRVWt2Vml4RFFVRkJMRU5CUVU4MFF5eE5RVUZCTEVOQlFVOTFWQ3hUUVVGQkxFbEJRV0ZzVFN4SlFVRkJMRU5CUVV0elRpeEpRVUZCTEVOQlFVdHdWeXhEUVVGQkxFbEJRVk1zU1VGQlNVTXNRMEZCUVN4SlFVRlRMRXRCUVV0d1FpeERRVUZCTEVOQlFVODBReXhOUVVGQkxFTkJRVTkxVkN4VFFVRkJMRVZCUVZjN1JVRkROMFlzVTBGQlowTXNUVUZCY2tKc1Z5eERRVUZCTEVOQlFVc3lWaXhYUVVGQkxFVkJRVFpDTzBsQlF6TkRMRWxCUVVsNFZ5eERRVUZCTzBsQlEwRlpMRU5CUVVFc1EwRkJUM0ZITEZsQlFVRXNUVUZCYTBKb1J5eERRVUZCTEVOQlFWRTRWU3hSUVVGQkxFdEJRV0U1VlN4RFFVRkJMRU5CUVZFd1ZpeE5RVUZCTEVsQlFWVXZWaXhEUVVGQkxFTkJRVTl6Unl4VlFVRkJMRTFCUVdkQ2FrY3NRMEZCUVN4RFFVRlJORlVzVVVGQlFTeExRVUZoTlZVc1EwRkJRU3hEUVVGUmVWWXNUVUZCUVN4SFFVTjBTRGRXTEVOQlFVRXNRMEZCU3pKV0xGZEJRVUVzU1VGQll5eEpRVWRtZWxVc1EwRkJRU3hIUVVGUlFTeERRVUZCTEVkQlFWRkRMRU5CUVVFc1IwRkJVVUVzUTBGQlFTeEpRVUZUTEU5QlEyNURhRU1zUTBGQlFTeEhRVUUwUkN4TlFVRXZRelpMTEVsQlFVRXNRMEZCUzNWT0xFdEJRVUVzUTBGQlRYWk9MRWxCUVVFc1EwRkJTMGNzUjBGQlFTeERRVUZKYUVvc1EwRkJRU3hIUVVGUk5ra3NTVUZCUVN4RFFVRkxSeXhIUVVGQkxFTkJRVWxxU2l4RFFVRkJMRXRCUVdkQ09Fa3NTVUZCUVN4RFFVRkxkMDRzUlVGQlFTeEZRVU4yUlhoWUxFTkJRVUVzUTBGQlN6SldMRmRCUVVFc1IwRkJZelZXTEVOQlFVRXNRMEZCVDNGSExGbEJRVUVzUzBGQmFVSnFTQ3hEUVVGQkxFZEJRV0ZqTEVOQlFVRXNRMEZCVDNkWUxGVkJRVUVzUjBGQllTeExRVUZMZEZrc1EwRkJRU3hIUVVGaFl5eERRVUZCTEVOQlFVOTNXQ3hWUVVGQkxFTkJSek5ITzBWQlFVRTdSVUZUUVN4SlFWSkplbGdzUTBGQlFTeERRVUZMTWxZc1YwRkJRU3hKUVVOUU5WWXNRMEZCUVN4RFFVRlBkVU1zU1VGQlFTeERRVUZMTEhGQ1FVRnhRak5DTEVOQlFVRXNVVUZGU0N4TlFVRnlRbGdzUTBGQlFTeERRVUZMTkZZc1YwRkJRU3hMUVVOV2VGWXNRMEZCUVN4RFFVRlJORlVzVVVGQlFTeExRVUZoTlZVc1EwRkJRU3hEUVVGUmVWWXNUVUZCUVN4SlFVRlZlbFlzUTBGQlFTeERRVUZST0ZVc1VVRkJRU3hMUVVGaE9WVXNRMEZCUVN4RFFVRlJNRllzVFVGQlFTeExRVU4wUlRsV0xFTkJRVUVzUTBGQlN6UldMRmRCUVVFc1NVRkJZeXhMUVVkdVFqVldMRU5CUVVFc1EwRkJTekpXTEZkQlFVRXNTVUZCWlRWV0xFTkJRVUVzUTBGQlR6SllMRWxCUVVFc1NVRkJVVE5ZTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlR5dFZMRWxCUVVFc1NVRkJVVE5ZTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzUTBGQlR5dFZMRWxCUVVFc1EwRkJTM1JSTEU5QlFVRXNTVUZCVjNCSUxFTkJRVUVzUTBGQlMybFZMRTlCUVVFc1EwRkJVV2hSTEUxQlFVRXNSMEZCVXl4SFFVVXZSeXhoUVVSQmFrVXNRMEZCUVN4RFFVRkxjMVVzVTBGQlFTeEpRVUZaTzBWQlIyNUNMRXRCUVV0MFZTeERRVUZCTEVOQlFVczBWaXhYUVVGQkxFVkJRMUk3UlVGRlJqZFdMRU5CUVVFc1EwRkJUeXRWTEZWQlFVRXNTVUZCWVN4SlFVTm1OMVVzUTBGQlFTeERRVUZQTkVrc1QwRkJRU3hKUVVGWGJFa3NRMEZCUVN4RFFVRkZaMWdzVlVGQlFTeEpRVU4yUW1oWUxFTkJRVUVzUTBGQlJUaFZMR05CUVVFc1NVRkZRWGhXTEVOQlFVRXNRMEZCVHpKWUxIZENRVUZCTEV0QlFUWkNNMWdzUTBGQlFTeERRVUZQTkZnc1RVRkJRU3hKUVVNM1EyeFlMRU5CUVVFc1EwRkJSVzFZTEdWQlFVRTdSVUZGU2l4SlFVRkpkRkVzUTBGQlFTeEhRVUZQZWtnc1EwRkJRU3hEUVVGUGNVY3NXVUZCUVN4TFFVRnBRbXhHTEVOQlFVRXNSMEZCVVVNc1EwRkJRVHRKUVVOMlEzTkhMRU5CUVVFc1IwRkJZekZJTEVOQlFVRXNRMEZCVDNGSExGbEJRVUVzUzBGQmFVSm9SeXhEUVVGQkxFTkJRVkUwVlN4UlFVRkJMRWRCUVZjMVZTeERRVUZCTEVOQlFWRXlXQ3hUUVVGQkxFZEJRVmt6V0N4RFFVRkJMRU5CUVZFNFZTeFJRVUZCTEVkQlFWYzVWU3hEUVVGQkxFTkJRVkUwV0N4VFFVRkJPMFZCUTNoSEwxZ3NRMEZCUVN4RFFVRlBaMWtzWTBGQlFTeExRVU5VZWxFc1EwRkJRU3hIUVVGUGQwTXNTVUZCUVN4RFFVRkxSeXhIUVVGQkxFTkJRVWt6UXl4RFFVRkJMRXRCUVZOdVNDeERRVUZCTEVkQlFVMHNTMEZCU3l4SlFVTndRMjlJTEVOQlFVRXNSMEZCWTNWRExFbEJRVUVzUTBGQlMwY3NSMEZCUVN4RFFVRkpNVU1zUTBGQlFTeExRVUZuUW5CSUxFTkJRVUVzUjBGQlRTeExRVUZMTEV0QlJYQkVSQ3hEUVVGQkxFTkJRVkU0V0N4SlFVRkJMRWRCUVU4eFVTeERRVUZCTEVWQlEyWkJMRU5CUVVFc1NVRkJVWFpJTEVOQlFVRXNRMEZCVDJ0WkxGVkJRVUVzUlVGRFdEbFlMRU5CUVVFc1MwRkRSbTFJTEVOQlFVRXNTVUZCVVVFc1EwRkJRU3hGUVVOU1F5eERRVUZCTEVsQlFXVkJMRU5CUVVFN1JVRkZha0lzVFVGQlRVY3NRMEZCUVN4SFFVRjFRamRJTEVOQlFVRXNRMEZCVDNGWkxHZENRVUZCTzBWQlEzQkRjbGtzUTBGQlFTeERRVUZQYTFjc1kwRkJRU3hIUVVGcFFucFBMRU5CUVVFc1IwRkJUeXhKUVVGSkxGTkJRVk1zVVVGRE5VTjZTQ3hEUVVGQkxFTkJRVTl4V1N4blFrRkJRU3hIUVVGdFFqTlJMRU5CUVVFc1IwRkJZeXhKUVVGSkxGTkJRVk03UlVGRGNrUXNUVUZCVFVzc1EwRkJRU3hIUVVGVEwwZ3NRMEZCUVN4RFFVRlBORU1zVFVGQlFTeERRVUZQWjBrc1NVRkJRU3hMUVVGVE1Vc3NRMEZCUVN4RFFVRlBORWtzVDBGQlFUdEZRVU0zUXl4TFFVRkxOMGtzUTBGQlFTeERRVUZMZFZVc1QwRkJRU3hGUVVGVE8wbEJVV3BDTEVsQlVFbDZUU3hEUVVGQkxFbEJRMFl2U0N4RFFVRkJMRU5CUVU4d1VpeFBRVUZCTEVOQlFWRTdUVUZEWW1wQ0xGTkJRVUVzUlVGQlYzcFJMRU5CUVVFc1EwRkJUMnRYTzBsQlFVRXNTVUZIZEVKcVZ5eERRVUZCTEVOQlFVdHhXU3hqUVVGQkxFZEJRV2xDZEZrc1EwRkJRU3hEUVVGUE1GQXNXVUZCUVN4SlFVTTNRakZRTEVOQlFVRXNRMEZCVHpoTUxHRkJRVUVzUTBGQll5eEpRVU5xUWpsTUxFTkJRVUVzUTBGQlR6aFFMRk5CUVVFc1JVRkJWenROUVVOd1FpeE5RVUZOTVZFc1EwRkJRU3hIUVVGTkxFbEJRVWx0V2l4TlFVRkJMRU5CUVU5RExGZEJRVUVzUTBGQldTeHBRa0ZCYVVJN1VVRkRiRVJETEU5QlFVRXNSMEZCVXp0UlFVTlVZaXhWUVVGQkxFZEJRVms3VFVGQlFUdE5RVVZrTlZnc1EwRkJRU3hEUVVGUE9FVXNVMEZCUVN4RFFVRlZORlFzWVVGQlFTeERRVUZqZEZvc1EwRkJRU3hEUVVOcVF6dEpRVUZCTzBsQlEwRmhMRU5CUVVFc1EwRkJTekJaTEcxQ1FVRkJMRWxCUVhOQ0xFbEJSWFpDZWxrc1EwRkJRU3hEUVVGUE1GUXNWVUZCUVN4TFFVRjVReXhOUVVFeFFqVlVMRU5CUVVFc1EwRkJUeXRSTEdOQlFVRXNTMEZCY1VRc1RVRkJNVUl2VVN4RFFVRkJMRU5CUVU5blVpeGpRVUZCTEVsQlEycEZhRklzUTBGQlFTeERRVUZQYzFRc1lVRkJRU3hGUVVGakxFbEJSWFpDZEZRc1EwRkJRU3hEUVVGUGRVTXNTVUZCUVN4RFFVRkxMRzFDUVVGdFFqTkNMRU5CUVVFc1EwRkRha003UlVGQlFUdEZRVU5CTEVsQlFVbHhTQ3hEUVVGQk8wVkJRMEZvU1N4RFFVRkJMRU5CUVV0MVZTeFBRVUZCTEVsQlFWY3pUU3hEUVVGQkxFdEJRWGxDTjBnc1EwRkJRU3hEUVVGUGNWa3NaMEpCUVVFc1NVRkJiMEowVVN4RFFVRkJMRWxCUVZWclF5eEpRVUZCTEVOQlFVdEhMRWRCUVVFc1EwRkJTVE5ETEVOQlFVRXNTMEZCVXl4TlFVVnNSM3BJTEVOQlFVRXNRMEZCVHpCU0xFOUJRVUVzUTBGQlVUdEpRVU5pYWtJc1UwRkJRU3hGUVVGWGVsRXNRMEZCUVN4RFFVRlBhMWNzWTBGQlFUdEpRVU5zUW5aSExGbEJRVUVzUjBGQll6dEZRVUZCTEVsQlJXaENNVWdzUTBGQlFTeEpRVUZaTEVsQlJXUnFTU3hEUVVGQkxFTkJRVTkxUXl4SlFVRkJMRU5CUVVzc1kwRkJZek5DTEVOQlFVRXNSMEZETVVKWUxFTkJRVUVzUTBGQlMzVlZMRTlCUVVFc1NVRkJWU3hIUVVObWRsVXNRMEZCUVN4RFFVRkxLMU1zWjBKQlFVRXNSMEZCYlVKMlRDeERRVUZCTEVkQlFVOTRTQ3hEUVVGQkxFTkJRVXR4V1N4alFVRkJPMFZCUTNCRExFbEJRVWx1VVN4RFFVRkJMRWxCUVhOQ08wbEJRM1JDUlN4RFFVRkJMRWRCUVd0Q2Jra3NRMEZCUVN4RFFVRlBNRmtzWlVGQlFUdEZRV2xFTjBJc1NVRm9SRWt4V1N4RFFVRkJMRU5CUVU5dFdDeHRRa0ZCUVN4TFFVTlVhRkFzUTBGQlFTeEhRVUZyUWl4SlFVVm9RbG9zUTBGQlFTeEhRVUZQTEV0QlEweE5MRU5CUVVFc1MwRkJWMFVzUTBGQlFTeEpRVUZoYUVrc1EwRkJRU3hEUVVGTEsxTXNaMEpCUVVFc1NVRkJiMEk1VXl4RFFVRkJMRU5CUVU4eVNTeGpRVUZCTEVkQlFXbENOMGtzUTBGQlFTeERRVUZQTmswc1dVRkJRU3hMUVVGcFFqZE5MRU5CUVVFc1EwRkJUelJITEVsQlFVRXNSMEZCVHl4SlFVRkpOVWNzUTBGQlFTeERRVUZQTmswc1dVRkJRU3hQUVVNMVNEZE5MRU5CUVVFc1EwRkJUekJTTEU5QlFVRXNRMEZCVVR0SlFVTmlha0lzVTBGQlFTeEZRVUZYTzBsQlExaGtMRmxCUVVFc1IwRkJZenRKUVVOa05FTXNaMEpCUVVFc1JVRkJhMEk3UlVGQlFTeEpRVWRzUW5SVExFTkJRVUVzUTBGQlN5dFRMR2RDUVVGQkxFZEJRVzFDYUZRc1EwRkJRU3hEUVVGUE5rMHNXVUZCUVN4UFFVTnFRekZGTEVOQlFVRXNTVUZCYzBJc1IwRkRiRUpxU1N4RFFVRkJMRU5CUVU4eVdTeFZRVUZCTEV0QlExUTFXU3hEUVVGQkxFTkJRVXNyVXl4blFrRkJRU3hIUVVGdFFtaFVMRU5CUVVFc1EwRkJUelpOTEZsQlFVRXNTMEZCYVVJc1RVRkJUVGROTEVOQlFVRXNRMEZCVHpaTkxGbEJRVUVzUzBGQmFVSTFUU3hEUVVGQkxFTkJRVXR4V1N4alFVRkJMRWRCUVdsQ04xRXNRMEZCUVN4TFFVRlRXU3hEUVVGQkxFMUJSM2hIV2l4RFFVRkJMRWRCUVU4c1RVRkRXazBzUTBGQlFTeExRVUZYUlN4RFFVRkJMRWxCUVdGb1NTeERRVUZCTEVOQlFVc3JVeXhuUWtGQlFTeEpRVUZ2UWpsVExFTkJRVUVzUTBGQlR6SkpMR05CUVVFc1IwRkJhVUkzU1N4RFFVRkJMRU5CUVU5cFRpeFpRVUZCTEV0QlFXbENhazRzUTBGQlFTeERRVUZQTkVjc1NVRkJRU3hIUVVGUExFbEJRVWsxUnl4RFFVRkJMRU5CUVU5cFRpeFpRVUZCTEU5QlF6VklhazRzUTBGQlFTeERRVUZQTUZJc1QwRkJRU3hEUVVGUk8wbEJRMkpxUWl4VFFVRkJMRVZCUVZjN1NVRkRXR1FzV1VGQlFTeEhRVUZqTzBsQlEyUTBReXhuUWtGQlFTeEZRVUZyUW5aVExFTkJRVUVzUTBGQlQzTklMRTFCUVVFc1EwRkJUM0JFTEUxQlFVRXNTVUZCYlVNc1YwRkJla0pvUlN4RFFVRkJMRU5CUVU5dlNpeGhRVUZCTEVkQlFUSkNkRW9zUTBGQlFTeERRVUZQY1U4c2IwSkJRVUVzUzBGQmVVSndSU3hKUVVGQkxFTkJRVXRaTEVsQlFVRXNRMEZCU3psRUxGVkJRVUVzUTBGQlZ6ZEhMRU5CUVVFc1EwRkJUMjlLTEdGQlFVRXNSVUZCWlR0RlFVRkJMRWxCUjNaS2Nrb3NRMEZCUVN4RFFVRkxLMU1zWjBKQlFVRXNSMEZCYlVKb1ZDeERRVUZCTEVOQlFVOXBUaXhaUVVGQkxFOUJRMnBET1VVc1EwRkJRU3hKUVVGelFpeEhRVU5zUW1wSkxFTkJRVUVzUTBGQlR6SlpMRlZCUVVFc1MwRkRWRFZaTEVOQlFVRXNRMEZCU3l0VExHZENRVUZCTEVkQlFXMUNhRlFzUTBGQlFTeERRVUZQYVU0c1dVRkJRU3hMUVVGcFFpeExRVUZMYWs0c1EwRkJRU3hEUVVGUGFVNHNXVUZCUVN4TFFVRnBRbWhPTEVOQlFVRXNRMEZCUzNGWkxHTkJRVUVzUjBGQmFVSTNVU3hEUVVGQkxFdEJRVk5aTEVOQlFVRXNTMEZKT1VkR0xFTkJRVUVzUzBGRFJuWklMRU5CUVVFc1EwRkJSWE5YTEhWQ1FVRkJMRWxCUVRCQ0xFdEJTWHBDYkZnc1EwRkJRU3hEUVVGUEsxRXNZMEZCUVN4SlFVRTBReXhYUVVFeFFpOVJMRU5CUVVFc1EwRkJUMnRYTEdOQlFVRXNTVUZCTmtKcVZ5eERRVUZCTEVOQlFVc3JVeXhuUWtGQlFTeEhRVUZ0UWk5VExFTkJRVUVzUTBGQlMzRlpMR05CUVVFc1MwRkROMFp5V1N4RFFVRkJMRU5CUVVzclV5eG5Ra0ZCUVN4SFFVRnRRaTlUTEVOQlFVRXNRMEZCUzNGWkxHTkJRVUVzU1VGRk1VSjBXU3hEUVVGQkxFTkJRVTluVWl4alFVRkJMRWxCUVRSRExGZEJRVEZDYUZJc1EwRkJRU3hEUVVGUGExY3NZMEZCUVN4SlFVRTJRbXBYTEVOQlFVRXNRMEZCU3l0VExHZENRVUZCTEVkQlFXMUNMMU1zUTBGQlFTeERRVUZMY1Zrc1kwRkJRU3hMUVVNM1JuSlpMRU5CUVVFc1EwRkJTeXRUTEdkQ1FVRkJMRWRCUVcxQ0wxTXNRMEZCUVN4RFFVRkxjVmtzWTBGQlFTeEhRVVV4UW5SWkxFTkJRVUVzUTBGQlQyZFNMR05CUVVFc1NVRkJiVUpvVWl4RFFVRkJMRU5CUVU4clVTeGpRVUZCTEV0QlEzQkRPVkVzUTBGQlFTeERRVUZMSzFNc1owSkJRVUVzUjBGQmJVSXZVeXhEUVVGQkxFTkJRVXR4V1N4alFVRkJMRWRCU1ROQ2NGa3NRMEZCUVN4RFFVRlBhVmNzVTBGQlFTeEhRVUZaTEVkQlFVYzdTVUZEZUVJc1RVRkJTV3hOTEVsQlFVRXNRMEZCUzBjc1IwRkJRU3hEUVVGSk0wTXNRMEZCUVN4SlFVRlJka2dzUTBGQlFTeERRVUZQYVZjc1UwRkJRU3hKUVVGaGJGY3NRMEZCUVN4RFFVRkxiVmNzYTBKQlFVRXNSMEZYTlVNc1lVRkVRVzVYTEVOQlFVRXNRMEZCU3l0VExHZENRVUZCTEVkQlFXMUNMMU1zUTBGQlFTeERRVUZMY1Zrc1kwRkJRVHRKUVZRM1FpeExRVUZMY2xrc1EwRkJRU3hEUVVGTGJWY3NhMEpCUVVFc1JVRk5VaXhQUVV4QmJsY3NRMEZCUVN4RFFVRkxiVmNzYTBKQlFVRXNTVUZCY1VJc1IwRkRNVUl2Vml4RFFVRkJMRU5CUVZGNVZpeE5RVUZCTEVkQlFWTjZWaXhEUVVGQkxFTkJRVkUwVlN4UlFVRkJMRVZCUTNwQ05WVXNRMEZCUVN4RFFVRlJNRllzVFVGQlFTeEhRVUZUTVZZc1EwRkJRU3hEUVVGUk9GVXNVVUZCUVN4RlFVTjZRbXhXTEVOQlFVRXNRMEZCU3l0VExHZENRVUZCTEVkQlFXMUNMMU1zUTBGQlFTeERRVUZMY1Zrc1kwRkJRU3hSUVVNM1FtcFpMRU5CUVVFc1EwRkJVVGhZTEVsQlFVRXNSMEZCVDI1WkxFTkJRVUVzUTBGQlQzRkhMRmxCUVVFc1MwRkJhVUpvUnl4RFFVRkJMRU5CUVZFMFZTeFJRVUZCTEVkQlFWYzFWU3hEUVVGQkxFTkJRVkY1Vml4TlFVRkJMRWRCUVZONlZpeERRVUZCTEVOQlFWRTRWU3hSUVVGQkxFZEJRVmM1VlN4RFFVRkJMRU5CUVZFd1ZpeE5RVUZCTEVOQlR6VkhPMFZCUVVFN1JVRkRTemRXTEVOQlFVRXNRMEZCVHpSWkxGbEJRVUVzUzBGQlowSTFXU3hEUVVGQkxFTkJRVTgwU1N4UFFVRkJMRTFCUnk5Q05Va3NRMEZCUVN4RFFVRlBORmNzVVVGQlFTeEpRVUZaTlZjc1EwRkJRU3hEUVVGUE5GY3NVVUZCUVN4RFFVRlRlbEFzVDBGQlFTeEpRVUZYY2tnc1EwRkJRU3hEUVVGUE9GY3NVVUZCUVN4SlFVRlpOVmNzUTBGQlFTeERRVUZQYlV3c2JVSkJRVUVzVFVGRE1VVnlUQ3hEUVVGQkxFTkJRVTh5VHl4cFFrRkJRU3hKUVVOUU0wOHNRMEZCUVN4RFFVRlBjMDRzYlVKQlFVRXNTMEZGVEhCT0xFTkJRVUVzUTBGQlR6UlhMRkZCUVVFc1NVRkJXVFZYTEVOQlFVRXNRMEZCVHpSWExGRkJRVUVzUTBGQlUzcFFMRTlCUVVFc1NVRkJWM0pJTEVOQlFVRXNRMEZCVHpoWExGRkJRVUVzU1VGRGRrUTVWeXhEUVVGQkxFTkJRVTg0Vnl4UlFVRkJMRU5CUVZORExGZEJRVUVzU1VGSGJFSXZWeXhEUVVGQkxFTkJRVTluVGl4alFVRkJMRU5CUVdVdlRTeERRVUZCTEVOQlFVc3JVeXhuUWtGQlFTeEhRVVV6UW1oVUxFTkJRVUVzUTBGQlR6SlFMRmxCUVVFc1EwRkJZVEZRTEVOQlFVRXNRMEZCU3l0VExHZENRVUZCTEVWQlF6TkNPMEZCUVVFN1FVRkZRU3hUUVVGVEswWXNWMEZCVnpOYUxFTkJRVUU3UlVGRGJFSXNUVUZCVFVVc1EwRkJRU3hIUVVGVE8wbEJRMVJWTEVOQlFVRXNSMEZCVDFZc1EwRkJRU3hEUVVGUGVWUXNaVUZCUVR0SlFVTmtPVk1zUTBGQlFTeEhRVUZsUkN4RFFVRkJMRU5CUVV0clZTeFBRVUZCTEVOQlFWRTRReXhUUVVGQkxFTkJRVlV4V0N4RFFVRkJMRWxCUVZsQkxFTkJRVUVzUTBGQlV6SllMRk5CUVVFc1MwRkJZemRZTEVOQlFVRXNRMEZCVFRaWUxGTkJRVUU3UlVGSmNrWXNTVUZJU1doWUxFTkJRVUVzU1VGQlowSXNTMEZEYkVKRUxFTkJRVUVzUTBGQlMydFZMRTlCUVVFc1EwRkJVV3hRTEUxQlFVRXNRMEZCVHk5RkxFTkJRVUVzUlVGQll5eEpRVVZvUXl4RFFVRkRMR2xDUVVGcFFpeGpRVUZqTEdkQ1FVRm5RakJDTEZGQlFVRXNRMEZCVTNaRExFTkJRVUVzUTBGQlRUUmFMRWxCUVVFc1IwRkJUenRKUVVWNFJTeE5RVVFyUWl4dlFrRkJaalZhTEVOQlFVRXNRMEZCVFRSYUxFbEJRVUVzUzBGQk5rSXhXaXhEUVVGQkxFTkJRVTlLTEU5QlFVRXNRMEZCVVRaRExGRkJRVUVzU1VGQldYcERMRU5CUVVFc1EwRkJUMG9zVDBGQlFTeERRVUZSSzBNc1UwRkJRU3hKUVVVelJqdEZRVVZLTzBWQlEwRTdTVUZCVFZjc1RVRkJRU3hGUVVOS01VTXNRMEZCUVR0SlFVRk5ORk1zVDBGQlFTeEZRVU5PZWxNc1EwRkJRVHRKUVVOQk5rY3NXVUZCUVN4RlFVRmpOVWNzUTBGQlFUdEpRVUZITkVnc1ZVRkJRU3hGUVVOcVFucElMRU5CUVVFN1NVRkJWVFJITEU5QlFVRXNSVUZEVm5wSE8wVkJRVUVzU1VGRFJYUkNMRU5CUVVFN1JVRkRTaXhMUVVGTGMwSXNRMEZCUVN4RlFVRlRPMFZCUTJRc1MwRkJTMVlzUTBGQlFTeERRVUZQY1ZRc1lVRkJRU3hKUVVGMVF5eFpRVUYwUW01VkxFTkJRVUVzUTBGQlRTdFZMRmRCUVVFc1JVRkJlVUk3UlVGRE5VUXNTVUZCU1hKVUxFTkJRVUVzUjBGQlNURkNMRU5CUVVFN1JVRk5VaXhKUVV4Sk1FSXNRMEZCUVN4RFFVRkZjMVFzWVVGQlFTeExRVUZsZEZRc1EwRkJRU3hIUVVGSlFTeERRVUZCTEVOQlFVVnpWQ3hoUVVGQkxFZEJRM1pDY0ZVc1EwRkJRU3hEUVVGTE1sWXNiVUpCUVVFc1NVRkRVSEpYTEVOQlFVRXNRMEZCVDJsRUxFbEJRVUVzUTBGQlN5eFpRVUZaZWtJc1EwRkJRU3hIUVVVeFFtUXNRMEZCUVN4RFFVRkxNbFlzYlVKQlFVRXNTVUZCYzBJc1NVRkRkRUl6Vml4RFFVRkJMRU5CUVV0MVZTeFRRVUZCTEVWQlRWSXNUMEZNU1haVkxFTkJRVUVzUTBGQlMzZFZMRTlCUVVFc1NVRkJWM1JWTEVOQlFVRXNRMEZCVHpCVUxGVkJRVUVzU1VGRGVrSjBWU3hEUVVGQkxFTkJRVTluVlN4aFFVRkJMRVZCUVdNc1NVRkZka0owVkN4RFFVRkJMRU5CUVV0M1ZTeFBRVUZCTEVsQlFWVXNVMEZEWm5oVkxFTkJRVUVzUTBGQlN6WldMRmRCUVVFc1NVRkJZenRGUVVscVFqTldMRU5CUVVFc1EwRkJUekJVTEZWQlFVRXNTVUZCWXpWVUxFTkJRVUVzUTBGQlMzZFZMRTlCUVVFc1NVRkJWM2hWTEVOQlFVRXNRMEZCUzNWVkxGTkJRVUVzVFVGQmQwTXNUVUZCTVVKcVZpeERRVUZCTEVOQlFVOTVVaXhqUVVGQkxFdEJRWEZFTEUxQlFURkNlbElzUTBGQlFTeERRVUZQTUZJc1kwRkJRU3hMUVVOdVJ6RlNMRU5CUVVFc1EwRkJUMmRWTEdGQlFVRXNSVUZCWXp0RlFVbDJRaXhOUVVGTmRGTXNRMEZCUVN4SFFVRmxMRWxCUVVGcFZpeFhRVUZCTzBsQlEyWm9WaXhEUVVGQkxFZEJRVmRFTEVOQlFVRXNSMEZCWldoQ0xFTkJRVUVzUTBGQlMyZFhMR05CUVVFN1JVRkhja01zU1VGQlNURlhMRU5CUVVFc1EwRkJUM2xXTEZWQlFVRXNSVUZCV1R0SlFVTnlRaXhOUVVGTk0xWXNRMEZCUVN4SFFVRlhNRUlzUTBGQlFTeERRVUZGTmxRc1NVRkJRU3hKUVVGUk4xUXNRMEZCUVN4RFFVRkZORlFzV1VGQlFTeEpRVUZuUWpWVUxFTkJRVUVzUTBGQlJUUlVMRmxCUVVFN1NVRkRMME53Vml4RFFVRkJMRU5CUVU4MlVDeHJRa0ZCUVN4RFFVRnRRaTlRTEVOQlFVRXNTVUZCV1VFc1EwRkJRU3hEUVVGVExFMUJRVTB3UWl4RFFVRkJMRU5CUVVWeFF5eE5RVUZCTEVkQlEzWkVOMFFzUTBGQlFTeERRVUZQYVVRc1NVRkJRU3hEUVVGTExHRkJRV0Y2UWl4RFFVRkJMRWRCUTNKQ1J5eERRVUZCTEVkQlFWY3NUMEZCVDBRc1EwRkJRU3hIUVVGbGFFSXNRMEZCUVN4RFFVRkxhVm9zWVVGQlFTeEhRVUZuUWl4UFFVTjRSRE5hTEVOQlFVRXNRMEZCVDJsRUxFbEJRVUVzUTBGQlN5eDVRa0ZCZVVKNlFpeERRVUZCTEVOQlJYcERPMFZCUVVFN1JVRkxRU3hKUVVwQlpDeERRVUZCTEVOQlFVdHBXaXhoUVVGQkxFZEJRV2RDTEVsQlFVRm9SQ3hYUVVGQkxFdEJRM0pDTEVsQlFVRXZSQ3hYUVVGQkxFVkJRVk03U1VGRFJqVlRMRU5CUVVFc1EwRkJUMjFFTEZOQlFVRXNTMEZCVjI1RUxFTkJRVUVzUTBGQlQzbFdMRlZCUVVFc1NVRkJZU3hGUVVGSk8wVkJRVUVzUzBGRk5VTXZWU3hEUVVGQkxFTkJRVXQxVlN4VFFVRkJMRXRCUVdOMlZTeERRVUZCTEVOQlFVdDNWU3hQUVVGQkxFdEJRVmxzVml4RFFVRkJMRU5CUVU4MFZ5eGpRVUZCTEVsQlFXMURMRTFCUVdwQ04xWXNRMEZCUVN4RFFVRlJPRmdzU1VGQlFTeEpRVUZqYmxrc1EwRkJRU3hEUVVGTFoxUXNaMEpCUVVFc1MwRkJjVUpvVkN4RFFVRkJMRU5CUVV0eldTeGpRVUZCTEVWQlNYSklMRTlCU0VGMFdTeERRVUZCTEVOQlFVdDFWU3hUUVVGQkxFbEJRVmtzUjBGRGFrSjJWU3hEUVVGQkxFTkJRVXQzVlN4UFFVRkJMRWxCUVZVc1UwRkRabmhWTEVOQlFVRXNRMEZCU3paV0xGZEJRVUVzU1VGQll6dEZRVTF5UWl4SlFVRkpNMVVzUTBGQlFUdEZRVTFLTEVsQlZFRnNRaXhEUVVGQkxFTkJRVXQxVlN4VFFVRkJMRWxCUVZrc1IwRkRha0oyVlN4RFFVRkJMRU5CUVV0M1ZTeFBRVUZCTEVsQlFWVXNSMEZEWm5oVkxFTkJRVUVzUTBGQlN6WldMRmRCUVVFc1NVRkJZeXhIUVVkcVFqTlZMRU5CUVVFc1IwRkVSV2hDTEVOQlFVRXNRMEZCVHpSWkxGbEJRVUVzUjBGRFNYaFpMRU5CUVVFc1IwRkJUV2hDTEVOQlFVRXNRMEZCVDI5T0xGTkJRVUVzU1VGQllYQk9MRU5CUVVFc1EwRkJUMjlPTEZOQlFVRXNTVUZGYUVNeFRTeERRVUZCTEVOQlFVdG5WQ3huUWtGQlFTeEZRVVZxUWpsVExFTkJRVUVzUTBGQlR6UkpMRTlCUVVFc1JVRkRWRHRGUVVWR0xFbEJRVWsxU1N4RFFVRkJMRU5CUVU4MFZ5eFJRVUZCTEVsQlFWazFWeXhEUVVGQkxFTkJRVTgwVnl4UlFVRkJMRU5CUVZONlVDeFBRVUZCTEVWQlNYSkRMRmxCU0VFdlNDeERRVUZCTEVOQlFVOTNXQ3hSUVVGQkxFTkJRVk5wUXl4VlFVRkJMRU5CUVZjN1NVRkRla0pITEZWQlFVRXNSVUZCUVdoWk8wVkJRVUU3UlVGTlNpeEpRVUZKUXl4RFFVRkJMRWRCUVZrN1NVRkRXa01zUTBGQlFTeEhRVUZaT1VJc1EwRkJRU3hEUVVGUE5Fd3NaVUZCUVN4RFFVRm5RanRGUVVOMlF5eExRVUZMTEVsQlFVazVUQ3hEUVVGQkxFZEJRVWtzUjBGQlIwRXNRMEZCUVN4SFFVRkpjVUlzUTBGQlFTeERRVUZYZVVRc1RVRkJRU3hGUVVGUk9VVXNRMEZCUVN4SlFVRkxRU3hEUVVGQkxFZEJRVWxqTEVOQlFVRXNRMEZCVDNGTExHdENRVUZCTEVkQlFYRkNMRWxCUVVseVN5eERRVUZCTEVOQlFVOXRTeXhqUVVGQkxFVkJRV2RDTzBsQlEzSkhMRTFCUVUwdlN5eERRVUZCTEVkQlFWbEdMRU5CUVVFc1IwRkJTV01zUTBGQlFTeERRVUZQY1Vzc2EwSkJRVUVzUjBGQmNVSXNTVUZCU1N4SlFVRkpja3NzUTBGQlFTeERRVUZQYlVzc1kwRkJRVHRKUVVGQkxFdEJRM2hDTEUxQlFUbENOVW9zUTBGQlFTeERRVUZYY2tJc1EwRkJRU3hIUVVGSlJTeERRVUZCTEVsQlEzQkNORUlzUTBGQlFTeEpRVUZqVkN4RFFVRkJMRU5CUVZkeVFpeERRVUZCTEV0QlFVMDRRaXhEUVVGQkxFZEJRV0ZVTEVOQlFVRXNRMEZCVjNKQ0xFTkJRVUVzUjBGQlNVVXNRMEZCUVN4TlFVTTNSRFpDTEVOQlFVRXNSMEZCV1M5Q0xFTkJRVUVzUlVGRFdtZERMRU5CUVVFc1IwRkJXVmdzUTBGQlFTeERRVUZYY2tJc1EwRkJRU3hIUVVGSlJTeERRVUZCTEVsQlFXRnRRaXhEUVVGQkxFTkJRVmR5UWl4RFFVRkJMRXRCUlRWRE9FSXNRMEZCUVN4SlFVRmpWQ3hEUVVGQkxFTkJRVmR5UWl4RFFVRkJMRTFCUTJ4REswSXNRMEZCUVN4SFFVRlpMMElzUTBGQlFTeEZRVU5hWjBNc1EwRkJRU3hIUVVGWldDeERRVUZCTEVOQlFWZEJMRU5CUVVFc1EwRkJWM2xFTEUxQlFVRXNSMEZCVXl4TFFVRkxla1FzUTBGQlFTeERRVUZYUVN4RFFVRkJMRU5CUVZkNVJDeE5RVUZCTEVkQlFWTXNSMEZGYmtZN1JVRkJRVHRGUVVOQkxFbEJRVWwxUkN4RFFVRkJMRWRCUVcxQ08wbEJRMjVDUXl4RFFVRkJMRWRCUVd0Q08wVkJRMnhDZUVnc1EwRkJRU3hEUVVGUGMwOHNUVUZCUVN4TFFVTk1iRkFzUTBGQlFTeERRVUZQTkU0c1YwRkJRU3hIUVVOVWVFWXNRMEZCUVN4SFFVRnJRbmhJTEVOQlFVRXNRMEZCVDJ0SUxFOUJRVUVzU1VGQlYyeElMRU5CUVVFc1EwRkJUMnRJTEU5QlFVRXNRMEZCVVVNc1QwRkJRU3hKUVVGWEwwZ3NRMEZCUVN4RFFVRlBPRWdzVDBGQlFTeEhRVUZWT1Vnc1EwRkJRU3hEUVVGUE9FZ3NUMEZCUVN4RFFVRlJSU3hOUVVGQkxFTkJRVTl3UkN4TlFVRkJMRWRCUVZNc1NVRkJTVFZGTEVOQlFVRXNRMEZCVDJkSkxFMUJRVUVzUTBGQlQzQkVMRTFCUVVFc1IwRkJVeXhKUVVOb1NUVkZMRU5CUVVFc1EwRkJUelpPTEV0QlFVRXNTMEZEYUVJeFJpeERRVUZCTEVkQlFXMUNPMFZCU1haQ0xFMUJRVTFKTEVOQlFVRXNTVUZCVXpOSExFTkJRVUVzUjBGQllWUXNRMEZCUVN4RFFVRlhWU3hEUVVGQkxFdEJRV05ETEVOQlFVRTdTVUZETDBNeVJ5eERRVUZCTEVkQlFWazFSeXhEUVVGQkxFZEJRVmxxUWl4RFFVRkJMRU5CUVU5eFN5eHJRa0ZCUVN4SFFVRnhRaXhKUVVGSkxFbEJRVWx5U3l4RFFVRkJMRU5CUVU5dFN5eGpRVUZCTzBWQlEzcEZMRWxCUVVsd1NpeERRVUZCTEVkQlFWZG1MRU5CUVVFc1EwRkJUMmxhTEZsQlFVRXNSVUZCWXp0SlFVVnNReXhMUVVGTGFsb3NRMEZCUVN4RFFVRlBhMW9zVlVGQlFTeEZRVVZXTEZsQlJFRTVXaXhEUVVGQkxFTkJRVTkzVWl4UFFVRkJMRU5CUVZGNFVpeERRVUZCTEVOQlFVODBUU3hYUVVGQk8wbEJSMDBzVjBGQk1VSTFUU3hEUVVGQkxFTkJRVTgwVnl4alFVRkJMRXRCUTB4eVR5eERRVUZCTEVsQlFWTXpTQ3hEUVVGQkxFTkJRVTl0V2l4bFFVRkJMRWRCUVdsQ0wxb3NRMEZCUVN4RFFVRlBkMUlzVDBGQlFTeERRVUZSTlZFc1EwRkJRU3hEUVVGUGMwOHNUVUZCUVN4SlFVRlZiRkFzUTBGQlFTeERRVUZQTms0c1MwRkJRU3hIUVVGUk1VWXNRMEZCUVN4SFFVRnRRblJITEVOQlFVRXNSMEZCV1RSSExFTkJRVUVzU1VGQlowSjZTU3hEUVVGQkxFTkJRVTkzVWl4UFFVRkJMRU5CUVZFelVDeERRVUZCTEVsQlJYUklMRmRCUVRGQ04wSXNRMEZCUVN4RFFVRlBORmNzWTBGQlFTeExRVU5NY2s4c1EwRkJRU3hIUVVGUkxFbEJRVWt6U0N4RFFVRkJMRU5CUVU5dFdpeGxRVUZCTEVkQlEzSkNMMW9zUTBGQlFTeERRVUZQZDFJc1QwRkJRU3hEUVVGUk0xQXNRMEZCUVN4SFFVRlpORWNzUTBGQlFTeEpRVU5GTEZOQlFYQkNUQ3hEUVVGQkxFbEJRVFJDUnl4RFFVRkJMRWRCUVZFc1MwRkJTMjlETEVsQlFVRXNRMEZCUzBjc1IwRkJRU3hEUVVGSmRrTXNRMEZCUVN4SlFVRlRNMGdzUTBGQlFTeERRVUZQYlZvc1pVRkJRU3hIUVVNelJTOWFMRU5CUVVFc1EwRkJUM2RTTEU5QlFVRXNRMEZCVVhCS0xFTkJRVUVzU1VGRlpuQkpMRU5CUVVFc1EwRkJUM2RTTEU5QlFVRXNRMEZCVVROUUxFTkJRVUVzUlVGSGNrSTdSVUZCUVN4UFFVRlBPMGxCUlV3c1MwRkJTMnBDTEVOQlFVRXNRMEZCVDI5YUxGZEJRVUVzUlVGRlZpeFpRVVJCYUdFc1EwRkJRU3hEUVVGUGQxSXNUMEZCUVN4RFFVRlJlRklzUTBGQlFTeERRVUZQTkUwc1YwRkJRVHRKUVVkRk5VMHNRMEZCUVN4RFFVRlBhV0VzVlVGQlFTeExRVUZsZWxrc1EwRkJRU3hEUVVGRmNVTXNUVUZCUVN4TFFVRlhOMFFzUTBGQlFTeERRVUZQYVdFc1ZVRkJRU3hEUVVGWFF5eE5RVUZCTEVsQlFWVXhXU3hEUVVGQkxFTkJRVVZ4UXl4TlFVRkJMRXRCUVZjM1JDeERRVUZCTEVOQlFVOXBZU3hWUVVGQkxFTkJRVmRGTEUxQlFVRXNTVUZSTjBjeldTeERRVUZCTEVOQlFVVnhReXhOUVVGQkxFdEJRVmMzUkN4RFFVRkJMRU5CUVU5cFlTeFZRVUZCTEVOQlFWZERMRTFCUVVFc1IwRkRlRU5zWVN4RFFVRkJMRU5CUVU5M1VpeFBRVUZCTEVOQlFWRXpVQ3hEUVVGQkxFZEJRVmswUnl4RFFVRkJMRWxCUlROQ2Vra3NRMEZCUVN4RFFVRlBkMUlzVDBGQlFTeERRVUZSTTFBc1EwRkJRU3hMUVZSbExGZEJRVEZDTjBJc1EwRkJRU3hEUVVGUE5GY3NZMEZCUVN4SlFVTlVOVmNzUTBGQlFTeERRVUZQZDFJc1QwRkJRU3hEUVVFMlFpeFRRVUZ5UW5KS0xFTkJRVUVzUjBGQk5FSkJMRU5CUVVFc1IwRkJiVUowUnl4RFFVRkJMRWRCUVZrMFJ5eERRVUZCTEVkQlJUbERMRmRCUVRGQ2Vra3NRMEZCUVN4RFFVRlBORmNzWTBGQlFTeEpRVU5VTlZjc1EwRkJRU3hEUVVGUGQxSXNUMEZCUVN4RFFVRTBRaXhUUVVGd1FuQktMRU5CUVVFc1IwRkJNa0pCTEVOQlFVRXNSMEZCYTBKMlJ5eERRVUZCTEVWQlQyeEZPMFZCUVVFN1FVRkRSanRCUVVWQkxGTkJRVk4xV1N4VFFVRkJPMFZCUTFBc1RVRkJUWFJoTEVOQlFVRXNSMEZCVXp0SlFVRkJPMDFCUTFSM1JDeE5RVUZCTEVWQlEwcDBSQ3hEUVVGQk8wMUJRVTA0UkN4RlFVRkJMRVZCUTA1d1JEdEpRVUZCTEVsQlEwVmFMRU5CUVVFN1JVRkRTaXhKUVVGSldTeERRVUZCTEVsQlFYbENMRTFCUVc1Q1FTeERRVUZCTEVOQlFVZG5TeXhYUVVGQkxFVkJRVzFDTzBWQlJ6VkNNVXNzUTBGQlFTeERRVUZQYVVzc1YwRkJRU3hKUVVOVWJrc3NRMEZCUVN4RFFVRlBkV0VzWVVGQlFUdEZRVWxVTzAxQlFVMDFTU3hqUVVGQkxFVkJRMG81VVN4RFFVRkJPMDFCUVdNclVTeGpRVUZCTEVWQlEyUTVVU3hEUVVGQk8wMUJRV000U0N4UlFVRkJMRVZCUTJRelNEdEpRVUZCTEVsQlEwVnFRaXhEUVVGQk8wbEJRMFZyUWl4RFFVRkJMRWRCUVZsc1FpeERRVUZCTEVOQlFVOW5TU3hQUVVGQkxFbEJRVmRvU1N4RFFVRkJMRU5CUVU5M1JDeE5RVUZCTEVOQlFVOTNSU3hQUVVGQkxFTkJRVkZETEU5QlFVRTdSVUZITVVScVNTeERRVUZCTEVOQlFVOHlVaXhqUVVGQkxFbEJRV2xDTEVkQlEzaENNMUlzUTBGQlFTeERRVUZQTkZJc1kwRkJRU3hKUVVGcFFpeEhRVU40UWpWU0xFTkJRVUVzUTBGQlR6aEhMRlZCUVVFc1NVRkRVRGxITEVOQlFVRXNRMEZCVDNsSUxGbEJRVUVzU1VGRFVIcElMRU5CUVVFc1EwRkJUMnRQTEcxQ1FVRkJPMFZCUTFBc1RVRkJUVGROTEVOQlFVRXNSMEZCWjBKSUxFTkJRVUVzU1VGQllXaENMRU5CUVVFc1EwRkJUM05NTEVsQlFVRTdSVUZCUVN4RlFVTmFMRmRCUVhwQ2RFd3NRMEZCUVN4RFFVRlBaMHNzWVVGQlFTeEpRVUUwUW1oTExFTkJRVUVzUTBGQlQyZExMR0ZCUVVFc1IwRkJaMElzVDBGQlRXeExMRU5CUVVFc1EwRkJUeXRPTEV0QlFVRXNTVUZCVlM5T0xFTkJRVUVzUTBGQlR6aE9MRmRCUVVFc1NVRkJaMEk1VGl4RFFVRkJMRU5CUVU5M1JDeE5RVUZCTEVOQlFVOXBSeXhqUVVGQkxFbEJRVzFDY0Vrc1EwRkJRU3hIUVVkNFNYSkNMRU5CUVVFc1EwRkJUM2RFTEUxQlFVRXNRMEZCVDJkSkxFbEJRVUVzUzBGQlUzUkxMRU5CUVVFc1IwRkRla0pzUWl4RFFVRkJMRU5CUVU5clV5eFhRVUZCTEVOQlFWbHNVeXhEUVVGQkxFTkJRVTkzVUN4VFFVRkJMRVZCUVZjc1NVRkJSeXhKUVVGUExFdEJSUzlEZUZBc1EwRkJRU3hEUVVGUE1GSXNUMEZCUVN4RFFVRlJNVklzUTBGQlFTeERRVUZQT0Uwc1YwRkJRU3hGUVVGaExFbEJRVWNzU1VGQlR5eExRVXd2UXpsTkxFTkJRVUVzUTBGQlR6QlNMRTlCUVVFc1EwRkJVVEZTTEVOQlFVRXNRMEZCVDJ0SkxFMUJRVUVzUTBGQlQzQkVMRTFCUVVFc1IwRkJVeXhIUVVGSExFbEJRVWNzU1VGQlR5eEpRVkZxUkRsRkxFTkJRVUVzUTBGQlQzZGhMRkZCUVVFc1NVRkJXWGhoTEVOQlFVRXNRMEZCVDNkaExGRkJRVUVzUTBGQlUwTXNUMEZCUVN4SlFVRlhlbUVzUTBGQlFTeERRVUZQZDJFc1VVRkJRU3hEUVVGVFJTeE5RVUZCTEV0QlEyaEZReXhaUVVGQkxFTkJRV0V6WVN4RFFVRkJMRU5CUVU5M1lTeFJRVUZCTEVOQlFWTkpMR0ZCUVVFc1IwRkROMEkxWVN4RFFVRkJMRU5CUVU5M1lTeFJRVUZCTEVOQlFWTkpMR0ZCUVVFc1IwRkJaMEkxVml4VlFVRkJMRU5CUVZjN1NVRkRja05vUml4RFFVRkJMRU5CUVU5M1lTeFJRVUZCTEVsQlFWbDRZU3hEUVVGQkxFTkJRVTkzWVN4UlFVRkJMRU5CUVZORExFOUJRVUVzU1VGQlYzcGhMRU5CUVVFc1EwRkJUM2RoTEZGQlFVRXNRMEZCVTBVc1RVRkJRU3hKUVVOb1JURmhMRU5CUVVFc1EwRkJUM2RoTEZGQlFVRXNRMEZCVTBzc1RVRkJRU3hGUVVOc1FqdEZRVUZCTEVkQlEwTXNUMEZIVERkaExFTkJRVUVzUTBGQlR6UlNMR05CUVVFc1IwRkJhVUk1VVN4RFFVRkJMRVZCUTNoQ1pDeERRVUZCTEVOQlFVOHlVaXhqUVVGQkxFZEJRV2xDT1ZFc1EwRkJRU3hGUVVOd1FtSXNRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQZFVrc1lVRkJRU3hKUVVGcFFqbExMRU5CUVVFc1MwRkJZV3BDTEVOQlFVRXNRMEZCVHpSSkxGRkJRVUVzU1VGRGNrUTFTU3hEUVVGQkxFTkJRVTluVFN4aFFVRkJMRVZCUlZnN1FVRkJRVHRCUVVWQkxGTkJRVk00VHl4UlFVRlJPV0VzUTBGQlFUdEZRVU5tTEUxQlFVMUZMRU5CUVVFc1IwRkJVenRGUVVOV1FTeERRVUZCTEVOQlFVOHJTQ3hQUVVGQkxFdEJRMUF2U0N4RFFVRkJMRU5CUVU5NVZpeFZRVUZCTEV0QlEwNTZWaXhEUVVGQkxFTkJRVTl6UkN4TlFVRkJMRU5CUVU5MVdDeGhRVUZCTEVsQlFXVXZZU3hEUVVGQkxFTkJRVVZ6Vnl4alFVRkJMRWxCUXk5Q2NGY3NRMEZCUVN4RFFVRlBjMFFzVFVGQlFTeERRVUZQZDFnc2QwSkJRVUVzU1VGQk5FSTVZU3hEUVVGQkxFTkJRVTkzVVN4VFFVRkJMRXRCUTI1RU1WRXNRMEZCUVN4RFFVRkZNbGtzWlVGQlFTeEpRVU5HTTFrc1EwRkJRU3hEUVVGRmFXSXNkMEpCUVVFc1MwRkhVanRCUVVGQk8wRkJSVUVzVTBGQlUwTXNVMEZCUVR0RlFVTlFMRTFCUVUxc1lpeERRVUZCTEVkQlFWTTdTVUZCUVR0TlFVTlVNRVlzVTBGQlFTeEZRVU5LZUVZc1EwRkJRVHROUVVGVE5FZ3NXVUZCUVN4RlFVTlViRWdzUTBGQlFUdE5RVUZaY1Vnc1QwRkJRU3hGUVVOYWNFZzdTVUZCUVN4SlFVTkZZaXhEUVVGQk8wVkJRMG9zUzBGQlMyRXNRMEZCUVN4RlFVRlRPMFZCVjJRc1NVRkJTVU1zUTBGQlFUdEZRVlpLWkN4RFFVRkJMRU5CUVU5M1VTeHBRa0ZCUVN4SFFVRnZRbmhSTEVOQlFVRXNRMEZCVDNOT0xGTkJRVUVzUlVGRE9VSjBUaXhEUVVGQkxFTkJRVTlwU0N4WlFVRkJMRXRCUTFScVNDeERRVUZCTEVOQlFVOXpUaXhUUVVGQkxFbEJRV0Z3VGl4RFFVRkJMRU5CUVZWcFlpeFZRVUZCTEVkQlJUbENibUlzUTBGQlFTeERRVUZQYzA0c1UwRkJRU3hKUVVGaGNFNHNRMEZCUVN4RFFVRlZhMklzVTBGQlFTeEZRVWRRTEUxQlFYSkNjR0lzUTBGQlFTeERRVUZQYzA0c1UwRkJRU3hMUVVGcFFuUk9MRU5CUVVFc1EwRkJUM05PTEZOQlFVRXNSMEZCV1N4SlFVTXZRM1JPTEVOQlFVRXNRMEZCVDNWUUxHbENRVUZCTEVsQlExQjJVQ3hEUVVGQkxFTkJRVTlyVHl4dFFrRkJRVHRGUVVWUUxFMUJRVTFxVGl4RFFVRkJMRWRCUVdsQ2FrSXNRMEZCUVN4RFFVRlBOazRzV1VGQlFTeExRVUZwUWpkT0xFTkJRVUVzUTBGQlQzbE9MRmxCUVVFN1JVRkZjRVF6VFN4RFFVRkJMRWRCUkhGQ0xFMUJRVzVDUnl4RFFVRkJMRWRCUTFrc1MwRkZRMnBDTEVOQlFVRXNRMEZCVDNOT0xGTkJRVUVzUjBGQldYUk9MRU5CUVVFc1EwRkJUM2xPTEZsQlFVRXNUVUZCYTBKNFRTeERRVUZCTEVWQlJYcEVTQ3hEUVVGQkxFdEJRV2RDWkN4RFFVRkJMRU5CUVU4d1RpeFJRVUZCTEVsQlEzcENNVTRzUTBGQlFTeERRVUZQTkU0c1kwRkJRU3hEUVVGbGFFNHNRMEZCUVN4SlFVRm5RbG9zUTBGQlFTeERRVUZQYzA0c1UwRkJRU3hIUVVGWmRFNHNRMEZCUVN4RFFVRlBjMDRzVTBGQlFTeEhRVVZzUlhST0xFTkJRVUVzUTBGQlQyMUVMRWxCUVVFc1EwRkJTeXhuUWtGQlowSnVSQ3hEUVVGQkxFTkJRVTl6VGl4VFFVRkJMRWRCUVZjc1JVRkRhRVE3UVVGQlFUdEJRVVZCTEZOQlFWTXJUaXhQUVVGUGNtSXNRMEZCUVR0RlFVTmtMRTFCUVUxRkxFTkJRVUVzUjBGQlV6dEZRVU5tZFU4c2IwSkJRVUVzUTBGQmNVSjJUeXhEUVVGQkxFVkJRVkZHTEVOQlFVRXNRMEZCUlN0RUxFMUJRVUVzUjBGRE0wSTNSQ3hEUVVGQkxFTkJRVTl6UkN4TlFVRkJMRU5CUVU5clJ5eFBRVUZCTEVsQlFUSkRMRmRCUVdoRGVFb3NRMEZCUVN4RFFVRlBjMFFzVFVGQlFTeERRVUZQTUVjc1lVRkJRU3hMUVVFMlFtaExMRU5CUVVFc1EwRkJUM05FTEUxQlFVRXNRMEZCVDNsTExGVkJRVUVzU1VGSGRFWXZUaXhEUVVGQkxFTkJRVTlwVVN4TlFVRkJMRVZCUTFRN1FVRkJRVHRCUVVWQkxFbEJRVWx0VEN4clFrRkJRU3hKUVVGeFFqdEJRVU42UWl4VFFVRlRReXh0UWtGQlFTeEhRVUZ6UWp0QlFVTXZRaXhOUVVGTk4xVXNUVUZCUVN4SFFVRlRRU3hEUVVGRE1VY3NRMEZCUVN4RlFVRlJSU3hEUVVGQk8wVkJRM1JDTEUxQlFVMVZMRU5CUVVFc1IwRkJWeXhKUVVGQlZDeHJRa0ZCUVR0SlFVRkJPMDFCUTFoeFJDeE5RVUZCTEVWQlEwb3pReXhEUVVGQk8wMUJRVTF0UkN4RlFVRkJMRVZCUTA1c1JDeERRVUZCTzAxQlFVVTBSU3hUUVVGQkxFVkJRMFo2UlN4RFFVRkJPMDFCUVZOMVlTeE5RVUZCTEVWQlExUjBZVHRKUVVGQkxFbEJRMFZzUWl4RFFVRkJPMGxCUTBWeFFpeERRVUZCTEV0QlFWbFNMRU5CUVVFc1EwRkJUelpZTEUxQlFVRTdTVUZEYmtKc1dDeERRVUZCTEVkQlFYVkNMRk5CUVZoMFFpeERRVUZCTEVkQlFXdENMSEZDUVVGeFFqdEpRVU51UkhkQ0xFTkJRVUVzUjBGQlpYaENMRU5CUVVFN1JVRkhja0paTEVOQlFVRXNRMEZCUjFVc1EwRkJRU3hGUVVGWExHVkJRV1Y0UWl4RFFVRkJMRU5CUVU4MlZTeFpRVUZCTEVWQlFXTTdTVUZEYUVRMFJ5eFBRVUZCTEVkQlFWTTdSVUZCUVN4SlFVVllOMkVzUTBGQlFTeERRVUZUV1N4RFFVRkJMRVZCUVZjc1pVRkJaWGhDTEVOQlFVRXNRMEZCVHpKWUxGZEJRVUVzUlVGQllUdEpRVU55UkRoRUxFOUJRVUVzUjBGQlV6dEpRVU5VUXl4UFFVRkJMRVZCUVVGeVlUdEZRVUZCTEVsQlJVWlVMRU5CUVVFc1EwRkJVMWtzUTBGQlFTeEZRVUZYTEdGQlFXRjRRaXhEUVVGQkxFTkJRVTh5V2l4VlFVRkJMRVZCUVZrN1NVRkRiRVE0UWl4UFFVRkJMRWRCUVZNN1JVRkJRU3hKUVVWWU4yRXNRMEZCUVN4RFFVRlRXU3hEUVVGQkxFVkJRVmNzYVVKQlFXbENlRUlzUTBGQlFTeERRVUZQTWxvc1ZVRkJRU3hGUVVGWk8wbEJRM1JFT0VJc1QwRkJRU3hIUVVGVE8wVkJRVUVzU1VGRldEZGhMRU5CUVVFc1EwRkJVMWtzUTBGQlFTeEZRVUZYTEdOQlFXTjRRaXhEUVVGQkxFTkJRVTh5V2l4VlFVRkJMRVZCUVZrN1NVRkRia1E0UWl4UFFVRkJMRWRCUVZNN1JVRkJRU3hKUVVWWU4yRXNRMEZCUVN4RFFVRlRXU3hEUVVGQkxFVkJRVmNzWjBKQlFXZENlRUlzUTBGQlFTeERRVUZQTWxvc1ZVRkJRU3hGUVVGWk8wbEJRM0pFT0VJc1QwRkJRU3hIUVVGVE8wVkJRVUVzUzBGSlVEVmhMRU5CUVVFc1EwRkJUMnRoTEdGQlFVRXNTVUZCYVVKc1lTeERRVUZCTEVOQlFVOXRZU3gzUWtGQlFTeExRVU5xUTJ4aExFTkJRVUVzUTBGQlIxVXNRMEZCUVN4RlFVRlhMRk5CUVZONFFpeERRVUZCTEVOQlFVODRZU3hQUVVGQkxFZEJRVk1zU1VGRmNrTnFZU3hEUVVGQkxFTkJRVTgyU1N4UFFVRkJMRWxCUTFSNlNTeERRVUZCTEVOQlFWVlBMRU5CUVVFc1JVRkJWeXhWUVVGVmVFSXNRMEZCUVN4RFFVRlBhMklzVVVGQlFTeEhRVWx3UTNKaExFTkJRVUVzUTBGQlR6aGhMRzlDUVVGQkxFZEJRMVF6WWl4RFFVRkJMRU5CUVU4d1FpeERRVUZCTEVWQlFXTlNMRU5CUVVFc1EwRkJUME1zUjBGQlFTeEpRVUZQUkN4RFFVRkJMRU5CUVU5RkxFOUJRVUVzUjBGQlZTdzBRMEZCTkVNc2VVSkJRWGxDYTFvc1VVRkJRU3hIUVVGVkxFdEJSVzVKZEdFc1EwRkJRU3hEUVVGUE1FSXNRMEZCUVN4RlFVRmpMR3RDUVVGclFqUlpMRkZCUVVFc1IwRkJWU3hKUVVsdVJIaGFMRU5CUVVFc1EwRkJSMVVzUTBGQlFTeEZRVUZYTEZGQlFWRjRRaXhEUVVGQkxFTkJRVTl4WWl4TlFVRkJMRVZCUVZFN1NVRkRia05MTEU5QlFVRXNSMEZCVXp0RlFVRkJMRVZCUTFRN1FVRkJRVHRCUVVWS0xGTkJRVk5GTEdGQlFVRTdSVUZEVUN4TlFVRk5OV0lzUTBGQlFTeEhRVUZUTzBsQlExUkZMRU5CUVVFc1IwRkJWeXhKUVVGQlF5eHJRa0ZCUVR0SlFVRkJPMDFCUTFoeFJDeE5RVUZCTEVWQlEwbzFRenRKUVVGQkxFbEJRMFZhTEVOQlFVRTdSVUZEU2tFc1EwRkJRU3hEUVVGUE5sVXNXVUZCUVN4SFFVRmxRU3haUVVGQkxFTkJRV0ZuU0N4SlFVRkJMRU5CUVVzM1lpeERRVUZCTEVkQlEzaERRU3hEUVVGQkxFTkJRVTh5V0N4WFFVRkJMRWRCUVdOQkxGZEJRVUVzUTBGQldXdEZMRWxCUVVFc1EwRkJTemRpTEVOQlFVRXNSMEZEZEVOQkxFTkJRVUVzUTBGQlR6SmFMRlZCUVVFc1IwRkJZVUVzVlVGQlFTeERRVUZYYTBNc1NVRkJRU3hEUVVGTE4ySXNRMEZCUVN4SFFVTm9RMWtzUTBGQlFTeERRVUZQT0Vrc1QwRkJRU3hMUVVOVU1Vb3NRMEZCUVN4RFFVRlBhMklzVVVGQlFTeEhRVUZYUVN4UlFVRkJMRU5CUVZOWExFbEJRVUVzUTBGQlN6ZGlMRU5CUVVFc1NVRkZiRU5CTEVOQlFVRXNRMEZCVHpoaExFOUJRVUVzUjBGQlZVRXNUMEZCUVN4RFFVRlJaU3hKUVVGQkxFTkJRVXMzWWl4RFFVRkJMRWRCUXpsQ1FTeERRVUZCTEVOQlFVOXhZaXhOUVVGQkxFZEJRVk5CTEUxQlFVRXNRMEZCVDFFc1NVRkJRU3hEUVVGTE4ySXNRMEZCUVN4SFFVTjJRbk5pTEd0Q1FVRkJMRXRCUTBod1lpeERRVUZCTEVOQlFWTnJSU3huUWtGQlFTeERRVUZwUWl4alFVRmpiVmdzYTBKQlFVRXNSMEZEZUVORUxHdENRVUZCTEVsQlFYRkNMRWxCUlhaQ05WVXNUVUZCUVN4RFFVRlBNVWNzUTBGQlFTeEZRVUZSTEV0QlEycENPMEZCUVVFN1FVRkRRU3hUUVVGVE9HSXNZVUZCUVR0RlFVVlFjRllzVFVGQlFTeERRVVJsTEUxQlEwRXNUVUZEYWtJN1FVRkJRVHRCUVVOQkxFbEJRVWx4Vml4UlFVRkJMRWRCUVZjN1JVRkRZa2dzV1VGQlFTeEZRVUZCUVN4WlFVRkJPMFZCUTBGRkxGbEJRVUVzUlVGQlFVRTdRVUZCUVR0QlFVZEdMRTFCUVUxRkxHRkJRVUVzUjBGQlowSkJMRU5CUVVOb1l5eERRVUZCTEVWQlFWRkZMRU5CUVVFc1MwRkRkRUpHTEVOQlFVRXNRMEZCVHpaS0xFbEJRVUVzU1VGQlVUTktMRU5CUVVFc1EwRkJUekpLTEVsQlFVRXNTVUZCVVROS0xFTkJRVUVzUTBGQlR6SktMRWxCUVVFc1EwRkJTME1zU1VGQlFTeEhRVUZQTzBGQlJURkVMRk5CUVZONVVTeGpRVUZCTzBWQlExQXNUVUZCVFhaaExFTkJRVUVzUjBGQlV6dEpRVUZCTzAxQlExUjNVQ3hUUVVGQkxFVkJRMHAwVUN4RFFVRkJPMDFCUVZOdlJDeFhRVUZCTEVWQlExUXhReXhEUVVGQk8wMUJRVmMwUXl4TlFVRkJMRVZCUTFnelF5eERRVUZCTzAxQlFVMXRSQ3hGUVVGQkxFVkJRMDVzUkR0SlFVRkJMRWxCUTBWa0xFTkJRVUU3U1VGRFJXbENMRU5CUVVFc1IwRkJZMG9zUTBGQlFTeERRVUZQYzBvc1YwRkJRVHRGUVVNelFpeExRVUZMYkVvc1EwRkJRU3hKUVVGbFFTeERRVUZCTEVsQlFXMUVMRTFCUVhCRGNVY3NUVUZCUVN4RFFVRlBPRU1zU1VGQlFTeERRVUZMYmtvc1EwRkJRU3hGUVVGaE5rUXNUVUZCUVN4RlFVRmpPMFZCUnpGRkxFMUJRVTAxUkN4RFFVRkJMRWRCUVdGc1FpeERRVUZCTEVOQlFVOXBZeXhoUVVGQkxFTkJRV05vWWl4RFFVRkJMRVZCUVdGcVFpeERRVUZCTEVOQlFVOTNSQ3hOUVVGQkxFTkJRVTh3V1N4bFFVRkJMRVZCUVdsQ2JHTXNRMEZCUVN4RFFVRlBaMFVzUlVGQlFUdEZRVU16Uml4TFFVRkxPVU1zUTBGQlFTeEpRVUZqYkVJc1EwRkJRU3hEUVVGUGJXTXNhVUpCUVVFc1MwRkJjMEpxWWl4RFFVRkJMRVZCUVZrN1JVRkROVVFzVFVGRFRVY3NRMEZCUVN4SlFVUjFRa2dzUTBGQlFTeEpRVUZqUkN4RFFVRkJMRWRCUVdOQkxFTkJRVUVzUTBGQldVTXNRMEZCUVN4VFFVRmpMRTFCUTJ4RGJFSXNRMEZCUVN4RFFVRlBiMk1zWTBGQlFUdEpRVU5zUkRWaExFTkJRVUVzUjBGQlkzZGhMR0ZCUVVFc1EwRkJZMmhqTEVOQlFVRXNSVUZCVVdFc1EwRkJRVHRKUVVOd1EyRXNRMEZCUVN4SFFVRmhjMkVzWVVGQlFTeERRVUZqYUdNc1EwRkJRU3hGUVVGUmNVSXNRMEZCUVR0SlFVTnVRMDhzUTBGQlFTeEhRVUZoWml4RFFVRkJMRU5CUVU5dlNDeFBRVUZCTzBWQlEzUkNla2NzUTBGQlFTeExRVUZuUWtVc1EwRkJRU3hKUVVOc1Fsb3NRMEZCUVN4RFFVRkhjMHdzVTBGQlFTeERRVUZWU1N4TlFVRkJMRU5CUVU4c1IwRkJSek5NTEVOQlFVRXNRMEZCVDNOTUxITkNRVUZCTEZGQlFUaENMRWRCUVVkMFRDeERRVUZCTEVOQlFVOXpUQ3h6UWtGQlFTeG5Ra0ZEZEVWdVRTeERRVUZCTEVOQlFVOXhZeXh2UWtGQlFTeFBRVU5ITjJFc1EwRkJRU3hKUVVGbFJTeERRVUZCTEV0QlEzcENXaXhEUVVGQkxFTkJRVWR6VEN4VFFVRkJMRU5CUVZWSExFZEJRVUVzUTBGQlNTeEhRVUZITVV3c1EwRkJRU3hEUVVGUGMwd3NjMEpCUVVFc1ZVRkRka0k1U3l4RFFVRkJMRU5CUVdsQ2Qwa3NTVUZCUVN4RFFVRkxlVk1zU1VGQlFTeEpRVUYxUXl4aFFVRXZRbXBpTEVOQlFVRXNRMEZCYVVKM1NTeEpRVUZCTEVOQlFVdDVVeXhKUVVGQkxFdEJRWE5DYW1Jc1EwRkJRU3hEUVVGcFFuZEpMRWxCUVVFc1EwRkJTM2xUTEVsQlFVRXNTVUZCTmtJc1lVRkJja0o2WWl4RFFVRkJMRU5CUVU5blNpeEpRVUZCTEVOQlFVdDVVeXhKUVVGQkxFdEJRM1JJZUdJc1EwRkJRU3hEUVVGSGMwd3NVMEZCUVN4RFFVRlZSeXhIUVVGQkxFTkJRVWtzUjBGQlJ6Rk1MRU5CUVVFc1EwRkJUM05NTEhOQ1FVRkJMR2RDUVVVM1FtNU5MRU5CUVVFc1EwRkJUM0ZqTEc5Q1FVRkJMRXRCU1ZRc1EwRkJReXhqUVVGakxHTkJRV01zWVVGQllYcFpMRTlCUVVFc1EwRkJVVEZFTEVOQlFVRTdTVUZEYUVRc1UwRkJjME1zVFVGQk0wSnRRaXhEUVVGQkxFTkJRV2xDYmtJc1EwRkJRU3hIUVVGMVFqdEpRVU51UkN4TlFVRk5WU3hEUVVGQkxFZEJRVzFDUXl4RFFVRkJMRU5CUVU5WUxFTkJRVUVzUzBGQlUxY3NRMEZCUVN4RFFVRlBXQ3hEUVVGQkxFVkJRVTByU0N4UFFVRkJPMDFCUTJoRWJrZ3NRMEZCUVN4SFFVRnJRazhzUTBGQlFTeERRVUZwUW01Q0xFTkJRVUVzUzBGQlUyMUNMRU5CUVVFc1EwRkJhVUp1UWl4RFFVRkJMRVZCUVUwclNDeFBRVUZCTzBsQlEzSkZja2dzUTBGQlFTeExRVUZ4UWtVc1EwRkJRU3hKUVVOMlFtUXNRMEZCUVN4RFFVRlBSU3hEUVVGQkxFVkJRVTF4WXl4UFFVRkJMRXRCUlZZellpeERRVUZCTEVsQlFXOUNSU3hEUVVGQkxFbEJRM1pDWkN4RFFVRkJMRU5CUVU5RkxFTkJRVUVzUlVGQlRYTmpMRTFCUVVFc1JVRkRaanRGUVVGQk8wVkJSVVlzVFVGQlRUTmhMRU5CUVVFc1IwRkJiVUpTTEVOQlFVRXNRMEZCYVVKblVTeFRRVUZCTEVsQlFXRm9VU3hEUVVGQkxFTkJRV2xDWjFFc1UwRkJRU3hMUVVGamVGRXNRMEZCUVN4RFFVRlBkMUVzVTBGQlFUdEpRVU4yUm5aUUxFTkJRVUVzUjBGQlkycENMRU5CUVVFc1EwRkJUekpMTEVsQlFVRXNTMEZCVTI1TExFTkJRVUVzUTBGQmFVSTJTU3hoUVVGQkxFdEJRV3RDY2tvc1EwRkJRU3hEUVVGUGNVb3NZVUZCUVN4SlFVRnBRbkpKTEVOQlFVRTdSVUZETTBaQkxFTkJRVUVzU1VGQmIwSnFRaXhEUVVGQkxFbEJRM1JDV2l4RFFVRkJMRU5CUVU5NVl5eGxRVUZCTEVsQlJWUXNTVUZCUVVNc1YwRkJRU3hGUVVGUE1XTXNRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeEZRVUZSYmtNc1EwRkJRVHRGUVVOMFFpeE5RVUZOVlN4RFFVRkJMRWRCUVZrdlFpeERRVUZCTEVOQlFVOTNSQ3hOUVVGQkxFTkJRVTk1UlN4UFFVRkJPMFZCUTJoRFdDeE5RVUZCTEVOQlFVOURMRTFCUVVFc1EwRkJUM1pJTEVOQlFVRXNSVUZCVVR0SlFVTndRbk5ZTEdOQlFVRXNSVUZCWjBKMFdDeERRVUZCTEVOQlFVOTNSQ3hOUVVGQkxFTkJRVTg0VkN4alFVRkJPMGxCUXpsQ00wWXNZMEZCUVN4RlFVRm5Rak5TTEVOQlFVRXNRMEZCVDNkRUxFMUJRVUVzUTBGQlQyMVBMR05CUVVFN1NVRkRPVUpETEdOQlFVRXNSVUZCWjBJMVVpeERRVUZCTEVOQlFVOTNSQ3hOUVVGQkxFTkJRVTl2VHp0RlFVRkJMRWxCUlRWQ2FGRXNRMEZCUVN4TFFVRmxSeXhEUVVGQkxFZEJRMnBDTDBJc1EwRkJRU3hEUVVGUGRXTXNUMEZCUVN4TlFVTkhNMkVzUTBGQlFTeEpRVUZqUnl4RFFVRkJMRWxCUTNoQ0wwSXNRMEZCUVN4RFFVRlBkMk1zVFVGQlFTeEpRVVZVZUdNc1EwRkJRU3hEUVVGUGJXTXNhVUpCUVVFc1IwRkJiMEpxWWl4RFFVRkJMRVZCUXpOQ2JFSXNRMEZCUVN4RFFVRlBiVVFzU1VGQlFTeERRVUZMTEhGQ1FVRnhRamxDTEVOQlFVRXNSMEZETjBKVExFTkJRVUVzU1VGQlpXeENMRU5CUVVFc1MwRkRha0phTEVOQlFVRXNRMEZCVDJkVkxGZEJRVUVzU1VGRFVHaFZMRU5CUVVFc1EwRkJUMmRVTEZWQlFVRXNRMEZCVnpsVExFTkJRVUVzUjBGRGJFSkdMRU5CUVVFc1EwRkJUM2xJTEZsQlFVRXNTMEZGVkhwSUxFTkJRVUVzUTBGQlQyMUVMRWxCUVVFc1EwRkJTeXhqUVVGak9VSXNRMEZCUVN4RFFVTTFRanRCUVVGQk8wRkJSVUVzVTBGQlV6UmhMR05CUVdOcVl5eERRVUZCTEVWQlFXRkZMRU5CUVVFc1JVRkJUVlVzUTBGQlFUdEZRVWw0UXl4VFFVaGhMRTFCUVZSV0xFTkJRVUVzUzBGRFJrRXNRMEZCUVN4SFFVRlBMRmxCUlVwR0xFTkJRVUVzU1VGQmQwSXNaMEpCUVZSRkxFTkJRVUVzUzBGQmVVSlZMRU5CUVVFc1JVRkJZVHRGUVVNeFJDeEpRVUZKUXl4RFFVRkJMRWxCUVdFN1JVRkRha0lzVFVGQlRVTXNRMEZCUVN4SFFVRlRMRWxCUVVGaUxHdENRVUZCTzBsQlExUm5RaXhEUVVGQkxFZEJRWGxDTEdGQlFWUm1MRU5CUVVFc1IwRkJiMEpaTEVOQlFVRXNRMEZCVHpaaUxGZEJRVUVzUjBGQll5OWlMRU5CUVVFc1EwRkJXVzlITEZsQlFVRTdTVUZEY2tVNVJpeERRVUZCTEVkQlFWTnZSeXhOUVVGQkxFTkJRVTg0UXl4SlFVRkJMRU5CUVV0d1N5eERRVUZCTEVWQlFXRjVReXhIUVVGQkxFTkJRVWw2UXl4RFFVRkJPMDFCUXpGRExFbEJRWEZDTEcxQ1FVRldRU3hEUVVGQkxFbEJRVFpETEUxQlFYWkNRU3hEUVVGQkxFTkJRVTFwUXl4UFFVRkJMRU5CUVZFc1RVRkJXVHRSUVVONlJDeE5RVUZOTDBJc1EwRkJRU3hIUVVGWGVVZ3NWVUZCUVN4RFFVRlhNMGdzUTBGQlFTeERRVUZOTkdNc1RVRkJRU3hEUVVGUE8xRkJSWHBETEU5QlFVODdWVUZEVEVNc1MwRkJRU3hGUVVaWk5XSXNRMEZCUVN4SFFVRm5RbVlzUTBGQlFUdFZRVWMxUWpSakxFdEJRVUVzUlVGQlFUbGpPMUZCUVVFc1EwRkZTanROUVVGQk8wMUJRMEVzVDBGQlR6dFJRVU5NTm1Nc1MwRkJRU3hGUVVGUE4yTXNRMEZCUVR0UlFVTlFPR01zUzBGQlFTeEZRVUZCT1dNN1RVRkJRU3hEUVVORU8wbEJRVUU3UlVGRlNHdENMRU5CUVVFc1EwRkJUelppTEVsQlFVRXNRMEZCU3l4RFFVRkRMMk1zUTBGQlFTeEZRVUZIUlN4RFFVRkJMRXRCUVUxcFNDeFJRVUZCTEVOQlFWTnVTQ3hEUVVGQkxFTkJRVVUyWXl4TFFVRkJMRVZCUVU4c1RVRkJUVEZXTEZGQlFVRXNRMEZCVTJwSUxFTkJRVUVzUTBGQlJUSmpMRXRCUVVFc1JVRkJUenRGUVVOb1JTeExRVUZMTEVsQlFVazNZeXhEUVVGQkxFZEJRVWtzUjBGQlIwRXNRMEZCUVN4SFFVRkphMElzUTBGQlFTeERRVUZQTkVRc1RVRkJRU3hGUVVGUk9VVXNRMEZCUVN4SlFVRkxMRWRCUVVjN1NVRkRla003VFVGQlRUaGpMRXRCUVVFc1JVRkRTamRpTEVOQlFVRTdUVUZCU3pSaUxFdEJRVUVzUlVGRFRIaGlPMGxCUVVFc1NVRkRSVWdzUTBGQlFTeERRVUZQYkVJc1EwRkJRVHRKUVVORkxHRkJRVlJGTEVOQlFVRXNSMEZEUlZrc1EwRkJRU3hEUVVGUGEyTXNWVUZCUVN4RFFVRlhMR1ZCUVdVellpeERRVUZCTEU5QlFWazBWaXhQUVVGQkxFdEJReTlEY0Zjc1EwRkJRU3hIUVVGaFNTeERRVUZCTEVsQlJVNUpMRU5CUVVFc1NVRkJVMVFzUTBGQlFTeERRVUZaYlVjc1YwRkJRU3hMUVVNNVFteEhMRU5CUVVFc1IwRkJZVWtzUTBGQlFTeERRVVZxUWp0RlFVRkJPMFZCUTBFc1QwRkJUMG9zUTBGQlFTeEpRVUZqTEV0QlEzWkNPMEZCUVVFN1FVRkZRU3hKUVVGSmMwb3NWMEZCUVN4SFFVRmpPMFZCUTJoQ2IxRXNZVUZCUVN4RlFVRkJRU3hoUVVGQk8wVkJRMEV3UWl4aFFVRkJMRVZCUVVGQk8wRkJRVUU3UVVGSFJpeFRRVUZUWjBJc1pVRkJaV3BrTEVOQlFVRXNSVUZCVTBVc1EwRkJRVHRGUVVNdlFpeE5RVUZOVlN4RFFVRkJMRWRCUVdkQ08wVkJXWFJDTEU5QldFRmFMRU5CUVVFc1EwRkJVVFJFTEU5QlFVRXNRMEZCVVRWRUxFTkJRVUU3U1VGRFRTeHRRa0ZCVkVFc1EwRkJRU3hIUVVOVWMwZ3NUVUZCUVN4RFFVRlBPRU1zU1VGQlFTeERRVUZMY0Vzc1EwRkJRU3hGUVVGTk5FUXNUMEZCUVN4RFFVRlJMME1zUTBGQlFUdE5RVU53UW1Jc1EwRkJRU3hEUVVGTFlTeERRVUZCTEV0QlExQkVMRU5CUVVFc1EwRkJZM2RGTEVsQlFVRXNRMEZCUzJ4R0xFTkJRVUVzUjBGQlUxY3NRMEZCUVN4RFFVTTVRanRKUVVGQkxFdEJSWFZDTEcxQ1FVRlVZaXhEUVVGQkxFbEJRMmhDV1N4RFFVRkJMRU5CUVdOM1JTeEpRVUZCTEVOQlFVdHNSaXhEUVVGQkxFZEJRVk5HTEVOQlFVRXNRMEZET1VJN1JVRkJRU3hKUVVWTFdTeERRVU5VTzBGQlFVRTdRVUZEUVN4VFFVRlRjMk1zVjBGQlFUdEZRVU5RTEUxQlFVMXNaQ3hEUVVGQkxFZEJRVk03U1VGQlFUdE5RVU5VYldRc1ZVRkJRU3hGUVVOS2FtUXNRMEZCUVR0TlFVRlZjMFFzVFVGQlFTeEZRVU5XTlVNc1EwRkJRVHROUVVGTmQyTXNSMEZCUVN4RlFVTk9kbU1zUTBGQlFUdE5RVUZIYlVRc1JVRkJRU3hGUVVOSWJFUXNRMEZCUVR0TlFVRkZNR0VzVFVGQlFTeEZRVU5HZG1FN1NVRkJRU3hKUVVORmFrSXNRMEZCUVR0SlFVVkZhMElzUTBGQlFTeEhRVUZYSzJJc1kwRkJRU3hEUVVGbExFTkJRVU1zWlVGQlpYSmpMRU5CUVVFc1EwRkJUM2xSTEZOQlFVRXNSVUZCVnp0TlFVTm9SU3hoUVVGaGNsSXNRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQYTFVc1VVRkJRU3hKUVVGWk9WY3NRMEZCUVN4RFFVRlBPRmNzVVVGQlFTeERRVUZUZWxBN1NVRkJRU3hIUVVOMFJEdE5RVU5FYjFZc1ZVRkJRU3hGUVVGamVtTXNRMEZCUVN4RFFVRlBjVTQ3U1VGQlFTeEhRVU53UWp0TlFVTkViVkFzUjBGQlFTeEZRVUZQZG1NN1NVRkJRU3hIUVVOT08wMUJRMFJuU2l4SlFVRkJMRVZCUVZGcVNpeERRVUZCTEVOQlFVOXBTaXhKUVVGQkxFbEJRVkZxU2l4RFFVRkJMRU5CUVU5cFNpeEpRVUZCTEVOQlFVdERMRWxCUVVFc1IwRkJUenRKUVVGQkxFZEJRM3BETzAxQlEwUXNaVUZCWld4S0xFTkJRVUVzUTBGQlQybEtMRWxCUVVFc1NVRkJVV3BLTEVOQlFVRXNRMEZCVDJsS0xFbEJRVUVzUTBGQlMwTXNTVUZCUVN4SFFVRlBMRXRCUVRCQ0xHRkJRWEpDYkVvc1EwRkJRU3hEUVVGUGFVb3NTVUZCUVN4RFFVRkxlVk03U1VGQlFTeEhRVU5xUlR0TlFVTkViR0lzVDBGQlFTeEZRVUZYU0N4RFFVRkJMRU5CUVU5SE8wbEJRVUVzUjBGRGFrSTdUVUZEUkVRc1IwRkJRU3hGUVVGUFJpeERRVUZCTEVOQlFVOUZPMGxCUVVFc1IwRkRZanROUVVORUxGbEJRVmxRTEVOQlFVRXNRMEZCVHpoSk8wbEJRVUVzUjBGRGJFSTdUVUZEUkRSVUxGRkJRVUVzUlVGQldURmpMRU5CUVVFc1EwRkJUemhKTEU5QlFVRXNTVUZCVnpsSkxFTkJRVUVzUTBGQlR6WkpPMGxCUVVFc1IwRkRjRU03VFVGRFJDeHJRa0ZCYTBJM1NTeERRVUZCTEVOQlFVOXhURHRKUVVGQkxFbEJRM1pDY2t3c1EwRkJRU3hEUVVGUGRVd3NjMEpCUVVFN1JVRkRXR3BOTEVOQlFVRXNRMEZCVjJ0R0xFbEJRVUVzU1VGQlVXeEZMRU5CUVVFc1IwRkRia0pLTEVOQlFVRXNRMEZCUjNOTUxGTkJRVUVzUTBGQlZVY3NSMEZCUVN4SlFVRlBjazBzUTBGQlFTeEhRVU53UWtZc1EwRkJRU3hEUVVGUGNXTXNiMEpCUVVFc1JVRkRWRHRCUVVGQk8wRkJSVUVzVTBGQlUydENMR05CUVVFN1JVRkRVRHRKUVVOTmRsb3NSVUZCUVN4RlFVTkthRVVzUTBGQlFUdEpRVUZGYldRc1ZVRkJRU3hGUVVOR2FtUTdSVUZCUVN4SlFVaGhPMFZCUzJaR0xFTkJRVUVzUTBGQlIyOU5MRk5CUVVFc1EwRkJWVWtzVFVGQlFTeEpRVUZWZEUwc1EwRkJRU3hIUVV4U0xFdEJUVkp0WXl4dlFrRkJRU3hGUVVOVU8wRkJRVUU3UVVGRlFTeEpRVUZKYlVJc1QwRkJRU3hIUVVGVk8wVkJRMXBPTEZWQlFVRXNSVUZCUVVFc1ZVRkJRVHRGUVVOQlN5eGhRVUZCTEVWQlFVRkJPMEZCUVVFN1FVRkhSaXhUUVVGVGRsSXNZMEZCUVR0RlFVTlFMRTFCUVUxb1RTeERRVUZCTEVkQlFWTTdTVUZCUVR0TlFVVmliMVVzVVVGQlFTeEZRVUZWYkZVc1EwRkJRVHROUVVGVGMwUXNUVUZCUVN4RlFVTnVRalZETzBsQlFVRXNTVUZEUlZvc1EwRkJRVHRKUVVGQk8wMUJRMFYxU1N4clFrRkJRU3hGUVVOS01VZzdTVUZCUVN4SlFVTkZSQ3hEUVVGQk8wVkJRMG9zU1VGQlNVTXNRMEZCUVN4RlFVRnZRanRKUVVOMFFpeE5RVUZOV0N4RFFVRkJMRWRCUVdsQ1JpeERRVUZCTEVOQlFVOXJTU3hOUVVGQkxFTkJRVTl3UkN4TlFVRkJMRWRCUVZNN1RVRkRlRU5zUlN4RFFVRkJMRWRCUVhGQ1dpeERRVUZCTEVOQlFVODRTU3hWUVVGQkxFTkJRVmMxU1N4RFFVRkJMRWxCUVd0Q1JpeERRVUZCTEVOQlFVODRUQ3hsUVVGQkxFTkJRV2RDTlV3c1EwRkJRU3hKUVVGMVF5eEpRVUZ5UWxjc1EwRkJRVHRKUVVONFIySXNRMEZCUVN4RFFVRlBiMVVzVVVGQlFTeEhRVUZYY0ZVc1EwRkJRU3hEUVVGUGQwZ3NTVUZCUVN4SFFVRlBOVWNzUTBGRGJFTTdSVUZCUVN4UFFVTkZXaXhEUVVGQkxFTkJRVTl2VlN4UlFVRkJMRWRCUVhORExFMUJRVE5DY0ZVc1EwRkJRU3hEUVVGUE5Fa3NVVUZCUVN4RFFVRlRPVVFzVFVGQlFUdEZRVUZCTEVOQlJVNHNUVUZCTVVKc1JTeERRVUZCTEVOQlFVOHJVU3hqUVVGQkxFdEJRMVF6VWl4RFFVRkJMRU5CUVU4eVVpeGpRVUZCTEVsQlFXdENNMUlzUTBGQlFTeERRVUZQYjFVc1VVRkJRU3hKUVVWS0xFMUJRVEZDZUZRc1EwRkJRU3hEUVVGUFoxSXNZMEZCUVN4TFFVTlVOVklzUTBGQlFTeERRVUZQTkZJc1kwRkJRU3hKUVVGclFqVlNMRU5CUVVFc1EwRkJUMjlWTEZGQlFVRXNSMEZGT1VKc1ZTeERRVUZCTEVsQlFXRkJMRU5CUVVFc1MwRkJZMFlzUTBGQlFTeERRVUZQYjFVc1VVRkJRU3hMUVVOd1EzQlZMRU5CUVVFc1EwRkJUeXRPTEV0QlFVRXNTVUZCVVN4SlFVVmlOMDRzUTBGQlFTeExRVUZqUml4RFFVRkJMRU5CUVU5dlZTeFJRVUZCTEVsQlEzWkNjRlVzUTBGQlFTeERRVUZQYlVRc1NVRkJRU3hEUVVGTGJrUXNRMEZCUVN4RFFVRlBiMVVzVVVGQlFTeEhRVUZYTEZOQlFWTXNVMEZGTTBNN1FVRkJRVHRCUVVOQkxFbEJRVWx4U2l4bFFVRkJMRWRCUVd0Q08wbEJRM0JDZWxJc1lVRkJRU3hGUVVGQlFUdEZRVUZCTzBWQlIwVXdVaXhSUVVGQkxFZEJRVmM3U1VGRFlrTXNTVUZCUVN4SFFVRk5PMGxCUTA1MFRTeFRRVUZCTEVWQlFWYzdTVUZEV0hsSUxHTkJRVUVzUjBGQlowSTdTVUZEYUVKNlJTeHBRa0ZCUVN4RlFVRnRRanRKUVVOdVFuSkRMRmxCUVVFc1JVRkJZenRKUVVOa2NrWXNTMEZCUVN4RlFVRlBPMGxCUTFCcVJDeFBRVUZCTEVkQlFWTTdTVUZEVkdsVExHOUNRVUZCTEVkQlFYTkNPMGxCUTNSQ2JGa3NZMEZCUVN4SFFVRm5RanRKUVVOb1FtbFdMRTFCUVVFc1IwRkJVVHRKUVVOU2EwWXNZMEZCUVN4SFFVRm5RanRKUVVOb1FqTldMRTlCUVVFc1IwRkJVenRKUVVOVWFWQXNhVUpCUVVFc1JVRkJiVUk3U1VGRmJrSXpWaXhMUVVGQkxFVkJRVTg3U1VGRFVFVXNUVUZCUVN4RlFVRlJPMGxCUlZKclVDdzRRa0ZCUVN4SFFVRm5RenRKUVVWb1EyaFJMRk5CUVVFc1JVRkJWenRKUVVOWWEyUXNSMEZCUVN4RlFVRkxPMGxCUlV3MVNDeHJRa0ZCUVN4SFFVRnZRanRKUVVOd1FrVXNhMEpCUVVFc1JVRkJiMEk3U1VGRmNFSnNTU3hWUVVGQkxFZEJRVms3U1VGRldqTkRMR05CUVVFc1IwRkJaMEk3U1VGRmFFSXJSU3huUWtGQlFTeEhRVUZyUWp0SlFVVnNRbWhHTEUxQlFVRXNSVUZCVVR0SlFVbFNiRUlzVjBGQlFTeFBRVUZoTzBsQlEySXJVaXhsUVVGQkxFVkJRV2xDTzBsQlJXcENiRlFzV1VGQlFTeEZRVUZqTzBsQlEyUnJRaXhoUVVGQkxFVkJRV1U3U1VGRFptVXNZMEZCUVN4RlFVRm5RanRKUVVOb1FrVXNhMEpCUVVFc1JVRkJiMEk3U1VGRGNFSnBTQ3hyUWtGQlFTeEhRVUZ2UWp0SlFVTndRak5KTEdOQlFVRXNSMEZCWjBJN1NVRkRhRUp0UXl4dlFrRkJRU3hIUVVGelFqdEpRVU4wUW5KRUxHdENRVUZCTEVWQlFXOUNPMGxCUlhCQ1J5eHBRa0ZCUVN4RlFVRnRRanRKUVVWdVFqUkhMRzFDUVVGQkxFZEJRWEZDTzBsQlEzSkNla1FzZDBKQlFVRXNSMEZCTUVJN1NVRkZNVUpGTEdGQlFVRXNSMEZCWlR0SlFVVm1ja0lzV1VGQlFTeEhRVUZqTzBsQlJXUnpUeXhWUVVGQkxFVkJRVms3U1VGRFdsWXNWVUZCUVN4RlFVRlpPMGxCUTFwdVJTeGhRVUZCTEVkQlFXVTdTVUZEWml0R0xGZEJRVUVzUjBGQllUdEpRVU5pUml4VlFVRkJMRWRCUVZrN1NVRkRXa01zWlVGQlFTeEZRVUZwUWp0SlFVTnFRa1lzV1VGQlFTeEZRVUZqTzBsQlEyUk1MRmxCUVVFc1IwRkJZenRKUVVOa2NFTXNZMEZCUVN4SFFVRm5RanRKUVVOb1FsQXNVMEZCUVN4RlFVRlhPMGxCUTFnd1FpeDNRa0ZCUVN4SFFVRXdRanRKUVVNeFFteENMSGRDUVVGQkxFZEJRVEJDTzBsQlF6RkNReXcyUWtGQlFTeEhRVUVyUWp0SlFVTXZRbE1zYlVKQlFVRXNSMEZCY1VJN1NVRkZja0kyUml4cFFrRkJRU3hIUVVGdFFqdEpRVVZ1UW5KRkxGVkJRVUVzUjBGQldUdEpRVU5hUkN4bFFVRkJMRVZCUVdsQ08wbEJSV3BDZGs0c2JVSkJRVUVzUjBGQmNVSTdTVUZGY2tKMVNTeFZRVUZCTEVkQlFWazdTVUZGV25WSExHRkJRVUVzUjBGQlpUdEpRVU5tUXl4M1FrRkJRU3hIUVVFd1FqdEpRVU14UWpsTExHMUNRVUZCTEVkQlFYRkNPMGxCUlhKQ01VVXNTVUZCUVN4SFFVRk5PMGxCUTA1dlNDeFpRVUZCTEVWQlFXTTdTVUZEWkZBc2JVSkJRVUVzUjBGQmNVSTdTVUZGY2tKcVJDeE5RVUZCTEVkQlFWRTdTVUZGVW5kRExHTkJRVUVzUjBGQlowSTdTVUZEYUVKRUxHTkJRVUVzUjBGQlowSTdTVUZEYUVKcFJTeFpRVUZCTEVWQlFXTTdTVUZGWkVZc1UwRkJRU3hIUVVGWE8wbEJRMWhNTEdOQlFVRXNSVUZCWjBJN1NVRkRhRUpKTEdsQ1FVRkJMRVZCUVcxQ08wbEJSVzVDYzBrc1owSkJRVUVzUjBGQmEwSTdTVUZEYkVKNlVpeDFRa0ZCUVN4RlFVRjVRanRKUVVWNlFrZ3NjMEpCUVVFc1JVRkJkMEk3U1VGRmVFSXZSQ3hWUVVGQkxFVkJRVms3U1VGRFdpdEdMR2RDUVVGQkxFVkJRV3RDTzBsQlEyeENXaXhwUWtGQlFTeEZRVUZ0UWp0SlFVTnVRbUVzWTBGQlFTeEZRVUZuUWp0SlFVTm9Ra01zWTBGQlFTeEZRVUZuUWp0SlFVTm9RakpRTEZsQlFVRXNSVUZCWXp0SlFVTmtjRkFzYTBKQlFVRXNSVUZCYjBJN1NVRkRjRUpKTEcxQ1FVRkJMRVZCUVhGQ08wbEJSWEpDWXl4clFrRkJRU3hIUVVGdlFqdEpRVVZ3UW0xUExGbEJRVUVzUjBGQll6dEZRVUZCTzBGQlIyaENReXhQUVVGQkxFTkJRVUY0WXl4RFFVRkJMRWRCUVVGbll5eFJRVUZCTzBGQlFVRXNVMEZCVTFNc2JVSkJRVzFDYm1Vc1EwRkJRU3hGUVVGUlJTeERRVUZCTzBWQlEyeERMRTlCUVU4c1ZVRkJjMEpWTEVOQlFVRTdTVUZCUVN4TFFVTm1MRTFCUVZKQkxFTkJRVUVzUzBGRFJrRXNRMEZCUVN4SFFVRk5MRU5CUVVNN1NVRkZWQ3hOUVVGTlF5eERRVUZCTEVkQlFXdENlVWNzVFVGQlFTeERRVUZQT0VNc1NVRkJRU3hEUVVGTGVFb3NRMEZCUVN4RlFVRkxPMDFCUTI1RFJTeERRVUZCTEVkQlFXVkdMRU5CUVVFc1EwRkJTVU1zUTBGQlFUdEpRVU5ITEcxQ1FVRnFRa01zUTBGQlFTeEpRVUU0UXl4VFFVRnFRa0VzUTBGQlFTeEpRVWx3UXl4RFFVRkRMR05CUVdNc1kwRkJZeXhoUVVGaGJVSXNUMEZCUVN4RFFVRlJjRUlzUTBGQlFTeExRVUZ2UWl4TlFVRnBReXhOUVVFMVFtSXNRMEZCUVN4RFFVRlBZU3hEUVVGQkxFMUJRM0JHWWl4RFFVRkJMRU5CUVU5aExFTkJRVUVzU1VGQmJVSTdUVUZEZUVKMVpDeEpRVUZCTEVkQlFVMDdTVUZCUVN4SlFVZEtkbVFzUTBGQlFTeEpRVUZ0UW1Jc1EwRkJRU3hKUVVGVkxHRkJRV0ZqTEVOQlFVRXNTMEZKYUVJc1RVRkJOVUprTEVOQlFVRXNRMEZCVDJFc1EwRkJRU3hOUVVOVVlpeERRVUZCTEVOQlFVOWhMRU5CUVVFc1NVRkJiVUk3VFVGRGVFSnZTQ3hQUVVGQkxFZEJRVk03U1VGQlFTeEpRVWN3UWl4dFFrRkJOVUpxU1N4RFFVRkJMRU5CUVU5aExFTkJRVUVzUzBGQmJVTXNZVUZCWVdJc1EwRkJRU3hEUVVGUFlTeERRVUZCTEUxQlEzWkZZaXhEUVVGQkxFTkJRVTloTEVOQlFVRXNSVUZCYVVKdlNDeFBRVUZCTEVsQlFWVXNTVUZGTDBKcVNTeERRVUZCTEVOQlFVOWhMRU5CUVVFc1RVRkJhMEppTEVOQlFVRXNRMEZCVDJFc1EwRkJRU3hKUVVGdFFqdE5RVU4wUkc5SUxFOUJRVUVzUjBGQlV6dEpRVUZCTEVsQlJWZ3NTVUZCUVhsVkxGZEJRVUVzUlVGQlQzaGpMRU5CUVVFc1JVRkJhMEpWTEVOQlFVRXNTMEZrZGtJc1NVRkJRVGhpTEZkQlFVRXNSVUZCVDNoakxFTkJRVUVzUlVGQmEwSlZMRU5CUVVFc1MwRlVla0lzU1VGQlFUaGlMRmRCUVVFc1JVRkJUM2hqTEVOQlFVRXNSVUZCYTBKVkxFTkJRVUVzUTBGM1FqZENPMFZCUVVFc1EwRkRSanRCUVVGQk8wRkJSMEVzVFVGQlRYbGtMRlZCUVVFc1IwRkJZVHRKUVVOcVFuaFpMR0ZCUVVFc1JVRkJRVUVzWVVGQlFUdEpRVU5CYzBzc1RVRkJRU3hGUVVGQlFTeE5RVUZCTzBsQlEwRTNReXhUUVVGQkxFVkJRVUZCTEZOQlFVRTdTVUZEUVcxRkxGVkJRVUVzUlVGQlFVRXNWVUZCUVR0SlFVTkJjMElzUzBGQlFTeEZRVUZCUVN4TFFVRkJPMGxCUTBGMlNDeEpRVUZCTEVWQlFVRkJMRWxCUVVFN1NVRkRRV2RLTEZWQlFVRXNSVUZCUVVFc1ZVRkJRVHRKUVVOQk9VNHNUVUZCUVN4RlFVRlJjVllzVVVGQlFUdEpRVU5TTlZJc1YwRkJRU3hGUVVGQlFTeFhRVUZCTzBsQlEwRTJRaXhoUVVGQkxFVkJRV1Y1VWl4bFFVRkJPMGxCUTJaRUxFOUJRVUVzUlVGQlFVRTdSVUZCUVR0RlFVVkpZeXhuUWtGQlFTeEhRVUZ0UWl4RFFVRkRPMEZCUXpGQ0xFMUJRVTFETEUxQlFVRTdSVUZEU25oTExGbEJRVUU3U1VGRFJTeEpRVUZKTDFRc1EwRkJRU3hGUVVOQlJTeERRVUZCTzBsQlEwb3NTMEZCU3l4SlFVRkpWU3hEUVVGQkxFZEJRVTl6Uml4VFFVRkJMRU5CUVZWd1FpeE5RVUZCTEVWQlFWRnFSU3hEUVVGQkxFZEJRVThzU1VGQlNYTkdMRXRCUVVFc1EwRkJUWFpHTEVOQlFVRXNSMEZCVDBVc1EwRkJRU3hIUVVGUExFZEJRVWRCTEVOQlFVRXNSMEZCVDBZc1EwRkJRU3hGUVVGTlJTeERRVUZCTEVsQlF5OUZSQ3hEUVVGQkxFTkJRVXRETEVOQlFVRXNTVUZCVVc5R0xGTkJRVUVzUTBGQlZYQkdMRU5CUVVFN1NVRkZUQ3hOUVVGb1FrUXNRMEZCUVN4RFFVRkxhVVVzVFVGQlFTeEpRVUZuUW1wRkxFTkJRVUVzUTBGQlN5eEhRVUZIYTFRc1YwRkJRU3hKUVVGM1JTeGhRVUY2UkhwTkxFMUJRVUVzUTBGQlQydFlMRk5CUVVFc1EwRkJWVU1zVVVGQlFTeERRVUZUYWxjc1NVRkJRU3hEUVVGTE0wZ3NRMEZCUVN4RFFVRkxMRWxCUVVrMFJpeExRVUZCTEVOQlFVMHNTVUZCU1N4TFFVTm9SM1pITEVOQlFVRXNSMEZCVTFjc1EwRkJRU3hEUVVGTExFMUJSV0ppTEVOQlFVRXNSVUZCU1VVc1EwRkJRU3hKUVVGVlZ5eERRVUZCTEVWQlJWcFlMRU5CUVVFc1MwRkJVVUVzUTBGQlFTeEhRVUZUTEVOQlFVTXNTVUZEZGtKQkxFTkJRVUVzUjBGQlV5eEpRVUZCZDJNc1YwRkJRU3hGUVVGUExFTkJRVU1zUjBGQlIzaGpMRU5CUVVFc1IwRkRhRUpHTEVOQlFVRXNTMEZCVDBVc1EwRkJRU3hEUVVGUE9FUXNSVUZCUVN4TFFVRkpPVVFzUTBGQlFTeERRVUZQT0VRc1JVRkJRU3hIUVVGTGFFVXNRMEZCUVR0SlFVTnNReXhOUVVGTmFVSXNRMEZCUVN4SFFVRlhMRWxCUVVGa0xHdENRVUZCTzBsQlEycENMRWxCUVVsRUxFTkJRVUVzUTBGQlR6aEVMRVZCUVVFc1NVRkJNa0lzYlVKQlFXUTVSQ3hEUVVGQkxFTkJRVTg0UkN4RlFVRkJMRWxCUVcxQ0wwTXNRMEZCUVN4RFFVRlRlV1FzWjBKQlFVRXNRMEZCYVVKNFpTeERRVUZCTEVOQlFVODRSQ3hGUVVGQkxFVkJRVWxqTEUxQlFVRXNSMEZCVXl4SFFVRkhPMDFCUTJwSExFMUJRVTA1UlN4RFFVRkJMRWRCUVZVN1RVRlJhRUlzVDBGUVFXbENMRU5CUVVFc1EwRkJVM2xrTEdkQ1FVRkJMRU5CUVdsQ2VHVXNRMEZCUVN4RFFVRlBPRVFzUlVGQlFTeEZRVUZKU2l4UFFVRkJMRU5CUVZGb1JDeERRVUZCTzFGQlF6TkRMRTFCUVUxRExFTkJRVUVzUjBGQldTeEpRVUZCTm1Jc1YwRkJRU3hGUVVGUExFTkJRVU1zUjBGQlIzaGpMRU5CUVVFc1JVRkJVVHRWUVVOdVF6aEVMRVZCUVVFc1JVRkJTWEJFTzFGQlFVRTdVVUZGVGxvc1EwRkJRU3hEUVVGUmIwWXNTVUZCUVN4RFFVRkxMRWxCUVVsdFdpeE5RVUZCTEVOQlFVOHhaQ3hEUVVGQkxFVkJRVmM3VFVGQlFTeEpRVWM1UW1Jc1EwRkRWRHRKUVVGQk8wbEJSMEVzVFVGQlRXdENMRU5CUVVFc1IwRkJVenRKUVVObVFTeERRVUZCTEVOQlFVOTVaQ3hWUVVGQkxFbEJRV0VzUjBGRGNFSjZaQ3hEUVVGQkxFTkJRVTkwUWl4UFFVRkJMRWRCUVZWaExGVkJRVUVzU1VGRGFrSlRMRU5CUVVFc1EwRkJUM05oTEUxQlFVRXNSMEZCVTNKYUxGTkJRVUVzUTBGQlZUdE5RVU40UW5oQ0xGTkJRVUVzUlVGQlYxUXNRMEZCUVN4RFFVRlBVenRKUVVGQkxFbEJSWEJDVHl4RFFVRkJMRU5CUVU5d1FpeFBRVUZCTEVkQlFWVnBSQ3hWUVVGQkxFbEJRMnBDTjBJc1EwRkJRU3hEUVVGUE5FVXNaVUZCUVN4SFFVRnJRaXhEUVVGRExFZEJRekZDTlVVc1EwRkJRU3hEUVVGUGIwWXNhMEpCUVVFc1IwRkJjVUlzU1VGRE5VSndSaXhEUVVGQkxFTkJRVTh3WkN4UFFVRkJMRWRCUVZVc1NVRkJTVEZrTEVOQlFVRXNRMEZCVHpKa0xGZEJRVUVzUjBGRGVFSXpaU3hEUVVGQkxFTkJRVTh3WlN4UFFVRkJMRWxCUVZkNldTeExRVUZCTEVOQlFVMUxMRTlCUVVFc1EwRkJVWFJITEVOQlFVRXNRMEZCVHpCbExFOUJRVUVzUzBGRGVrTXhaQ3hEUVVGQkxFTkJRVTh3WkN4UFFVRkJMRU5CUVZGNFdpeEpRVUZCTEVsQlFWRnNSaXhEUVVGQkxFTkJRVTh3WlN4UFFVRkJPMGxCUldoRExFMUJRVTEyWkN4RFFVRkJMRWRCUVcxQ0xFTkJRVU03U1VGRE1VSklMRU5CUVVFc1EwRkJUekJrTEU5QlFVRXNRMEZCVVdoaUxFOUJRVUVzUTBGQlVUVkVMRU5CUVVFN1RVRkRja0pCTEVOQlFVRXNRMEZCU1R0UlFVTkdkMFFzVFVGQlFTeEZRVUZCZEVRc1EwRkJRVHRSUVVOQkswTXNUVUZCUVN4RlFVRkJMMElzUTBGQlFUdFJRVU5CZFVRc1dVRkJRU3hGUVVGak1Gb3NhMEpCUVVFc1EwRkJiVUpxWlN4RFFVRkJMRVZCUVZGdFFpeERRVUZCTzFGQlEzcEROa0lzUlVGQlFTeEZRVUZKYUVNc1EwRkJRU3hEUVVGUFowTXNSVUZCUVN4RFFVRkhNbGtzU1VGQlFTeERRVUZMTTJFc1EwRkJRVHRSUVVOdVFqWkZMRWxCUVVFc1JVRkJUVGRGTEVOQlFVRXNRMEZCVHpaRkxFbEJRVUVzUTBGQlN6aFdMRWxCUVVFc1EwRkJTek5oTEVOQlFVRTdVVUZEZGtJNFJTeEhRVUZCTEVWQlFVczVSU3hEUVVGQkxFTkJRVTg0UlN4SFFVRkJMRU5CUVVrMlZpeEpRVUZCTEVOQlFVc3pZU3hEUVVGQk8xRkJRM0pDYVVNc1NVRkJRU3hGUVVGTmFrTXNRMEZCUVN4RFFVRlBhVU1zU1VGQlFTeERRVUZMTUZrc1NVRkJRU3hEUVVGTE0yRXNRMEZCUVR0TlFVRkJMRVZCUTNaQ08wbEJRVUU3U1VGSlNpeE5RVUZOVFN4RFFVRkJMRWRCUVdVc1NVRkJRV3RpTEZkQlFVRXNSVUZCVHl4RFFVRkRMRWRCUVVkblFpeFJRVUZCTEVWQlFWVnlZeXhEUVVGQk8wbEJiMGN4UXl4UFFXcEhRVWdzUTBGQlFTeERRVUZQYzBNc1RVRkJRU3hIUVVGVExFbEJRVUZyV2l4WFFVRkJMRVZCUVU4c1EwRkJReXhIUVVGSGJHSXNRMEZCUVN4RlFVRmpPR01zWjBKQlFVRXNSVUZCYTBKd1pTeERRVUZCTEVkQlF6TkVaMElzUTBGQlFTeERRVUZQYTJJc1kwRkJRU3hIUVVGcFFpeEpRVUZCVFN4WFFVRkJMRVZCUVU4c1EwRkJReXhIUVVGSGVHSXNRMEZCUVN4RFFVRlBjME1zVFVGQlFTeEhRVU14UTNSRExFTkJRVUVzUTBGQlR6UmtMRmxCUVVFc1IwRkJaU3hKUVVGQmNFTXNWMEZCUVN4RlFVRlBMRU5CUVVNc1IwRkJSM2hqTEVOQlFVRXNSMEZITjBKblFpeERRVUZCTEVOQlFVOXpReXhOUVVGQkxFbEJRVlYwUXl4RFFVRkJMRU5CUVU5elF5eE5RVUZCTEVOQlFVOU9MRVZCUVVFc1NVRkRha052UlN4TlFVRkJMRU5CUVU4NFF5eEpRVUZCTEVOQlFVdHNTaXhEUVVGQkxFTkJRVTl6UXl4TlFVRkJMRU5CUVU5T0xFVkJRVUVzUlVGQlNWVXNUMEZCUVN4RFFVRlJOVVFzUTBGQlFUdE5RVU53UTJ0Q0xFTkJRVUVzUTBGQlQyZERMRVZCUVVFc1EwRkJSMnhFTEVOQlFVRXNSVUZCVjJ0Q0xFTkJRVUVzUTBGQlQzTkRMRTFCUVVFc1EwRkJUMDRzUlVGQlFTeERRVUZIYkVRc1EwRkJRU3hGUVVGWE8wbEJRVUVzU1VGSGFrUnJRaXhEUVVGQkxFTkJRVTl6UXl4TlFVRkJMRWxCUVZWMFF5eERRVUZCTEVOQlFVOXpReXhOUVVGQkxFTkJRVTgyUXl4TFFVRkJMRWxCUTJwRGJrWXNRMEZCUVN4RFFVRlBiVVlzUzBGQlFTeERRVUZOYmtZc1EwRkJRU3hEUVVGUGMwTXNUVUZCUVN4RFFVRlBOa01zUzBGQlFTeEhRVWszUW1sQ0xFMUJRVUVzUTBGQlQwTXNUVUZCUVN4RFFVRlBja2NzUTBGQlFTeEZRVUZSTzAxQlEzQkNLMGNzVDBGQlFTeEZRVUZUTDBjc1EwRkJRU3hEUVVGUGMwTXNUVUZCUVN4RFFVRlBlVVVzVDBGQlFUdE5RVU4yUW1wRkxFVkJRVUVzUlVGQlFXaEZMRU5CUVVFN1RVRkZRVzFrTEZWQlFVRXNSVUZCV1R0TlFVVmFhbFlzVFVGQlFTeEZRVUZSTzAxQlExSlpMRlZCUVVFc1JVRkJXVHROUVVOYVJpeFJRVUZCTEVWQlFWVTdUVUZEVm10RUxHVkJRVUVzUlVGQmFVSTdUVUZGYWtJM1JTeFpRVUZCTEVWQlFWbEJMRU5CUVVFc1MwRkRlVUlzYVVKQlFUVkNMMFlzUTBGQlFTeERRVUZQYzBNc1RVRkJRU3hEUVVGUE5rNHNVMEZCUVR0TlFVVjJRbTVMTEZWQlFVRXNSVUZCVlVFc1EwRkJRU3hMUVVNeVFpeGxRVUUxUW1oSExFTkJRVUVzUTBGQlQzTkRMRTFCUVVFc1EwRkJUelpPTEZOQlFVRTdUVUZIZGtKMlJTeFhRVUZCTEVWQlFXRTdUVUZEWWpCRExGTkJRVUVzUlVGQlZ6dE5RVVZZTVVJc1YwRkJRU3hIUVVGaE8wMUJRMkpETEV0QlFVRXNSMEZCVHp0TlFVVlFWQ3hUUVVGQkxFVkJRVmM3VFVGRFdHdEVMR2xDUVVGQkxFVkJRVzFDTzAxQlEyNUNPVU1zVVVGQlFTeEZRVUZWTzAxQlExWnhVaXhSUVVGQkxFVkJRVlU3VFVGRFZuSlBMRk5CUVVFc1IwRkJWenROUVVOWWRFUXNjMEpCUVVFN1VVRkhSU3hQUVVGUGRrTXNTVUZCUVN4RFFVRkxiVlVzUzBGQlFTeERRVUZOTEV0QlFVc3hVaXhUUVVGQkxFZEJRVmtzUzBGQlN5eE5RVUZOTEV0QlFVc3NSVUZEY2tRN1RVRkJRVHROUVVWQmNVVXNZMEZCUVN4RlFVRm5RbnBSTEVOQlFVRXNRMEZCVDNORExFMUJRVUVzUTBGQlQyMVBMR05CUVVFN1RVRkRPVUpETEdOQlFVRXNSVUZCWjBJeFVTeERRVUZCTEVOQlFVOXpReXhOUVVGQkxFTkJRVTl2VHl4alFVRkJPMDFCUlRsQ0swSXNaVUZCUVN4RlFVRnBRanRSUVVObWQwSXNVMEZCUVN4UFFVRlhPMUZCUTFoRExFOUJRVUVzVDBGQlV6dFJRVU5VYlVJc2JVSkJRVUVzVDBGQmNVSTdVVUZEY2tKTExHTkJRVUVzVDBGQlowSTdVVUZEYUVKS0xGZEJRVUVzVDBGQllUdFJRVU5pTlVNc1owSkJRVUVzVDBGQmEwSTdVVUZEYkVKelJpeGpRVUZCTEU5QlFXZENPMUZCUTJoQ2JFTXNhMEpCUVVFc1QwRkJiMEk3VVVGRmNFSkZMR2xDUVVGQkxFVkJRVzFDYUZjc1EwRkJRU3hEUVVGUGMwTXNUVUZCUVN4RFFVRlBNRlFzYVVKQlFVRTdVVUZGYWtNeVF5eGhRVUZCTEVWQlFXVTdVVUZEWm05R0xGbEJRVUVzVDBGQll6dFJRVVZrUXl4VlFVRkJMRVZCUVZrN1VVRkRXak5HTEcxQ1FVRkJMRTlCUVhGQ08xRkJRM0pDT1VNc1YwRkJRU3hQUVVGaE8xRkJRMkl6UWl4UFFVRkJMRVZCUVZNN1RVRkJRVHROUVVkWVlTeFZRVUZCTEVkQlFWazdUVUZGV2pKQ0xHTkJRVUVzUlVGQlowSndWeXhEUVVGQkxFTkJRVTl6UXl4TlFVRkJMRU5CUVU4NFZDeGpRVUZCTzAxQlF6bENOVVFzVDBGQlFTeEZRVUZUTzFGQlExQm5SQ3hOUVVGQkxFVkJRVkU3VVVGRFVrTXNUVUZCUVN4RlFVRlJPMUZCUTFKa0xGRkJRVUVzUlVGQlZUdFJRVU5XUlN4UlFVRkJMRVZCUVZVN1VVRkRWbWRFTEVsQlFVRXNSVUZCVFR0TlFVRkJPMDFCUjFKdlJ5eFpRVUZCTEVWQlFXTTdUVUZEWkVNc1dVRkJRU3hGUVVGak8wbEJRVUVzU1VGRmFFSnNaU3hEUVVGQkxFTkJRVTlwUXl4SlFVRkJMRU5CUVVzc1dVRkhVbXBETEVOQlFVRXNRMEZCVDNORExFMUJRVUVzUTBGQlQyMWhMRWxCUVVFc1NVRkRhRUo2WXl4RFFVRkJMRU5CUVU5NVl5eEpRVUZCTEVsQlMwWjZZeXhEUVVOVU8wVkJRVUU3UlVGRFFUSlNMR05CUVdNM1V5eERRVUZCTzBsQlExbzdVVUZCVFRaSUxGRkJRVUVzUlVGRFNqTklMRU5CUVVFN1VVRkJVWE5FTEUxQlFVRXNSVUZEVWpWRE8wMUJRVUVzU1VGRFJUdE5RVU5GUXl4RFFVRkJMRWRCUVZNc1NVRkJRWE5JTEZkQlFVRXNSVUZCWjBKcVNTeERRVUZCTEVWQlFWVXNTVUZCU1ZVc1EwRkJRU3hEUVVGUGQwZ3NWVUZCUVR0TlFVTTVRM1JJTEVOQlFVRXNSMEZCYTBJc1NVRkJRWFZsTEZkQlFVRXNSVUZCWVhobExFTkJRVUVzUTBGQlR6dEpRVU0xUXl4UFFVRlBMRWxCUVVGM1pTeFhRVUZCTEVWQlFXRnlaaXhEUVVGQkxFbEJRVmRqTEVOQlEycERPMFZCUVVFN1JVRkRRVGhNTEc5Q1FVRnZRalZOTEVOQlFVRTdTVUZEYkVJc1QwRkJUeXhMUVVGTE5sTXNZVUZCUVN4RFFVRmpMRXRCUVVzelN5eE5RVUZCTEVOQlFVOXRReXhOUVVGQkxFTkJRVTl1U3l4RFFVRkJMRWxCUVRaRUxFbEJRV3hFUVN4RFFVRkJMRU5CUVZGM1VDeFpRVUZCTEVOQlFXRXNLMEpCUVcxRE1WQXNRMEZCUVN4RlFVRlBMRWRCUTNwSU8wVkJRVUU3UlVGRFFYbFVMR0ZCUVVFN1NVRkRSVHROUVVOTk5Vd3NVVUZCUVN4RlFVTktOMGdzUTBGQlFUdE5RVUZSZDBRc1RVRkJRU3hGUVVOU2RFUTdTVUZCUVN4SlFVaGhPMGxCUVVFc1MwRkxVbWRKTEUxQlFVRXNSMEZCVXl4SlFVRkJReXhYUVVGQkxFVkJRV2RDYmtrc1EwRkJRU3hGUVVGVkxFbEJRVWxGTEVOQlFVRXNRMEZCVDJ0SkxGVkJRVUVzYVVKQlEzWkVPMFZCUVVFN1JVRkRRVzlWTEU5QlFVRTdTVUZEUlN4TlFVRk5lR01zUTBGQlFTeEhRVUZUTzBsQlExaEJMRU5CUVVFc1EwRkJUMmxKTEU5QlFVRXNTMEZEV0dwSkxFTkJRVUVzUTBGQlQybEpMRTlCUVVFc1NVRkJWU3hIUVVOaWFra3NRMEZCUVN4RFFVRlBkMFFzVFVGQlFTeERRVUZQWjFJc1ZVRkJRU3hKUVVOb1FuaFZMRU5CUVVFc1EwRkJUMnRWTEdGQlFVRXNTVUZGVkd4VkxFTkJRVUVzUTBGQlQyMUVMRWxCUVVFc1EwRkJTeXhWUVVOa08wVkJRVUU3UlVGRFFXOWFMRkZCUVVFN1NVRkRSU3hOUVVGTmRtTXNRMEZCUVN4SFFVRlRPMGxCUTFaQkxFTkJRVUVzUTBGQlQybEpMRTlCUVVFc1MwRkRXbXBKTEVOQlFVRXNRMEZCVDJsSkxFOUJRVUVzU1VGQlZTeEhRVU5pYWtrc1EwRkJRU3hEUVVGUGQwUXNUVUZCUVN4RFFVRlBaMUlzVlVGQlFTeEpRVU5vUW5oVkxFTkJRVUVzUTBGQlQzVlZMR1ZCUVVFc1NVRkZWSFpWTEVOQlFVRXNRMEZCVDIxRUxFbEJRVUVzUTBGQlN5eFhRVU5rTzBWQlFVRTdSVUZEUVcxakxGbEJRVmwwWml4RFFVRkJMRVZCUVZWRkxFTkJRVUU3U1VGRGNFSXNUVUZCVFZVc1EwRkJRU3hIUVVGVE8wbEJRMlphTEVOQlFVRXNSMEZCVnpaTExFbEJRVUVzUTBGQlMwc3NSMEZCUVN4RFFVRkpUQ3hKUVVGQkxFTkJRVXRQTEVkQlFVRXNRMEZCU1hCTUxFTkJRVUVzUlVGQlZTeEpRVUZKTzBsQlF6TkRMRTFCUVUxaExFTkJRVUVzUjBGQlRVUXNRMEZCUVN4RFFVRlBOazBzV1VGQlFUdE5RVVZpTTAwc1EwRkJRU3hKUVVSTlJpeERRVUZCTEVOQlFVOXBUaXhaUVVGQkxFdEJRMGxvVGl4RFFVRkJMRWxCUVU5aUxFTkJRVUVzUjBGQlYyRXNRMEZCUVR0SlFVTjZRMFFzUTBGQlFTeERRVUZQTmxBc1YwRkJRU3hEUVVGWk0xQXNRMEZCUVN4UFFVRXdRaXhOUVVGV1dpeERRVUZCTEVkQlFYZENMRWxCUVVsQkxFTkJRVUVzUjBGREwwUlZMRU5CUVVFc1EwRkJUekpQTEdsQ1FVRkJMRWxCUTFBelR5eERRVUZCTEVOQlFVOXpUaXh0UWtGQlFTeEZRVU5VTzBWQlFVRTdSVUZEUVcxUExIRkNRVUZCTzBsQlEwVXNUVUZCVFhKakxFTkJRVUVzUjBGQlV6dEpRVU5tTEV0QlFVdEJMRU5CUVVFc1EwRkJUM2RFTEUxQlFVRXNRMEZCVDNsaExGbEJRVUVzUzBGQmFVSnFaU3hEUVVGQkxFTkJRVTluUlN4RlFVRkJMRVZCUVVrN1NVRkRMME1zVFVGQlRUbEVMRU5CUVVFc1IwRkJUVVlzUTBGQlFTeERRVUZQWjBVc1JVRkJRU3hEUVVGSGRXSXNVMEZCUVN4RFFVRlZMMk1zUzBGQlFTeERRVUZOTEV0QlFVczJTQ3hOUVVGQkxFTkJRVTl1U3l4RFFVRkJMRWxCUTFRc1RVRkJhRU5CTEVOQlFVRXNRMEZCVlN0Q0xFOUJRVUVzUTBGQlVTeGhRVUVyUlN4TlFVRTFSQzlDTEVOQlFVRXNRMEZCVlN0Q0xFOUJRVUVzUTBGQlVXcERMRU5CUVVFc1EwRkJUM2RFTEUxQlFVRXNRMEZCVHpKSkxITkNRVUZCTzBsQlJUbEZiazBzUTBGQlFTeERRVUZQYlVRc1NVRkJRU3hEUVVGTExIRkNRVUZ4UW1wRUxFTkJRVUVzUTBGQlNYTm1MRWxCUVVFc1EwRkJTeXhMUVVNMVF6dEZRVUZCTzBWQlEwRkRMR2RDUVVGblFucG1MRU5CUVVFN1NVRkRaQ3hOUVVGTlJTeERRVUZCTEVkQlFWTTdTVUZEWml4UFFVRkpRU3hEUVVGQkxFTkJRVTl0UkN4VFFVRkJMRWRCUVd0Q0xFdEJRM1JDY2tRc1EwRkJRU3hEUVVGUmRXWXNVMEZCUVN4RFFVRlZMMk1zUzBGQlFTeERRVUZOTEV0QlFVczJTQ3hOUVVGQkxFTkJRVTl5U3l4RFFVRkJMRWxCUTBrc1RVRkJkRU5CTEVOQlFVRXNRMEZCVldsRExFOUJRVUVzUTBGQlVTeHRRa0ZCZVVVc1RVRkJhRVJxUXl4RFFVRkJMRU5CUVZWcFF5eFBRVUZCTEVOQlFWRXZRaXhEUVVGQkxFTkJRVTl6UkN4TlFVRkJMRU5CUVU4MFJTeFZRVUZCTEVkQlEycEdiMWdzU1VGQlFTeERRVUZMTEVsQlExWTdSVUZCUVR0RlFVTkJhRklzYTBKQlFVRTdTVUZEUlN4TlFVRk5lRThzUTBGQlFTeEhRVUZUTzBsQlEyWXNTMEZCUzBFc1EwRkJRU3hEUVVGUGQwUXNUVUZCUVN4RFFVRlBlV0VzV1VGQlFTeExRVUZwUW1wbExFTkJRVUVzUTBGQlQyZEZMRVZCUVVFc1JVRkJTVHRKUVVNdlF5eE5RVUZOT1VRc1EwRkJRU3hIUVVGVk8wbEJRMmhDUml4RFFVRkJMRU5CUVU5clNTeE5RVUZCTEVOQlFVOTBSU3hQUVVGQkxFTkJRVkZvUkN4RFFVRkJPMDFCUTNCQ0xFMUJRVTFETEVOQlFVRXNSMEZCWVdJc1EwRkJRU3hEUVVGUGVXWXNaVUZCUVN4RFFVRm5RamRsTEVOQlFVRTdUVUZETVVOV0xFTkJRVUVzUTBGQlVXdEdMRWxCUVVFc1EwRkJTenRSUVVOWWMyRXNUMEZCUVN4RlFVRkJPV1VzUTBGQlFUdFJRVU5CZFdNc1ZVRkJRU3hGUVVGQmRHTTdUVUZCUVN4SlFVVkdZaXhEUVVGQkxFTkJRVTl0UkN4SlFVRkJMRU5CUVVzc1pVRkJaWFpETEVOQlFVRXNSVUZCVTBNc1EwRkJRU3hEUVVGWE8wbEJRVUVzU1VGRmFrUmlMRU5CUVVFc1EwRkJUMjFFTEVsQlFVRXNRMEZCU3l4cFFrRkJhVUpxUkN4RFFVRkJMRU5CUXk5Q08wVkJRVUU3UlVGRFFTdFBMSEZDUVVGeFFtcFFMRU5CUVVFc1JVRkJUVVVzUTBGQlFUdEpRVUZCTEV0QlExb3NUVUZCVkVZc1EwRkJRU3hMUVVOR1FTeERRVUZCTEVkQlFVOHNhVUpCUlVzc1RVRkJWa1VzUTBGQlFTeExRVU5HUVN4RFFVRkJMRWxCUVZFN1NVRkZWanROUVVOTmMwUXNUVUZCUVN4RlFVTktOVU1zUTBGQlFUdE5RVUZOYzBnc1RVRkJRU3hGUVVOT2NrZ3NRMEZCUVR0TlFVRk5hVWtzVlVGQlFTeEZRVU5PYUVrc1EwRkJRVHROUVVGVlowd3NaVUZCUVN4RlFVTldOMHNzUTBGQlFUdE5RVU5CZFVjc1NVRkJRU3hGUVVGTmRFY3NRMEZCUVR0TlFVRlZORXdzVjBGQlFTeEZRVU5vUW5wTU8wbEJRVUVzU1VGUVlUdEpRVk5tTEVsQlFVbEhMRU5CUVVFc1IwRkJUVHRKUVVOV0xFbEJRVWxhTEVOQlFVRXNRMEZCVHpaSkxHTkJRVUVzUlVGQlowSTdUVUZEZWtJc1NVRkRTWHBLTEVOQlFVRTdVVUZFUVVVc1EwRkJRU3hIUVVGWlZ5eERRVUZCTEVOQlFVOVJMRU5CUVVFc1NVRkJaVklzUTBGQlFTeERRVUZQVVN4RFFVRkJMRVZCUVdFd1NpeGxRVUZCTEVkQlFXdENPMDFCUlRWRkxFdEJRVXNzU1VGQlNXNUxMRU5CUVVFc1IwRkJTVk1zUTBGQlFTeEhRVUZqTEVkQlFVZFVMRU5CUVVFc1IwRkJTVU1zUTBGQlFTeERRVUZQYVVVc1RVRkJRU3hGUVVGUmJFVXNRMEZCUVN4SlFVRkxMRWRCUTJoRVF5eERRVUZCTEVOQlFVOUVMRU5CUVVFc1RVRkJUMW9zUTBGQlFTeExRVU5vUWtVc1EwRkJRU3hKUVVGaFZ5eERRVUZCTEVOQlFVOUVMRU5CUVVFc1JVRkJSMjFMTEdWQlFVRXNSVUZEZGtKMlNpeERRVUZCTEVsQlFVOHNSMEZEU0hSQ0xFTkJRVUVzUjBGQldXZENMRU5CUVVFc1MwRkJXV3hDTEVOQlFVRXNTVUZCV1R0TlFVYzFReXhMUVVGTExFbEJRVWxaTEVOQlFVRXNSMEZCU1ZNc1EwRkJRU3hIUVVGakxFZEJRVWRVTEVOQlFVRXNTVUZCU3l4SFFVRkhRU3hEUVVGQkxFbEJRVXNzUjBGRGNrTkRMRU5CUVVFc1EwRkJUMFFzUTBGQlFTeE5RVUZQV2l4RFFVRkJMRXRCUTJoQ1JTeERRVUZCTEVsQlFXRlhMRU5CUVVFc1EwRkJUMFFzUTBGQlFTeEZRVUZIYlVzc1pVRkJRU3hGUVVOMlFuWktMRU5CUVVFc1NVRkJUeXhIUVVOSWRFSXNRMEZCUVN4SFFVRlpaMElzUTBGQlFTeExRVUZaYkVJc1EwRkJRU3hKUVVGWkxFZEJSemxETzBsQlFVRXNUMEZGUlN4SlFVRmhMR05CUVZSQkxFTkJRVUVzUlVGRFJpeExRVUZMTEVsQlFVbEJMRU5CUVVFc1IwRkJTWEZDTEVOQlFVRXNSMEZCWXl4SFFVRkhja0lzUTBGQlFTeEhRVUZKWVN4RFFVRkJMRU5CUVU5cFJTeE5RVUZCTEVWQlFWRTVSU3hEUVVGQkxFbEJRVXNzUjBGQlJ6dE5RVUZCTEVOQlEyNURSU3hEUVVGQkxFZEJRVkZaTEVOQlFVRXNRMEZCVjJRc1EwRkJRU3hKUVVGTGFVSXNRMEZCUVN4RFFVRm5RbXBDTEVOQlFVRXNTVUZCUzJNc1EwRkJRU3hEUVVGWFR5eERRVUZCTEVsQlFXVklMRU5CUVVFc1IwRkJZVW9zUTBGQlFTeERRVUZYWkN4RFFVRkJMRWxCUVV0akxFTkJRVUVzUTBGQlYwOHNRMEZCUVN4SlFVRmxTQ3hEUVVGQkxFMUJSV2hLVFN4RFFVRkJMRWxCUVU4c1JVRkZXRHRKUVVGQkxFOUJSMEVzUzBGQlN5eEpRVUZKZUVJc1EwRkJRU3hIUVVGSmNVSXNRMEZCUVN4SFFVRmpMRWRCUVVkeVFpeERRVUZCTEVsQlFVc3NSMEZCUjBFc1EwRkJRU3hKUVVGTExFZEJRVWM3VFVGRGVFSmpMRU5CUVVFc1EwRkJWMDhzUTBGQlFTeEpRVUZsVUN4RFFVRkJMRU5CUVZka0xFTkJRVUVzU1VGQlMydENMRU5CUVVFc1MwRkZOVVJOTEVOQlFVRXNTVUZCVHl4RlFVVllPMGxCUVVFN1NVRkhTaXhQUVVGUFFTeERRVU5VTzBWQlFVRTdSVUZEUVRKUExFOUJRVUU3U1VGRFJTeE5RVUZOYmxFc1EwRkJRU3hIUVVGVE8wbEJRMllzUzBGQlMwRXNRMEZCUVN4SlFVRlZRU3hEUVVGQkxFTkJRVTl4UkN4VFFVRkJMRVZCUVZjN1NVRkRha003VFVGQlRYVkdMRkZCUVVFc1JVRkRTakZKTEVOQlFVRTdUVUZCVVhORUxFMUJRVUVzUlVGRFVqVkRPMGxCUVVFc1NVRkRSVm9zUTBGQlFUdEpRV05LTEZOQlFWTmhMRVZCUVVFN1RVRkRVQ3hOUVVGTldDeERRVUZCTEVkQlFXbENSaXhEUVVGQkxFTkJRVTg0U0N4WlFVRkJMRWxCUVcxRExFbEJRWEJDT1Vnc1EwRkJRU3hEUVVGUGMwNHNVMEZCUVN4SFFVRnBRblJPTEVOQlFVRXNRMEZCVDNOT0xGTkJRVUU3VVVGRGRFVXhUU3hEUVVGQkxFZEJRV1ZwU3l4SlFVRkJMRU5CUVV0TExFZEJRVUVzUTBGQlNVd3NTVUZCUVN4RFFVRkxUeXhIUVVGQkxFTkJRVWxzVEN4RFFVRkJMRVZCUVdkQ1JpeERRVUZCTEVOQlFVODJUaXhaUVVGQkxFdEJRV2xDTjA0c1EwRkJRU3hEUVVGUGVVNHNXVUZCUVR0TlFVTjBSbnBPTEVOQlFVRXNRMEZCVDNWUkxGbEJRVUVzUTBGQllUTlFMRU5CUVVFc1IwRkRjRUphTEVOQlFVRXNRMEZCVDNWUUxHbENRVUZCTEVsQlExQjJVQ3hEUVVGQkxFTkJRVTlyVHl4dFFrRkJRU3hGUVVOVU8wbEJRVUU3U1VGRFFTeEpRVUZKY0U0c1EwRkJRVHRKUVVOS0xFbEJjRUpKUml4RFFVRkJMRU5CUVU5MVNpeFhRVUZCTEVsQlExUnVTeXhEUVVGQkxFTkJRVTkxWVN4aFFVRkJMRWxCUlZRc1NVRkJTWFpoTEVOQlFVRXNRMEZCVDJkRkxFVkJRVUVzUTBGQlJ6QmhMR2RDUVVGQkxFTkJRV2xDTEhGQ1FVRnhRamxoTEU5QlFVRXNRMEZCVVRGRUxFTkJRVUU3VFVGRGRFUkJMRU5CUVVFc1EwRkJVWGxtTEZGQlFVRXNTVUZEVm14U0xHOUNRVUZCTEVOQlFYRkNlazhzUTBGQlFTeEZRVUZSUlN4RFFVRkJMRU5CUXk5Q08wbEJRVUVzU1VGRlJrWXNRMEZCUVN4RFFVRlBPRWNzVlVGQlFTeEpRVU5RT1Vjc1EwRkJRU3hEUVVGUGVVZ3NXVUZCUVN4SlFVTlFla2dzUTBGQlFTeERRVUZQTkU0c1kwRkJRU3hKUVVOUU5VNHNRMEZCUVN4RFFVRlBhMDhzYlVKQlFVRXNTVUZUU0hST0xFTkJRVUVzUTBGQlR6aFhMRkZCUVVFc1NVRkJXVGxYTEVOQlFVRXNRMEZCVHpoWExGRkJRVUVzUTBGQlUzcFFMRTlCUVVFc1MwRkJXWEpJTEVOQlFVRXNRMEZCVHpoSkxFOUJRVUVzUlVGRGVFUTNTU3hEUVVGQkxFbEJRMGxFTEVOQlFVRXNRMEZCVDNGT0xGVkJRVUVzU1VGRFZHcFBMRU5CUVVFc1EwRkJUM2xOTEdkQ1FVRkJMRkZCUlVvN1RVRkRUQ3hMUVVFNFFpeFhRVUY2UWpkTUxFTkJRVUVzUTBGQlQzTktMR0ZCUVVFc1NVRkJORUowU2l4RFFVRkJMRU5CUVU5elNpeGhRVUZCTEVkQlFXZENMRTFCUVUxc1N5eERRVUZCTEVOQlFVOHJUaXhMUVVGQkxFdEJRVlZ1VGl4RFFVRkJMRU5CUVU4MlNTeGpRVUZCTEVWQlFXZENPMUZCUXpOSExFMUJRVTEyU2l4RFFVRkJMRWRCUVZOR0xFTkJRVUVzUTBGQlQyZEpMRTlCUVVFc1NVRkJWM0JJTEVOQlFVRXNRMEZCVDI5SUxFOUJRVUVzUTBGQlVVTXNUMEZCUVN4SFFVRlZha2tzUTBGQlFTeERRVUZQWjBrc1QwRkJRU3hEUVVGUlJTeE5RVUZCTEVkQlFWTnNTU3hEUVVGQkxFTkJRVTlyU1N4TlFVRkJPMUZCUTNwR2NFZ3NRMEZCUVN4SFFVRmhaQ3hEUVVGQkxFTkJRVTh3VWl4UFFVRkJMRU5CUVZGNFVpeERRVUZCTEVOQlFVODBSU3hOUVVGQkxFZEJRVk1zUjBGQlJ5eEpRVUZITEVsQlFVOHNSVUZETTBRN1RVRkJRU3hQUVVORmFFVXNRMEZCUVN4SFFVRmhaQ3hEUVVGQkxFTkJRVTh3VWl4UFFVRkJMRU5CUVZFeFVpeERRVUZCTEVOQlFVODRUU3hYUVVGQkxFVkJRV0VzU1VGQlJ5eEpRVUZQTzAxQlJYWkVhRTBzUTBGQlFTeEpRVU5JUkN4RFFVRkJMRVZCUlVvN1NVRkJRVHRKUVVOSlJDeERRVUZCTEVOQlFVOXRUQ3hoUVVGQkxFbEJRV2xDTjB3c1EwRkJRU3hMUVVGaFJpeERRVUZCTEVOQlFVODBTU3hSUVVGQkxFbEJRemxETlVrc1EwRkJRU3hEUVVGUFowMHNZVUZCUVN4SlFVVlVhRTBzUTBGQlFTeERRVUZQYlVRc1NVRkJRU3hEUVVGTExGTkJRMlE3UlVGQlFUdEZRVU5CYzFvc1owSkJRV2RDZW1Nc1EwRkJRU3hGUVVGalJTeERRVUZCTzBsQlFVRXNTMEZEVkN4TlFVRm1RU3hEUVVGQkxFdEJRMFpCTEVOQlFVRXNTVUZCWVR0SlFVVm1MRTFCUVUxVkxFTkJRVUVzUjBGQlV6dE5RVU5VUXl4RFFVRkJMRWRCUVcxQ1JDeERRVUZCTEVOQlFVODBReXhOUVVGQkxFTkJRVTgyVGl4VFFVRkJPMGxCUzNaRExFOUJTa3R5VWl4RFFVRkJMRXRCUlVoQkxFTkJRVUVzUjBGQmIwTXNhVUpCUVhKQ1lTeERRVUZCTEVkQlFXOURMR0ZCUVdFc1pVRkZPVVJpTEVOQlFVRXNTMEZCYVVKaExFTkJRVUVzU1VGQmNVTXNhVUpCUVdwQ1lpeERRVUZCTEVsQlFXdEVMR1ZCUVdwQ1FTeERRVUZCTEV0QlJ6RkZXU3hEUVVGQkxFTkJRVTl2UkN4RlFVRkJMRU5CUVVkdlNTeFRRVUZCTEVOQlFWVkpMRTFCUVVFc1EwRkJUeXhIUVVGSE5Vd3NRMEZCUVN4RFFVRlBORU1zVFVGQlFTeERRVUZQTWtrc2MwSkJRVUVzUjBGQmVVSjBUQ3hEUVVGQkxFdEJRM0pGUkN4RFFVRkJMRU5CUVU5dlJDeEZRVUZCTEVOQlFVZHZTU3hUUVVGQkxFTkJRVlZITEVkQlFVRXNRMEZCU1N4SFFVRkhNMHdzUTBGQlFTeERRVUZQTkVNc1RVRkJRU3hEUVVGUE1ra3NjMEpCUVVFc1IwRkJlVUp1VFN4RFFVRkJMRXRCUTJ4RldTeERRVUZCTEVOQlFVOTVZaXh2UWtGQlFTeEpRVU5RZW1Jc1EwRkJRU3hEUVVGUE5FTXNUVUZCUVN4RFFVRlBOazRzVTBGQlFTeEhRVUZaY2xJc1EwRkJRU3hGUVVNeFFsa3NRMEZCUVN4RFFVRlBjMGdzVFVGQlFTeERRVUZQZEVVc1QwRkJRU3hEUVVGUk1VUXNRMEZCUVR0TlFVTkRMR1ZCUVdwQ1JpeERRVUZCTEVkQlEwWkZMRU5CUVVFc1EwRkJVVWtzUzBGQlFTeERRVUZOYVVJc1MwRkJRU3hIUVVGUkxFdEJSWFJDY2tJc1EwRkJRU3hEUVVGUlNTeExRVUZCTEVOQlFVMXRRaXhOUVVGQkxFZEJRVk1zUlVGRGVrSTdTVUZCUVN4SlFVVkdZaXhEUVVGQkxFTkJRVTkxUXl4SlFVRkJMRU5CUVVzc2IwSkJRMUpxUkN4RFFVRkJMRWxCUVZsVkxFTkJRVUVzUTBGQlQzVlFMRTFCUVVFc1MwRmtaSFpRTEVOQlowSllPMFZCUVVFN1JVRkRRV2RtTEhkQ1FVRjNRalZtTEVOQlFVRTdTVUZEZEVJc1RVRkJUVVVzUTBGQlFTeEhRVUZUTzBsQlExaEJMRU5CUVVFc1EwRkJUMnRrTEVkQlFVRXNTVUZCY1VJc1ZVRkJaSEJrTEVOQlFVRXNTMEZCZDBKRkxFTkJRVUVzUTBGQlQydGtMRWRCUVVFc1NVRkJjVUlzVlVGQlpIQmtMRU5CUVVFc1MwRkRlRVJGTEVOQlFVRXNRMEZCVDJ0a0xFZEJRVUVzUjBGQmIwSXNWVUZCWkhCa0xFTkJRVUVzUlVGRFlrVXNRMEZCUVN4RFFVRlBORWdzV1VGQlFTeEhRVUV5UXl4cFFrRkJOVUkxU0N4RFFVRkJMRU5CUVU5elJDeE5RVUZCTEVOQlFVODJUaXhUUVVGQkxFbEJRVGhDYmxJc1EwRkJRU3hEUVVGUGEyUXNSMEZCUVN4RlFVTnlSV3hrTEVOQlFVRXNRMEZCVDJ0a0xFZEJRVUVzU1VGRFZHeGtMRU5CUVVFc1EwRkJUemhFTEVWQlFVRXNRMEZCUjI5SkxGTkJRVUVzUTBGQlZVY3NSMEZCUVN4RFFVRkpMRWRCUVVkeVRTeERRVUZCTEVOQlFVOXpSQ3hOUVVGQkxFTkJRVTh5U1N4elFrRkJRU3hSUVVONlEycE5MRU5CUVVFc1EwRkJUemhFTEVWQlFVRXNRMEZCUnpaaUxFZEJRVUVzUjBGQlRTeFZRVVZvUWpObUxFTkJRVUVzUTBGQlR6aEVMRVZCUVVFc1EwRkJSMjlKTEZOQlFVRXNRMEZCVlVrc1RVRkJRU3hEUVVGUExFZEJRVWQwVFN4RFFVRkJMRU5CUVU5elJDeE5RVUZCTEVOQlFVOHlTU3h6UWtGQlFTeFJRVU0xUTJwTkxFTkJRVUVzUTBGQlR6aEVMRVZCUVVFc1EwRkJSelppTEVkQlFVRXNSMEZCVFN4UlFVVnNRak5tTEVOQlFVRXNRMEZCVDJsUkxFMUJRVUVzUjBGRFZEdEZRVUZCTzBWQlEwRXlVQ3hOUVVGTk9XWXNRMEZCUVR0SlFVTktMRTFCUVUxRkxFTkJRVUVzUjBGQlV6dEpRVU5tTEVsQlFVbEJMRU5CUVVFc1EwRkJUelptTEU5QlFVRXNSVUZCVXl4UlFVRlBPMGxCUnpOQ0xFbEJRVWx1Wml4RFFVRkJMRWRCUVV0YUxFTkJRVUVzU1VGQlYwVXNRMEZCUVN4RFFVRlBjMFFzVFVGQlFTeERRVUZQVVN4RlFVRkJPMGxCU1d4RExFbEJTR3RDTEcxQ1FVRlFjRVFzUTBGQlFTeExRVU5VUVN4RFFVRkJMRWRCUVV0dlppeFJRVUZCTEVOQlFWTnlVaXhoUVVGQkxFTkJRV012VGl4RFFVRkJMRXRCUlhwQ1FTeERRVUZCTEVWQlEwZ3NVVUZCVHp0SlFVVlVRU3hEUVVGQkxFTkJRVWR4UXl4TlFVRkJMRWRCUVZNdlF5eERRVUZCTEVWQlExSlZMRU5CUVVFc1EwRkJSM0ZtTEZWQlFVRXNTVUZCWTNKbUxFTkJRVUVzUTBGQlIzRm1MRlZCUVVFc1EwRkJWM0pNTEVsQlFVRXNTVUZCZDBNc2RVSkJRV2hEYUZVc1EwRkJRU3hEUVVGSGNXWXNWVUZCUVN4RFFVRlhja3dzU1VGQlFTeERRVUZMZFVNc1VVRkJRU3hMUVVNMVJHcFlMRU5CUVVFc1EwRkJUemhOTEZOQlFVRXNTVUZCV1R0SlFVVnlRaXhOUVVGTmJrMHNRMEZCUVN4SFFVRnhRbkZtTEVOQlFVRXNTMEZEYkVJc1MwRkJTMmhuUWl4RFFVRkJMRU5CUVU5elJDeE5RVUZCTEVOQlFVOTNZU3haUVVGQkxFbEJRV2RDTEVsQlFVbHRReXhKUVVGQkxFZEJRVTh6WkN4TFFVRkJMRU5CUVUwc1MwRkJTMmRrTEVsQlFVRXNRMEZCU3p0SlFWZDJSU3hKUVVGSk1XVXNRMEZCUVN4SFFWUmxPMDFCUTJwQ0xFbEJRVWxHTEVOQlFVRXNTVUZCVFVFc1EwRkJRU3hEUVVGSE5GVXNWVUZCUVN4SlFVRmpOVlVzUTBGQlFTeERRVUZITkZVc1ZVRkJRU3hEUVVGWE4wY3NZVUZCUVN4RlFVRmxPMUZCUjNSRUxFOUJSbGt2VGl4RFFVRkJMRU5CUVVjMFZTeFZRVUZCTEVOQlFWYzNSeXhoUVVGQkxFTkJRV001VGl4RFFVRkJMRWRCUnpGRE8wMUJRVUU3VFVGRFFTeFBRVUZQTEVsQlFVRnpTQ3hYUVVGQkxFVkJRV2RDZGtnc1EwRkJRU3hGUVVGSlF5eERRVUZCTEVsQlFYTkNMRVZCUVVVN1NVRkJRU3hIUVVkeVF6dEpRVzFDYUVJc1VVRnNRa3RETEVOQlFVRXNTVUZCWVZvc1EwRkJRU3hEUVVGUGMwUXNUVUZCUVN4RFFVRlBiMkVzWTBGQlFTeExRVU01UWpsakxFTkJRVUVzUjBGQldTeEpRVUZCYzJZc1YwRkJRU3hGUVVGakxFOUJRVTlzWjBJc1EwRkJRU3hEUVVGUGMwUXNUVUZCUVN4RFFVRlBkMkVzV1VGQlFTeEhRVU12UTNCa0xFTkJRVUVzUTBGQlJ6UlRMRTFCUVVFc1EwRkJUekZUTEVOQlFVRXNSMEZEVml4SlFVRkJjVWdzVjBGQlFTeEZRVUZuUW5aSUxFTkJRVUVzUlVGQlNTeEpRVUZKVml4RFFVRkJMRU5CUVU5elJDeE5RVUZCTEVOQlFVODBSU3hWUVVGQkxFbEJRV040UlN4UFFVRkJMRU5CUVZFMVJDeERRVUZCTzAxQlF6RkVZeXhEUVVGQkxFTkJRVlV3VXl4TlFVRkJMRU5CUVU5NFZDeERRVUZCTEVOQlFWRTdTVUZCUVN4TFFVYzNRbk5JTEUxQlFVRXNRMEZCVDBNc1RVRkJRU3hEUVVGUGNrZ3NRMEZCUVN4RlFVRlJPMDFCUTNCQ09FUXNSVUZCUVN4RlFVRkJjRVFzUTBGQlFUdE5RVU5CT0VVc1UwRkJRU3hGUVVGQk5VVXNRMEZCUVR0TlFVTkJLMGNzVVVGQlFTeEZRVUZWTTBnc1EwRkJRU3hEUVVGUE9FMHNVMEZCUVN4TFFVRmpjRTBzUTBGQlFTeERRVUZIY1dZc1ZVRkJRU3hEUVVGWGNrd3NTVUZCUVN4RFFVRkxlVXdzVlVGQlFTeEhRVUZoZW1Zc1EwRkJRU3hEUVVGSGNXWXNWVUZCUVN4RFFVRlhja3dzU1VGQlFTeEhRVUZQT1ZRc1EwRkJRVHROUVVOd1JqSkZMRTFCUVVFc1JVRkJVWFpHTEVOQlFVRXNRMEZCVHpoTkxGTkJRVUVzUjBGQldYQk5MRU5CUVVFc1EwRkJSM0ZtTEZWQlFVRXNRMEZCVjNKTUxFbEJRVUVzUjBGQlQyaFZMRU5CUVVFN1RVRkRhRVJ0Wml4UFFVRkJMRWRCUVZNN1RVRkZWRE5ETEVkQlFVRXNSVUZCT0VJc1ZVRkJla0o0WXl4RFFVRkJMRU5CUVVkcFppeEhRVUZCTEVOQlFVbDRaQ3hYUVVGQkxFMUJRVFpFTEZWQlFXeERMRWxCUVVFclJTeFhRVUZCTEVWQlFXRjRSeXhEUVVGQkxFVkJRVWs3VFVGRGVFUnJTQ3haUVVGQkxFVkJRVEJETEdsQ1FVRTFRalZJTEVOQlFVRXNRMEZCVDNORUxFMUJRVUVzUTBGQlR6Wk9MRk5CUVVFc1MwRkJkMFFzVlVGQmVrSjZVU3hEUVVGQkxFTkJRVWRwWml4SFFVRkJMRU5CUVVsNFpDeFhRVUZCTEUxQlFUWkVMRlZCUVd4RExFbEJRVUVyUlN4WFFVRkJMRVZCUVdGNFJ5eERRVUZCTEVWQlFVazdUVUZET1VkdFNDeFJRVUZCTEVWQlFXbEVMR3RDUVVGMlF5eEpRVUZCV0N4WFFVRkJMRVZCUVdGMFJ5eERRVUZCTEVWQlFWYzdTVUZCUVN4TFFVVTNRaXhEUVVOVU8wVkJRVUU3UlVGRFFUWmpMRXRCUVVzelpDeERRVUZCTzBsQlEwZ3NUVUZCVFVVc1EwRkJRU3hIUVVGVE8wbEJRMllzU1VGQlNVRXNRMEZCUVN4RFFVRlBiMFFzVjBGQlFTeEZRVUZoTEU5QlFVOXdSQ3hEUVVGQk8wbEJSUzlDTEZGQlFXZENMRTFCUkVGQkxFTkJRVUVzUTBGQlR6Um1MRXRCUVVFc1EwRkJUVGxtTEVOQlFVRXNUVUZGTjBKRkxFTkJRVUVzUTBGQlQybEVMRWxCUVVFc1EwRkJTeXhsUVVkU2FrUXNRMEZCUVN4RFFVRlBjMFFzVFVGQlFTeERRVUZQTWtjc1YwRkJRU3hKUVVOb1FtcExMRU5CUVVFc1EwRkJUM0ZoTEdGQlFVRXNTVUZKVkhKaExFTkJRVUVzUTBGQlQyZGtMRlZCUVVFc1NVRkhVR2hrTEVOQlFVRXNRMEZCVHpSSExGVkJRVUVzU1VGSFVEVkhMRU5CUVVFc1EwRkJUM1ZJTEZsQlFVRXNTVUZEU0haSUxFTkJRVUVzUTBGQlQzTkVMRTFCUVVFc1EwRkJUM1ZKTEdGQlFVRXNTVUZEYUVJM1RDeERRVUZCTEVOQlFVODRUQ3hoUVVGQkxFbEJTVXc1VEN4RFFVRkJMRU5CUVU5elJDeE5RVUZCTEVOQlFVOW5VaXhWUVVGQkxFbEJRV04wVlN4RFFVRkJMRU5CUVU4clNDeFBRVUZCTEVsQlEzSkRMMGdzUTBGQlFTeERRVUZQWjFVc1lVRkJRU3hKUVVsTWFGVXNRMEZCUVN4RFFVRlBjMFFzVFVGQlFTeERRVUZQWjBrc1NVRkJRU3hKUVVGUmRFd3NRMEZCUVN4RFFVRlBPRWdzVDBGQlFTeEpRVUZYT1Vnc1EwRkJRU3hEUVVGUGMwUXNUVUZCUVN4RFFVRlBkMFVzVDBGQlFTeERRVUZSUXl4UFFVRkJMRWRCUTJoRkwwZ3NRMEZCUVN4RFFVRlBkMUlzVDBGQlFTeERRVUZSZUZJc1EwRkJRU3hEUVVGUGMwUXNUVUZCUVN4RFFVRlBkMDhzV1VGQlFTeEhRVUZsT1ZJc1EwRkJRU3hEUVVGUE9FZ3NUMEZCUVN4RFFVRlJNRVFzV1VGQlFTeEZRVUZqTEVkQlFVZDRUQ3hEUVVGQkxFTkJRVTl6UkN4TlFVRkJMRU5CUVU5elRTeHJRa0ZCUVN4SFFVRnZRaXhKUVVGUExFdEJSWEpJTlZBc1EwRkJRU3hEUVVGUGQxSXNUMEZCUVN4RFFVRlJlRklzUTBGQlFTeERRVUZQYzBRc1RVRkJRU3hEUVVGUGQwOHNXVUZCUVN4RlFVRmpMRWRCUVVjNVVpeERRVUZCTEVOQlFVOXpSQ3hOUVVGQkxFTkJRVTl6VFN4clFrRkJRU3hIUVVGdlFpeEpRVUZQTEVsQlNYSkdOVkFzUTBGQlFTeERRVUZQYzBRc1RVRkJRU3hEUVVGUFowa3NTVUZCUVN4SlFVTm9RblJNTEVOQlFVRXNRMEZCVHpoVExGVkJRVUVzU1VGSlZEbFRMRU5CUVVFc1EwRkJUekJpTEZsQlFVRXNTVUZEVUN4SlFVRkpNV0lzUTBGQlFTeERRVUZQT0VRc1JVRkJRU3hEUVVGSE1HRXNaMEpCUVVFc1EwRkJhVUlzY1VKQlFYRkNPV0VzVDBGQlFTeERRVUZSTlVRc1EwRkJRVHROUVVOMFJFRXNRMEZCUVN4RFFVRlJNbVlzVVVGQlFTeEhRVU5XYkZJc2IwSkJRVUVzUTBGQmNVSjJUeXhEUVVGQkxFVkJRVkZHTEVOQlFVRXNTVUZGTjBKQkxFTkJRVUVzUTBGQlVXOUZMR2RDUVVGQkxFTkJRV2xDTEZGQlFWRndSU3hEUVVGQk8xRkJReTlDZVU4c2IwSkJRVUVzUTBGQmNVSjJUeXhEUVVGQkxFVkJRVkZHTEVOQlFVRXNRMEZCUlN0RUxFMUJRVUVzUTBGQlR6dE5RVUZCTEVWQlJURkRPMGxCUVVFc1NVRkZSbWRNTEU5QlFVRXNRMEZCVVRkUExFTkJRVUVzUjBGSFVrRXNRMEZCUVN4RFFVRlBiMFFzVjBGQlFTeEpRVUZqTEVkQlEzSkNlVXdzVDBGQlFTeERRVUZSTjA4c1EwRkJRU3hIUVVkU1FTeERRVUZCTEVOQlFVOXBSQ3hKUVVGQkxFTkJRVXNzVTBGRFdtcEVMRU5CUVVFc1EwRkJUMmxFTEVsQlFVRXNRMEZCU3l4bFFYaEVhMEpxUkN4RFFUQkVhRU03UlVGQlFUdEZRVU5CYjJkQ0xGRkJRVkYwWjBJc1EwRkJRU3hGUVVGblFrVXNRMEZCUVR0SlFVRkJMRXRCUTBNc1RVRkJia0pHTEVOQlFVRXNTMEZEUmtFc1EwRkJRU3hKUVVGcFFpeFRRVVZETEUxQlFXaENSU3hEUVVGQkxFdEJRMFpCTEVOQlFVRXNTVUZCWXp0SlFVVm9RaXhOUVVGTlZTeERRVUZCTEVkQlFWTTdUVUZCUVR0UlFVTlVORU1zVFVGQlFTeEZRVU5LTTBNc1EwRkJRVHRSUVVGTmJVUXNSVUZCUVN4RlFVTk9iRVFzUTBGQlFUdFJRVUZGTkVVc1UwRkJRU3hGUVVOR2VrVXNRMEZCUVR0UlFVRlRhVWdzVFVGQlFTeEZRVU5VYUVnN1RVRkJRU3hKUVVORlRpeERRVUZCTzBsQlEwb3NXVUZCTmtJc1RVRkJiRUpCTEVOQlFVRXNRMEZCVHpSRExFMUJRVUVzU1VGQk1FSTFReXhEUVVGQkxFTkJRVTk1UXl4VFFVRkJMRXRCUjI1RWVrTXNRMEZCUVN4RFFVRlBkVU1zU1VGQlFTeERRVUZMTEd0Q1FVZGFka01zUTBGQlFTeERRVUZQTUVNc1YwRkJRU3hKUVVGakxFZEJSM0pDTVVNc1EwRkJRU3hEUVVGUGEySXNXVUZCUVN4SlFVZElhbUlzUTBGQlFTeERRVUZQTWtzc1NVRkJRU3hKUVVOVU5Vc3NRMEZCUVN4RFFVRlBiMVFzVjBGQlFTeEpRVWxNT1ZRc1EwRkJRU3hMUVVOR1ZTeERRVUZCTEVOQlFVOHlZeXhoUVVGQkxFbEJRMUI2WXl4RFFVRkJMRU5CUVVkblR5eGxRVUZCTEVOQlFXZENMRlZCUTI1Q04wNHNRMEZCUVN4RFFVRlZOazRzWlVGQlFTeERRVUZuUWl4VlFVTjBRalZPTEVOQlFVRXNTVUZCVlVFc1EwRkJRU3hEUVVGUE5FUXNUVUZCUVN4SlFVTnVRalZFTEVOQlFVRXNRMEZCVHpCRExFOUJRVUVzUTBGQlVUVkVMRU5CUVVFN1RVRkRZa0VzUTBGQlFTeERRVUZSYjAwc1UwRkJRU3hEUVVGVlNTeE5RVUZCTEVOQlFVOHpUQ3hEUVVGQkxFTkJRVTh3VFN4cFFrRkJRU3hGUVVGdFFqRk5MRU5CUVVFc1EwRkJUM05PTEdkQ1FVRkJMRVZCUVd0Q2RFNHNRMEZCUVN4RFFVRlBkVTRzWTBGQlFTeEZRVUZuUW5aT0xFTkJRVUVzUTBGQlQzZE9MR05CUVVFc1IwRkRNVWR5VHl4RFFVRkJMRU5CUVZFNFR5eGxRVUZCTEVOQlFXZENMRlZCUTNoQ09VOHNRMEZCUVN4RFFVRlJPRThzWlVGQlFTeERRVUZuUWl3d1FrRkJNRUk3U1VGQlFTeExRVWw0Ukd4UExFTkJRVUVzUTBGQlQzVkRMRWxCUVVFc1EwRkJTeXhaUVVkYWJVVXNUVUZCUVN4RFFVRlBPRU1zU1VGQlFTeERRVUZMZUVvc1EwRkJRU3hEUVVGUGEwWXNaVUZCUVN4RlFVRnBRbXhETEU5QlFVRXNRMEZCVVRWRUxFTkJRVUU3VFVGRE1VTlpMRU5CUVVFc1EwRkJUMjlHTEVkQlFVRXNRMEZCU1doSExFTkJRVUVzUTBGQlZUdEpRVUZCTEV0QlJVRXNUVUZCYmtKQkxFTkJRVUVzUzBGRFJsa3NRMEZCUVN4RFFVRlBiMFFzUlVGQlFTeERRVUZIWml4TlFVRkJMRWRCUVZNc1RVRkRia0lzU1VGQlFYTmtMRmRCUVVFc1JVRkJXVE5tTEVOQlFVRXNTVUZGWkVFc1EwRkJRU3hEUVVGUGVVTXNVMEZCUVN4SlFVRlpMRWxCZEVOV0xFbEJkME5ZTzBWQlFVRTdSVUZEUVN4UFFVRkJiV1FzWlVGQmMwSjRaMElzUTBGQlFUdEpRVU53UWl4SlFVRkJNR01zVjBGQlFTeEZRVUZQTkVJc1owSkJRVUVzUlVGQmEwSjBaU3hEUVVGQkxFTkJRek5DTzBWQlFVRTdSVUZEVnl4WFFVRkJjMlVzYVVKQlFVRTdTVUZEVkN4UFFVRlBRU3huUWtGRFZEdEZRVUZCTzBWQlExY3NWMEZCUVZvc1UwRkJRVHRKUVVOVUxFOUJRVTlCTEZGQlExUTdSVUZCUVR0RlFVTkJMRTlCUVVFclF5eGpRVUZ4UW5wblFpeERRVUZCTzBsQlEyUjFaU3hOUVVGQkxFTkJRVTlETEZOQlFVRXNRMEZCVlVzc1YwRkJRU3hMUVVGaFRpeE5RVUZCTEVOQlFVOURMRk5CUVVFc1EwRkJWVXNzVjBGQlFTeEhRVUZqTzBsQlEyeEZMRTFCUVUwelpTeERRVUZCTEVkQlFWVnhaU3hOUVVGQkxFTkJRVTlETEZOQlFVRXNRMEZCVlVzc1YwRkJRVHRKUVVOa0xIRkNRVUZTTjJVc1EwRkJRU3hKUVVGelFrVXNRMEZCUVN4RFFVRlJLMElzVDBGQlFTeERRVUZSYWtNc1EwRkJRU3hKUVVGUExFdEJRM1JFUlN4RFFVRkJMRU5CUVZGclJpeEpRVUZCTEVOQlFVdHdSaXhEUVVGQkxFTkJSV3BDTzBWQlFVRTdSVUZEUVN4UFFVRkJNR2RDTEVsQlFWY3haMElzUTBGQlFUdEpRVU5VTEU5QlFVbHRSeXhMUVVGQkxFTkJRVTFMTEU5QlFVRXNRMEZCVVhoSExFTkJRVUVzUzBGRGFFSkJMRU5CUVVFc1EwRkJUelJFTEU5QlFVRXNRMEZCVVRWRUxFTkJRVUVzU1VGQlMzVmxMRTFCUVVFc1EwRkJUMnRETEdGQlFVRXNRMEZCWTNwblFpeERRVUZCTEVsQlEyeERkV1VzVFVGQlFTeExRVVZVUVN4TlFVRkJMRU5CUVU5clF5eGhRVUZCTEVOQlFXTjZaMElzUTBGQlFTeEhRVU5rZFdVc1RVRkJRU3hEUVVOVU8wVkJRVUU3UVVGQlFUdEJRVVZHVEN4UFFVRkJMRU5CUVVGeVZpeERRVUZCTEVkQlFVRXdWaXhOUVVGQk8wRkJRVUZxV0N4TlFVRkJMRU5CUVU4NFF5eEpRVUZCTEVOQlFVdHBWU3hWUVVGQkxFVkJRVmw2WVN4UFFVRkJMRU5CUVZFMVJDeERRVUZCTzBWQlF6bENjMGdzVFVGQlFTeERRVUZQT0VNc1NVRkJRU3hEUVVGTGFWVXNWVUZCUVN4RFFVRlhjbVVzUTBGQlFTeEhRVUZwUWpSRUxFOUJRVUVzUTBGQlVURkVMRU5CUVVFN1NVRkRPVU54WlN4TlFVRkJMRU5CUVU5RExGTkJRVUVzUTBGQlZYUmxMRU5CUVVFc1NVRkJaVzFsTEZWQlFVRXNRMEZCVjNKbExFTkJRVUVzUlVGQlowSkZMRU5CUVVFc1EwRkJXVHRGUVVGQkxFVkJRM1pGTzBGQlFVRXNTVUZGU25GbExFMUJRVUVzUTBGQlQyMURMRWRCUVVFc1EwRkJTU3hEUVVGRE1XUXNUVUZCUVN4RlFVRlJkMElzVVVGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYSA9IGVsZW1lbnRQYXJlbnRzO1xuZXhwb3J0cy5iID0gZWxlbWVudE9mZnNldDtcbmV4cG9ydHMuYyA9IGNyZWF0ZUVsZW1lbnQ7XG5leHBvcnRzLmQgPSBub3c7XG5leHBvcnRzLmUgPSBlbGVtZW50Q2hpbGRyZW47XG5leHBvcnRzLmYgPSBlbGVtZW50T3V0ZXJTaXplO1xuZXhwb3J0cy5nID0gZWxlbWVudEluZGV4O1xuZXhwb3J0cy5oID0gZ2V0VHJhbnNsYXRlO1xuZXhwb3J0cy5pID0gZWxlbWVudFRyYW5zaXRpb25FbmQ7XG5leHBvcnRzLmogPSBpc09iamVjdDtcbmV4cG9ydHMuayA9IGdldFNsaWRlVHJhbnNmb3JtRWw7XG5leHBvcnRzLmwgPSBlbGVtZW50U3R5bGU7XG5leHBvcnRzLm0gPSBlbGVtZW50TmV4dEFsbDtcbmV4cG9ydHMubiA9IG5leHRUaWNrO1xuZXhwb3J0cy5vID0gZWxlbWVudFByZXZBbGw7XG5leHBvcnRzLnAgPSBhbmltYXRlQ1NTTW9kZVNjcm9sbDtcbmV4cG9ydHMucSA9IGV4dGVuZDtcbmV4cG9ydHMuciA9IGRlbGV0ZVByb3BzO1xuZXhwb3J0cy5zID0gc2V0Q1NTUHJvcGVydHk7XG52YXIgX3NzcldpbmRvd0VzbU1pbiA9IHJlcXVpcmUoXCIuL3Nzci13aW5kb3cuZXNtLm1pbi5tanNcIik7XG5mdW5jdGlvbiBkZWxldGVQcm9wcyhlKSB7XG4gIGNvbnN0IHQgPSBlO1xuICBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGUgPT4ge1xuICAgIHRyeSB7XG4gICAgICB0W2VdID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgdFtlXTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KTtcbn1cbmZ1bmN0aW9uIG5leHRUaWNrKGUsIHQpIHtcbiAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9IDApLCBzZXRUaW1lb3V0KGUsIHQpO1xufVxuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZSkge1xuICBjb25zdCB0ID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKTtcbiAgbGV0IG47XG4gIHJldHVybiB0LmdldENvbXB1dGVkU3R5bGUgJiYgKG4gPSB0LmdldENvbXB1dGVkU3R5bGUoZSwgbnVsbCkpLCAhbiAmJiBlLmN1cnJlbnRTdHlsZSAmJiAobiA9IGUuY3VycmVudFN0eWxlKSwgbiB8fCAobiA9IGUuc3R5bGUpLCBuO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGUsIHQpIHtcbiAgdm9pZCAwID09PSB0ICYmICh0ID0gXCJ4XCIpO1xuICBjb25zdCBuID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKTtcbiAgbGV0IHIsIG8sIGw7XG4gIGNvbnN0IHMgPSBnZXRDb21wdXRlZFN0eWxlKGUpO1xuICByZXR1cm4gbi5XZWJLaXRDU1NNYXRyaXggPyAobyA9IHMudHJhbnNmb3JtIHx8IHMud2Via2l0VHJhbnNmb3JtLCBvLnNwbGl0KFwiLFwiKS5sZW5ndGggPiA2ICYmIChvID0gby5zcGxpdChcIiwgXCIpLm1hcChlID0+IGUucmVwbGFjZShcIixcIiwgXCIuXCIpKS5qb2luKFwiLCBcIikpLCBsID0gbmV3IG4uV2ViS2l0Q1NTTWF0cml4KFwibm9uZVwiID09PSBvID8gXCJcIiA6IG8pKSA6IChsID0gcy5Nb3pUcmFuc2Zvcm0gfHwgcy5PVHJhbnNmb3JtIHx8IHMuTXNUcmFuc2Zvcm0gfHwgcy5tc1RyYW5zZm9ybSB8fCBzLnRyYW5zZm9ybSB8fCBzLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIikucmVwbGFjZShcInRyYW5zbGF0ZShcIiwgXCJtYXRyaXgoMSwgMCwgMCwgMSxcIiksIHIgPSBsLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpKSwgXCJ4XCIgPT09IHQgJiYgKG8gPSBuLldlYktpdENTU01hdHJpeCA/IGwubTQxIDogMTYgPT09IHIubGVuZ3RoID8gcGFyc2VGbG9hdChyWzEyXSkgOiBwYXJzZUZsb2F0KHJbNF0pKSwgXCJ5XCIgPT09IHQgJiYgKG8gPSBuLldlYktpdENTU01hdHJpeCA/IGwubTQyIDogMTYgPT09IHIubGVuZ3RoID8gcGFyc2VGbG9hdChyWzEzXSkgOiBwYXJzZUZsb2F0KHJbNV0pKSwgbyB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3QoZSkge1xuICByZXR1cm4gXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBudWxsICE9PSBlICYmIGUuY29uc3RydWN0b3IgJiYgXCJPYmplY3RcIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsIC0xKTtcbn1cbmZ1bmN0aW9uIGlzTm9kZShlKSB7XG4gIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgJiYgdm9pZCAwICE9PSB3aW5kb3cuSFRNTEVsZW1lbnQgPyBlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgOiBlICYmICgxID09PSBlLm5vZGVUeXBlIHx8IDExID09PSBlLm5vZGVUeXBlKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgY29uc3QgZSA9IE9iamVjdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB2b2lkIDAgOiBhcmd1bWVudHNbMF0pLFxuICAgIHQgPSBbXCJfX3Byb3RvX19cIiwgXCJjb25zdHJ1Y3RvclwiLCBcInByb3RvdHlwZVwiXTtcbiAgZm9yIChsZXQgbiA9IDE7IG4gPCBhcmd1bWVudHMubGVuZ3RoOyBuICs9IDEpIHtcbiAgICBjb25zdCByID0gbiA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBuID8gdm9pZCAwIDogYXJndW1lbnRzW25dO1xuICAgIGlmIChudWxsICE9IHIgJiYgIWlzTm9kZShyKSkge1xuICAgICAgY29uc3QgbiA9IE9iamVjdC5rZXlzKE9iamVjdChyKSkuZmlsdGVyKGUgPT4gdC5pbmRleE9mKGUpIDwgMCk7XG4gICAgICBmb3IgKGxldCB0ID0gMCwgbyA9IG4ubGVuZ3RoOyB0IDwgbzsgdCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG8gPSBuW3RdLFxuICAgICAgICAgIGwgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsIG8pO1xuICAgICAgICB2b2lkIDAgIT09IGwgJiYgbC5lbnVtZXJhYmxlICYmIChpc09iamVjdChlW29dKSAmJiBpc09iamVjdChyW29dKSA/IHJbb10uX19zd2lwZXJfXyA/IGVbb10gPSByW29dIDogZXh0ZW5kKGVbb10sIHJbb10pIDogIWlzT2JqZWN0KGVbb10pICYmIGlzT2JqZWN0KHJbb10pID8gKGVbb10gPSB7fSwgcltvXS5fX3N3aXBlcl9fID8gZVtvXSA9IHJbb10gOiBleHRlbmQoZVtvXSwgcltvXSkpIDogZVtvXSA9IHJbb10pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIHNldENTU1Byb3BlcnR5KGUsIHQsIG4pIHtcbiAgZS5zdHlsZS5zZXRQcm9wZXJ0eSh0LCBuKTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKGUpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXI6IHQsXG4gICAgdGFyZ2V0UG9zaXRpb246IG4sXG4gICAgc2lkZTogclxuICB9ID0gZTtcbiAgY29uc3QgbyA9ICgwLCBfc3NyV2luZG93RXNtTWluLmEpKCksXG4gICAgbCA9IC10LnRyYW5zbGF0ZTtcbiAgbGV0IHMsXG4gICAgaSA9IG51bGw7XG4gIGNvbnN0IGEgPSB0LnBhcmFtcy5zcGVlZDtcbiAgdC53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSBcIm5vbmVcIiwgby5jYW5jZWxBbmltYXRpb25GcmFtZSh0LmNzc01vZGVGcmFtZUlEKTtcbiAgY29uc3QgYyA9IG4gPiBsID8gXCJuZXh0XCIgOiBcInByZXZcIixcbiAgICBtID0gKGUsIHQpID0+IFwibmV4dFwiID09PSBjICYmIGUgPj0gdCB8fCBcInByZXZcIiA9PT0gYyAmJiBlIDw9IHQsXG4gICAgdSA9ICgpID0+IHtcbiAgICAgIHMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgbnVsbCA9PT0gaSAmJiAoaSA9IHMpO1xuICAgICAgY29uc3QgZSA9IE1hdGgubWF4KE1hdGgubWluKChzIC0gaSkgLyBhLCAxKSwgMCksXG4gICAgICAgIGMgPSAuNSAtIE1hdGguY29zKGUgKiBNYXRoLlBJKSAvIDI7XG4gICAgICBsZXQgcCA9IGwgKyBjICogKG4gLSBsKTtcbiAgICAgIGlmIChtKHAsIG4pICYmIChwID0gbiksIHQud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW3JdOiBwXG4gICAgICB9KSwgbShwLCBuKSkgcmV0dXJuIHQud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIiwgdC53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSBcIlwiLCBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdC53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSBcIlwiLCB0LndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW3JdOiBwXG4gICAgICAgIH0pO1xuICAgICAgfSksIHZvaWQgby5jYW5jZWxBbmltYXRpb25GcmFtZSh0LmNzc01vZGVGcmFtZUlEKTtcbiAgICAgIHQuY3NzTW9kZUZyYW1lSUQgPSBvLnJlcXVlc3RBbmltYXRpb25GcmFtZSh1KTtcbiAgICB9O1xuICB1KCk7XG59XG5mdW5jdGlvbiBnZXRTbGlkZVRyYW5zZm9ybUVsKGUpIHtcbiAgcmV0dXJuIGUucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtdHJhbnNmb3JtXCIpIHx8IGUuc2hhZG93Um9vdCAmJiBlLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtdHJhbnNmb3JtXCIpIHx8IGU7XG59XG5mdW5jdGlvbiBlbGVtZW50Q2hpbGRyZW4oZSwgdCkge1xuICByZXR1cm4gdm9pZCAwID09PSB0ICYmICh0ID0gXCJcIiksIFsuLi5lLmNoaWxkcmVuXS5maWx0ZXIoZSA9PiBlLm1hdGNoZXModCkpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudChlLCB0KSB7XG4gIHZvaWQgMCA9PT0gdCAmJiAodCA9IFtdKTtcbiAgY29uc3QgbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSk7XG4gIHJldHVybiBuLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkodCkgPyB0IDogW3RdKSksIG47XG59XG5mdW5jdGlvbiBlbGVtZW50T2Zmc2V0KGUpIHtcbiAgY29uc3QgdCA9ICgwLCBfc3NyV2luZG93RXNtTWluLmEpKCksXG4gICAgbiA9ICgwLCBfc3NyV2luZG93RXNtTWluLmcpKCksXG4gICAgciA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgbyA9IG4uYm9keSxcbiAgICBsID0gZS5jbGllbnRUb3AgfHwgby5jbGllbnRUb3AgfHwgMCxcbiAgICBzID0gZS5jbGllbnRMZWZ0IHx8IG8uY2xpZW50TGVmdCB8fCAwLFxuICAgIGkgPSBlID09PSB0ID8gdC5zY3JvbGxZIDogZS5zY3JvbGxUb3AsXG4gICAgYSA9IGUgPT09IHQgPyB0LnNjcm9sbFggOiBlLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiByLnRvcCArIGkgLSBsLFxuICAgIGxlZnQ6IHIubGVmdCArIGEgLSBzXG4gIH07XG59XG5mdW5jdGlvbiBlbGVtZW50UHJldkFsbChlLCB0KSB7XG4gIGNvbnN0IG4gPSBbXTtcbiAgZm9yICg7IGUucHJldmlvdXNFbGVtZW50U2libGluZzspIHtcbiAgICBjb25zdCByID0gZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgIHQgPyByLm1hdGNoZXModCkgJiYgbi5wdXNoKHIpIDogbi5wdXNoKHIpLCBlID0gcjtcbiAgfVxuICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIGVsZW1lbnROZXh0QWxsKGUsIHQpIHtcbiAgY29uc3QgbiA9IFtdO1xuICBmb3IgKDsgZS5uZXh0RWxlbWVudFNpYmxpbmc7KSB7XG4gICAgY29uc3QgciA9IGUubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIHQgPyByLm1hdGNoZXModCkgJiYgbi5wdXNoKHIpIDogbi5wdXNoKHIpLCBlID0gcjtcbiAgfVxuICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlLCB0KSB7XG4gIHJldHVybiAoMCwgX3NzcldpbmRvd0VzbU1pbi5hKSgpLmdldENvbXB1dGVkU3R5bGUoZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSh0KTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRJbmRleChlKSB7XG4gIGxldCB0LFxuICAgIG4gPSBlO1xuICBpZiAobikge1xuICAgIGZvciAodCA9IDA7IG51bGwgIT09IChuID0gbi5wcmV2aW91c1NpYmxpbmcpOykgMSA9PT0gbi5ub2RlVHlwZSAmJiAodCArPSAxKTtcbiAgICByZXR1cm4gdDtcbiAgfVxufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZSwgdCkge1xuICBjb25zdCBuID0gW107XG4gIGxldCByID0gZS5wYXJlbnRFbGVtZW50O1xuICBmb3IgKDsgcjspIHQgPyByLm1hdGNoZXModCkgJiYgbi5wdXNoKHIpIDogbi5wdXNoKHIpLCByID0gci5wYXJlbnRFbGVtZW50O1xuICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGUsIHQpIHtcbiAgdCAmJiBlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIGZ1bmN0aW9uIG4ocikge1xuICAgIHIudGFyZ2V0ID09PSBlICYmICh0LmNhbGwoZSwgciksIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgbikpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPdXRlclNpemUoZSwgdCwgbikge1xuICBjb25zdCByID0gKDAsIF9zc3JXaW5kb3dFc21NaW4uYSkoKTtcbiAgcmV0dXJuIG4gPyBlW1wid2lkdGhcIiA9PT0gdCA/IFwib2Zmc2V0V2lkdGhcIiA6IFwib2Zmc2V0SGVpZ2h0XCJdICsgcGFyc2VGbG9hdChyLmdldENvbXB1dGVkU3R5bGUoZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcIndpZHRoXCIgPT09IHQgPyBcIm1hcmdpbi1yaWdodFwiIDogXCJtYXJnaW4tdG9wXCIpKSArIHBhcnNlRmxvYXQoci5nZXRDb21wdXRlZFN0eWxlKGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ3aWR0aFwiID09PSB0ID8gXCJtYXJnaW4tbGVmdFwiIDogXCJtYXJnaW4tYm90dG9tXCIpKSA6IGUub2Zmc2V0V2lkdGg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmtaV3hsZEdWUWNtOXdjeUlzSW1VaUxDSjBJaXdpVDJKcVpXTjBJaXdpYTJWNWN5SXNJbVp2Y2tWaFkyZ2lMQ0p1WlhoMFZHbGpheUlzSW5ObGRGUnBiV1Z2ZFhRaUxDSnViM2NpTENKRVlYUmxJaXdpWjJWMFEyOXRjSFYwWldSVGRIbHNaU0lzSW1kbGRGZHBibVJ2ZHlJc0ltNGlMQ0pqZFhKeVpXNTBVM1I1YkdVaUxDSnpkSGxzWlNJc0ltZGxkRlJ5WVc1emJHRjBaU0lzSW5JaUxDSnZJaXdpYkNJc0luTWlMQ0pYWldKTGFYUkRVMU5OWVhSeWFYZ2lMQ0owY21GdWMyWnZjbTBpTENKM1pXSnJhWFJVY21GdWMyWnZjbTBpTENKemNHeHBkQ0lzSW14bGJtZDBhQ0lzSW0xaGNDSXNJbkpsY0d4aFkyVWlMQ0pxYjJsdUlpd2lUVzk2VkhKaGJuTm1iM0p0SWl3aVQxUnlZVzV6Wm05eWJTSXNJazF6VkhKaGJuTm1iM0p0SWl3aWJYTlVjbUZ1YzJadmNtMGlMQ0puWlhSUWNtOXdaWEowZVZaaGJIVmxJaXdpZEc5VGRISnBibWNpTENKdE5ERWlMQ0p3WVhKelpVWnNiMkYwSWl3aWJUUXlJaXdpYVhOUFltcGxZM1FpTENKamIyNXpkSEoxWTNSdmNpSXNJbkJ5YjNSdmRIbHdaU0lzSW1OaGJHd2lMQ0p6YkdsalpTSXNJbWx6VG05a1pTSXNJbmRwYm1SdmR5SXNJa2hVVFV4RmJHVnRaVzUwSWl3aWJtOWtaVlI1Y0dVaUxDSmxlSFJsYm1RaUxDSmhjbWQxYldWdWRITWlMQ0ptYVd4MFpYSWlMQ0pwYm1SbGVFOW1JaXdpWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJaXdpWlc1MWJXVnlZV0pzWlNJc0lsOWZjM2RwY0dWeVgxOGlMQ0p6WlhSRFUxTlFjbTl3WlhKMGVTSXNJbk5sZEZCeWIzQmxjblI1SWl3aVlXNXBiV0YwWlVOVFUwMXZaR1ZUWTNKdmJHd2lMQ0p6ZDJsd1pYSWlMQ0owWVhKblpYUlFiM05wZEdsdmJpSXNJbk5wWkdVaUxDSjBjbUZ1YzJ4aGRHVWlMQ0pwSWl3aVlTSXNJbkJoY21GdGN5SXNJbk53WldWa0lpd2lkM0poY0hCbGNrVnNJaXdpYzJOeWIyeHNVMjVoY0ZSNWNHVWlMQ0pqWVc1alpXeEJibWx0WVhScGIyNUdjbUZ0WlNJc0ltTnpjMDF2WkdWR2NtRnRaVWxFSWl3aVl5SXNJbTBpTENKcGMwOTFkRTltUW05MWJtUWlMQ0oxSWl3aVlXNXBiV0YwWlNJc0ltZGxkRlJwYldVaUxDSk5ZWFJvSWl3aWJXRjRJaXdpYldsdUlpd2lZMjl6SWl3aVVFa2lMQ0p3SWl3aWMyTnliMnhzVkc4aUxDSnZkbVZ5Wm14dmR5SXNJbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNJc0ltZGxkRk5zYVdSbFZISmhibk5tYjNKdFJXd2lMQ0p4ZFdWeWVWTmxiR1ZqZEc5eUlpd2ljMmhoWkc5M1VtOXZkQ0lzSW1Wc1pXMWxiblJEYUdsc1pISmxiaUlzSW1Ob2FXeGtjbVZ1SWl3aWJXRjBZMmhsY3lJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKa2IyTjFiV1Z1ZENJc0ltTnNZWE56VEdsemRDSXNJbUZrWkNJc0lrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0ltVnNaVzFsYm5SUFptWnpaWFFpTENKblpYUkViMk4xYldWdWRDSXNJbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENJc0ltSnZaSGtpTENKamJHbGxiblJVYjNBaUxDSmpiR2xsYm5STVpXWjBJaXdpYzJOeWIyeHNXU0lzSW5OamNtOXNiRlJ2Y0NJc0luTmpjbTlzYkZnaUxDSnpZM0p2Ykd4TVpXWjBJaXdpZEc5d0lpd2liR1ZtZENJc0ltVnNaVzFsYm5SUWNtVjJRV3hzSWl3aWNISmxkbWx2ZFhORmJHVnRaVzUwVTJsaWJHbHVaeUlzSW5CMWMyZ2lMQ0psYkdWdFpXNTBUbVY0ZEVGc2JDSXNJbTVsZUhSRmJHVnRaVzUwVTJsaWJHbHVaeUlzSW1Wc1pXMWxiblJUZEhsc1pTSXNJbVZzWlcxbGJuUkpibVJsZUNJc0luQnlaWFpwYjNWelUybGliR2x1WnlJc0ltVnNaVzFsYm5SUVlYSmxiblJ6SWl3aWNHRnlaVzUwUld4bGJXVnVkQ0lzSW1Wc1pXMWxiblJVY21GdWMybDBhVzl1Ulc1a0lpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJblJoY21kbGRDSXNJbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElpTENKbGJHVnRaVzUwVDNWMFpYSlRhWHBsSWl3aWIyWm1jMlYwVjJsa2RHZ2lYU3dpYzI5MWNtTmxjeUk2V3lJd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJiblZzYkYwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJSVUVzVTBGQlUwRXNXVUZCV1VNc1EwRkJRVHRGUVVOdVFpeE5RVUZOUXl4RFFVRkJMRWRCUVZORUxFTkJRVUU3UlVGRFprVXNUVUZCUVN4RFFVRlBReXhKUVVGQkxFTkJRVXRHTEVOQlFVRXNSVUZCVVVjc1QwRkJRU3hEUVVGUlNpeERRVUZCTzBsQlF6RkNPMDFCUTBWRExFTkJRVUVzUTBGQlQwUXNRMEZCUVN4SlFVRlBMRWxCUTJoQ08wbEJRVUVzUTBGQlJTeFJRVUZQUVN4RFFVRkJMRWRCUlZRN1NVRkRRVHROUVVGQkxFOUJRMU5ETEVOQlFVRXNRMEZCVDBRc1EwRkJRU3hEUVVOb1FqdEpRVUZCTEVOQlFVVXNVVUZCVDBFc1EwRkJRU3hIUVVWVU8wVkJRVUVzUlVGRlNqdEJRVUZCTzBGQlEwRXNVMEZCVTBzc1UwRkJVMHdzUTBGQlFTeEZRVUZWUXl4RFFVRkJPMFZCU1RGQ0xGbEJTR01zVFVGQlZrRXNRMEZCUVN4TFFVTkdRU3hEUVVGQkxFZEJRVkVzU1VGRlNFc3NWVUZCUVN4RFFVRlhUaXhEUVVGQkxFVkJRVlZETEVOQlFVRXNRMEZET1VJN1FVRkJRVHRCUVVOQkxGTkJRVk5OTEVsQlFVRTdSVUZEVUN4UFFVRlBReXhKUVVGQkxFTkJRVXRFTEVkQlFVRXNSVUZEWkR0QlFVRkJPMEZCUTBFc1UwRkJVMFVzYVVKQlFXbENWQ3hEUVVGQk8wVkJRM2hDTEUxQlFVMURMRU5CUVVFc1IwRkJVeXhKUVVGQlV5eHJRa0ZCUVR0RlFVTm1MRWxCUVVsRExFTkJRVUU3UlVGVlNpeFBRVlJKVml4RFFVRkJMRU5CUVU5UkxHZENRVUZCTEV0QlExUkZMRU5CUVVFc1IwRkJVVllzUTBGQlFTeERRVUZQVVN4blFrRkJRU3hEUVVGcFFsUXNRMEZCUVN4RlFVRkpMRk5CUldwRFZ5eERRVUZCTEVsQlFWTllMRU5CUVVFc1EwRkJSMWtzV1VGQlFTeExRVU5tUkN4RFFVRkJMRWRCUVZGWUxFTkJRVUVzUTBGQlIxa3NXVUZCUVN4SFFVVlNSQ3hEUVVGQkxFdEJRMGhCTEVOQlFVRXNSMEZCVVZnc1EwRkJRU3hEUVVGSFlTeExRVUZCTEVkQlJVNUdMRU5CUTFRN1FVRkJRVHRCUVVOQkxGTkJRVk5ITEdGQlFXRmtMRU5CUVVFc1JVRkJTVU1zUTBGQlFUdEZRVUZCTEV0QlExZ3NUVUZCVkVFc1EwRkJRU3hMUVVOR1FTeERRVUZCTEVkQlFVODdSVUZGVkN4TlFVRk5WU3hEUVVGQkxFZEJRVk1zU1VGQlFVUXNhMEpCUVVFN1JVRkRaaXhKUVVGSlN5eERRVUZCTEVWQlEwRkRMRU5CUVVFc1JVRkRRVU1zUTBGQlFUdEZRVU5LTEUxQlFVMURMRU5CUVVFc1IwRkJWMVFzWjBKQlFVRXNRMEZCYVVKVUxFTkJRVUU3UlVFMlFteERMRTlCTlVKSlZ5eERRVUZCTEVOQlFVOVJMR1ZCUVVFc1NVRkRWRWdzUTBGQlFTeEhRVUZsUlN4RFFVRkJMRU5CUVZORkxGTkJRVUVzU1VGQllVWXNRMEZCUVN4RFFVRlRSeXhsUVVGQkxFVkJRekZEVEN4RFFVRkJMRU5CUVdGTkxFdEJRVUVzUTBGQlRTeExRVUZMUXl4TlFVRkJMRWRCUVZNc1RVRkRia05RTEVOQlFVRXNSMEZCWlVFc1EwRkJRU3hEUVVGaFRTeExRVUZCTEVOQlFVMHNUVUZCVFVVc1IwRkJRU3hEUVVGSmVFSXNRMEZCUVN4SlFVRkxRU3hEUVVGQkxFTkJRVVY1UWl4UFFVRkJMRU5CUVZFc1MwRkJTeXhOUVVGTlF5eEpRVUZCTEVOQlFVc3NVVUZKTjBWVUxFTkJRVUVzUjBGQmEwSXNTVUZCU1U0c1EwRkJRU3hEUVVGUFVTeGxRVUZCTEVOQlFXbERMRmRCUVdwQ1NDeERRVUZCTEVkQlFUQkNMRXRCUVV0QkxFTkJRVUVzVFVGRk5VVkRMRU5CUVVFc1IwRkJhMEpETEVOQlFVRXNRMEZCVTFNc1dVRkJRU3hKUVVGblFsUXNRMEZCUVN4RFFVRlRWU3hWUVVGQkxFbEJRV05XTEVOQlFVRXNRMEZCVTFjc1YwRkJRU3hKUVVGbFdDeERRVUZCTEVOQlFWTlpMRmRCUVVFc1NVRkJaVm9zUTBGQlFTeERRVUZUUlN4VFFVRkJMRWxCUVdGR0xFTkJRVUVzUTBGQlUyRXNaMEpCUVVFc1EwRkJhVUlzWVVGQllVNHNUMEZCUVN4RFFVRlJMR05CUVdNc2RVSkJRM0pOVml4RFFVRkJMRWRCUVZORkxFTkJRVUVzUTBGQlowSmxMRkZCUVVFc1IwRkJWMVlzUzBGQlFTeERRVUZOTEU5QlJTOUNMRkZCUVZSeVFpeERRVUZCTEV0QlJUQkNaU3hEUVVGQkxFZEJRWGhDVEN4RFFVRkJMRU5CUVU5UkxHVkJRVUVzUjBGQlowTkdMRU5CUVVFc1EwRkJaMEpuUWl4SFFVRkJMRWRCUldoRExFOUJRV3hDYkVJc1EwRkJRU3hEUVVGUFVTeE5RVUZCTEVkQlFUaENWeXhWUVVGQkxFTkJRVmR1UWl4RFFVRkJMRU5CUVU4c1QwRkZOVU50UWl4VlFVRkJMRU5CUVZkdVFpeERRVUZCTEVOQlFVOHNUVUZGTTBJc1VVRkJWR1FzUTBGQlFTeExRVVV3UW1Vc1EwRkJRU3hIUVVGNFFrd3NRMEZCUVN4RFFVRlBVU3hsUVVGQkxFZEJRV2REUml4RFFVRkJMRU5CUVdkQ2EwSXNSMEZCUVN4SFFVVm9ReXhQUVVGc1FuQkNMRU5CUVVFc1EwRkJUMUVzVFVGQlFTeEhRVUU0UWxjc1ZVRkJRU3hEUVVGWGJrSXNRMEZCUVN4RFFVRlBMRTlCUlRWRGJVSXNWVUZCUVN4RFFVRlhia0lzUTBGQlFTeERRVUZQTEUxQlJXcERReXhEUVVGQkxFbEJRV2RDTEVOQlEzcENPMEZCUVVFN1FVRkRRU3hUUVVGVGIwSXNVMEZCVTNCRExFTkJRVUU3UlVGRGFFSXNUMEZCYjBJc2JVSkJRVTVCTEVOQlFVRXNTVUZCZDBJc1UwRkJUa0VzUTBGQlFTeEpRVUZqUVN4RFFVRkJMRU5CUVVWeFF5eFhRVUZCTEVsQlFXdEZMR0ZCUVc1RWJrTXNUVUZCUVN4RFFVRlBiME1zVTBGQlFTeERRVUZWVGl4UlFVRkJMRU5CUVZOUExFbEJRVUVzUTBGQlMzWkRMRU5CUVVFc1JVRkJSM2RETEV0QlFVRXNRMEZCVFN4SlFVRkpMRVZCUXpkSE8wRkJRVUU3UVVGRFFTeFRRVUZUUXl4UFFVRlBla01zUTBGQlFUdEZRVVZrTEU5QlFYTkNMSE5DUVVGWU1FTXNUVUZCUVN4VFFVRjNSQ3hOUVVGMlFrRXNUVUZCUVN4RFFVRlBReXhYUVVGQkxFZEJRekZETTBNc1EwRkJRU3haUVVGblFqSkRMRmRCUVVFc1IwRkZiRUl6UXl4RFFVRkJMRXRCUVRKQ0xFMUJRV3hDUVN4RFFVRkJMRU5CUVVzMFF5eFJRVUZCTEVsQlFXOURMRTlCUVd4Q05VTXNRMEZCUVN4RFFVRkxORU1zVVVGQlFTeERRVU01UXp0QlFVRkJPMEZCUTBFc1UwRkJVME1zVDBGQlFUdEZRVU5RTEUxQlFVMDNReXhEUVVGQkxFZEJRVXRGTEUxQlFVRXNRMEZCVHpSRExGTkJRVUVzUTBGQlZYWkNMRTFCUVVFc1NVRkJWU3hUUVVGSkxFbEJRVmwxUWl4VFFVRkJMRU5CUVZVN1NVRkRNVVEzUXl4RFFVRkJMRWRCUVZjc1EwRkJReXhoUVVGaExHVkJRV1U3UlVGRE9VTXNTMEZCU3l4SlFVRkpWU3hEUVVGQkxFZEJRVWtzUjBGQlIwRXNRMEZCUVN4SFFVRkpiVU1zVTBGQlFTeERRVUZWZGtJc1RVRkJRU3hGUVVGUldpeERRVUZCTEVsQlFVc3NSMEZCUnp0SlFVTTFReXhOUVVGTlNTeERRVUZCTEVkQlFXRktMRU5CUVVFc1IwRkJTU3hMUVVGTGJVTXNVMEZCUVN4RFFVRlZka0lzVFVGQlFTeEpRVUZWV2l4RFFVRkJMRkZCUVVrc1NVRkJXVzFETEZOQlFVRXNRMEZCVlc1RExFTkJRVUU3U1VGRE1VVXNTVUZCU1N4UlFVRkJTU3hEUVVGQkxFdEJRVzlFTUVJc1RVRkJRU3hEUVVGUE1VSXNRMEZCUVN4SFFVRmhPMDFCUXpGRkxFMUJRVTFLTEVOQlFVRXNSMEZCV1ZRc1RVRkJRU3hEUVVGUFF5eEpRVUZCTEVOQlFVdEVMRTFCUVVFc1EwRkJUMkVzUTBGQlFTeEhRVUZoWjBNc1RVRkJRU3hEUVVGUEwwTXNRMEZCUVN4SlFVRlBReXhEUVVGQkxFTkJRVk1yUXl4UFFVRkJMRU5CUVZGb1JDeERRVUZCTEVsQlFVODdUVUZEZUVZc1MwRkJTeXhKUVVGSlF5eERRVUZCTEVkQlFWa3NSMEZCUjJVc1EwRkJRU3hIUVVGTlRDeERRVUZCTEVOQlFWVlpMRTFCUVVFc1JVRkJVWFJDTEVOQlFVRXNSMEZCV1dVc1EwRkJRU3hGUVVGTFppeERRVUZCTEVsQlFXRXNSMEZCUnp0UlFVTXZSU3hOUVVGTlpTeERRVUZCTEVkQlFWVk1MRU5CUVVFc1EwRkJWVllzUTBGQlFUdFZRVU53UW1kQ0xFTkJRVUVzUjBGQlQyWXNUVUZCUVN4RFFVRlBLME1zZDBKQlFVRXNRMEZCZVVKc1F5eERRVUZCTEVWQlFWbERMRU5CUVVFN1VVRkJRU3hMUVVNMVF5eE5RVUZVUXl4RFFVRkJMRWxCUVhOQ1FTeERRVUZCTEVOQlFVdHBReXhWUVVGQkxFdEJRM3BDWkN4UlFVRkJMRU5CUVZOd1F5eERRVUZCTEVOQlFVZG5RaXhEUVVGQkxFMUJRV0Z2UWl4UlFVRkJMRU5CUVZOeVFpeERRVUZCTEVOQlFWZERMRU5CUVVFc1MwRkRNME5FTEVOQlFVRXNRMEZCVjBNc1EwRkJRU3hGUVVGVGJVTXNWVUZCUVN4SFFVTjBRbTVFTEVOQlFVRXNRMEZCUjJkQ0xFTkJRVUVzU1VGQlYwUXNRMEZCUVN4RFFVRlhReXhEUVVGQkxFbEJSWHBDTmtJc1RVRkJRU3hEUVVGUE4wTXNRMEZCUVN4RFFVRkhaMElzUTBGQlFTeEhRVUZWUkN4RFFVRkJMRU5CUVZkRExFTkJRVUVzVFVGRmRrSnZRaXhSUVVGQkxFTkJRVk53UXl4RFFVRkJMRU5CUVVkblFpeERRVUZCTEUxQlFXRnZRaXhSUVVGQkxFTkJRVk55UWl4RFFVRkJMRU5CUVZkRExFTkJRVUVzVFVGRGRrUm9RaXhEUVVGQkxFTkJRVWRuUWl4RFFVRkJMRWxCUVZjc1EwRkJReXhIUVVOWVJDeERRVUZCTEVOQlFWZERMRU5CUVVFc1JVRkJVMjFETEZWQlFVRXNSMEZEZEVKdVJDeERRVUZCTEVOQlFVZG5RaXhEUVVGQkxFbEJRVmRFTEVOQlFVRXNRMEZCVjBNc1EwRkJRU3hKUVVWNlFqWkNMRTFCUVVFc1EwRkJUemRETEVOQlFVRXNRMEZCUjJkQ0xFTkJRVUVzUjBGQlZVUXNRMEZCUVN4RFFVRlhReXhEUVVGQkxFMUJSMnBEYUVJc1EwRkJRU3hEUVVGSFowSXNRMEZCUVN4SlFVRlhSQ3hEUVVGQkxFTkJRVmRETEVOQlFVRXNSVUZITDBJN1RVRkJRVHRKUVVOR08wVkJRMFk3UlVGRFFTeFBRVUZQYUVJc1EwRkRWRHRCUVVGQk8wRkJRMEVzVTBGQlUyOUVMR1ZCUVdWd1JDeERRVUZCTEVWQlFVbERMRU5CUVVFc1JVRkJVMVVzUTBGQlFUdEZRVU51UTFnc1EwRkJRU3hEUVVGSFlTeExRVUZCTEVOQlFVMTNReXhYUVVGQkxFTkJRVmx3UkN4RFFVRkJMRVZCUVZOVkxFTkJRVUVzUTBGRGFFTTdRVUZCUVR0QlFVTkJMRk5CUVZNeVF5eHhRa0ZCY1VKMFJDeERRVUZCTzBWQlF6VkNPMGxCUVVsMVJDeE5RVUZCTEVWQlEwWjBSQ3hEUVVGQk8wbEJRVTExUkN4alFVRkJMRVZCUTA0M1F5eERRVUZCTzBsQlFXTTRReXhKUVVGQkxFVkJRMlF4UXp0RlFVRkJMRWxCUTBWbUxFTkJRVUU3UlVGRFNpeE5RVUZOWjBJc1EwRkJRU3hIUVVGVExFbEJRVUZPTEd0Q1FVRkJPMGxCUTFSUExFTkJRVUVzU1VGQmFVSm9RaXhEUVVGQkxFTkJRVTk1UkN4VFFVRkJPMFZCUXpsQ0xFbEJRMGw0UXl4RFFVRkJPMGxCUkVGNVF5eERRVUZCTEVkQlFWazdSVUZGYUVJc1RVRkJUVU1zUTBGQlFTeEhRVUZYTTBRc1EwRkJRU3hEUVVGUE5FUXNUVUZCUVN4RFFVRlBReXhMUVVGQk8wVkJReTlDTjBRc1EwRkJRU3hEUVVGUE9FUXNVMEZCUVN4RFFVRlZiRVFzUzBGQlFTeERRVUZOYlVRc1kwRkJRU3hIUVVGcFFpeFJRVU40UTJoRUxFTkJRVUVzUTBGQlQybEVMRzlDUVVGQkxFTkJRWEZDYUVVc1EwRkJRU3hEUVVGUGFVVXNZMEZCUVR0RlFVTnVReXhOUVVGTlF5eERRVUZCTEVkQlFVMTRSQ3hEUVVGQkxFZEJRV2xDVFN4RFFVRkJMRWRCUVdkQ0xGTkJRVk03U1VGRGFFUnRSQ3hEUVVGQkxFZEJRV1ZETEVOQlFVTnlSU3hEUVVGQkxFVkJRVk5ETEVOQlFVRXNTMEZEWkN4WFFVRlNhMFVzUTBGQlFTeEpRVUZyUW01RkxFTkJRVUVzU1VGQlYwTXNRMEZCUVN4SlFVRnJRaXhYUVVGU2EwVXNRMEZCUVN4SlFVRnJRbTVGTEVOQlFVRXNTVUZCVjBNc1EwRkJRVHRKUVVWMlJYRkZMRU5CUVVFc1IwRkJWVU1zUTBGQlFUdE5RVU5rY2tRc1EwRkJRU3hIUVVGUExFbEJRVWxXTEVsQlFVRXNSMEZCVDJkRkxFOUJRVUVzU1VGRFFTeFRRVUZrWWl4RFFVRkJMRXRCUTBaQkxFTkJRVUVzUjBGQldYcERMRU5CUVVFN1RVRkZaQ3hOUVVGTmJFSXNRMEZCUVN4SFFVRlhlVVVzU1VGQlFTeERRVUZMUXl4SFFVRkJMRU5CUVVsRUxFbEJRVUVzUTBGQlMwVXNSMEZCUVN4RlFVRkxla1FzUTBGQlFTeEhRVUZQZVVNc1EwRkJRU3hKUVVGaFF5eERRVUZCTEVWQlFWVXNTVUZCU1R0UlFVTm9SVThzUTBGQlFTeEhRVUZsTEV0QlFVMU5MRWxCUVVFc1EwRkJTMGNzUjBGQlFTeERRVUZKTlVVc1EwRkJRU3hIUVVGWGVVVXNTVUZCUVN4RFFVRkxTU3hGUVVGQkxFbEJRVTA3VFVGRE1VUXNTVUZCU1VNc1EwRkJRU3hIUVVGclFqZEVMRU5CUVVFc1IwRkJaMEpyUkN4RFFVRkJMRWxCUVdkQ2VFUXNRMEZCUVN4SFFVRnBRazBzUTBGQlFUdE5RVTkyUlN4SlFVNUpiVVFzUTBGQlFTeERRVUZoVlN4RFFVRkJMRVZCUVdsQ2JrVXNRMEZCUVN4TlFVTm9RMjFGTEVOQlFVRXNSMEZCYTBKdVJTeERRVUZCTEVkQlJYQkNWaXhEUVVGQkxFTkJRVTg0UkN4VFFVRkJMRU5CUVZWblFpeFJRVUZCTEVOQlFWTTdVVUZEZUVJc1EwRkJRMmhGTEVOQlFVRXNSMEZCVHl0RU8wMUJRVUVzU1VGRlRsWXNRMEZCUVN4RFFVRmhWU3hEUVVGQkxFVkJRV2xDYmtVc1EwRkJRU3hIUVZWb1F5eFBRVlJCVml4RFFVRkJMRU5CUVU4NFJDeFRRVUZCTEVOQlFWVnNSQ3hMUVVGQkxFTkJRVTF0UlN4UlFVRkJMRWRCUVZjc1ZVRkRiRU12UlN4RFFVRkJMRU5CUVU4NFJDeFRRVUZCTEVOQlFWVnNSQ3hMUVVGQkxFTkJRVTF0UkN4alFVRkJMRWRCUVdsQ0xFbEJRM2hETVVRc1ZVRkJRU3hEUVVGWE8xRkJRMVJNTEVOQlFVRXNRMEZCVHpoRUxGTkJRVUVzUTBGQlZXeEVMRXRCUVVFc1EwRkJUVzFGTEZGQlFVRXNSMEZCVnl4SlFVTnNReTlGTEVOQlFVRXNRMEZCVHpoRUxGTkJRVUVzUTBGQlZXZENMRkZCUVVFc1EwRkJVenRWUVVONFFpeERRVUZEYUVVc1EwRkJRU3hIUVVGUEswUTdVVUZCUVN4RlFVTlNPMDFCUVVFc1UwRkZTamxFTEVOQlFVRXNRMEZCVDJsRUxHOUNRVUZCTEVOQlFYRkNhRVVzUTBGQlFTeERRVUZQYVVVc1kwRkJRVHROUVVkeVEycEZMRU5CUVVFc1EwRkJUMmxGTEdOQlFVRXNSMEZCYVVKc1JDeERRVUZCTEVOQlFVOXBSU3h4UWtGQlFTeERRVUZ6UWxnc1EwRkJRU3hEUVVGUk8wbEJRVUU3UlVGRkwwUkJMRU5CUVVFc1JVRkRSanRCUVVGQk8wRkJRMEVzVTBGQlUxa3NiMEpCUVc5Q2JFWXNRMEZCUVR0RlFVTXpRaXhQUVVGUFFTeERRVUZCTEVOQlFWRnRSaXhoUVVGQkxFTkJRV01zT0VKQlFUaENia1lzUTBGQlFTeERRVUZSYjBZc1ZVRkJRU3hKUVVGamNFWXNRMEZCUVN4RFFVRlJiMFlzVlVGQlFTeERRVUZYUkN4aFFVRkJMRU5CUVdNc09FSkJRVGhDYmtZc1EwRkRiRW83UVVGQlFUdEJRVU5CTEZOQlFWTnhSaXhuUWtGQlowSnlSaXhEUVVGQkxFVkJRVk5ETEVOQlFVRTdSVUZKYUVNc1dVRklhVUlzVFVGQllrRXNRMEZCUVN4TFFVTkdRU3hEUVVGQkxFZEJRVmNzUzBGRlRpeEpRVUZKUkN4RFFVRkJMRU5CUVZGelJpeFJRVUZCTEVWQlFWVjJReXhOUVVGQkxFTkJRVTh2UXl4RFFVRkJMRWxCUVUxQkxFTkJRVUVzUTBGQlIzVkdMRTlCUVVFc1EwRkJVWFJHTEVOQlFVRXNSVUZEZGtRN1FVRkJRVHRCUVVOQkxGTkJRVk4xUml4alFVRmplRVlzUTBGQlFTeEZRVUZMUXl4RFFVRkJPMFZCUVVFc1MwRkRWaXhOUVVGYVFTeERRVUZCTEV0QlEwWkJMRU5CUVVFc1IwRkJWVHRGUVVWYUxFMUJRVTFWTEVOQlFVRXNSMEZCU3poRkxGRkJRVUVzUTBGQlUwUXNZVUZCUVN4RFFVRmplRVlzUTBGQlFUdEZRVVZzUXl4UFFVUkJWeXhEUVVGQkxFTkJRVWNyUlN4VFFVRkJMRU5CUVZWRExFZEJRVUVzUzBGQlVVTXNTMEZCUVN4RFFVRk5ReXhQUVVGQkxFTkJRVkUxUml4RFFVRkJMRWxCUVZkQkxFTkJRVUVzUjBGQlZTeERRVUZEUVN4RFFVRkJMRXRCUTJ4RVZTeERRVU5VTzBGQlFVRTdRVUZEUVN4VFFVRlRiVVlzWTBGQll6bEdMRU5CUVVFN1JVRkRja0lzVFVGQlRVTXNRMEZCUVN4SFFVRlRMRWxCUVVGVExHdENRVUZCTzBsQlExUkRMRU5CUVVFc1IwRkJWeXhKUVVGQmIwWXNhMEpCUVVFN1NVRkRXR2hHTEVOQlFVRXNSMEZCVFdZc1EwRkJRU3hEUVVGSFowY3NjVUpCUVVFN1NVRkRWR2hHTEVOQlFVRXNSMEZCVDB3c1EwRkJRU3hEUVVGVGMwWXNTVUZCUVR0SlFVTm9RbWhHTEVOQlFVRXNSMEZCV1dwQ0xFTkJRVUVzUTBGQlIydEhMRk5CUVVFc1NVRkJZV3hHTEVOQlFVRXNRMEZCUzJ0R0xGTkJRVUVzU1VGQllUdEpRVU01UTJoR0xFTkJRVUVzUjBGQllXeENMRU5CUVVFc1EwRkJSMjFITEZWQlFVRXNTVUZCWTI1R0xFTkJRVUVzUTBGQlMyMUdMRlZCUVVFc1NVRkJZenRKUVVOcVJIaERMRU5CUVVFc1IwRkJXVE5FTEVOQlFVRXNTMEZCVDBNc1EwRkJRU3hIUVVGVFFTeERRVUZCTEVOQlFVOXRSeXhQUVVGQkxFZEJRVlZ3Unl4RFFVRkJMRU5CUVVkeFJ5eFRRVUZCTzBsQlEyaEVla01zUTBGQlFTeEhRVUZoTlVRc1EwRkJRU3hMUVVGUFF5eERRVUZCTEVkQlFWTkJMRU5CUVVFc1EwRkJUM0ZITEU5QlFVRXNSMEZCVlhSSExFTkJRVUVzUTBGQlIzVkhMRlZCUVVFN1JVRkRka1FzVDBGQlR6dEpRVU5NUXl4SFFVRkJMRVZCUVV0NlJpeERRVUZCTEVOQlFVbDVSaXhIUVVGQkxFZEJRVTAzUXl4RFFVRkJMRWRCUVZreFF5eERRVUZCTzBsQlF6TkNkMFlzU1VGQlFTeEZRVUZOTVVZc1EwRkJRU3hEUVVGSk1FWXNTVUZCUVN4SFFVRlBOME1zUTBGQlFTeEhRVUZoTVVNN1JVRkJRU3hEUVVWc1F6dEJRVUZCTzBGQlEwRXNVMEZCVTNkR0xHVkJRV1V4Unl4RFFVRkJMRVZCUVVsRExFTkJRVUU3UlVGRE1VSXNUVUZCVFZVc1EwRkJRU3hIUVVGVk8wVkJRMmhDTEU5QlFVOVlMRU5CUVVFc1EwRkJSekpITEhOQ1FVRkJMRWRCUVhkQ08wbEJRMmhETEUxQlFVMDFSaXhEUVVGQkxFZEJRVTltTEVOQlFVRXNRMEZCUnpKSExITkNRVUZCTzBsQlExb3hSeXhEUVVGQkxFZEJRMFZqTEVOQlFVRXNRMEZCUzNkRkxFOUJRVUVzUTBGQlVYUkdMRU5CUVVFc1MwRkJWMVVzUTBGQlFTeERRVUZSYVVjc1NVRkJRU3hEUVVGTE4wWXNRMEZCUVN4SlFVTndRMG9zUTBGQlFTeERRVUZSYVVjc1NVRkJRU3hEUVVGTE4wWXNRMEZCUVN4SFFVTndRbVlzUTBGQlFTeEhRVUZMWlN4RFFVTlFPMFZCUVVFN1JVRkRRU3hQUVVGUFNpeERRVU5VTzBGQlFVRTdRVUZEUVN4VFFVRlRhMGNzWlVGQlpUZEhMRU5CUVVFc1JVRkJTVU1zUTBGQlFUdEZRVU14UWl4TlFVRk5WU3hEUVVGQkxFZEJRVlU3UlVGRGFFSXNUMEZCVDFnc1EwRkJRU3hEUVVGSE9FY3NhMEpCUVVFc1IwRkJiMEk3U1VGRE5VSXNUVUZCVFM5R0xFTkJRVUVzUjBGQlQyWXNRMEZCUVN4RFFVRkhPRWNzYTBKQlFVRTdTVUZEV2pkSExFTkJRVUVzUjBGRFJXTXNRMEZCUVN4RFFVRkxkMFVzVDBGQlFTeERRVUZSZEVZc1EwRkJRU3hMUVVGWFZTeERRVUZCTEVOQlFWRnBSeXhKUVVGQkxFTkJRVXMzUml4RFFVRkJMRWxCUTNCRFNpeERRVUZCTEVOQlFWRnBSeXhKUVVGQkxFTkJRVXMzUml4RFFVRkJMRWRCUTNCQ1ppeERRVUZCTEVkQlFVdGxMRU5CUTFBN1JVRkJRVHRGUVVOQkxFOUJRVTlLTEVOQlExUTdRVUZCUVR0QlFVTkJMRk5CUVZOdlJ5eGhRVUZoTDBjc1EwRkJRU3hGUVVGSlF5eERRVUZCTzBWQlJYaENMRTlCUkdVc1NVRkJRVk1zYTBKQlFVRXNTVUZEUkVRc1owSkJRVUVzUTBGQmFVSlVMRU5CUVVFc1JVRkJTU3hOUVVGTkswSXNaMEpCUVVFc1EwRkJhVUk1UWl4RFFVRkJMRU5CUXpWRU8wRkJRVUU3UVVGRFFTeFRRVUZUSzBjc1lVRkJZV2hJTEVOQlFVRTdSVUZEY0VJc1NVRkRTVU1zUTBGQlFUdEpRVVJCVlN4RFFVRkJMRWRCUVZGWUxFTkJRVUU3UlVGRldpeEpRVUZKVnl4RFFVRkJMRVZCUVU4N1NVRkhWQ3hMUVVaQlZpeERRVUZCTEVkQlFVa3NSMEZGZFVNc1ZVRkJia05WTEVOQlFVRXNSMEZCVVVFc1EwRkJRU3hEUVVGTmMwY3NaVUZCUVN4SlFVTkhMRTFCUVc1Q2RFY3NRMEZCUVN4RFFVRk5hVU1zVVVGQlFTeExRVUZuUWpORExFTkJRVUVzU1VGQlN6dEpRVVZxUXl4UFFVRlBRU3hEUVVOVU8wVkJRVUU3UVVGRlJqdEJRVU5CTEZOQlFWTnBTQ3hsUVVGbGJFZ3NRMEZCUVN4RlFVRkpReXhEUVVGQk8wVkJRekZDTEUxQlFVMVZMRU5CUVVFc1IwRkJWVHRGUVVOb1FpeEpRVUZKU1N4RFFVRkJMRWRCUVZObUxFTkJRVUVzUTBGQlIyMUlMR0ZCUVVFN1JVRkRhRUlzVDBGQlQzQkhMRU5CUVVFc1IwRkRSR1FzUTBGQlFTeEhRVU5GWXl4RFFVRkJMRU5CUVU5M1JTeFBRVUZCTEVOQlFWRjBSaXhEUVVGQkxFdEJRVmRWTEVOQlFVRXNRMEZCVVdsSExFbEJRVUVzUTBGQlN6ZEdMRU5CUVVFc1NVRkZNME5LTEVOQlFVRXNRMEZCVVdsSExFbEJRVUVzUTBGQlN6ZEdMRU5CUVVFc1IwRkZaa0VzUTBGQlFTeEhRVUZUUVN4RFFVRkJMRU5CUVU5dlJ5eGhRVUZCTzBWQlJXeENMRTlCUVU5NFJ5eERRVU5VTzBGQlFVRTdRVUZEUVN4VFFVRlRlVWNzY1VKQlFYRkNjRWdzUTBGQlFTeEZRVUZKUXl4RFFVRkJPMFZCVFRWQ1FTeERRVUZCTEVsQlEwWkVMRU5CUVVFc1EwRkJSM0ZJTEdkQ1FVRkJMRU5CUVdsQ0xHbENRVTUwUWl4VFFVRlRNVWNzUlVGQllVa3NRMEZCUVR0SlFVTm9Ra0VzUTBGQlFTeERRVUZGZFVjc1RVRkJRU3hMUVVGWGRFZ3NRMEZCUVN4TFFVTnFRa01zUTBGQlFTeERRVUZUYzBNc1NVRkJRU3hEUVVGTGRrTXNRMEZCUVN4RlFVRkpaU3hEUVVGQkxFZEJRMnhDWml4RFFVRkJMRU5CUVVkMVNDeHRRa0ZCUVN4RFFVRnZRaXhwUWtGQmFVSTFSeXhEUVVGQkxFVkJRekZETzBWQlFVRXNSVUZKUmp0QlFVRkJPMEZCUTBFc1UwRkJVelpITEdsQ1FVRnBRbmhJTEVOQlFVRXNSVUZCU1VNc1EwRkJRU3hGUVVGTlZTeERRVUZCTzBWQlEyeERMRTFCUVUxSkxFTkJRVUVzUjBGQlV5eEpRVUZCVEN4clFrRkJRVHRGUVVObUxFOUJRVWxETEVOQlFVRXNSMEZEUzFnc1EwRkJRU3hEUVVGWkxGbEJRVlJETEVOQlFVRXNSMEZCYlVJc1owSkJRV2RDTEd0Q1FVRnJRbWxETEZWQlFVRXNRMEZCVjI1Q0xFTkJRVUVzUTBGQlQwNHNaMEpCUVVFc1EwRkJhVUpVTEVOQlFVRXNSVUZCU1N4TlFVRk5LMElzWjBKQlFVRXNRMEZCTUVJc1dVRkJWRGxDTEVOQlFVRXNSMEZCYlVJc2FVSkJRV2xDTEdsQ1FVRnBRbWxETEZWQlFVRXNRMEZCVjI1Q0xFTkJRVUVzUTBGQlQwNHNaMEpCUVVFc1EwRkJhVUpVTEVOQlFVRXNSVUZCU1N4TlFVRk5LMElzWjBKQlFVRXNRMEZCTUVJc1dVRkJWRGxDTEVOQlFVRXNSMEZCYlVJc1owSkJRV2RDTEc5Q1FVVTVVVVFzUTBGQlFTeERRVUZIZVVnc1YwRkRXanRCUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN3aXBlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfc3dpcGVyQ29yZU1pbi5TO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3N3aXBlckNvcmVNaW4uUztcbiAgfVxufSk7XG52YXIgX3N3aXBlckNvcmVNaW4gPSByZXF1aXJlKFwiLi9zaGFyZWQvc3dpcGVyLWNvcmUubWluLm1qc1wiKTtcbnZhciBfdmlydHVhbE1pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy92aXJ0dWFsLm1pbi5tanNcIikpO1xudmFyIF9rZXlib2FyZE1pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9rZXlib2FyZC5taW4ubWpzXCIpKTtcbnZhciBfbW91c2V3aGVlbE1pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9tb3VzZXdoZWVsLm1pbi5tanNcIikpO1xudmFyIF9uYXZpZ2F0aW9uTWluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL25hdmlnYXRpb24ubWluLm1qc1wiKSk7XG52YXIgX3BhZ2luYXRpb25NaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvcGFnaW5hdGlvbi5taW4ubWpzXCIpKTtcbnZhciBfc2Nyb2xsYmFyTWluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL3Njcm9sbGJhci5taW4ubWpzXCIpKTtcbnZhciBfcGFyYWxsYXhNaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvcGFyYWxsYXgubWluLm1qc1wiKSk7XG52YXIgX3pvb21NaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvem9vbS5taW4ubWpzXCIpKTtcbnZhciBfY29udHJvbGxlck1pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9jb250cm9sbGVyLm1pbi5tanNcIikpO1xudmFyIF9hMTF5TWluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2ExMXkubWluLm1qc1wiKSk7XG52YXIgX2hpc3RvcnlNaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvaGlzdG9yeS5taW4ubWpzXCIpKTtcbnZhciBfaGFzaE5hdmlnYXRpb25NaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvaGFzaC1uYXZpZ2F0aW9uLm1pbi5tanNcIikpO1xudmFyIF9hdXRvcGxheU1pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9hdXRvcGxheS5taW4ubWpzXCIpKTtcbnZhciBfdGh1bWJzTWluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL3RodW1icy5taW4ubWpzXCIpKTtcbnZhciBfZnJlZU1vZGVNaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvZnJlZS1tb2RlLm1pbi5tanNcIikpO1xudmFyIF9ncmlkTWluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2dyaWQubWluLm1qc1wiKSk7XG52YXIgX21hbmlwdWxhdGlvbk1pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9tYW5pcHVsYXRpb24ubWluLm1qc1wiKSk7XG52YXIgX2VmZmVjdEZhZGVNaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvZWZmZWN0LWZhZGUubWluLm1qc1wiKSk7XG52YXIgX2VmZmVjdEN1YmVNaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvZWZmZWN0LWN1YmUubWluLm1qc1wiKSk7XG52YXIgX2VmZmVjdEZsaXBNaW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvZWZmZWN0LWZsaXAubWluLm1qc1wiKSk7XG52YXIgX2VmZmVjdENvdmVyZmxvd01pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9lZmZlY3QtY292ZXJmbG93Lm1pbi5tanNcIikpO1xudmFyIF9lZmZlY3RDcmVhdGl2ZU1pbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9lZmZlY3QtY3JlYXRpdmUubWluLm1qc1wiKSk7XG52YXIgX2VmZmVjdENhcmRzTWluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2VmZmVjdC1jYXJkcy5taW4ubWpzXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vKipcbiAqIFN3aXBlciAxMC4xLjBcbiAqIE1vc3QgbW9kZXJuIG1vYmlsZSB0b3VjaCBzbGlkZXIgYW5kIGZyYW1ld29yayB3aXRoIGhhcmR3YXJlIGFjY2VsZXJhdGVkIHRyYW5zaXRpb25zXG4gKiBodHRwczovL3N3aXBlcmpzLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMjMgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBSZWxlYXNlZCBvbjogQXVndXN0IDEsIDIwMjNcbiAqL1xuXG5jb25zdCBtb2R1bGVzID0gW192aXJ0dWFsTWluLmRlZmF1bHQsIF9rZXlib2FyZE1pbi5kZWZhdWx0LCBfbW91c2V3aGVlbE1pbi5kZWZhdWx0LCBfbmF2aWdhdGlvbk1pbi5kZWZhdWx0LCBfcGFnaW5hdGlvbk1pbi5kZWZhdWx0LCBfc2Nyb2xsYmFyTWluLmRlZmF1bHQsIF9wYXJhbGxheE1pbi5kZWZhdWx0LCBfem9vbU1pbi5kZWZhdWx0LCBfY29udHJvbGxlck1pbi5kZWZhdWx0LCBfYTExeU1pbi5kZWZhdWx0LCBfaGlzdG9yeU1pbi5kZWZhdWx0LCBfaGFzaE5hdmlnYXRpb25NaW4uZGVmYXVsdCwgX2F1dG9wbGF5TWluLmRlZmF1bHQsIF90aHVtYnNNaW4uZGVmYXVsdCwgX2ZyZWVNb2RlTWluLmRlZmF1bHQsIF9ncmlkTWluLmRlZmF1bHQsIF9tYW5pcHVsYXRpb25NaW4uZGVmYXVsdCwgX2VmZmVjdEZhZGVNaW4uZGVmYXVsdCwgX2VmZmVjdEN1YmVNaW4uZGVmYXVsdCwgX2VmZmVjdEZsaXBNaW4uZGVmYXVsdCwgX2VmZmVjdENvdmVyZmxvd01pbi5kZWZhdWx0LCBfZWZmZWN0Q3JlYXRpdmVNaW4uZGVmYXVsdCwgX2VmZmVjdENhcmRzTWluLmRlZmF1bHRdO1xuX3N3aXBlckNvcmVNaW4uUy51c2UobW9kdWxlcyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZkbWx5ZEhWaGJFMXBiaUlzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWDJ0bGVXSnZZWEprVFdsdUlpd2lYMjF2ZFhObGQyaGxaV3hOYVc0aUxDSmZibUYyYVdkaGRHbHZiazFwYmlJc0lsOXdZV2RwYm1GMGFXOXVUV2x1SWl3aVgzTmpjbTlzYkdKaGNrMXBiaUlzSWw5d1lYSmhiR3hoZUUxcGJpSXNJbDk2YjI5dFRXbHVJaXdpWDJOdmJuUnliMnhzWlhKTmFXNGlMQ0pmWVRFeGVVMXBiaUlzSWw5b2FYTjBiM0o1VFdsdUlpd2lYMmhoYzJoT1lYWnBaMkYwYVc5dVRXbHVJaXdpWDJGMWRHOXdiR0Y1VFdsdUlpd2lYM1JvZFcxaWMwMXBiaUlzSWw5bWNtVmxUVzlrWlUxcGJpSXNJbDluY21sa1RXbHVJaXdpWDIxaGJtbHdkV3hoZEdsdmJrMXBiaUlzSWw5bFptWmxZM1JHWVdSbFRXbHVJaXdpWDJWbVptVmpkRU4xWW1WTmFXNGlMQ0pmWldabVpXTjBSbXhwY0UxcGJpSXNJbDlsWm1abFkzUkRiM1psY21ac2IzZE5hVzRpTENKZlpXWm1aV04wUTNKbFlYUnBkbVZOYVc0aUxDSmZaV1ptWldOMFEyRnlaSE5OYVc0aUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbTF2WkhWc1pYTWlMQ0pXYVhKMGRXRnNJaXdpUzJWNVltOWhjbVFpTENKTmIzVnpaWGRvWldWc0lpd2lUbUYyYVdkaGRHbHZiaUlzSWxCaFoybHVZWFJwYjI0aUxDSlRZM0p2Ykd4aVlYSWlMQ0pRWVhKaGJHeGhlQ0lzSWxwdmIyMGlMQ0pEYjI1MGNtOXNiR1Z5SWl3aVFURXhlU0lzSWtocGMzUnZjbmtpTENKSVlYTm9UbUYyYVdkaGRHbHZiaUlzSWtGMWRHOXdiR0Y1SWl3aVZHaDFiV0lpTENKbWNtVmxUVzlrWlNJc0lrZHlhV1FpTENKTllXNXBjSFZzWVhScGIyNGlMQ0pGWm1abFkzUkdZV1JsSWl3aVJXWm1aV04wUTNWaVpTSXNJa1ZtWm1WamRFWnNhWEFpTENKRlptWmxZM1JEYjNabGNtWnNiM2NpTENKRlptWmxZM1JEY21WaGRHbDJaU0lzSWtWbVptVmpkRU5oY21Seklpd2lVM2RwY0dWeUlpd2lkWE5sSWwwc0luTnZkWEpqWlhNaU9sc2lNQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2VzI1MWJHeGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3TzBGQldUUkNMRWxCUVVGQkxGZEJRVUVzUjBGQlFVTXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5TTEVsQlFVRkRMRmxCUVVFc1IwRkJRVVlzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVORExFbEJRVUZGTEdOQlFVRXNSMEZCUVVnc2MwSkJRVUVzUTBGQlFVTXNUMEZCUVR0QlFVTkZMRWxCUVVGSExHTkJRVUVzUjBGQlFVb3NjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5CTEVsQlFVRkpMR05CUVVFc1IwRkJRVXdzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVOQkxFbEJRVUZMTEdGQlFVRXNSMEZCUVU0c2MwSkJRVUVzUTBGQlFVTXNUMEZCUVR0QlFVTkVMRWxCUVVGTkxGbEJRVUVzUjBGQlFWQXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5FTEVsQlFVRlBMRkZCUVVFc1IwRkJRVklzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVOS0xFbEJRVUZSTEdOQlFVRXNSMEZCUVZRc2MwSkJRVUVzUTBGQlFVTXNUMEZCUVR0QlFVTk5MRWxCUVVGVExGRkJRVUVzUjBGQlFWWXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5PTEVsQlFVRlZMRmRCUVVFc1IwRkJRVmdzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVOSExFbEJRVUZYTEd0Q1FVRkJMRWRCUVVGYUxITkNRVUZCTEVOQlFVRkRMRTlCUVVFN1FVRkRUeXhKUVVGQldTeFpRVUZCTEVkQlFVRmlMSE5DUVVGQkxFTkJRVUZETEU5QlFVRTdRVUZEVGl4SlFVRkJZU3hWUVVGQkxFZEJRVUZrTEhOQ1FVRkJMRU5CUVVGRExFOUJRVUU3UVVGRFNDeEpRVUZCWXl4WlFVRkJMRWRCUVVGbUxITkNRVUZCTEVOQlFVRkRMRTlCUVVFN1FVRkRSeXhKUVVGQlpTeFJRVUZCTEVkQlFVRm9RaXh6UWtGQlFTeERRVUZCUXl4UFFVRkJPMEZCUTBvc1NVRkJRV2RDTEdkQ1FVRkJMRWRCUVVGcVFpeHpRa0ZCUVN4RFFVRkJReXhQUVVGQk8wRkJRMUVzU1VGQlFXbENMR05CUVVFc1IwRkJRV3hDTEhOQ1FVRkJMRU5CUVVGRExFOUJRVUU3UVVGRFJpeEpRVUZCYTBJc1kwRkJRU3hIUVVGQmJrSXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5CTEVsQlFVRnRRaXhqUVVGQkxFZEJRVUZ3UWl4elFrRkJRU3hEUVVGQlF5eFBRVUZCTzBGQlEwRXNTVUZCUVc5Q0xHMUNRVUZCTEVkQlFVRnlRaXh6UWtGQlFTeERRVUZCUXl4UFFVRkJPMEZCUTBzc1NVRkJRWEZDTEd0Q1FVRkJMRWRCUVVGMFFpeHpRa0ZCUVN4RFFVRkJReXhQUVVGQk8wRkJRMFFzU1VGQlFYTkNMR1ZCUVVFc1IwRkJRWFpDTEhOQ1FVRkJMRU5CUVVGRExFOUJRVUU3UVVGSk0wSXNVMEZCUVVRc2RVSkJRVUYzUWl4SFFVRkJMRmRCUVVGQkxFZEJRVUVzU1VGQlFVRXNSMEZCUVN4RFFVRkJReXhWUVVGQkxFZEJRVUZFTEVkQlFVRXNTMEZCUVVVc1QwRkJRU3hGUVVGQlJpeEhRVUZCT3pzN096czdPenM3T3pzN08wRkJRVUVzVFVGQlRVY3NUMEZCUVN4SFFVRlZMRU5CUVVORExHMUNRVUZCTEVWQlFWTkRMRzlDUVVGQkxFVkJRVlZETEhOQ1FVRkJMRVZCUVZsRExITkNRVUZCTEVWQlFWbERMSE5DUVVGQkxFVkJRVmxETEhGQ1FVRkJMRVZCUVZkRExHOUNRVUZCTEVWQlFWVkRMR2RDUVVGQkxFVkJRVTFETEhOQ1FVRkJMRVZCUVZsRExHZENRVUZCTEVWQlFVMURMRzFDUVVGQkxFVkJRVk5ETERCQ1FVRkJMRVZCUVdkQ1F5eHZRa0ZCUVN4RlFVRlZReXhyUWtGQlFTeEZRVUZQUXl4dlFrRkJRU3hGUVVGVlF5eG5Ra0ZCUVN4RlFVRk5ReXgzUWtGQlFTeEZRVUZqUXl4elFrRkJRU3hGUVVGWlF5eHpRa0ZCUVN4RlFVRlpReXh6UWtGQlFTeEZRVUZaUXl3eVFrRkJRU3hGUVVGcFFrTXNNRUpCUVVFc1JVRkJaMEpETEhWQ1FVRkJPMEZCUTJ4UlF5eG5Ra0ZCUVN4RFFVRlBReXhIUVVGQkxFTkJRVWw2UWl4UFFVRkJJbjA9IiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7ICR3cmFwcGVyIH0gZnJvbSAnLi4vdmFyaWFibGVzL3ZhcmlhYmxlcy5qcyc7XG5cblxuXG4kKCgpID0+IHtcblx0Ly8gQ3JlYXRlIGEgcGhvbmUgbWFza1xuXHQoKCkgPT4ge1xuXHRcdGNvbnN0IFRFTF9NQVNLID0gJys3ICgwMDApIDAwMC0wMC0wMCc7XG5cblx0XHQkKCcuZmllbGRfX3RleHRbdHlwZT1cInRlbFwiXScpLmF0dHIoJ21heGxlbmd0aCcsIFRFTF9NQVNLLmxlbmd0aCkub24oJ2lucHV0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgdmFsICAgICAgICAgID0gdGhpcy52YWx1ZSxcblx0XHRcdFx0c2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG5cblx0XHRcdGlmICgtMSAhPT0gVEVMX01BU0suaW5kZXhPZignKzcnKSAmJiAvXjgvLnRlc3QodmFsKSkge1xuXHRcdFx0XHR2YWwgPSB2YWwucmVwbGFjZSgnOCcsICc3Jyk7XG5cdFx0XHR9XG5cdFx0XHR2YWwgPSB2YWwuc3BsaXQoJycpO1xuXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IFRFTF9NQVNLLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmICghdmFsW2ldKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBJU19NQVNLX0lOVCA9ICcwJyA9PT0gVEVMX01BU0tbaV0sXG5cdFx0XHRcdFx0SVNfVkFMX0lOVCAgICA9IC9cXGQvZy50ZXN0KHZhbFtpXSkgJiYgKElTX01BU0tfSU5UIHx8IHZhbFtpXSAhPT0gVEVMX01BU0tbaV0pO1xuXG5cdFx0XHRcdGlmIChJU19NQVNLX0lOVCkge1xuXHRcdFx0XHRcdGlmICghSVNfVkFMX0lOVCkge1xuXHRcdFx0XHRcdFx0dmFsLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdGktLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKElTX1ZBTF9JTlQpIHtcblx0XHRcdFx0XHRcdHZhbC5zcGxpY2UoaSwgMCwgVEVMX01BU0tbaV0pO1xuXG5cdFx0XHRcdFx0XHRpZiAoaSA8PSBzZWxlY3Rpb25FbmQgJiYgMSA8PSAoc2VsZWN0aW9uRW5kIC0gaSkpIHtcblx0XHRcdFx0XHRcdFx0c2VsZWN0aW9uRW5kKys7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZhbFtpXSA9IFRFTF9NQVNLW2ldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnZhbHVlID0gdmFsLmpvaW4oJycpLnN1YnN0cmluZygwLCBURUxfTUFTSy5sZW5ndGgpO1xuXHRcdFx0dGhpcy5zZWxlY3Rpb25TdGFydCA9IHRoaXMuc2VsZWN0aW9uRW5kID0gc2VsZWN0aW9uRW5kO1xuXHRcdH0pO1xuXHR9KSgpO1xuXG5cblxuXHQvLyBJbmNyZWFzZS9kZWNyZWFzZSBhIG51bWJlclxuXHQkd3JhcHBlci5vbigncGx1cyBtaW51cycsICcuZmllbGRfX251bWJlcicsIGZ1bmN0aW9uKGUpIHtcblx0XHRsZXQgJGVsID0gJCh0aGlzKSxcblx0XHRcdHZhbCA9ICskZWwudmFsKCkucmVwbGFjZSgnLCcsICcuJyk7XG5cblx0XHRjb25zdCBPTERfVkFMID0gdmFsLFxuXHRcdFx0SVNfUExVUyAgID0gJ3BsdXMnID09PSBlLnR5cGUsXG5cdFx0XHRNSU4gICAgICAgPSArJGVsLmF0dHIoJ2RhdGEtbWluJyksXG5cdFx0XHRNQVggICAgICAgPSArJGVsLmF0dHIoJ2RhdGEtbWF4JyksXG5cdFx0XHRTVEVQICAgICAgPSArJGVsLmF0dHIoJ2RhdGEtc3RlcCcpIHx8IDEsXG5cdFx0XHRESUdJVFMgICAgPSAoJycgKyBTVEVQKS5yZXBsYWNlKC9eLitcXC4vLCcnKS5sZW5ndGggfHwgMCxcblx0XHRcdE5PVF9NQVggICA9ICghTUFYIHx8ICF2YWwgfHwgKHZhbCArIFNURVAgPD0gTUFYKSksXG5cdFx0XHROT1RfTUlOICAgPSAoIU1JTiB8fCAhdmFsIHx8IChNSU4gPD0gdmFsIC0gU1RFUCkpO1xuXG5cdFx0aWYgKE1JTiAmJiBNQVggJiYgKE1JTiA+IE1BWCkpIHtcblx0XHRcdHZhbCA9IElTX1BMVVMgPyBNSU4gOiBNQVg7XG5cdFx0XHQkZWwudmFsKCt2YWwudG9GaXhlZChESUdJVFMpKTtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChJU19QTFVTICYmIE5PVF9NQVgpIHtcblx0XHRcdHZhbCA9IChNSU4gJiYgIXZhbCkgPyAoKE1JTiA+IE1BWCkgPyBNQVggOiBNSU4pIDogKHZhbCArIFNURVApO1xuXHRcdFx0dmFsID0gKE1JTiAmJiB2YWwgPCBNSU4pID8gTUlOIDogdmFsO1xuXHRcdH1cblxuXHRcdGlmICghSVNfUExVUyAmJiBOT1RfTUlOKSB7XG5cdFx0XHR2YWwgPSAoTUlOICYmICF2YWwpID8gTUlOIDogKHZhbCAtIFNURVApO1xuXHRcdFx0dmFsID0gKE1BWCAmJiB2YWwgPiBNQVgpID8gTUFYIDogdmFsO1xuXHRcdH1cblx0XHR2YWwgPSArdmFsLnRvRml4ZWQoRElHSVRTKTtcblx0XHR2YWwgPSAoJycgKyB2YWwpLnJlcGxhY2UoJy4nLCAnLCcpO1xuXHRcdCRlbC52YWwodmFsKTtcblxuXHRcdGlmIChPTERfVkFMICE9PSArdmFsKSB7XG5cdFx0XHQkZWwudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0fVxuXHR9KTtcblxuXG5cdC8vIElucHV0IG9ubHkgdGhlIG51bWJlcnNcblx0JHdyYXBwZXIub24oJ2lucHV0IGtleWRvd24gY29udGV4dG1lbnUnLCAnLmZpZWxkX19udW1iZXInLCBmdW5jdGlvbihlKSB7XG5cdFx0Y29uc3QgJGVsID0gJCh0aGlzKTtcblxuXHRcdGxldCB2YWwgPSAkZWwudmFsKCkucmVwbGFjZSgnLCcsICcuJykucmVwbGFjZSgvXFxzL2csICcnKTtcblxuXHRcdGNvbnN0IE1BWCAgICAgICAgICAgICAgID0gJGVsLmF0dHIoJ2RhdGEtbWF4JyksXG5cdFx0XHRJU19DT1JSRUNUX0xFTkdUSCA9ICFNQVggfHwgdmFsLmxlbmd0aCA8PSBNQVgubGVuZ3RoLFxuXHRcdFx0U1RFUCAgICAgICAgICAgICAgPSAkZWwuYXR0cignZGF0YS1zdGVwJyksXG5cdFx0XHRJU19TVEVQX0ZMT0FUICAgICA9IFNURVAgPyAoKCtTVEVQICUgMSkgIT09IDApIDogZmFsc2UsXG5cdFx0XHRwYXR0ZXJuTnVtcGVyICAgICA9IElTX1NURVBfRkxPQVQgPyAvXiR8XlswLTkuLCstXSskLyA6IC9eJHxeWzAtOSstXSskLztcblxuXHRcdGlmICgvVXB8RG93bi9nLnRlc3QoZS5rZXkpICYmICEvUGFnZS9nLnRlc3QoZS5rZXkpKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQkZWwudHJpZ2dlcigvVXAvZy50ZXN0KGUua2V5KSA/ICdwbHVzJyA6ICdtaW51cycpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHBhdHRlcm5OdW1wZXIudGVzdCh2YWwpICYmIElTX0NPUlJFQ1RfTEVOR1RIKSB7XG5cdFx0XHRsZXQgb2Zmc2V0ID0gJGVsWzBdLm9sZFZhbCA/ICRlbFswXS5vbGRWYWwuc3Vic3RyaW5nKDAsICRlbFswXS5vbGRTdGFydCkucmVwbGFjZSgvXFxTL2csICcnKS5sZW5ndGggOiAwO1xuXG5cdFx0XHRpZiAoK3ZhbCAmJiAkZWwuaGFzQ2xhc3MoJ2ZpZWxkX19udW1iZXJfcHJpY2UnKSkge1xuXHRcdFx0XHR2YWwgPSAoK3ZhbCkudG9Mb2NhbGVTdHJpbmcoKS5zcGxpdCgnLCcpWzBdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCRlbFswXS5vbGRWYWwpIHtcblx0XHRcdFx0b2Zmc2V0ID0gdmFsLnN1YnN0cmluZygwLCAkZWxbMF0ub2xkU3RhcnQpLnJlcGxhY2UoL1xcUy9nLCAnJykubGVuZ3RoIC0gb2Zmc2V0O1xuXHRcdFx0fVxuXG5cdFx0XHQkZWwudmFsKHZhbCk7XG5cdFx0XHRpZiAoKCdpbnB1dCcgPT09IGUudHlwZSkgJiYgKHZhbCA9PT0gJGVsWzBdLm9sZFZhbCkpIHtcblx0XHRcdFx0JGVsWzBdLnNlbGVjdGlvblN0YXJ0ID0gJGVsWzBdLnNlbGVjdGlvbkVuZCA9ICRlbFswXS5vbGRTdGFydCArIG9mZnNldDtcblx0XHRcdH1cblxuXHRcdFx0JGVsWzBdLm9sZFZhbCAgID0gdmFsO1xuXHRcdFx0JGVsWzBdLm9sZFN0YXJ0ID0gJGVsWzBdLnNlbGVjdGlvblN0YXJ0O1xuXHRcdFx0JGVsWzBdLm9sZEVuZCAgID0gJGVsWzBdLnNlbGVjdGlvbkVuZDtcblx0XHR9IGVsc2UgaWYgKCRlbFswXS5oYXNPd25Qcm9wZXJ0eSgnb2xkVmFsJykpIHtcblx0XHRcdGNvbnN0IFNUQVJUID0gJGVsWzBdLm9sZFN0YXJ0LFxuXHRcdFx0XHRFTkQgICAgID0gJGVsWzBdLm9sZEVuZCxcblx0XHRcdFx0TEVOR1RIICA9ICRlbFswXS5vbGRWYWwubGVuZ3RoO1xuXG5cdFx0XHR2YWwgPSAkZWxbMF0ub2xkVmFsLnN1YnN0cmluZygwLCBTVEFSVCkgKyAkZWxbMF0ub2xkVmFsLnN1YnN0cmluZyhFTkQsIExFTkdUSCk7XG5cdFx0XHQkZWwudmFsKHZhbCk7XG5cdFx0XHQkZWxbMF0uc2VsZWN0aW9uU3RhcnQgPSAkZWxbMF0uc2VsZWN0aW9uRW5kID0gU1RBUlQ7XG5cdFx0fVxuXHR9KTtcblxuXG5cdC8vIElmIG9uIGZvY3Vzb3V0IG9yIG9uIGNoYW5nZSB2YWx1ZSBhYm92ZS9iZWxvdyB0aGUgbGltaXQgdGhlbiBzZXQgdGhlIGxpbWl0XG5cdCR3cmFwcGVyLm9uKCdmb2N1c291dCBjaGFuZ2UnLCAnLmZpZWxkX19udW1iZXInLCBmdW5jdGlvbigpIHtcblx0XHRjb25zdCAkaW5wdXQgPSAkKHRoaXMpLFxuXHRcdFx0VkFMICAgICAgPSAkaW5wdXQudmFsKCkucmVwbGFjZSgvXFxzL2csICcnKSxcblx0XHRcdE1JTiAgICAgID0gKyRpbnB1dC5hdHRyKCdkYXRhLW1pbicpLFxuXHRcdFx0TUFYICAgICAgPSArJGlucHV0LmF0dHIoJ2RhdGEtbWF4JyksXG5cdFx0XHRJU19QUklDRSA9ICRpbnB1dC5oYXNDbGFzcygnZmllbGRfX251bWJlcl9wcmljZScpO1xuXG5cdFx0aWYgKCcnID09PSBWQUwpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoK1ZBTCA8IE1JTikge1xuXHRcdFx0JGlucHV0LnZhbChJU19QUklDRSA/IE1JTi50b0xvY2FsZVN0cmluZygpLnNwbGl0KCcsJylbMF0gOiBNSU4pO1xuXHRcdH1cblx0XHRpZiAoTUFYIDwgK1ZBTCkge1xuXHRcdFx0JGlucHV0LnZhbChJU19QUklDRSA/IE1BWC50b0xvY2FsZVN0cmluZygpLnNwbGl0KCcsJylbMF0gOiBNQVgpO1xuXHRcdH1cblx0fSk7XG59KTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyAkd2luZG93LCAkd3JhcHBlciwgTUlOX0RFTEFZLCBUUkFOU0lUSU9OIH0gZnJvbSAnLi4vdmFyaWFibGVzL3ZhcmlhYmxlcy5qcyc7XG5pbXBvcnQgbG9hZGVyIGZyb20gJy4uL2xvYWRlci9sb2FkZXIuanMnO1xuaW1wb3J0ICogYXMgcG9wdXAgZnJvbSAnLi4vcG9wdXAvcG9wdXAuanMnO1xuXG5cblxuZnVuY3Rpb24gYWRkRXJyb3IoJGVsLCB0ZXh0KSB7XG5cdHJlbW92ZUVycm9yKCRlbCk7XG5cdGlmICh0ZXh0KSB7XG5cdFx0JGVsLmFkZENsYXNzKCdmb3JtX19lcnJvci1jb250cm9sJykucGFyZW50KCkuYXBwZW5kKCc8c3BhbiBjbGFzcz1cImZvcm1fX2Vycm9yLXRleHRcIj4nICsgdGV4dCArICc8L3NwYW4+Jyk7XG5cdH1cblx0JHdpbmRvdy50cmlnZ2VyKCdyZXNpemUnKTtcbn1cblxuXG5cbmZ1bmN0aW9uIHJlbW92ZUVycm9yKCRlbCkge1xuXHRpZiAoJGVsLmhhc0NsYXNzKCdmb3JtX19lcnJvci1jb250cm9sJykpIHtcblx0XHQkZWwucmVtb3ZlQ2xhc3MoJ2Zvcm1fX2Vycm9yLWNvbnRyb2wnKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0JCh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbignLmZvcm1fX2Vycm9yLXRleHQnKS5yZW1vdmUoKTtcblx0XHR9KTtcblx0XHQkd2luZG93LnRyaWdnZXIoJ3Jlc2l6ZScpO1xuXHR9XG59XG5cblxuXG5mdW5jdGlvbiBpc0NvbXBsZXRlKCRlbCkge1xuXHRpZiAoJ2NoZWNrYm94JyA9PT0gJGVsLmF0dHIoJ3R5cGUnKSkge1xuXHRcdHJldHVybiAkZWwuZmlsdGVyKCc6Y2hlY2tlZCcpLmxlbmd0aDtcblx0fVxuXG5cdHJldHVybiAoJGVsLnZhbCgpIHx8ICcnKS50cmltKCk7XG59XG5cblxuXG5mdW5jdGlvbiBpc1ZhbGlkKCRlbCkge1xuXHRjb25zdCBwYXR0ZXJuRW1haWwgPSAvXlthLXpBLVowLTkhIyQlJicqK1xcLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXpBLVowLTkhIyQlJicqK1xcLz0/Xl9ge3x9fi1dKykqQCg/OlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dKlthLXpBLVowLTldKT9cXC4pK1thLXpBLVowLTldKD86W2EtekEtWjAtOS1dKlthLXpBLVowLTldKT8kLztcblxuXHRjb25zdCBUWVBFICAgICAgICAgPSAkZWwuYXR0cigndHlwZScpLFxuXHRcdFZBTCAgICAgICAgICAgID0gJGVsLnZhbCgpLFxuXHRcdElTX0VNQUlMICAgICAgID0gJ2VtYWlsJyA9PT0gVFlQRSxcblx0XHRJU19URUwgICAgICAgICA9ICd0ZWwnID09PSBUWVBFLFxuXHRcdElTX0VNQUlMX1ZBTElEID0gcGF0dGVybkVtYWlsLnRlc3QoVkFMKSxcblx0XHRJU19URUxfVkFMSUQgICA9IC9eXFwrXFxkXFxzXFwoXFxkezN9XFwpXFxzXFxkezN9LVxcZHsyfS1cXGR7Mn0kLy50ZXN0KFZBTCk7XG5cblx0aWYgKChJU19FTUFJTCAmJiAhSVNfRU1BSUxfVkFMSUQpIHx8IChJU19URUwgJiYgIUlTX1RFTF9WQUxJRCkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHN1Y2Nlc3MsIGVycm9yKSB7XG5cdHJldHVybiBmdW5jdGlvbihlKSB7XG5cdFx0bGV0ICRmb3JtICAgICAgPSAkKHRoaXMpLFxuXHRcdFx0JGVscyAgICAgICA9ICQoJ1tkYXRhLXJlcXVpcmVkXTp2aXNpYmxlLCBbZGF0YS1lcnJvcl06dmlzaWJsZScsIHRoaXMpLFxuXHRcdFx0aXNWYWxpZEFsbCA9IHRydWU7XG5cblx0XHQkZWxzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgJGlucHV0ICAgICAgICAgPSAkKHRoaXMpLFxuXHRcdFx0XHQkaW5wdXRSZXF1aXJlZCA9ICRpbnB1dC5maWx0ZXIoJ1tkYXRhLXJlcXVpcmVkXScpLFxuXHRcdFx0XHQkaW5wdXRFcnJvciAgICA9ICRpbnB1dC5maWx0ZXIoJ1tkYXRhLWVycm9yXScpLFxuXHRcdFx0XHRJU19DT01QTEVURSAgICA9ICRpbnB1dFJlcXVpcmVkLmxlbmd0aCA/IGlzQ29tcGxldGUoJGlucHV0UmVxdWlyZWQpIDogdHJ1ZSxcblx0XHRcdFx0SVNfVkFMSUQgICAgICAgPSAkaW5wdXRFcnJvci5sZW5ndGggPyAoIWlzQ29tcGxldGUoJGlucHV0RXJyb3IpIHx8IGlzVmFsaWQoJGlucHV0RXJyb3IpKSA6IHRydWU7XG5cblx0XHRcdGlmICghSVNfQ09NUExFVEUpIHtcblx0XHRcdFx0aXNWYWxpZEFsbCA9IGZhbHNlO1xuXHRcdFx0XHRhZGRFcnJvcigkaW5wdXRSZXF1aXJlZCwgJGlucHV0UmVxdWlyZWQuYXR0cignZGF0YS1yZXF1aXJlZCcpKTtcblxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICghSVNfVkFMSUQpIHtcblx0XHRcdFx0aXNWYWxpZEFsbCA9IGZhbHNlO1xuXHRcdFx0XHRhZGRFcnJvcigkaW5wdXRFcnJvciwgJGlucHV0RXJyb3IuYXR0cignZGF0YS1lcnJvcicpKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmICghaXNWYWxpZEFsbCkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0c2Nyb2xsVG8oJGZvcm0uZmluZCgnLmZvcm1fX2Vycm9yLWNvbnRyb2w6dmlzaWJsZScpKTtcblxuXHRcdFx0ZXJyb3IgPSBlcnJvciA/IGVycm9yIDogZnVuY3Rpb24oKSB7fTtcblx0XHRcdGVycm9yLmNhbGwodGhpcywgZSk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0c3VjY2VzcyA9IHN1Y2Nlc3MgPyBzdWNjZXNzIDogZnVuY3Rpb24oKSB7fTtcblx0XHRzdWNjZXNzLmNhbGwodGhpcywgZSk7XG5cdH1cbn1cblxuXG5cbmZ1bmN0aW9uIHNjcm9sbFRvKCRlbCwgdHJhbnNpdGlvbikge1xuXHRpZiAoISRlbC5sZW5ndGgpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdGxldCAkcG9wdXAgID0gJGVsLmNsb3Nlc3QoJy5wb3B1cF9fd3JhcHBlcicpLFxuXHRcdFx0JHBhcmVudCA9ICRwb3B1cC5sZW5ndGggPyAkcG9wdXAgOiAkKCdodG1sLCBib2R5Jyk7XG5cblx0XHRjb25zdCBPRkZTRVRfVE9QID0gJHBvcHVwLmxlbmd0aCA/IHBvcHVwLmdldE9mZnNldCgkZWwpLnRvcCA6ICRlbC5vZmZzZXQoKS50b3AsXG5cdFx0XHRTQ1JPTExfVE9QICAgPSBPRkZTRVRfVE9QIC0gKGlubmVySGVpZ2h0IC0gJGVsLmhlaWdodCgpKSAvIDI7XG5cblx0XHRpZiAoU0NST0xMX1RPUCkge1xuXHRcdFx0dHJhbnNpdGlvbiA9ICh1bmRlZmluZWQgIT09IHRyYW5zaXRpb24pID8gdHJhbnNpdGlvbiA6IFRSQU5TSVRJT047XG5cdFx0XHQkcGFyZW50LmFuaW1hdGUoe1xuXHRcdFx0XHRzY3JvbGxUb3A6IFNDUk9MTF9UT1Bcblx0XHRcdH0sIHRyYW5zaXRpb24pO1xuXHRcdH1cblx0fSwgTUlOX0RFTEFZKTtcbn1cblxuXG5cbiQoKCkgPT4ge1xuXHRzY3JvbGxUbygkKCcuZm9ybV9fZXJyb3ItY29udHJvbDp2aXNpYmxlJyksIDApO1xuXG5cblxuXHQvLyBSZW1vdmUgZXJyb3JzIGFmdGVyIGNoYW5naW5nIHZhbHVlLlxuXHQkd3JhcHBlci5vbignaW5wdXQgY2hhbmdlJywgJ1tkYXRhLXJlcXVpcmVkXSwgW2RhdGEtZXJyb3JdJywgZnVuY3Rpb24oKSB7XG5cdFx0cmVtb3ZlRXJyb3IoJCh0aGlzKSk7XG5cdH0pO1xuXG5cblxuXHQvLyBTZW5kIGZvcm0uXG5cdCQoJy5mb3JtX3NlbmQnKS50cmlnZ2VyKCdyZXNldCcpLm9uKCdzdWJtaXQnLCB2YWxpZGF0ZShmdW5jdGlvbihlKSB7XG5cdFx0Y29uc3QgJGZvcm0gPSAkKHRoaXMpO1xuXG5cdFx0JGZvcm0uYWRkQ2xhc3MoJ2xvY2snKTtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0JFxuXHRcdFx0LmFqYXgoe1xuXHRcdFx0XHR0eXBlOiAncG9zdCcsXG5cdFx0XHRcdHVybDogIHdwX2RhdGEuYWRtaW5fYWpheCxcblx0XHRcdFx0ZGF0YTogJGZvcm0uc2VyaWFsaXplKCksXG5cdFx0XHR9KVxuXHRcdFx0LmRvbmUobG9hZGVyKCRmb3JtLCAoKSA9PiB7XG5cdFx0XHRcdHBvcHVwLm9wZW4oe1xuXHRcdFx0XHRcdGlkOiAgICAgICRmb3JtLmF0dHIoJ2RhdGEtc3VjY2VzcycpLFxuXHRcdFx0XHRcdGNsb3NlSUQ6ICcjJyArICQoJy5wb3B1cF9hY3RpdmUnKS5hdHRyKCdpZCcpLFxuXHRcdFx0XHRcdG9uT3BlbjogICgpID0+IHtcblx0XHRcdFx0XHRcdCRmb3JtLnRyaWdnZXIoJ3Jlc2V0JykucmVtb3ZlQ2xhc3MoJ2xvY2snKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSkpO1xuXHR9KSk7XG59KTtcblxuXG5cbmV4cG9ydCB7IHZhbGlkYXRlLCBzY3JvbGxUbyB9O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IE1JTl9ERUxBWSB9IGZyb20gJy4uL3ZhcmlhYmxlcy92YXJpYWJsZXMuanMnO1xuXG5cblxuZnVuY3Rpb24gZGVib3VuY2UoIGNiICkge1xuXHRsZXQgdGltZW91dElEO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0SUQgKTtcblx0XHR0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KCBjYiwgTUlOX0RFTEFZIClcblx0fTtcbn1cblxuXG5cbmV4cG9ydCB7IGRlYm91bmNlIH07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgVFJBTlNJVElPTiwgJHdpbmRvdywgJHdyYXBwZXIsIGJyZWFrcG9pbnQgfSBmcm9tICcuLi92YXJpYWJsZXMvdmFyaWFibGVzLmpzJztcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi4vZnVuY3Rpb25zL2Z1bmN0aW9ucy5qcyc7XG5pbXBvcnQgKiBhcyBwYWdlIGZyb20gJy4uL3BhZ2UvcGFnZS5qcyc7XG5cblxuXG5sZXQgJGhlYWRlcjtcblxuXG5cbiQoKCkgPT4ge1xuXHQkaGVhZGVyID0gJCgnLmhlYWRlcicpO1xuXG5cblxuXHRmdW5jdGlvbiB0b2dnbGVTaGFkb3coKSB7XG5cdFx0Y29uc3QgU0hBRE9XX1NDUk9MTF9UT1AgPSAxMDtcblxuXHRcdGlmICghcGFnZS5pc1Njcm9sbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChTSEFET1dfU0NST0xMX1RPUCA8ICR3aW5kb3cuc2Nyb2xsVG9wKCkpIHtcblx0XHRcdCRoZWFkZXIuYWRkQ2xhc3MoJ2hlYWRlcl9zaGFkb3cnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JGhlYWRlci5yZW1vdmVDbGFzcygnaGVhZGVyX3NoYWRvdycpO1xuXHRcdH1cblx0fVxuXHR0b2dnbGVTaGFkb3coKTtcblx0JHdpbmRvdy5vbignc2Nyb2xsJywgdG9nZ2xlU2hhZG93KTtcblxuXG5cblx0Y29uc3QgdG9nZ2xlUGFuZWwgPSAoKCkgPT4ge1xuXHRcdGxldCB0b2dnbGVTY3JvbGxUb3AgPSAkaGVhZGVyLmlubmVySGVpZ2h0KCksXG5cdFx0XHRvbGRJbm5lckhlaWdodCAgPSBpbm5lckhlaWdodCxcblx0XHRcdG9sZFNjcm9sbFRvcDtcblxuXHRcdCR3aW5kb3cub24oJ3Jlc2l6ZVdpZHRoJywgZGVib3VuY2UoKCkgPT4ge1xuXHRcdFx0dG9nZ2xlU2Nyb2xsVG9wID0gJGhlYWRlci5pbm5lckhlaWdodCgpO1xuXHRcdH0pKTtcblxuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjb25zdCBTQ1JPTExfVE9QICAgICAgICAgPSAkd2luZG93LnNjcm9sbFRvcCgpLFxuXHRcdFx0XHRIQVNfU0NST0xMICAgICAgICAgICA9IFNDUk9MTF9UT1AgIT09IG9sZFNjcm9sbFRvcCxcblx0XHRcdFx0SVNfVE9HR0xFX1NDUk9MTF9UT1AgPSB0b2dnbGVTY3JvbGxUb3AgPCBTQ1JPTExfVE9QLFxuXHRcdFx0XHRJU19SRVNJWkVfSEVJR0hUICAgICA9IGlubmVySGVpZ2h0ICE9PSBvbGRJbm5lckhlaWdodDtcblxuXHRcdFx0aWYgKCFwYWdlLmlzU2Nyb2xsIHx8ICFIQVNfU0NST0xMKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdCRoZWFkZXIucmVtb3ZlQ2xhc3MoJ2hlYWRlcl9hY3RpdmUtbWVudScpO1xuXG5cdFx0XHRpZiAoSVNfVE9HR0xFX1NDUk9MTF9UT1AgJiYgIUlTX1JFU0laRV9IRUlHSFQpIHtcblx0XHRcdFx0Y29uc3QgSVNfU0NST0xMX1VQID0gU0NST0xMX1RPUCA8IG9sZFNjcm9sbFRvcDtcblxuXHRcdFx0XHQvLyBTbyB0aGF0IGl0IGlzIGZpeGVkIG9uIHRoZSBkZXNrdG9wIHdoZW4gbG9hZGluZy5cblx0XHRcdFx0aWYgKCFicmVha3BvaW50LmlzVGFibGV0KSB7XG5cdFx0XHRcdFx0JGhlYWRlci5hZGRDbGFzcygnaGVhZGVyX2ZpeGVkJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoSVNfU0NST0xMX1VQKSB7XG5cdFx0XHRcdFx0Ly8gU28gdGhhdCBpdCBpcyBmaXhlZCBvbiB0aGUgbW9iaWxlIHdoZW4gc2Nyb2xsIHVwLlxuXHRcdFx0XHRcdGlmIChicmVha3BvaW50LmlzVGFibGV0KSB7XG5cdFx0XHRcdFx0XHQkaGVhZGVyLmFkZENsYXNzKCdoZWFkZXJfZml4ZWQnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JGhlYWRlci5yZW1vdmVDbGFzcygnaGVhZGVyX291dCcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRoZWFkZXIuYWRkQ2xhc3MoJ2hlYWRlcl9vdXQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIUlTX1RPR0dMRV9TQ1JPTExfVE9QKSB7XG5cdFx0XHRcdCRoZWFkZXIucmVtb3ZlQ2xhc3MoJ2hlYWRlcl9vdXQnKTtcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0JGhlYWRlci5hZGRDbGFzcygnaGVhZGVyX2ZpeGVkJyk7XG5cdFx0XHRcdH0sIFRSQU5TSVRJT04pO1xuXHRcdFx0fVxuXHRcdFx0b2xkU2Nyb2xsVG9wICAgPSBTQ1JPTExfVE9QO1xuXHRcdFx0b2xkSW5uZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcblx0XHR9O1xuXHR9KSgpO1xuXHR0b2dnbGVQYW5lbCgpO1xuXHQkd2luZG93Lm9uKCdzY3JvbGwnLCB0b2dnbGVQYW5lbCk7XG5cblxuXG5cdC8vIFRoZSBtZW51IG9uIHRoZSBtb2JpbGUuXG5cdCgoKSA9PiB7XG5cdFx0Ly8gIFNob3cvaGlkZS5cblx0XHQkKCcuaGVhZGVyX190b2dnbGUnKS5vbignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRpZiAoYnJlYWtwb2ludC5pc1RhYmxldCkge1xuXHRcdFx0XHQkaGVhZGVyLnRvZ2dsZUNsYXNzKCdoZWFkZXJfYWN0aXZlLW1lbnUnKTtcblx0XHRcdFx0cGFnZS5zY3JvbGxUb2dnbGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXG5cblx0XHQvLyBIaWRlIHdoZW4gY2xpY2sgb3V0c2lkZS5cblx0XHQkd3JhcHBlci5vbignY2xpY2snLCAoZSkgPT4ge1xuXHRcdFx0aWYgKGJyZWFrcG9pbnQuaXNUYWJsZXQgJiZcblx0XHRcdFx0XHQkaGVhZGVyLmhhc0NsYXNzKCdoZWFkZXJfYWN0aXZlLW1lbnUnKSAmJlxuXHRcdFx0XHRcdCEkKGUudGFyZ2V0KS5jbG9zZXN0KCcuaGVhZGVyX190b2dnbGUsIC5oZWFkZXJfX21lbnUnKS5sZW5ndGgpIHtcblx0XHRcdFx0cGFnZS5zY3JvbGxPbigpO1xuXHRcdFx0XHQkaGVhZGVyLnJlbW92ZUNsYXNzKCdoZWFkZXJfYWN0aXZlLW1lbnUnKVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cblxuXHRcdC8vIEVuYWJsZS9kaXNhYmxlIHRoZSBzY3JvbGwgcGFnZSB3aGVuIGNoYW5naW5nIHRoZSB3aW5kb3cgd2lkdGguXG5cdFx0JHdpbmRvdy5vbigncmVzaXplV2lkdGgnLCBkZWJvdW5jZSgoKSA9PiB7XG5cdFx0XHRjb25zdCBJU19BQ1RJVkVfTUVOVSAgICAgICAgID0gJGhlYWRlci5oYXNDbGFzcygnaGVhZGVyX2FjdGl2ZS1tZW51JyksXG5cdFx0XHRcdElTX0VOQUJMRV9TQ1JPTExfREVTS1RPUCA9IChJU19BQ1RJVkVfTUVOVSAmJiAhcGFnZS5pc1Njcm9sbCAmJiAhYnJlYWtwb2ludC5pc1RhYmxldCksXG5cdFx0XHRcdElTX0RJU0FCTEVfU0NST0xMX01PQklMRSA9IChJU19BQ1RJVkVfTUVOVSAmJiBwYWdlLmlzU2Nyb2xsICYmIGJyZWFrcG9pbnQuaXNUYWJsZXQpO1xuXG5cdFx0XHRpZiAoSVNfRU5BQkxFX1NDUk9MTF9ERVNLVE9QIHx8IElTX0RJU0FCTEVfU0NST0xMX01PQklMRSkge1xuXHRcdFx0XHRwYWdlLnNjcm9sbFRvZ2dsZSgpO1xuXHRcdFx0fVxuXHRcdH0pKTtcblx0fSkoKTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyL3N3aXBlci1idW5kbGUubWluJztcblxuXG5cbiQoKCkgPT4ge1xuXHRpZiAoISQoJy5ob21lJykubGVuZ3RoKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG59KTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cblxuXG5sZXQgJGVsZW1zLFxuXHRvYnNlcnZlcnMgPSBbXTtcblxuXG5cbmZ1bmN0aW9uIG9ic2VydmUoJGVsLCBjYikge1xuXHRpZiAod2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyKSB7XG5cdFx0Y29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XG5cdFx0XHRlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG5cdFx0XHRcdGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuXHRcdFx0XHRcdGNiKClcblx0XHRcdFx0XHRvYnNlcnZlci51bm9ic2VydmUoJGVsWzBdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0b2JzZXJ2ZXIub2JzZXJ2ZSgkZWxbMF0pO1xuXHR9IGVsc2Uge1xuXHRcdGNiKCk7XG5cdH1cbn1cblxuXG5mdW5jdGlvbiBsb2FkKCRlbGVtKSB7XG5cdGlmICgkZWxlbVswXS5kYXRhc2V0LnNyYykge1xuXHRcdCRlbGVtLmF0dHIoJ3NyYycsICRlbGVtWzBdLmRhdGFzZXQuc3JjKTtcblx0fVxuXHRpZiAoJGVsZW1bMF0uZGF0YXNldC5iZykge1xuXHRcdCRlbGVtLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoJyArICRlbGVtWzBdLmRhdGFzZXQuYmcgKyAnKScpO1xuXHR9XG59XG5cblxuZnVuY3Rpb24gaW5pdCgpIHtcblx0b2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24ob2JzZXJ2ZXIsIGkpIHtcblx0XHRvYnNlcnZlci51bm9ic2VydmUoJGVsZW1zLmVxKGkpWzBdKTtcblx0fSk7XG5cblx0JGVsZW1zICAgID0gJCgnW2RhdGEtc3JjXSwgW2RhdGEtYmddJyk7XG5cdG9ic2VydmVycyA9IFtdO1xuXG5cdCRlbGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0ICRlbGVtID0gJCh0aGlzKTtcblxuXHRcdG9ic2VydmUoJGVsZW0sICgpID0+IHtcblx0XHRcdGxvYWQoJGVsZW0pO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuXG5cblxuJCgoKSA9PiB7XG5cdGluaXQoKTtcbn0pO1xuXG5cblxuZXhwb3J0IHsgb2JzZXJ2ZSwgaW5pdCB9O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7ICR3aW5kb3csIE1JTl9ERUxBWSwgVFJBTlNJVElPTiB9IGZyb20gJy4uL3ZhcmlhYmxlcy92YXJpYWJsZXMuanMnO1xuaW1wb3J0IHsgaXNTY3JvbGwgfSBmcm9tICcuLi9wYWdlL3BhZ2UuanMnO1xuXG5mdW5jdGlvbiBhZGREYXRhVGltZW91dElEKCAkbG9hZGVyLCB0aW1lb3V0SUQgKSB7XG5cdGxldCB0aW1lb3V0SURzID0gJGxvYWRlci5kYXRhKCAndGltZW91dElEcycgKSB8fCBbXTtcblxuXHR0aW1lb3V0SURzLnB1c2goIHRpbWVvdXRJRCApO1xuXHQkbG9hZGVyLmRhdGEoICd0aW1lb3V0SURzJywgdGltZW91dElEcyApO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoICRwYXJlbnQsIGNhbGxiYWNrICkgPT4ge1xuXHRjb25zdCAkbG9hZGVyID0gJHBhcmVudC5maW5kKCAnLmxvYWRlcicgKTtcblxuXHRsZXQgZGVsYXkgICAgICA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRsZXQgdGltZW91dElEcyA9ICRsb2FkZXIuZGF0YSggJ3RpbWVvdXRJRHMnICkgfHwgW107XG5cblx0d2hpbGUoIHRpbWVvdXRJRHMubGVuZ3RoICkge1xuXHRcdGNsZWFyVGltZW91dCggdGltZW91dElEcy5zaGlmdCgpICk7XG5cdH1cblx0JGxvYWRlci5hZGRDbGFzcyggJ2xvYWRlcl9hbmltYXRlJyApO1xuXG5cdGNvbnN0IFRJTUVPVVRfSUQxID0gc2V0VGltZW91dCggKCkgPT4ge1xuXHRcdCRsb2FkZXIuYWRkQ2xhc3MoICdsb2FkZXJfYWN0aXZlJyApO1xuXHR9LCBNSU5fREVMQVkgKTtcblxuXHRhZGREYXRhVGltZW91dElEKCAkbG9hZGVyLCBUSU1FT1VUX0lEMSApO1xuXG5cdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRjb25zdCBjYWxsQXJndW1lbnRzID0gYXJndW1lbnRzO1xuXHRcdGNvbnN0IE1JTl9ERUxBWSAgICAgPSA3MDA7XG5cblx0XHRkZWxheSA9IE1JTl9ERUxBWSAtICggbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBkZWxheSApO1xuXHRcdGRlbGF5ID0gTWF0aC5tYXgoIGRlbGF5LCAwICk7XG5cblx0XHRjb25zdCBUSU1FT1VUX0lEMiA9IHNldFRpbWVvdXQoICgpID0+IHtcblx0XHRcdGNhbGxiYWNrLmFwcGx5KCBudWxsLCBjYWxsQXJndW1lbnRzICk7XG5cdFx0XHQkbG9hZGVyLnJlbW92ZUNsYXNzKCAnbG9hZGVyX2FuaW1hdGUnICk7XG5cblx0XHRcdGxldCBUSU1FT1VUX0lEMyA9c2V0VGltZW91dCggKCkgPT4ge1xuXHRcdFx0XHQkbG9hZGVyLnJlbW92ZUNsYXNzKCAnbG9hZGVyX2FjdGl2ZScgKTtcblx0XHRcdH0sIFRSQU5TSVRJT04gKyAxICk7XG5cblx0XHRcdGFkZERhdGFUaW1lb3V0SUQoICRsb2FkZXIsIFRJTUVPVVRfSUQzICk7XG5cdFx0fSwgZGVsYXkgKTtcblxuXHRcdGFkZERhdGFUaW1lb3V0SUQoICRsb2FkZXIsIFRJTUVPVVRfSUQyICk7XG5cdH07XG59O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IE1JTl9ERUxBWSwgJHdpbmRvdywgJHdyYXBwZXIsIGlzTW9iaWxlIH0gZnJvbSAnLi4vdmFyaWFibGVzL3ZhcmlhYmxlcy5qcyc7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gJy4uL2Z1bmN0aW9ucy9mdW5jdGlvbnMuanMnO1xuXG5cbmNvbnN0IHBhdHRlcm5BcHBsZSA9IC9pUGhvbmV8aVBhZHxpUG9kfE1hYy9pO1xuXG5sZXQgaXNTY3JvbGwgPSB0cnVlLFxuXHRpc0lPUyAgICA9IHBhdHRlcm5BcHBsZS50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSxcblx0JGVsLFxuXHRzY3JvbGxUb3A7XG5cblxuXG5jb25zdCBjb21wZW5zYXRlU2Nyb2xsYmFyID0gKGZ1bmN0aW9uKCkge1xuXHRjb25zdCBnZXRTY3JvbGxiYXJXaWR0aCA9ICgoKSA9PiB7XG5cdFx0Y29uc3QgJG91dGVyID0gJCgnPGRpdj4nKSxcblx0XHRcdCRpbm5lciAgID0gJCgnPGRpdj4nKTtcblxuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHQkb3V0ZXIuY3NzKCdvdmVyZmxvdy15JywgJ3Njcm9sbCcpO1xuXHRcdFx0JGlubmVyLmFwcGVuZFRvKCRvdXRlcik7XG5cdFx0XHQkb3V0ZXIuYXBwZW5kVG8oJGVsKTtcblxuXHRcdFx0Y29uc3QgUkVTVUxUID0gKCRlbC5oZWlnaHQoKSAhPT0gJHdyYXBwZXIuaGVpZ2h0KCkpID8gKCRvdXRlci53aWR0aCgpIC0gJGlubmVyLndpZHRoKCkpIDogMDtcblxuXHRcdFx0JG91dGVyLnJlbW92ZSgpO1xuXG5cdFx0XHRyZXR1cm4gUkVTVUxUO1xuXHRcdH07XG5cdH0pKCk7XG5cblxuXG5cdGNvbnN0ICRwYWRkaW5nRWxlbXMgPSAkKCcucGFnZV9fY29tcGVuc2F0ZS1zY3JvbGxiYXInKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIC0xID09PSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZigkKHRoaXMpLmNzcygncG9zaXRpb24nKSk7XG5cdH0pO1xuXG5cdGNvbnN0ICRtYXJnaW5FbGVtcyA9ICQoJy5wYWdlX19jb21wZW5zYXRlLXNjcm9sbGJhcicpLm5vdCgkcGFkZGluZ0VsZW1zKTtcblxuXG5cblx0cmV0dXJuICgpID0+IHtcblx0XHQkcGFkZGluZ0VsZW1zLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRjb25zdCAkcGFkZGluZ0VsZW0gICAgPSAkKHRoaXMpLFxuXHRcdFx0XHQkcG9wdXAgICAgICAgICAgPSAkcGFkZGluZ0VsZW0uY2xvc2VzdCgnLnBvcHVwJyksXG5cdFx0XHRcdElTX0FDVElWRV9QT1BVUCA9ICRwb3B1cC5oYXNDbGFzcygncG9wdXBfYWN0aXZlJyk7XG5cblx0XHRcdGlmICghSVNfQUNUSVZFX1BPUFVQKSB7XG5cdFx0XHRcdCRwb3B1cC5hZGRDbGFzcygncG9wdXBfYWN0aXZlJyk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBIQVNfU0NST0xMQkFSID0gMSA8IE1hdGguYWJzKCRwYWRkaW5nRWxlbS5vdXRlckhlaWdodCgpIC0gJHBhZGRpbmdFbGVtWzBdLnNjcm9sbEhlaWdodCk7XG5cblx0XHRcdGlmIChpc1Njcm9sbCB8fCBIQVNfU0NST0xMQkFSKSB7XG5cdFx0XHRcdCRwYWRkaW5nRWxlbS5jc3MoJ3BhZGRpbmctcmlnaHQnLCAwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCRwYWRkaW5nRWxlbS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBnZXRTY3JvbGxiYXJXaWR0aCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFJU19BQ1RJVkVfUE9QVVApIHtcblx0XHRcdFx0JHBvcHVwLnJlbW92ZUNsYXNzKCdwb3B1cF9hY3RpdmUnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQkbWFyZ2luRWxlbXMuY3NzKCdtYXJnaW4tcmlnaHQnLCBpc1Njcm9sbCA/IDAgOiBnZXRTY3JvbGxiYXJXaWR0aCgpKTtcblx0fTtcbn0pKCk7XG5cblxuXG5mdW5jdGlvbiBzY3JvbGxPbigpIHtcblx0aWYgKCFpc1Njcm9sbCkge1xuXHRcdGlzU2Nyb2xsID0gdHJ1ZTtcblx0XHRjb21wZW5zYXRlU2Nyb2xsYmFyKCk7XG5cdFx0JGVsLmF0dHIoJ3N0eWxlJywgJycpO1xuXG5cdFx0Ly8gT24gdGhlIGRlc2t0b3AgYWxzbyBuZWVkLCBzaW5jZSB3aGVuIHRoZSB3aW5kb3cgc2hyaW5rcyB0aGVuIHRoZSBwYWdlIG9mZnNldHMsIHNvIGZvcnNlZCBzZXQgdGhlIHNjcm9sbCBwYWdlIHBvc2l0aW9uLlxuXHRcdCR3aW5kb3cuc2Nyb2xsVG9wKHNjcm9sbFRvcCk7XG5cblx0XHRpZiAoaXNJT1MpIHtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHQkd2luZG93LnNjcm9sbFRvcChzY3JvbGxUb3ApO1xuXHRcdFx0fSwgTUlOX0RFTEFZKTtcblx0XHR9XG5cdH1cbn1cblxuXG5cbmZ1bmN0aW9uIGZpeGVkKCkge1xuXHQkZWwuY3NzKHtcblx0XHRwb3NpdGlvbjogJ2ZpeGVkJyxcblx0XHR0b3A6ICAgICAgLXNjcm9sbFRvcCxcblx0XHRsZWZ0OiAgICAgMCxcblx0XHRyaWdodDogICAgMCxcblx0fSk7XG59XG5mdW5jdGlvbiBzY3JvbGxPZmYoKSB7XG5cdGlmIChpc1Njcm9sbCkge1xuXHRcdHNjcm9sbFRvcCA9ICR3aW5kb3cuc2Nyb2xsVG9wKCk7XG5cdFx0aXNTY3JvbGwgID0gZmFsc2U7XG5cdFx0Y29tcGVuc2F0ZVNjcm9sbGJhcigpO1xuXG5cdFx0aWYgKCFpc0lPUykge1xuXHRcdFx0JGVsLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cblx0XHRcdC8vIE9uIHRoZSBkZXNrdG9wIHdoZW4gdGhlIHdpbmRvdyBzaHJpbmtzIHRoZW4gdGhlIHBhZ2Ugb2Zmc2V0cywgc28gZm9yc2VkIHNldCB0aGUgc2Nyb2xsIHBhZ2UgcG9zaXRpb24uXG5cdFx0XHQkd2luZG93LnNjcm9sbFRvcChzY3JvbGxUb3ApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBTb21ldGltZXMgb24gdGhlIFNhZmFyaSBJT1MganVtcHMgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZSB3aGljaCBpcyB3aHkgbmVlZHMgYSBkZWxheS5cblx0XHRcdGZpeGVkKCk7XG5cdFx0XHRzZXRUaW1lb3V0KGZpeGVkLCBNSU5fREVMQVkpO1xuXHRcdH1cblx0fVxufVxuXG5cblxuZnVuY3Rpb24gc2Nyb2xsVG9nZ2xlKCkge1xuXHRpZiAoaXNTY3JvbGwpIHtcblx0XHRzY3JvbGxPZmYoKTtcblx0fSBlbHNlIHtcblx0XHRzY3JvbGxPbigpO1xuXHR9XG59XG5cblxuXG4kKCgpID0+IHtcblx0JGVsID0gJCgnLnBhZ2UnKTtcblxuXHQkd2luZG93Lm9uKCdyZXNpemUnLCBkZWJvdW5jZSgoKSA9PiB7XG5cdFx0aXNJT1MgPSBwYXR0ZXJuQXBwbGUudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDE7XG5cdFx0Y29tcGVuc2F0ZVNjcm9sbGJhcigpO1xuXHR9KSk7XG5cblxuXG5cdC8vIERpc2FibGUgY3NzIHRyYW5zaXRpb24gb24gcmVzaXplL1xuXHQkd2luZG93Lm9uKCdyZXNpemUnLCBkZWJvdW5jZSgoKSA9PiB7XG5cdFx0JGVsLmFkZENsYXNzKCd0cmFucy1vZmYnKTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdCRlbC5yZW1vdmVDbGFzcygndHJhbnMtb2ZmJyk7XG5cdFx0fSwgTUlOX0RFTEFZKTtcblx0fSkpO1xuXG5cblxuXHRmdW5jdGlvbiB0b2dnbGVNb2JpbGUoKSB7XG5cdFx0aWYgKGlzTW9iaWxlKSB7XG5cdFx0XHQkZWwuYWRkQ2xhc3MoJ3BhZ2VfbW9iaWxlJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRlbC5yZW1vdmVDbGFzcygncGFnZV9tb2JpbGUnKTtcblx0XHR9XG5cdH1cblx0dG9nZ2xlTW9iaWxlKCk7XG5cdCR3aW5kb3cub24oJ3Jlc2l6ZScsIGRlYm91bmNlKHRvZ2dsZU1vYmlsZSkpO1xuXG5cblxuXHQvLyBQcmV2ZW50IHRoZSBzZWxlY3Rpb24gb2YgZWxlbW50cyBieSBkb3VibGUgY2xpY2tpbmcuXG5cdCgoKSA9PiB7XG5cdFx0Y29uc3QgQ0xJQ0tfREVMQVkgPSAxMDAwO1xuXHRcdGxldCB0aW1lb3V0SUQ7XG5cblx0XHQkZWwub24oJ2RibGNsaWNrJywgKCkgPT4ge1xuXHRcdFx0JGVsLmNzcygndXNlci1zZWxlY3QnLCAnbm9uZScpO1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG5cblx0XHRcdHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHQkZWwuY3NzKCd1c2VyLXNlbGVjdCcsICd1bnNldCcpO1xuXHRcdFx0fSwgQ0xJQ0tfREVMQVkpO1xuXHRcdH0pO1xuXHR9KSgpO1xufSk7XG5cblxuXG5leHBvcnQgeyAkZWwsIGlzU2Nyb2xsLCBzY3JvbGxPbiwgc2Nyb2xsT2ZmLCBzY3JvbGxUb2dnbGUgfTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUGhvdG9Td2lwZSBmcm9tICdwaG90b3N3aXBlL2Rpc3QvcGhvdG9zd2lwZS5lc20ubWluJztcbmltcG9ydCBQaG90b1N3aXBlTGlnaHRib3ggZnJvbSAncGhvdG9zd2lwZS9kaXN0L3Bob3Rvc3dpcGUtbGlnaHRib3guZXNtLm1pbic7XG5pbXBvcnQgeyAkd3JhcHBlciwgTUlOX0RFTEFZLCBUUkFOU0lUSU9OIH0gZnJvbSAnLi4vdmFyaWFibGVzL3ZhcmlhYmxlcy5qcyc7XG5pbXBvcnQgKiBhcyBwYWdlIGZyb20gJy4uL3BhZ2UvcGFnZS5qcyc7XG5pbXBvcnQgeyBpbml0IGFzIHN2Z1VzZUV4dGVybmFsVXBkYXRlIH0gZnJvbSAnLi4vc3ZnLXVzZS1leHRlcm5hbC9zdmctdXNlLWV4dGVybmFsLmpzJztcblxuXG5cbmZ1bmN0aW9uIGNsb3NlKCRlbCkge1xuXHQkZWwucmVtb3ZlQ2xhc3MoJ3BvcHVwX2FuaW1hdGUnKTtcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHQkZWwucmVtb3ZlQ2xhc3MoJ3BvcHVwX2FjdGl2ZScpO1xuXHRcdGlmICghJCgnLnBvcHVwX2FjdGl2ZScpLmxlbmd0aCkge1xuXHRcdFx0cGFnZS5zY3JvbGxPbigpO1xuXHRcdH1cblx0fSwgVFJBTlNJVElPTik7XG59XG5cblxuXG5mdW5jdGlvbiBvcGVuKG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9ICQuZXh0ZW5kKHtcblx0XHRpZDogICAgICAgbnVsbCxcblx0XHRjbG9zZUlEOiAgbnVsbCxcblx0XHRwb3NpdGlvbjogMCxcblx0XHRvbk9wZW46ICAgKCkgPT4ge30sXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0ICRwb3B1cCAgICA9ICQob3B0aW9ucy5pZCksXG5cdFx0JHBvcHVwQ2xvc2UgPSAkKG9wdGlvbnMuY2xvc2VJRCksXG5cdFx0REVMQVkgICAgICAgPSAkcG9wdXBDbG9zZS5sZW5ndGggPyBUUkFOU0lUSU9OIDogMDtcblxuXG5cdGlmICgkcG9wdXBDbG9zZS5sZW5ndGgpIHtcblx0XHRjbG9zZSgkcG9wdXBDbG9zZSk7XG5cdH0gZWxzZSB7XG5cdFx0cGFnZS5zY3JvbGxPZmYoKTtcblx0fVxuXHQkcG9wdXAuYWRkQ2xhc3MoJ3BvcHVwX2FjdGl2ZScpO1xuXG5cdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdG9wdGlvbnMub25PcGVuKCk7XG5cblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdCRwb3B1cC5hZGRDbGFzcygncG9wdXBfYW5pbWF0ZScpO1xuXHRcdH0sIE1JTl9ERUxBWSk7XG5cdH0sIERFTEFZKTtcblxuXG5cdGNvbnN0ICRwb3B1cFRpdGxlID0gJHBvcHVwLmZpbmQoJy5wb3B1cF9fdGl0bGUnKSxcblx0XHQkaW5wdXRUaXRsZSAgID0gJHBvcHVwLmZpbmQoJ1tuYW1lPVwidGl0bGVcIl0nKTtcblxuXHRjb25zdCBQT1BVUF9USVRMRSA9IG9wdGlvbnMudGl0bGUgfHwgJHBvcHVwVGl0bGUuYXR0cignZGF0YS10aXRsZScpO1xuXG5cdGlmIChQT1BVUF9USVRMRSkge1xuXHRcdCRwb3B1cFRpdGxlLnRleHQoUE9QVVBfVElUTEUpO1xuXHRcdCRpbnB1dFRpdGxlLnZhbChQT1BVUF9USVRMRSk7XG5cdH1cbn1cblxuXG5cbmZ1bmN0aW9uIGdldE9mZnNldCgkZWwpIHtcblx0bGV0ICRwYXJlbnQgPSAkZWwub2Zmc2V0UGFyZW50KCk7XG5cblx0Y29uc3QgJGJveCA9ICRlbC5jbG9zZXN0KCcucG9wdXBfX2JveCcpLFxuXHRcdHJlc3VsdCA9ICRlbC5wb3NpdGlvbigpO1xuXG5cdGlmICgoJHBhcmVudFswXSAhPT0gJGJveFswXSkgJiYgISQuY29udGFpbnMoJGJveFswXSwgJHBhcmVudFswXSkpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRyZXN1bHQudG9wICs9IHBhcnNlRmxvYXQoJGJveC5wYXJlbnQoJy5wb3B1cF9fY29udGVudCcpLmNzcygncGFkZGluZy10b3AnKSk7XG5cdHdoaWxlICgkcGFyZW50WzBdICE9PSAkYm94WzBdKSB7XG5cdFx0bGV0IHBvc2l0aW9uID0gJHBhcmVudC5wb3NpdGlvbigpO1xuXG5cdFx0cmVzdWx0LnRvcCAgKz0gcG9zaXRpb24udG9wO1xuXHRcdHJlc3VsdC5sZWZ0ICs9IHBvc2l0aW9uLmxlZnQ7XG5cdFx0JHBhcmVudCA9ICRwYXJlbnQub2Zmc2V0UGFyZW50KCk7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuZnVuY3Rpb24gY3JlYXRlR2FsbGVyeShvcHRzKSB7XG5cdGNvbnN0IGxpZ2h0Ym94ID0gbmV3IFBob3RvU3dpcGVMaWdodGJveCgkLmV4dGVuZCh7XG5cdFx0c2hvd0hpZGVBbmltYXRpb25UeXBlOiAnZmFkZScsXG5cdFx0dGFwQWN0aW9uOiAgICAgICAgICAgICAnY2xvc2UnLFxuXHRcdGxvb3A6ICAgICAgICAgICAgICAgICAgZmFsc2UsXG5cdFx0cHN3cE1vZHVsZTogICAgICAgICAgICBQaG90b1N3aXBlLFxuXHR9LCBvcHRzKSk7XG5cblx0bGlnaHRib3guaW5pdCgpO1xuXG5cdGlmIChvcHRzLmRhdGFTb3VyY2UpIHtcblx0XHRsaWdodGJveC5sb2FkQW5kT3BlbigwKTtcblx0fVxufVxuXG5cblxuJCgoKSA9PiB7XG5cdC8vIE9wZW4gdGhlIHBvcHVwIG9uIGNsaWNrLlxuXHQkd3JhcHBlci5vbignY2xpY2snLCAnLm9wZW4tcG9wdXAnLCBmdW5jdGlvbihlKSB7XG5cdFx0Y29uc3QgJGJ1dHRvbiAgID0gJCh0aGlzKSxcblx0XHRcdCRjbG9zZVBvcHVwID0gJCgnLnBvcHVwX2FjdGl2ZScpLFxuXHRcdFx0REVMQVkgICAgICAgPSArJGJ1dHRvbi5hdHRyKCdkYXRhLWRlbGF5JykgfHwgMDtcblxuXHRcdGlmICgkYnV0dG9uLmhhc0NsYXNzKCdvcGVuLXBvcHVwX2FjdGl2ZScpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdCRidXR0b24uYWRkQ2xhc3MoJ29wZW4tcG9wdXBfYWN0aXZlJyk7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRvcGVuKHtcblx0XHRcdFx0aWQ6ICAgICAgJGJ1dHRvbi5hdHRyKCdocmVmJyksXG5cdFx0XHRcdGNsb3NlSUQ6ICRjbG9zZVBvcHVwLmxlbmd0aCA/ICgnIycgKyAkY2xvc2VQb3B1cC5hdHRyKCdpZCcpKSA6IG51bGwsXG5cdFx0XHRcdHRpdGxlOiAgICRidXR0b24uYXR0cignZGF0YS10aXRsZScpLFxuXHRcdFx0fSk7XG5cdFx0XHQkYnV0dG9uLnJlbW92ZUNsYXNzKCdvcGVuLXBvcHVwX2FjdGl2ZScpO1xuXHRcdH0sIERFTEFZKTtcblx0fSk7XG5cblxuXG5cdC8vIENsb3NlIHRoZSBwb3B1cCBvbiBjbGljayBFc2Mgb24gdGhlIG1vdXNlYm9hcmQuXG5cdCR3cmFwcGVyLm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuXHRcdGlmICgtMSAhPT0gKCcnICsgZS5rZXkpLmluZGV4T2YoJ0VzYycpKSB7XG5cdFx0XHQkKCcucG9wdXBfYWN0aXZlIC5wb3B1cF9fY2xvc2UnKS50cmlnZ2VyKCdjbGljaycpO1xuXHRcdH1cblx0fSk7XG5cblxuXG5cdC8vIENsb3NlIHRoZSBwb3B1cC5cblx0JHdyYXBwZXIub24oJ2NsaWNrJywgJy5wb3B1cCcsIGZ1bmN0aW9uKGUpIHtcblx0XHRjb25zdCAkdGFyZ2V0ID0gJChlLnRhcmdldCksXG5cdFx0XHRJU19DTE9TRSAgPSAkdGFyZ2V0LmNsb3Nlc3QoJy5wb3B1cF9fY2xvc2UnKS5sZW5ndGgsXG5cdFx0XHRJU19CT1ggICAgPSAkdGFyZ2V0LmNsb3Nlc3QoJy5wb3B1cF9fYm94JykubGVuZ3RoLFxuXHRcdFx0SVNfU0xJREVSID0gJHRhcmdldC5jbG9zZXN0KCcucG9wdXBfX3NsaWRlcicpLmxlbmd0aDtcblxuXHRcdGlmICgoIUlTX0JPWCAmJiAhSVNfU0xJREVSKSB8fCBJU19DTE9TRSkge1xuXHRcdFx0Y2xvc2UoJHRhcmdldC5jbG9zZXN0KCcucG9wdXAnKSk7XG5cdFx0fVxuXHR9KTtcblxuXG5cblx0Ly8gQ3JlYXRlIGEgZ2FsbGVyeS5cblx0Y3JlYXRlR2FsbGVyeSh7XG5cdFx0Z2FsbGVyeTogICcucG9wdXAtZ2FsbGVyeScsXG5cdFx0Y2hpbGRyZW46ICdbZGF0YS1wc3dwLXdpZHRoXVtkYXRhLXBzd3AtaGVpZ2h0XScsXG5cdH0pO1xufSk7XG5cblxuXG5leHBvcnQgeyBvcGVuLCBnZXRPZmZzZXQsIGNyZWF0ZUdhbGxlcnkgfTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyAkd2luZG93LCBpc01vYmlsZSwgTUlOX0RFTEFZIH0gZnJvbSAnLi4vdmFyaWFibGVzL3ZhcmlhYmxlcy5qcyc7XG5cblxuXG5jbGFzcyBTZWxlY3Qge1xuXHRjb25zdHJ1Y3RvcihlbCkge1xuXHRcdHRoaXMuJGVsICAgICAgID0gJChlbCk7XG5cdFx0dGhpcy4kZGVmYXVsdCAgPSB0aGlzLiRlbC5jaGlsZHJlbignLnNlbGVjdF9fZGVmYXVsdCcpO1xuXHRcdHRoaXMuJGhlYWQgICAgID0gdGhpcy4kZWwuY2hpbGRyZW4oJy5zZWxlY3RfX2hlYWQnKTtcblx0XHR0aGlzLmlTZWxlY3RlZCA9IDA7XG5cblx0XHR0aGlzLiRlbC5hZGRDbGFzcygnc2VsZWN0X2luaXQnKTtcblx0XHR0aGlzLnRvZ2dsZUV2ZW50TW9iaWxlKCk7XG5cdFx0dGhpcy5hZGRFdmVudEhlYWQoKTtcblx0XHR0aGlzLmNyZWF0ZUl0ZW1zKCk7XG5cdFx0dGhpcy5hZGRFdmVudHNJdGVtcygpO1xuXHRcdHRoaXMuYWRkRXZlbnRPdXRzaWRlKCk7XG5cdFx0dGhpcy5hZGRFdmVudERlZmF1bHQoKTtcblx0fVxuXG5cblxuXHR0b2dnbGVFdmVudE1vYmlsZSgpIHtcblx0XHRsZXQgaXNTZWxlY3RNb2JpbGUgPSBmYWxzZTtcblxuXG5cdFx0dmFyIHRvZ2dsZSA9ICgpID0+IHtcblx0XHRcdGlmIChpc01vYmlsZSAmJiAhaXNTZWxlY3RNb2JpbGUpIHtcblx0XHRcdFx0dGhpcy4kZWwuYWRkQ2xhc3MoJ3NlbGVjdF9tb2JpbGUnKTtcblx0XHRcdFx0aXNTZWxlY3RNb2JpbGUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFpc01vYmlsZSAmJiBpc1NlbGVjdE1vYmlsZSkge1xuXHRcdFx0XHR0aGlzLiRlbC5yZW1vdmVDbGFzcygnc2VsZWN0X21vYmlsZScpO1xuXHRcdFx0XHRpc1NlbGVjdE1vYmlsZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0b2dnbGUoKTtcblx0XHQkd2luZG93Lm9uKCdyZXNpemUnLCB0b2dnbGUpO1xuXHR9XG5cblxuXG5cdGFkZEV2ZW50SGVhZCgpIHtcblx0XHR0aGlzLiRoZWFkLm9uKCdjbGljaycsICgpID0+IHtcblx0XHRcdHRoaXMuJGVsLnRvZ2dsZUNsYXNzKCdzZWxlY3RfYWN0aXZlJyk7XG5cdFx0XHR0aGlzLiRpdGVtcy5yZW1vdmVDbGFzcygnc2VsZWN0X19pdGVtX2FjdGl2ZScpOyBcblx0XHRcdHRoaXMuJGl0ZW1zLmVxKHRoaXMuaVNlbGVjdGVkKS5hZGRDbGFzcygnc2VsZWN0X19pdGVtX2FjdGl2ZScpO1xuXHRcdH0pO1xuXHR9XG5cblxuXG5cdGNyZWF0ZUl0ZW1zKCkge1xuXHRcdGxldCBzZWxmICAgICAgPSB0aGlzLFxuXHRcdFx0JG9wdGlvbnMgID0gc2VsZi4kZGVmYXVsdC5jaGlsZHJlbignb3B0aW9uJyksXG5cdFx0XHQkc2VsZWN0ZWQgPSAkb3B0aW9ucy5maWx0ZXIoJ1tzZWxlY3RlZF0nKSxcblx0XHRcdGxpc3QgICAgICA9ICc8dWwgY2xhc3M9XCJzZWxlY3RfX2xpc3RcIj4nO1xuXG5cdFx0JHNlbGVjdGVkID0gJHNlbGVjdGVkLmxlbmd0aCA/ICRzZWxlY3RlZCA6ICRvcHRpb25zLmZpbHRlcignOm5vdChbZGlzYWJsZWRdKScpLmVxKDApO1xuXHRcdHRoaXMuJGhlYWQudGV4dCgkc2VsZWN0ZWQudGV4dCgpKTtcblxuXHRcdCRvcHRpb25zLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgJG9wdGlvbiAgID0gJCh0aGlzKSxcblx0XHRcdFx0YXR0ckNsYXNzID0gJ3NlbGVjdF9faXRlbScsXG5cdFx0XHRcdGF0dHJWYWx1ZSA9ICRvcHRpb24uYXR0cigndmFsdWUnKTtcblxuXHRcdFx0aWYgKCRvcHRpb24uYXR0cignZGlzYWJsZWQnKSkge1xuXHRcdFx0XHRhdHRyQ2xhc3MgKz0gJyBzZWxlY3RfX2l0ZW1fZGlzYWJsZSc7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJG9wdGlvbi5hdHRyKCdzZWxlY3RlZCcpKSB7XG5cdFx0XHRcdGF0dHJDbGFzcyArPSAnIHNlbGVjdF9faXRlbV9hY3RpdmUnO1xuXHRcdFx0XHRzZWxmLmlTZWxlY3RlZCA9ICRvcHRpb24uaW5kZXgoKTtcblx0XHRcdH1cblxuXHRcdFx0YXR0clZhbHVlID0gYXR0clZhbHVlID8gJ2RhdGEtdmFsdWU9XCInICsgYXR0clZhbHVlICsgJ1wiJyA6ICcnO1xuXHRcdFx0bGlzdCArPSAnPGxpIGNsYXNzPVwiJyArIGF0dHJDbGFzcyArICdcIicgKyBhdHRyVmFsdWUgKyAnPicgKyAkb3B0aW9uLnRleHQoKSArICc8L2xpPic7XG5cdFx0fSk7XG5cdFx0bGlzdCArPSAnPC91bD4nO1xuXG5cdFx0dGhpcy4kZWwuYXBwZW5kKGxpc3QpO1xuXHRcdHRoaXMuJGl0ZW1zID0gdGhpcy4kZWwuZmluZCgnLnNlbGVjdF9faXRlbScpO1xuXHR9XG5cblxuXG5cdGFkZEV2ZW50c0l0ZW1zKCkge1xuXHRcdGxldCBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYuJGl0ZW1zXG5cdFx0XHQub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGV0ICRpdGVtID0gJCh0aGlzKTtcblxuXHRcdFx0XHRpZiAoISRpdGVtLmhhc0NsYXNzKCdzZWxlY3RfX2l0ZW1fZGlzYWJsZScpKSB7XG5cdFx0XHRcdFx0c2VsZi4kaXRlbXMucmVtb3ZlQ2xhc3MoJ3NlbGVjdF9faXRlbV9hY3RpdmUnKTsgXG5cdFx0XHRcdFx0JGl0ZW0uYWRkQ2xhc3MoJ3NlbGVjdF9faXRlbV9hY3RpdmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGV0ICRpdGVtID0gJCh0aGlzKSxcblx0XHRcdFx0XHR2YWwgICA9ICRpdGVtLmF0dHIoJ2RhdGEtdmFsdWUnKSB8fCAkaXRlbS50ZXh0KCk7XG5cblx0XHRcdFx0aWYgKCEkaXRlbS5oYXNDbGFzcygnc2VsZWN0X19pdGVtX2Rpc2FibGUnKSkge1xuXHRcdFx0XHRcdHNlbGYuaVNlbGVjdGVkID0gJGl0ZW0uaW5kZXgoKTtcblxuXHRcdFx0XHRcdGlmICh2YWwgIT09IHNlbGYuJGRlZmF1bHQudmFsKCkpIHtcblx0XHRcdFx0XHRcdHNlbGYuJGRlZmF1bHQudmFsKHZhbCkudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuJGVsLnJlbW92ZUNsYXNzKCdzZWxlY3RfYWN0aXZlJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG5cblxuXG5cdGFkZEV2ZW50T3V0c2lkZSgpIHtcblx0XHQkKCdib2R5Jykub24oJ2NsaWNrJywgKGUpID0+IHtcblx0XHRcdGlmICh0aGlzLiRlbC5oYXNDbGFzcygnc2VsZWN0X2FjdGl2ZScpICYmICEkKGUudGFyZ2V0KS5jbG9zZXN0KHRoaXMuJGVsKS5sZW5ndGgpIHtcblx0XHRcdFx0dGhpcy4kZWwucmVtb3ZlQ2xhc3MoJ3NlbGVjdF9hY3RpdmUnKTtcblx0XHRcdFx0dGhpcy4kaXRlbXMucmVtb3ZlQ2xhc3MoJ3NlbGVjdF9faXRlbV9hY3RpdmUnKTsgXG5cdFx0XHRcdHRoaXMuJGl0ZW1zLmVxKHRoaXMuaVNlbGVjdGVkKS5hZGRDbGFzcygnc2VsZWN0X19pdGVtX2FjdGl2ZScpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblxuXG5cdGFkZEV2ZW50RGVmYXVsdCgpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHRmdW5jdGlvbiByZWluaXQoKSB7XG5cdFx0XHRzZWxmLiRkZWZhdWx0LnByb3AoJ3NlbGVjdGVkSW5kZXgnLCAtMSkudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHRzZWxmLiRlbC5maW5kKCcuc2VsZWN0X19saXN0JykucmVtb3ZlKCk7XG5cdFx0XHRzZWxmLmNyZWF0ZUl0ZW1zKCk7XG5cdFx0XHRzZWxmLmFkZEV2ZW50c0l0ZW1zKCk7XG5cdFx0fVxuXG5cdFx0c2VsZi4kZGVmYXVsdFxuXHRcdFx0Lm9uKCdjaGFuZ2UgY2hhbmdlVmFsJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIERlbGF5IGlzIG5lZWRlZCBiZWNhdXNlIHdoZW4gdGhlIHBhZ2UgbG9hZHMgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3QgaXMgbm90IGRlZmlkbmVkLlxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRjb25zdCBWQUwgPSBzZWxmLiRkZWZhdWx0LnZhbCgpO1xuXG5cdFx0XHRcdFx0aWYgKCFWQUwpIHtcblx0XHRcdFx0XHRcdHNlbGYuJGVsLmFkZENsYXNzKCdzZWxlY3RfZW1wdHknKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi4kZWwucmVtb3ZlQ2xhc3MoJ3NlbGVjdF9lbXB0eScpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNlbGYuJGl0ZW1zLmVhY2goZnVuY3Rpb24oaSkge1xuXHRcdFx0XHRcdFx0bGV0ICRpdGVtID0gJCh0aGlzKSxcblx0XHRcdFx0XHRcdFx0dGV4dCAgPSAkaXRlbS50ZXh0KCk7XG5cblx0XHRcdFx0XHRcdGlmICgoVkFMID09PSAkaXRlbS5hdHRyKCdkYXRhLXZhbHVlJykpIHx8IChWQUwgPT09IHRleHQpIHx8ICghVkFMICYmICRpdGVtLmhhc0NsYXNzKCdzZWxlY3RfX2l0ZW1fZGlzYWJsZScpKSkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmlTZWxlY3RlZCA9IGk7XG5cdFx0XHRcdFx0XHRcdHNlbGYuJGhlYWQudGV4dCh0ZXh0KTtcblx0XHRcdFx0XHRcdFx0c2VsZi4kaXRlbXMucmVtb3ZlQ2xhc3MoJ3NlbGVjdF9faXRlbV9hY3RpdmUnKTsgXG5cdFx0XHRcdFx0XHRcdCRpdGVtLmFkZENsYXNzKCdzZWxlY3RfX2l0ZW1fYWN0aXZlJyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0sIE1JTl9ERUxBWSk7XG5cdFx0XHR9KVxuXHRcdFx0Lm9uKCdjaGFuZ2VIdG1sJywgcmVpbml0KVxuXHRcdFx0LmNsb3Nlc3QoJ2Zvcm0nKS5vbigncmVzZXQnLCByZWluaXQpO1xuXHR9XG59XG5cblxuXG5mdW5jdGlvbiBpbml0KCkge1xuXHQkKCcuc2VsZWN0Om5vdCguc2VsZWN0X2luaXQpJykuZWFjaChmdW5jdGlvbigpIHtcblx0XHRuZXcgU2VsZWN0KHRoaXMpO1xuXHR9KTtcbn1cblxuXG5cbiQoKCkgPT4ge1xuXHRpbml0KCk7XG59KTtcblxuXG5cbmV4cG9ydCB7IGluaXQgfTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyAkd2luZG93LCBNSU5fREVMQVkgfSBmcm9tICcuLi92YXJpYWJsZXMvdmFyaWFibGVzLmpzJztcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi4vZnVuY3Rpb25zL2Z1bmN0aW9ucy5qcyc7XG5cblxuXG5mdW5jdGlvbiBpbml0KCkge1xuXHRpZiAoL01TSUV8dHJpZGVudC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcblx0XHRsZXQgJHVzZXMgPSAkKCd1c2UnKTtcblxuXHRcdGlmICghJHVzZXMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgU1BSSVRFX0hSRUYgPSAkdXNlcy5hdHRyKCd4bGluazpocmVmJykuc3BsaXQoJyMnKS5zaGlmdCgpO1xuXG5cdFx0JC5nZXQoU1BSSVRFX0hSRUYsIChzcHJpdGUpID0+IHtcblx0XHRcdCR1c2VzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxldCAkdXNlID0gJCh0aGlzKTtcblxuXHRcdFx0XHRjb25zdCBJRCA9ICR1c2UuYXR0cigneGxpbms6aHJlZicpLnNwbGl0KCcjJykucG9wKCk7XG5cblx0XHRcdFx0bGV0IHN2ZyA9IHNwcml0ZS5nZXRFbGVtZW50QnlJZChJRCk7XG5cblx0XHRcdFx0aWYgKC0xID09PSAkdXNlLmF0dHIoJ3hsaW5rOmhyZWYnKS5pbmRleE9mKFNQUklURV9IUkVGKSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzdmcpIHtcblx0XHRcdFx0XHRzdmcgPSBzdmcuY2xvbmVOb2RlKHRydWUpO1xuXHRcdFx0XHRcdHN2Zy5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XG5cdFx0XHRcdFx0JHVzZS5yZXBsYWNlV2l0aChzdmcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCR1c2UucmVtb3ZlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0aW5pdCgpO1xuXHRcdH0pO1xuXHR9XG59XG5cblxuXG4kKCgpID0+IHtcblx0aW5pdCgpO1xuXHQkd2luZG93Lm9uKCdyZXNpemVXaWR0aCcsIGRlYm91bmNlKCgpID0+IHtcblx0XHRzZXRUaW1lb3V0KGluaXQsIE1JTl9ERUxBWSk7XG5cdH0pKTtcbn0pO1xuXG5cblxuZXhwb3J0IHsgaW5pdCB9O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7ICR3aW5kb3csIGlzTW9iaWxlIH0gZnJvbSAnLi4vdmFyaWFibGVzL3ZhcmlhYmxlcy5qcyc7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gJy4uL2Z1bmN0aW9ucy9mdW5jdGlvbnMuanMnO1xuXG5cblxuJCgoKSA9PiB7XG5cdGxldCB0YWcgICAgPSAnPGEnLFxuXHRcdG9sZFRhZyA9IHRhZztcblxuXHRmdW5jdGlvbiByZXBsYWNlKCkge1xuXHRcdHRhZyA9IGlzTW9iaWxlID8gJzxhJyA6ICc8ZGl2Jztcblx0XHRpZiAodGFnID09PSBvbGRUYWcpIHsgXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0JCgnLnRlbCcpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgJHRlbCAgICA9ICQodGhpcyksXG5cdFx0XHRcdGNvbnRlbnQgPSAkdGVsLmh0bWwoKSxcblx0XHRcdFx0d3JhcHBlciA9ICQoJzxkaXY+JykuYXBwZW5kKCR0ZWwuaHRtbCgnJykuY2xvbmUoKSkuaHRtbCgpO1xuXG5cdFx0XHR3cmFwcGVyID0gd3JhcHBlci5yZXBsYWNlKG9sZFRhZywgdGFnKTtcblx0XHRcdHdyYXBwZXIgPSB3cmFwcGVyLnJlcGxhY2Uob2xkVGFnLnJlcGxhY2UoJzwnLCAnPC8nKSwgdGFnLnJlcGxhY2UoJzwnLCAnPC8nKSk7XG5cdFx0XHR3cmFwcGVyID0gJCh3cmFwcGVyKS5odG1sKGNvbnRlbnQpXG5cdFx0XHQkdGVsLnJlcGxhY2VXaXRoKHdyYXBwZXIpO1xuXHRcdH0pO1xuXHRcdG9sZFRhZyA9IHRhZztcblx0fVxuXHRyZXBsYWNlKCk7XG5cdCR3aW5kb3cub24oJ3Jlc2l6ZScsIGRlYm91bmNlKHJlcGxhY2UpKTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi4vZnVuY3Rpb25zL2Z1bmN0aW9ucy5qcyc7XG5cblxuXG5jb25zdCBQUkVWX0FSUk9XID0gYDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2xpY2stcHJldlwiPlxuXHQ8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDkgMTRcIj5cblx0XHQ8cmVjdCB0cmFuc2Zvcm09XCJyb3RhdGUoNDIpXCIgeD1cIjQuNTc5OVwiIHk9XCIzLjM1MzNcIiB3aWR0aD1cIjEwLjlcIiBoZWlnaHQ9XCIyLjFcIiByeT1cIjEuMVwiLz5cblx0XHQ8cmVjdCB0cmFuc2Zvcm09XCJyb3RhdGUoLTQyKVwiIHg9XCItNC43OTg1XCIgeT1cIjQuOTQxM1wiIHdpZHRoPVwiMTAuOVwiIGhlaWdodD1cIjIuMVwiIHJ5PVwiMS4xXCIvPlxuXHQ8L3N2Zz5cbjwvYnV0dG9uPmA7XG5cbmNvbnN0IE5FWFRfQVJST1cgPSBQUkVWX0FSUk9XLnJlcGxhY2UoJ3ByZXYnLCAnbmV4dCcpLFxuXHRUUkFOU0lUSU9OICAgPSAzMDAsXG5cdE1JTl9ERUxBWSAgICA9IDUwLCAvLyBUaGUgbWluaW11bSBkZWxheSBhdCB3aGljaCB0aGUgZnVuY3Rpb24gaW4gc2V0VGltZW91dCBpcyBjYWxsZWQgZWFybGllciB0aGFuIHRoZSBtYWluIGNvZGUuXG5cdHJlZ0RldmljZXMgICA9IC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2k7XG5cbmxldCBpc01vYmlsZSAgICAgICA9IHJlZ0RldmljZXMudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcblx0b2xkV2luZG93V2lkdGggPSBpbm5lcldpZHRoLFxuXHQkd2luZG93LFxuXHQkd3JhcHBlcjtcblxuXG5jb25zdCBicmVha3BvaW50ID0ge1xuXHRUQUJMRVQ6IDEyODAsXG5cdFBIT05FOiAgNjAwLFxuXG5cdHNldFN0YXRlOiAoKSA9PiB7XG5cdFx0YnJlYWtwb2ludC5pc1RhYmxldCA9IGlubmVyV2lkdGggPD0gYnJlYWtwb2ludC5UQUJMRVQ7XG5cdFx0YnJlYWtwb2ludC5pc1Bob25lICA9IGlubmVyV2lkdGggPD0gYnJlYWtwb2ludC5QSE9ORTtcblx0fVxufTtcbmJyZWFrcG9pbnQuc2V0U3RhdGUoKTtcblxuXG4kKCgpID0+IHtcblx0JHdpbmRvdyAgPSAkKHdpbmRvdyk7XG5cdCR3cmFwcGVyID0gJCgnLnBhZ2VfX3dyYXBwZXInKTtcblxuXHQkd2luZG93XG5cdFx0Lm9uKCdyZXNpemUnLCBkZWJvdW5jZSgoKSA9PiB7XG5cdFx0XHRpc01vYmlsZSA9IHJlZ0RldmljZXMudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuXHRcdFx0aWYgKG9sZFdpbmRvd1dpZHRoICE9PSBpbm5lcldpZHRoKSB7XG5cdFx0XHRcdG9sZFdpbmRvd1dpZHRoID0gaW5uZXJXaWR0aDtcblx0XHRcdFx0JHdpbmRvdy50cmlnZ2VyKCdyZXNpemVXaWR0aCcpO1xuXHRcdFx0fVxuXHRcdH0pKVxuXHRcdC5vbigncmVzaXplV2lkdGgnLCBkZWJvdW5jZShicmVha3BvaW50LnNldFN0YXRlKSk7XG59KTtcblxuXG5cbmV4cG9ydCB7IFBSRVZfQVJST1csIE5FWFRfQVJST1csIFRSQU5TSVRJT04sIE1JTl9ERUxBWSwgJHdpbmRvdywgJHdyYXBwZXIsIGJyZWFrcG9pbnQsIGlzTW9iaWxlIH07XG4iLCJpbXBvcnQgJy4uL2NvbXBvbmVudHMvdGVsL3RlbC5qcyc7XG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvZmllbGQvZmllbGQuanMnO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuanMnO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2Zvcm0vZm9ybS5qcyc7XG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvbGF6eWxvYWQvbGF6eWxvYWQuanMnO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL3BvcHVwL3BvcHVwLmpzJztcbmltcG9ydCAnLi4vY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyLmpzJztcblxuaW1wb3J0ICcuLi9jb21wb25lbnRzL2hvbWUvaG9tZS5qcyc7XG5cbmltcG9ydCAnLi4vY29tcG9uZW50cy9zdmctdXNlLWV4dGVybmFsL3N2Zy11c2UtZXh0ZXJuYWwuanMnO1xuIl19"}